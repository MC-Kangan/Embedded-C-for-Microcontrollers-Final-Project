

Microchip MPLAB XC8 Assembler V2.35 build 20211206165544 
                                                                                               Wed Mar 09 20:27:11 2022

Microchip MPLAB XC8 C Compiler v2.35 (Free license) build 20211206165544 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    37                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    38                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    39                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    40  0000                     
    41                           ; Version 2.35
    42                           ; Generated 05/05/2021 GMT
    43                           ; 
    44                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    45                           ; All rights reserved.
    46                           ; 
    47                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    48                           ; 
    49                           ; Redistribution and use in source and binary forms, with or without modification, are
    50                           ; permitted provided that the following conditions are met:
    51                           ; 
    52                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    53                           ;        conditions and the following disclaimer.
    54                           ; 
    55                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    56                           ;        of conditions and the following disclaimer in the documentation and/or other
    57                           ;        materials provided with the distribution. Publication is not required when
    58                           ;        this file is used in an embedded application.
    59                           ; 
    60                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    61                           ;        software without specific prior written permission.
    62                           ; 
    63                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    64                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    65                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    66                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    67                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    68                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    69                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    70                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    71                           ; 
    72                           ; 
    73                           ; Code-generator required, PIC18F67K40 Definitions
    74                           ; 
    75                           ; SFR Addresses
    76  0000                     
    77                           	psect	idataCOMRAM
    78  001ADA                     __pidataCOMRAM:
    79                           	callstack 0
    80                           
    81                           ;initializer for _CALIBRATION_180
    82  001ADA  28                 	db	40
    83                           
    84                           ;initializer for _SENSITIVITY
    85  001ADB  0B                 	db	11
    86                           
    87                           	psect	smallconst
    88  000E00                     __psmallconst:
    89                           	callstack 0
    90  000E00  00                 	db	0
    91  000E01  0000               	dw	0
    92  000E03  4B00               	dw	19200
    93  000E05                     __end_of_toint:
    94                           	callstack 0
    95  0000                     _TRISFbits	set	3974
    96  0000                     _TX4REG	set	3812
    97  0000                     _RC4STAbits	set	3815
    98  0000                     _SP4BRGH	set	3814
    99  0000                     _TRISGbits	set	3975
   100  0000                     _TRISEbits	set	3973
   101  0000                     _SSP2CON2bits	set	3802
   102  0000                     _LATG	set	3967
   103  0000                     _LATE	set	3965
   104  0000                     _RX4PPS	set	3605
   105  0000                     _SSP2CLKPPS	set	3612
   106  0000                     _SSP2DATPPS	set	3613
   107  0000                     _ANSELDbits	set	3751
   108  0000                     _SSP2ADD	set	3798
   109  0000                     _SSP2CON1bits	set	3801
   110  0000                     _LATAbits	set	3961
   111  0000                     _LATFbits	set	3966
   112  0000                     _LATGbits	set	3967
   113  0000                     _TRISAbits	set	3969
   114  0000                     _TRISCbits	set	3971
   115  0000                     _TRISDbits	set	3972
   116  0000                     _LATCbits	set	3963
   117  0000                     _LATEbits	set	3965
   118  0000                     _RC4REG	set	3811
   119  0000                     _SP4BRGL	set	3813
   120  0000                     _TX4STAbits	set	3816
   121  0000                     _BAUD4CONbits	set	3817
   122  0000                     _SSP2CON2	set	3802
   123  0000                     _SSP2STAT	set	3800
   124  0000                     _ANSELFbits	set	3764
   125  0000                     _SSP2BUF	set	3797
   126  0000                     _PIE4bits	set	3629
   127  0000                     _PIR4bits	set	3639
   128  0000                     _RC0PPS	set	3682
   129  0000                     _RC7PPS	set	3689
   130  0000                     _RD5PPS	set	3695
   131  0000                     _RE2PPS	set	3700
   132  0000                     _RD6PPS	set	3696
   133  0000                     _PORTFbits	set	3982
   134  0000                     _T2PR	set	4028
   135  0000                     _T2CONbits	set	4029
   136  0000                     _PWM7DCH	set	4000
   137  0000                     _PWM6DCH	set	4003
   138  0000                     _T2CLKCONbits	set	4031
   139  0000                     _T2HLTbits	set	4030
   140  0000                     _PWM6CONbits	set	4004
   141  0000                     _PWM7CONbits	set	4001
   142  0000                     _ADREFbits	set	3928
   143  0000                     _ADPCH	set	3935
   144  0000                     _ADRESH	set	3940
   145  0000                     _ADCON0bits	set	3936
   146  000E05                     STR_1:
   147  000E05  25                 	db	37
   148  000E06  64                 	db	100	;'d'
   149  000E07  09                 	db	9
   150  000E08  25                 	db	37
   151  000E09  64                 	db	100	;'d'
   152  000E0A  09                 	db	9
   153  000E0B  25                 	db	37
   154  000E0C  64                 	db	100	;'d'
   155  000E0D  09                 	db	9
   156  000E0E  25                 	db	37
   157  000E0F  64                 	db	100	;'d'
   158  000E10  0D                 	db	13
   159  000E11  0A                 	db	10
   160  000E12  00                 	db	0
   161  000E13  4C                 	db	76	;'L'
   162  000E14  69                 	db	105	;'i'
   163  000E15  67                 	db	103	;'g'
   164  000E16  68                 	db	104	;'h'
   165  000E17  74                 	db	116	;'t'
   166  000E18  20                 	db	32
   167  000E19  62                 	db	98	;'b'
   168  000E1A  6C                 	db	108	;'l'
   169  000E1B  75                 	db	117	;'u'
   170  000E1C  65                 	db	101	;'e'
   171  000E1D  00                 	db	0
   172  000E1E  4F                 	db	79	;'O'
   173  000E1F  72                 	db	114	;'r'
   174  000E20  61                 	db	97	;'a'
   175  000E21  6E                 	db	110	;'n'
   176  000E22  67                 	db	103	;'g'
   177  000E23  65                 	db	101	;'e'
   178  000E24  00                 	db	0
   179  000E25  59                 	db	89	;'Y'
   180  000E26  65                 	db	101	;'e'
   181  000E27  6C                 	db	108	;'l'
   182  000E28  6C                 	db	108	;'l'
   183  000E29  6F                 	db	111	;'o'
   184  000E2A  77                 	db	119	;'w'
   185  000E2B  00                 	db	0
   186  000E2C  57                 	db	87	;'W'
   187  000E2D  68                 	db	104	;'h'
   188  000E2E  69                 	db	105	;'i'
   189  000E2F  74                 	db	116	;'t'
   190  000E30  65                 	db	101	;'e'
   191  000E31  00                 	db	0
   192  000E32  42                 	db	66	;'B'
   193  000E33  6C                 	db	108	;'l'
   194  000E34  61                 	db	97	;'a'
   195  000E35  63                 	db	99	;'c'
   196  000E36  6B                 	db	107	;'k'
   197  000E37  00                 	db	0
   198  000E38  47                 	db	71	;'G'
   199  000E39  72                 	db	114	;'r'
   200  000E3A  65                 	db	101	;'e'
   201  000E3B  65                 	db	101	;'e'
   202  000E3C  6E                 	db	110	;'n'
   203  000E3D  00                 	db	0
   204  000E3E  45                 	db	69	;'E'
   205  000E3F  72                 	db	114	;'r'
   206  000E40  72                 	db	114	;'r'
   207  000E41  6F                 	db	111	;'o'
   208  000E42  72                 	db	114	;'r'
   209  000E43  00                 	db	0
   210  000E44  42                 	db	66	;'B'
   211  000E45  6C                 	db	108	;'l'
   212  000E46  75                 	db	117	;'u'
   213  000E47  65                 	db	101	;'e'
   214  000E48  00                 	db	0
   215  000E49  50                 	db	80	;'P'
   216  000E4A  69                 	db	105	;'i'
   217  000E4B  6E                 	db	110	;'n'
   218  000E4C  6B                 	db	107	;'k'
   219  000E4D  00                 	db	0
   220  000E4E  52                 	db	82	;'R'
   221  000E4F  65                 	db	101	;'e'
   222  000E50  64                 	db	100	;'d'
   223  000E51  00                 	db	0
   224  000E52  00                 	db	0	; dummy byte at the end
   225  0000                     
   226                           ; #config settings
   227                           
   228                           	psect	cinit
   229  00195C                     __pcinit:
   230                           	callstack 0
   231  00195C                     start_initialization:
   232                           	callstack 0
   233  00195C                     __initialization:
   234                           	callstack 0
   235                           
   236                           ; Initialize objects allocated to COMRAM (2 bytes)
   237                           ; load TBLPTR registers with __pidataCOMRAM
   238  00195C  0EDA               	movlw	low __pidataCOMRAM
   239  00195E  6EF6               	movwf	tblptrl,c
   240  001960  0E1A               	movlw	high __pidataCOMRAM
   241  001962  6EF7               	movwf	tblptrh,c
   242  001964  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   243  001966  6EF8               	movwf	tblptru,c
   244  001968  0009               	tblrd		*+	;fetch initializer
   245  00196A  CFF5 F05E          	movff	tablat,__pdataCOMRAM
   246  00196E  0009               	tblrd		*+	;fetch initializer
   247  001970  CFF5 F05F          	movff	tablat,__pdataCOMRAM+1
   248                           
   249                           ; Clear objects allocated to BANK0 (90 bytes)
   250  001974  EE00  F060         	lfsr	0,__pbssBANK0
   251  001978  0E5A               	movlw	90
   252  00197A                     clear_0:
   253  00197A  6AEE               	clrf	postinc0,c
   254  00197C  06E8               	decf	wreg,f,c
   255  00197E  E1FD               	bnz	clear_0
   256                           
   257                           ; Clear objects allocated to COMRAM (19 bytes)
   258  001980  EE00  F04B         	lfsr	0,__pbssCOMRAM
   259  001984  0E13               	movlw	19
   260  001986                     clear_1:
   261  001986  6AEE               	clrf	postinc0,c
   262  001988  06E8               	decf	wreg,f,c
   263  00198A  E1FD               	bnz	clear_1
   264  00198C                     end_of_initialization:
   265                           	callstack 0
   266  00198C                     __end_of__initialization:
   267                           	callstack 0
   268  00198C  0E00               	movlw	low (__Lsmallconst shr (0+16))
   269  00198E  6EF8               	movwf	tblptru,c
   270  001990  0E0E               	movlw	high __Lsmallconst
   271  001992  6EF7               	movwf	tblptrh,c
   272  001994  0100               	movlb	0
   273  001996  EF24  F00C         	goto	_main	;jump to C main() function
   274                           
   275                           	psect	bssCOMRAM
   276  00004B                     __pbssCOMRAM:
   277                           	callstack 0
   278  00004B                     _motorL:
   279                           	callstack 0
   280  00004B                     	ds	10
   281  000055                     	ds	4
   282  000059                     _color:
   283                           	callstack 0
   284  000059                     	ds	1
   285  00005A                     _TxBufReadCnt:
   286                           	callstack 0
   287  00005A                     	ds	1
   288  00005B                     _TxBufWriteCnt:
   289                           	callstack 0
   290  00005B                     	ds	1
   291  00005C                     _RxBufReadCnt:
   292                           	callstack 0
   293  00005C                     	ds	1
   294  00005D                     _RxBufWriteCnt:
   295                           	callstack 0
   296  00005D                     	ds	1
   297                           
   298                           	psect	dataCOMRAM
   299  00005E                     __pdataCOMRAM:
   300                           	callstack 0
   301  00005E                     _CALIBRATION_180:
   302                           	callstack 0
   303  00005E                     	ds	1
   304  00005F                     _SENSITIVITY:
   305                           	callstack 0
   306  00005F                     	ds	1
   307                           
   308                           	psect	bssBANK0
   309  000060                     __pbssBANK0:
   310                           	callstack 0
   311  000060                     _EUSART4TXbuf:
   312                           	callstack 0
   313  000060                     	ds	60
   314  00009C                     _EUSART4RXbuf:
   315                           	callstack 0
   316  00009C                     	ds	20
   317  0000B0                     _motorR:
   318                           	callstack 0
   319  0000B0                     	ds	10
   320                           
   321                           	psect	cstackCOMRAM
   322  000001                     __pcstackCOMRAM:
   323                           	callstack 0
   324  000001                     ??_I2C_2_Master_Idle:
   325  000001                     ?___wmul:
   326                           	callstack 0
   327  000001                     initDCmotorsPWM@PWMperiod:
   328                           	callstack 0
   329  000001                     initDCmotors_parameter@motorL:
   330                           	callstack 0
   331  000001                     ___wmul@multiplier:
   332                           	callstack 0
   333                           
   334                           ; 2 bytes @ 0x0
   335  000001                     	ds	1
   336  000002                     I2C_2_Master_Write@data_byte:
   337                           	callstack 0
   338                           
   339                           ; 1 bytes @ 0x1
   340  000002                     	ds	1
   341  000003                     color_writetoaddr@value:
   342                           	callstack 0
   343  000003                     initDCmotors_parameter@motorR:
   344                           	callstack 0
   345  000003                     ___wmul@multiplicand:
   346                           	callstack 0
   347                           
   348                           ; 2 bytes @ 0x2
   349  000003                     	ds	1
   350  000004                     color_writetoaddr@address:
   351                           	callstack 0
   352                           
   353                           ; 1 bytes @ 0x3
   354  000004                     	ds	1
   355  000005                     ??_color_click_init:
   356  000005                     ___wmul@product:
   357                           	callstack 0
   358                           
   359                           ; 2 bytes @ 0x4
   360  000005                     	ds	2
   361  000007                     ?___awdiv:
   362                           	callstack 0
   363  000007                     ___awdiv@dividend:
   364                           	callstack 0
   365                           
   366                           ; 2 bytes @ 0x6
   367  000007                     	ds	2
   368  000009                     ___awdiv@divisor:
   369                           	callstack 0
   370                           
   371                           ; 2 bytes @ 0x8
   372  000009                     	ds	2
   373  00000B                     ___awdiv@counter:
   374                           	callstack 0
   375                           
   376                           ; 1 bytes @ 0xA
   377  00000B                     	ds	1
   378  00000C                     ___awdiv@sign:
   379                           	callstack 0
   380                           
   381                           ; 1 bytes @ 0xB
   382  00000C                     	ds	1
   383  00000D                     ___awdiv@quotient:
   384                           	callstack 0
   385                           
   386                           ; 2 bytes @ 0xC
   387  00000D                     	ds	2
   388  00000F                     setMotorPWM@m:
   389                           	callstack 0
   390                           
   391                           ; 2 bytes @ 0xE
   392  00000F                     	ds	2
   393  000011                     ??_setMotorPWM:
   394                           
   395                           ; 1 bytes @ 0x10
   396  000011                     	ds	7
   397  000018                     setMotorPWM@PWMduty:
   398                           	callstack 0
   399                           
   400                           ; 2 bytes @ 0x17
   401  000018                     	ds	2
   402  00001A                     stop@mL:
   403                           	callstack 0
   404  00001A                     fullSpeedAhead@mL:
   405                           	callstack 0
   406                           
   407                           ; 2 bytes @ 0x19
   408  00001A                     	ds	2
   409  00001C                     stop@mR:
   410                           	callstack 0
   411  00001C                     fullSpeedAhead@mR:
   412                           	callstack 0
   413                           
   414                           ; 2 bytes @ 0x1B
   415  00001C                     	ds	2
   416  00001E                     ??_stop:
   417  00001E                     ??_fullSpeedAhead:
   418                           
   419                           ; 1 bytes @ 0x1D
   420  00001E                     	ds	2
   421  000020                     turnLeft@mL:
   422                           	callstack 0
   423  000020                     turnRight@mL:
   424                           	callstack 0
   425  000020                     fullSpeedBack@mL:
   426                           	callstack 0
   427                           
   428                           ; 2 bytes @ 0x1F
   429  000020                     	ds	2
   430  000022                     turnLeft@mR:
   431                           	callstack 0
   432  000022                     turnRight@mR:
   433                           	callstack 0
   434  000022                     fullSpeedBack@mR:
   435                           	callstack 0
   436                           
   437                           ; 2 bytes @ 0x21
   438  000022                     	ds	2
   439  000024                     ??_fullSpeedBack:
   440  000024                     turnLeft@angle_left:
   441                           	callstack 0
   442  000024                     turnRight@angle_right:
   443                           	callstack 0
   444                           
   445                           ; 1 bytes @ 0x23
   446  000024                     	ds	1
   447  000025                     ??_turnRight:
   448  000025                     ??_turnLeft:
   449                           
   450                           ; 1 bytes @ 0x24
   451  000025                     	ds	1
   452  000026                     turnLeft@delay_180:
   453                           	callstack 0
   454  000026                     turnRight@delay_180:
   455                           	callstack 0
   456  000026                     short_reverse@mL:
   457                           	callstack 0
   458  000026                     reverse_square@mL:
   459                           	callstack 0
   460                           
   461                           ; 2 bytes @ 0x25
   462  000026                     	ds	2
   463  000028                     turnLeft@i:
   464                           	callstack 0
   465  000028                     turnRight@i:
   466                           	callstack 0
   467  000028                     short_reverse@mR:
   468                           	callstack 0
   469  000028                     reverse_square@mR:
   470                           	callstack 0
   471                           
   472                           ; 2 bytes @ 0x27
   473  000028                     	ds	2
   474  00002A                     ??_short_reverse:
   475  00002A                     ??_reverse_square:
   476  00002A                     turnLeft@i_1176:
   477                           	callstack 0
   478  00002A                     turnRight@i_1199:
   479                           	callstack 0
   480                           
   481                           ; 2 bytes @ 0x29
   482  00002A                     	ds	2
   483  00002C                     turnLeft@delay:
   484                           	callstack 0
   485  00002C                     turnRight@delay:
   486                           	callstack 0
   487                           
   488                           ; 2 bytes @ 0x2B
   489  00002C                     	ds	2
   490  00002E                     goback@mL:
   491                           	callstack 0
   492                           
   493                           ; 2 bytes @ 0x2D
   494  00002E                     	ds	2
   495  000030                     goback@mR:
   496                           	callstack 0
   497                           
   498                           ; 2 bytes @ 0x2F
   499  000030                     	ds	2
   500  000032                     action@mL:
   501                           	callstack 0
   502                           
   503                           ; 2 bytes @ 0x31
   504  000032                     	ds	2
   505  000034                     action@mR:
   506                           	callstack 0
   507                           
   508                           ; 2 bytes @ 0x33
   509  000034                     	ds	2
   510  000036                     action@color:
   511                           	callstack 0
   512                           
   513                           ; 1 bytes @ 0x35
   514  000036                     	ds	1
   515  000037                     main@motorL:
   516                           	callstack 0
   517                           
   518                           ; 10 bytes @ 0x36
   519  000037                     	ds	10
   520  000041                     main@motorR:
   521                           	callstack 0
   522                           
   523                           ; 10 bytes @ 0x40
   524  000041                     	ds	10
   525                           
   526 ;;
   527 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   528 ;;
   529 ;; *************** function _main *****************
   530 ;; Defined at:
   531 ;;		line 24 in file "main.c"
   532 ;; Parameters:    Size  Location     Type
   533 ;;		None
   534 ;; Auto vars:     Size  Location     Type
   535 ;;  white          18    0        struct white_card
   536 ;;  motorR         10   64[COMRAM] struct DC_motor
   537 ;;  motorL         10   54[COMRAM] struct DC_motor
   538 ;;  rgb             8    0        struct color_rgb
   539 ;;  complete        1    0        unsigned char 
   540 ;; Return value:  Size  Location     Type
   541 ;;                  1    wreg      void 
   542 ;; Registers used:
   543 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   544 ;; Tracked objects:
   545 ;;		On entry : 0/0
   546 ;;		On exit  : 0/0
   547 ;;		Unchanged: 0/0
   548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   550 ;;      Locals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   552 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   553 ;;Total ram usage:       20 bytes
   554 ;; Hardware stack levels required when called: 6
   555 ;; This function calls:
   556 ;;		_I2C_2_Master_Init
   557 ;;		_action
   558 ;;		_color_click_init
   559 ;;		_initDCmotorsPWM
   560 ;;		_initDCmotors_parameter
   561 ;;		_initUSART4
   562 ;;		_pin_init
   563 ;; This function is called by:
   564 ;;		Startup code after reset
   565 ;; This function uses a non-reentrant model
   566 ;;
   567                           
   568                           	psect	text0
   569  001848                     __ptext0:
   570                           	callstack 0
   571  001848                     _main:
   572                           	callstack 25
   573  001848                     
   574                           ;main.c: 25:     I2C_2_Master_Init();
   575  001848  ECE7  F00C         	call	_I2C_2_Master_Init	;wreg free
   576  00184C                     
   577                           ;main.c: 26:     color_click_init();
   578  00184C  ECCD  F00C         	call	_color_click_init	;wreg free
   579  001850                     
   580                           ;main.c: 27:     initDCmotorsPWM(199);
   581  001850  0E00               	movlw	0
   582  001852  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   583  001854  0EC7               	movlw	199
   584  001856  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
   585  001858  EC4B  F00C         	call	_initDCmotorsPWM	;wreg free
   586  00185C                     
   587                           ;main.c: 29:     initUSART4();
   588  00185C  EC33  F00D         	call	_initUSART4	;wreg free
   589  001860                     
   590                           ;main.c: 31:     struct color_rgb rgb;;main.c: 32:     struct white_card white;;main.c: 
      +                          36:     struct DC_motor motorL, motorR;;main.c: 38:     initDCmotors_parameter(&motorL, 
      +                          &motorR);
   591  001860  0E37               	movlw	low main@motorL
   592  001862  6E01               	movwf	initDCmotors_parameter@motorL^0,c
   593  001864  0E00               	movlw	high main@motorL
   594  001866  6E02               	movwf	(initDCmotors_parameter@motorL+1)^0,c
   595  001868  0E41               	movlw	low main@motorR
   596  00186A  6E03               	movwf	initDCmotors_parameter@motorR^0,c
   597  00186C  0E00               	movlw	high main@motorR
   598  00186E  6E04               	movwf	(initDCmotors_parameter@motorR+1)^0,c
   599  001870  EC51  F00A         	call	_initDCmotors_parameter	;wreg free
   600  001874                     
   601                           ;main.c: 39:     pin_init();
   602  001874  EC42  F00D         	call	_pin_init	;wreg free
   603  001878                     
   604                           ;main.c: 46:     action(color, &motorL, &motorR);
   605  001878  0E37               	movlw	low main@motorL
   606  00187A  6E32               	movwf	action@mL^0,c
   607  00187C  0E00               	movlw	high main@motorL
   608  00187E  6E33               	movwf	(action@mL+1)^0,c
   609  001880  0E41               	movlw	low main@motorR
   610  001882  6E34               	movwf	action@mR^0,c
   611  001884  0E00               	movlw	high main@motorR
   612  001886  6E35               	movwf	(action@mR+1)^0,c
   613  001888  0E00               	movlw	0
   614  00188A  EC2A  F007         	call	_action
   615  00188E                     l464:
   616  00188E  EF47  F00C         	goto	l464
   617  001892  EF00  F000         	goto	start
   618  001896                     __end_of_main:
   619                           	callstack 0
   620                           
   621 ;; *************** function _pin_init *****************
   622 ;; Defined at:
   623 ;;		line 58 in file "movement.c"
   624 ;; Parameters:    Size  Location     Type
   625 ;;		None
   626 ;; Auto vars:     Size  Location     Type
   627 ;;		None
   628 ;; Return value:  Size  Location     Type
   629 ;;                  1    wreg      void 
   630 ;; Registers used:
   631 ;;		None
   632 ;; Tracked objects:
   633 ;;		On entry : 0/0
   634 ;;		On exit  : 0/0
   635 ;;		Unchanged: 0/0
   636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   637 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   638 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   639 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   640 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   641 ;;Total ram usage:        0 bytes
   642 ;; Hardware stack levels used: 1
   643 ;; This function calls:
   644 ;;		Nothing
   645 ;; This function is called by:
   646 ;;		_main
   647 ;; This function uses a non-reentrant model
   648 ;;
   649                           
   650                           	psect	text1
   651  001A84                     __ptext1:
   652                           	callstack 0
   653  001A84                     _pin_init:
   654                           	callstack 30
   655  001A84  8486               	bsf	134,2,c	;volatile
   656                           
   657                           ;movement.c: 60:     ANSELFbits.ANSELF2=0;
   658  001A86  010E               	movlb	14	; () banked
   659  001A88  95B4               	bcf	180,2,b	;volatile
   660                           
   661                           ;movement.c: 61:     TRISFbits.TRISF3=1;
   662  001A8A  8686               	bsf	134,3,c	;volatile
   663                           
   664                           ;movement.c: 62:     ANSELFbits.ANSELF3=0;
   665  001A8C  97B4               	bcf	180,3,b	;volatile
   666                           
   667                           ;movement.c: 64:     TRISFbits.TRISF6 = 0;
   668  001A8E  9C86               	bcf	134,6,c	;volatile
   669                           
   670                           ;movement.c: 65:     LATFbits.LATF6 = 0;
   671  001A90  9C7E               	bcf	126,6,c	;volatile
   672                           
   673                           ;movement.c: 67:     TRISGbits.TRISG1 = 0;
   674  001A92  9287               	bcf	135,1,c	;volatile
   675                           
   676                           ;movement.c: 68:     TRISFbits.TRISF7 = 0;
   677  001A94  9E86               	bcf	134,7,c	;volatile
   678                           
   679                           ;movement.c: 69:     TRISAbits.TRISA4 = 0;
   680  001A96  9881               	bcf	129,4,c	;volatile
   681                           
   682                           ;movement.c: 70:     LATGbits.LATG1 = 1;
   683  001A98  827F               	bsf	127,1,c	;volatile
   684                           
   685                           ;movement.c: 71:     LATFbits.LATF7 = 1;
   686  001A9A  8E7E               	bsf	126,7,c	;volatile
   687                           
   688                           ;movement.c: 72:     LATAbits.LATA4 = 1;
   689  001A9C  8879               	bsf	121,4,c	;volatile
   690  001A9E                     
   691                           ; BSR set to: 14
   692  001A9E  0012               	return		;funcret
   693  001AA0                     __end_of_pin_init:
   694                           	callstack 0
   695                           
   696 ;; *************** function _initUSART4 *****************
   697 ;; Defined at:
   698 ;;		line 4 in file "serial.c"
   699 ;; Parameters:    Size  Location     Type
   700 ;;		None
   701 ;; Auto vars:     Size  Location     Type
   702 ;;		None
   703 ;; Return value:  Size  Location     Type
   704 ;;                  1    wreg      void 
   705 ;; Registers used:
   706 ;;		wreg, status,2
   707 ;; Tracked objects:
   708 ;;		On entry : 0/0
   709 ;;		On exit  : 0/0
   710 ;;		Unchanged: 0/0
   711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   712 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   713 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   714 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   715 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   716 ;;Total ram usage:        0 bytes
   717 ;; Hardware stack levels used: 1
   718 ;; This function calls:
   719 ;;		Nothing
   720 ;; This function is called by:
   721 ;;		_main
   722 ;; This function uses a non-reentrant model
   723 ;;
   724                           
   725                           	psect	text2
   726  001A66                     __ptext2:
   727                           	callstack 0
   728  001A66                     _initUSART4:
   729                           	callstack 30
   730  001A66                     
   731                           ;serial.c: 8:     RC0PPS = 0x12;
   732  001A66  0E12               	movlw	18
   733  001A68  010E               	movlb	14	; () banked
   734  001A6A  6F62               	movwf	98,b	;volatile
   735                           
   736                           ;serial.c: 9:     RX4PPS = 0x11;
   737  001A6C  0E11               	movlw	17
   738  001A6E  6F15               	movwf	21,b	;volatile
   739  001A70                     
   740                           ; BSR set to: 14
   741                           ;serial.c: 11:     BAUD4CONbits.BRG16 = 0;
   742  001A70  97E9               	bcf	233,3,b	;volatile
   743  001A72                     
   744                           ; BSR set to: 14
   745                           ;serial.c: 12:     TX4STAbits.BRGH = 0;
   746  001A72  95E8               	bcf	232,2,b	;volatile
   747                           
   748                           ;serial.c: 13:     SP4BRGL = 51;
   749  001A74  0E33               	movlw	51
   750  001A76  6FE5               	movwf	229,b	;volatile
   751                           
   752                           ;serial.c: 15:     SP4BRGH = 0;
   753  001A78  0E00               	movlw	0
   754  001A7A  6FE6               	movwf	230,b	;volatile
   755  001A7C                     
   756                           ; BSR set to: 14
   757                           ;serial.c: 17:     RC4STAbits.CREN = 1;
   758  001A7C  89E7               	bsf	231,4,b	;volatile
   759  001A7E                     
   760                           ; BSR set to: 14
   761                           ;serial.c: 18:     TX4STAbits.TXEN = 1;
   762  001A7E  8BE8               	bsf	232,5,b	;volatile
   763  001A80                     
   764                           ; BSR set to: 14
   765                           ;serial.c: 19:     RC4STAbits.SPEN = 1;
   766  001A80  8FE7               	bsf	231,7,b	;volatile
   767  001A82                     
   768                           ; BSR set to: 14
   769  001A82  0012               	return		;funcret
   770  001A84                     __end_of_initUSART4:
   771                           	callstack 0
   772                           
   773 ;; *************** function _initDCmotors_parameter *****************
   774 ;; Defined at:
   775 ;;		line 42 in file "dc_motor.c"
   776 ;; Parameters:    Size  Location     Type
   777 ;;  motorL          2    0[COMRAM] PTR struct DC_motor
   778 ;;		 -> main@motorL(10), 
   779 ;;  motorR          2    2[COMRAM] PTR struct DC_motor
   780 ;;		 -> main@motorR(10), 
   781 ;; Auto vars:     Size  Location     Type
   782 ;;		None
   783 ;; Return value:  Size  Location     Type
   784 ;;                  1    wreg      void 
   785 ;; Registers used:
   786 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   787 ;; Tracked objects:
   788 ;;		On entry : 0/0
   789 ;;		On exit  : 0/0
   790 ;;		Unchanged: 0/0
   791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   792 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   793 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   794 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   795 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   796 ;;Total ram usage:        4 bytes
   797 ;; Hardware stack levels used: 1
   798 ;; This function calls:
   799 ;;		Nothing
   800 ;; This function is called by:
   801 ;;		_main
   802 ;; This function uses a non-reentrant model
   803 ;;
   804                           
   805                           	psect	text3
   806  0014A2                     __ptext3:
   807                           	callstack 0
   808  0014A2                     _initDCmotors_parameter:
   809                           	callstack 30
   810  0014A2                     
   811                           ;dc_motor.c: 44:     motorL->power = 0;
   812  0014A2  C001  FFD9         	movff	initDCmotors_parameter@motorL,fsr2l
   813  0014A6  C002  FFDA         	movff	initDCmotors_parameter@motorL+1,fsr2h
   814  0014AA  0E00               	movlw	0
   815  0014AC  6EDF               	movwf	indf2,c
   816  0014AE                     
   817                           ;dc_motor.c: 45:     motorL->direction = 1;
   818  0014AE  EE20 F001          	lfsr	2,1
   819  0014B2  5001               	movf	initDCmotors_parameter@motorL^0,w,c
   820  0014B4  26D9               	addwf	fsr2l,f,c
   821  0014B6  5002               	movf	(initDCmotors_parameter@motorL+1)^0,w,c
   822  0014B8  22DA               	addwfc	fsr2h,f,c
   823  0014BA  0E01               	movlw	1
   824  0014BC  6EDF               	movwf	indf2,c
   825  0014BE                     
   826                           ;dc_motor.c: 46:     motorL->dutyHighByte = (unsigned char *)(&PWM6DCH);
   827  0014BE  EE20 F002          	lfsr	2,2
   828  0014C2  5001               	movf	initDCmotors_parameter@motorL^0,w,c
   829  0014C4  26D9               	addwf	fsr2l,f,c
   830  0014C6  5002               	movf	(initDCmotors_parameter@motorL+1)^0,w,c
   831  0014C8  22DA               	addwfc	fsr2h,f,c
   832  0014CA  0EA3               	movlw	163
   833  0014CC  6EDE               	movwf	postinc2,c
   834  0014CE  0E0F               	movlw	15
   835  0014D0  6EDD               	movwf	postdec2,c
   836  0014D2                     
   837                           ;dc_motor.c: 47:     motorL->dir_LAT = (unsigned char *)(&LATE);
   838  0014D2  EE20 F004          	lfsr	2,4
   839  0014D6  5001               	movf	initDCmotors_parameter@motorL^0,w,c
   840  0014D8  26D9               	addwf	fsr2l,f,c
   841  0014DA  5002               	movf	(initDCmotors_parameter@motorL+1)^0,w,c
   842  0014DC  22DA               	addwfc	fsr2h,f,c
   843  0014DE  0E7D               	movlw	125
   844  0014E0  6EDE               	movwf	postinc2,c
   845  0014E2  0E0F               	movlw	15
   846  0014E4  6EDD               	movwf	postdec2,c
   847  0014E6                     
   848                           ;dc_motor.c: 48:     motorL->dir_pin = 4;
   849  0014E6  EE20 F006          	lfsr	2,6
   850  0014EA  5001               	movf	initDCmotors_parameter@motorL^0,w,c
   851  0014EC  26D9               	addwf	fsr2l,f,c
   852  0014EE  5002               	movf	(initDCmotors_parameter@motorL+1)^0,w,c
   853  0014F0  22DA               	addwfc	fsr2h,f,c
   854  0014F2  0E04               	movlw	4
   855  0014F4  6EDF               	movwf	indf2,c
   856  0014F6                     
   857                           ;dc_motor.c: 49:     motorL->PWMperiod = 199;
   858  0014F6  EE20 F007          	lfsr	2,7
   859  0014FA  5001               	movf	initDCmotors_parameter@motorL^0,w,c
   860  0014FC  26D9               	addwf	fsr2l,f,c
   861  0014FE  5002               	movf	(initDCmotors_parameter@motorL+1)^0,w,c
   862  001500  22DA               	addwfc	fsr2h,f,c
   863  001502  0EC7               	movlw	199
   864  001504  6EDE               	movwf	postinc2,c
   865  001506  0E00               	movlw	0
   866  001508  6EDD               	movwf	postdec2,c
   867  00150A                     
   868                           ;dc_motor.c: 52:     motorR->power = 0;
   869  00150A  C003  FFD9         	movff	initDCmotors_parameter@motorR,fsr2l
   870  00150E  C004  FFDA         	movff	initDCmotors_parameter@motorR+1,fsr2h
   871  001512  0E00               	movlw	0
   872  001514  6EDF               	movwf	indf2,c
   873                           
   874                           ;dc_motor.c: 53:     motorR->direction = 1;
   875  001516  EE20 F001          	lfsr	2,1
   876  00151A  5003               	movf	initDCmotors_parameter@motorR^0,w,c
   877  00151C  26D9               	addwf	fsr2l,f,c
   878  00151E  5004               	movf	(initDCmotors_parameter@motorR+1)^0,w,c
   879  001520  22DA               	addwfc	fsr2h,f,c
   880  001522  0E01               	movlw	1
   881  001524  6EDF               	movwf	indf2,c
   882                           
   883                           ;dc_motor.c: 54:     motorR->dutyHighByte = (unsigned char *)(&PWM7DCH);
   884  001526  EE20 F002          	lfsr	2,2
   885  00152A  5003               	movf	initDCmotors_parameter@motorR^0,w,c
   886  00152C  26D9               	addwf	fsr2l,f,c
   887  00152E  5004               	movf	(initDCmotors_parameter@motorR+1)^0,w,c
   888  001530  22DA               	addwfc	fsr2h,f,c
   889  001532  0EA0               	movlw	160
   890  001534  6EDE               	movwf	postinc2,c
   891  001536  0E0F               	movlw	15
   892  001538  6EDD               	movwf	postdec2,c
   893                           
   894                           ;dc_motor.c: 55:     motorR->dir_LAT = (unsigned char *)(&LATG);
   895  00153A  EE20 F004          	lfsr	2,4
   896  00153E  5003               	movf	initDCmotors_parameter@motorR^0,w,c
   897  001540  26D9               	addwf	fsr2l,f,c
   898  001542  5004               	movf	(initDCmotors_parameter@motorR+1)^0,w,c
   899  001544  22DA               	addwfc	fsr2h,f,c
   900  001546  0E7F               	movlw	127
   901  001548  6EDE               	movwf	postinc2,c
   902  00154A  0E0F               	movlw	15
   903  00154C  6EDD               	movwf	postdec2,c
   904                           
   905                           ;dc_motor.c: 56:     motorR->dir_pin = 6;
   906  00154E  EE20 F006          	lfsr	2,6
   907  001552  5003               	movf	initDCmotors_parameter@motorR^0,w,c
   908  001554  26D9               	addwf	fsr2l,f,c
   909  001556  5004               	movf	(initDCmotors_parameter@motorR+1)^0,w,c
   910  001558  22DA               	addwfc	fsr2h,f,c
   911  00155A  0E06               	movlw	6
   912  00155C  6EDF               	movwf	indf2,c
   913                           
   914                           ;dc_motor.c: 57:     motorR->PWMperiod = 199;
   915  00155E  EE20 F007          	lfsr	2,7
   916  001562  5003               	movf	initDCmotors_parameter@motorR^0,w,c
   917  001564  26D9               	addwf	fsr2l,f,c
   918  001566  5004               	movf	(initDCmotors_parameter@motorR+1)^0,w,c
   919  001568  22DA               	addwfc	fsr2h,f,c
   920  00156A  0EC7               	movlw	199
   921  00156C  6EDE               	movwf	postinc2,c
   922  00156E  0E00               	movlw	0
   923  001570  6EDD               	movwf	postdec2,c
   924  001572  0012               	return		;funcret
   925  001574                     __end_of_initDCmotors_parameter:
   926                           	callstack 0
   927                           
   928 ;; *************** function _initDCmotorsPWM *****************
   929 ;; Defined at:
   930 ;;		line 12 in file "dc_motor.c"
   931 ;; Parameters:    Size  Location     Type
   932 ;;  PWMperiod       2    0[COMRAM] int 
   933 ;; Auto vars:     Size  Location     Type
   934 ;;		None
   935 ;; Return value:  Size  Location     Type
   936 ;;                  1    wreg      void 
   937 ;; Registers used:
   938 ;;		wreg, status,2
   939 ;; Tracked objects:
   940 ;;		On entry : 0/0
   941 ;;		On exit  : 0/0
   942 ;;		Unchanged: 0/0
   943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   944 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   945 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   946 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   947 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   948 ;;Total ram usage:        2 bytes
   949 ;; Hardware stack levels used: 1
   950 ;; This function calls:
   951 ;;		Nothing
   952 ;; This function is called by:
   953 ;;		_main
   954 ;; This function uses a non-reentrant model
   955 ;;
   956                           
   957                           	psect	text4
   958  001896                     __ptext4:
   959                           	callstack 0
   960  001896                     _initDCmotorsPWM:
   961                           	callstack 30
   962  001896                     
   963                           ;dc_motor.c: 15:     TRISEbits.TRISE2=0;
   964  001896  9485               	bcf	133,2,c	;volatile
   965                           
   966                           ;dc_motor.c: 16:     TRISCbits.TRISC7=0;
   967  001898  9E83               	bcf	131,7,c	;volatile
   968                           
   969                           ;dc_motor.c: 17:     TRISGbits.TRISG6=0;
   970  00189A  9C87               	bcf	135,6,c	;volatile
   971                           
   972                           ;dc_motor.c: 18:     TRISEbits.TRISE4=0;
   973  00189C  9885               	bcf	133,4,c	;volatile
   974                           
   975                           ;dc_motor.c: 19:     LATEbits.LATE2=0;
   976  00189E  947D               	bcf	125,2,c	;volatile
   977                           
   978                           ;dc_motor.c: 20:     LATCbits.LATC7=0;
   979  0018A0  9E7B               	bcf	123,7,c	;volatile
   980                           
   981                           ;dc_motor.c: 21:     LATGbits.LATG6=0;
   982  0018A2  9C7F               	bcf	127,6,c	;volatile
   983                           
   984                           ;dc_motor.c: 22:     LATEbits.LATE4=0;
   985  0018A4  987D               	bcf	125,4,c	;volatile
   986  0018A6                     
   987                           ;dc_motor.c: 25:     T2CONbits.CKPS=0b011;
   988  0018A6  50BD               	movf	189,w,c	;volatile
   989  0018A8  0B8F               	andlw	-113
   990  0018AA  0930               	iorlw	48
   991  0018AC  6EBD               	movwf	189,c	;volatile
   992                           
   993                           ;dc_motor.c: 26:     T2HLTbits.MODE=0b00000;
   994  0018AE  0EE0               	movlw	-32
   995  0018B0  16BE               	andwf	190,f,c	;volatile
   996                           
   997                           ;dc_motor.c: 27:     T2CLKCONbits.CS=0b0001;
   998  0018B2  50BF               	movf	191,w,c	;volatile
   999  0018B4  0BF0               	andlw	-16
  1000  0018B6  0901               	iorlw	1
  1001  0018B8  6EBF               	movwf	191,c	;volatile
  1002                           
  1003                           ;dc_motor.c: 30:     T2PR=200-1;
  1004  0018BA  0EC7               	movlw	199
  1005  0018BC  6EBC               	movwf	188,c	;volatile
  1006  0018BE                     
  1007                           ;dc_motor.c: 31:     T2CONbits.ON=1;
  1008  0018BE  8EBD               	bsf	189,7,c	;volatile
  1009                           
  1010                           ;dc_motor.c: 33:     RE2PPS=0x0A;
  1011  0018C0  0E0A               	movlw	10
  1012  0018C2  010E               	movlb	14	; () banked
  1013  0018C4  6F74               	movwf	116,b	;volatile
  1014                           
  1015                           ;dc_motor.c: 34:     RC7PPS=0x0B;
  1016  0018C6  0E0B               	movlw	11
  1017  0018C8  6F69               	movwf	105,b	;volatile
  1018                           
  1019                           ;dc_motor.c: 36:     PWM6DCH=0;
  1020  0018CA  0E00               	movlw	0
  1021  0018CC  6EA3               	movwf	163,c	;volatile
  1022                           
  1023                           ;dc_motor.c: 37:     PWM7DCH=0;
  1024  0018CE  0E00               	movlw	0
  1025  0018D0  6EA0               	movwf	160,c	;volatile
  1026  0018D2                     
  1027                           ; BSR set to: 14
  1028                           ;dc_motor.c: 39:     PWM6CONbits.EN = 1;
  1029  0018D2  8EA4               	bsf	164,7,c	;volatile
  1030  0018D4                     
  1031                           ; BSR set to: 14
  1032                           ;dc_motor.c: 40:     PWM7CONbits.EN = 1;
  1033  0018D4  8EA1               	bsf	161,7,c	;volatile
  1034  0018D6                     
  1035                           ; BSR set to: 14
  1036  0018D6  0012               	return		;funcret
  1037  0018D8                     __end_of_initDCmotorsPWM:
  1038                           	callstack 0
  1039                           
  1040 ;; *************** function _color_click_init *****************
  1041 ;; Defined at:
  1042 ;;		line 12 in file "color.c"
  1043 ;; Parameters:    Size  Location     Type
  1044 ;;		None
  1045 ;; Auto vars:     Size  Location     Type
  1046 ;;		None
  1047 ;; Return value:  Size  Location     Type
  1048 ;;                  1    wreg      void 
  1049 ;; Registers used:
  1050 ;;		wreg, status,2, status,0, cstack
  1051 ;; Tracked objects:
  1052 ;;		On entry : 0/0
  1053 ;;		On exit  : 0/0
  1054 ;;		Unchanged: 0/0
  1055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1056 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1057 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1058 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1059 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1060 ;;Total ram usage:        1 bytes
  1061 ;; Hardware stack levels used: 1
  1062 ;; Hardware stack levels required when called: 3
  1063 ;; This function calls:
  1064 ;;		_I2C_2_Master_Init
  1065 ;;		_color_writetoaddr
  1066 ;; This function is called by:
  1067 ;;		_main
  1068 ;; This function uses a non-reentrant model
  1069 ;;
  1070                           
  1071                           	psect	text5
  1072  00199A                     __ptext5:
  1073                           	callstack 0
  1074  00199A                     _color_click_init:
  1075                           	callstack 27
  1076  00199A                     
  1077                           ;color.c: 15:     I2C_2_Master_Init();
  1078  00199A  ECE7  F00C         	call	_I2C_2_Master_Init	;wreg free
  1079  00199E                     
  1080                           ;color.c: 18:   color_writetoaddr(0x00, 0x01);
  1081  00199E  0E01               	movlw	1
  1082  0019A0  6E03               	movwf	color_writetoaddr@value^0,c
  1083  0019A2  0E00               	movlw	0
  1084  0019A4  EC23  F00D         	call	_color_writetoaddr
  1085  0019A8                     
  1086                           ;color.c: 19:     _delay((unsigned long)((3)*(64000000/4000.0)));
  1087  0019A8  0E3F               	movlw	63
  1088  0019AA  6E05               	movwf	??_color_click_init^0,c
  1089  0019AC  0E55               	movlw	85
  1090  0019AE                     u1267:
  1091  0019AE  2EE8               	decfsz	wreg,f,c
  1092  0019B0  D7FE               	bra	u1267
  1093  0019B2  2E05               	decfsz	??_color_click_init^0,f,c
  1094  0019B4  D7FC               	bra	u1267
  1095  0019B6  F000               	nop	
  1096  0019B8                     
  1097                           ;color.c: 22:  color_writetoaddr(0x00, 0x03);
  1098  0019B8  0E03               	movlw	3
  1099  0019BA  6E03               	movwf	color_writetoaddr@value^0,c
  1100  0019BC  0E00               	movlw	0
  1101  0019BE  EC23  F00D         	call	_color_writetoaddr
  1102  0019C2                     
  1103                           ;color.c: 25:  color_writetoaddr(0x01, 0xD5);
  1104  0019C2  0ED5               	movlw	213
  1105  0019C4  6E03               	movwf	color_writetoaddr@value^0,c
  1106  0019C6  0E01               	movlw	1
  1107  0019C8  EC23  F00D         	call	_color_writetoaddr
  1108  0019CC  0012               	return		;funcret
  1109  0019CE                     __end_of_color_click_init:
  1110                           	callstack 0
  1111                           
  1112 ;; *************** function _color_writetoaddr *****************
  1113 ;; Defined at:
  1114 ;;		line 28 in file "color.c"
  1115 ;; Parameters:    Size  Location     Type
  1116 ;;  address         1    wreg     unsigned char 
  1117 ;;  value           1    2[COMRAM] unsigned char 
  1118 ;; Auto vars:     Size  Location     Type
  1119 ;;  address         1    3[COMRAM] unsigned char 
  1120 ;; Return value:  Size  Location     Type
  1121 ;;                  1    wreg      void 
  1122 ;; Registers used:
  1123 ;;		wreg, status,2, status,0, cstack
  1124 ;; Tracked objects:
  1125 ;;		On entry : 0/0
  1126 ;;		On exit  : 0/0
  1127 ;;		Unchanged: 0/0
  1128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1129 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1130 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1131 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1132 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1133 ;;Total ram usage:        2 bytes
  1134 ;; Hardware stack levels used: 1
  1135 ;; Hardware stack levels required when called: 2
  1136 ;; This function calls:
  1137 ;;		_I2C_2_Master_Start
  1138 ;;		_I2C_2_Master_Stop
  1139 ;;		_I2C_2_Master_Write
  1140 ;; This function is called by:
  1141 ;;		_color_click_init
  1142 ;; This function uses a non-reentrant model
  1143 ;;
  1144                           
  1145                           	psect	text6
  1146  001A46                     __ptext6:
  1147                           	callstack 0
  1148  001A46                     _color_writetoaddr:
  1149                           	callstack 27
  1150                           
  1151                           ;incstack = 0
  1152                           ;color_writetoaddr@address stored from wreg
  1153  001A46  6E04               	movwf	color_writetoaddr@address^0,c
  1154  001A48                     
  1155                           ;color.c: 29:     I2C_2_Master_Start();
  1156  001A48  EC68  F00D         	call	_I2C_2_Master_Start	;wreg free
  1157                           
  1158                           ;color.c: 30:     I2C_2_Master_Write(0x52 | 0x00);
  1159  001A4C  0E52               	movlw	82
  1160  001A4E  EC5D  F00D         	call	_I2C_2_Master_Write
  1161                           
  1162                           ;color.c: 31:     I2C_2_Master_Write(0x80 | address);
  1163  001A52  5004               	movf	color_writetoaddr@address^0,w,c
  1164  001A54  0980               	iorlw	128
  1165  001A56  EC5D  F00D         	call	_I2C_2_Master_Write
  1166                           
  1167                           ;color.c: 32:     I2C_2_Master_Write(value);
  1168  001A5A  5003               	movf	color_writetoaddr@value^0,w,c
  1169  001A5C  EC5D  F00D         	call	_I2C_2_Master_Write
  1170                           
  1171                           ;color.c: 33:     I2C_2_Master_Stop();
  1172  001A60  EC63  F00D         	call	_I2C_2_Master_Stop	;wreg free
  1173  001A64  0012               	return		;funcret
  1174  001A66                     __end_of_color_writetoaddr:
  1175                           	callstack 0
  1176                           
  1177 ;; *************** function _I2C_2_Master_Write *****************
  1178 ;; Defined at:
  1179 ;;		line 45 in file "i2c.c"
  1180 ;; Parameters:    Size  Location     Type
  1181 ;;  data_byte       1    wreg     unsigned char 
  1182 ;; Auto vars:     Size  Location     Type
  1183 ;;  data_byte       1    1[COMRAM] unsigned char 
  1184 ;; Return value:  Size  Location     Type
  1185 ;;                  1    wreg      void 
  1186 ;; Registers used:
  1187 ;;		wreg, status,2, status,0, cstack
  1188 ;; Tracked objects:
  1189 ;;		On entry : 0/0
  1190 ;;		On exit  : 0/0
  1191 ;;		Unchanged: 0/0
  1192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1193 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1194 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1196 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1197 ;;Total ram usage:        1 bytes
  1198 ;; Hardware stack levels used: 1
  1199 ;; Hardware stack levels required when called: 1
  1200 ;; This function calls:
  1201 ;;		_I2C_2_Master_Idle
  1202 ;; This function is called by:
  1203 ;;		_color_writetoaddr
  1204 ;;		_color_read_Red
  1205 ;;		_color_read_Blue
  1206 ;;		_color_read_Green
  1207 ;;		_color_read_Clear
  1208 ;; This function uses a non-reentrant model
  1209 ;;
  1210                           
  1211                           	psect	text7
  1212  001ABA                     __ptext7:
  1213                           	callstack 0
  1214  001ABA                     _I2C_2_Master_Write:
  1215                           	callstack 27
  1216                           
  1217                           ;incstack = 0
  1218                           ;I2C_2_Master_Write@data_byte stored from wreg
  1219  001ABA  6E02               	movwf	I2C_2_Master_Write@data_byte^0,c
  1220  001ABC                     
  1221                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  1222  001ABC  ECFC  F00C         	call	_I2C_2_Master_Idle	;wreg free
  1223  001AC0                     
  1224                           ;i2c.c: 48:   SSP2BUF = data_byte;
  1225  001AC0  C002  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  1226  001AC4  0012               	return		;funcret
  1227  001AC6                     __end_of_I2C_2_Master_Write:
  1228                           	callstack 0
  1229                           
  1230 ;; *************** function _I2C_2_Master_Stop *****************
  1231 ;; Defined at:
  1232 ;;		line 39 in file "i2c.c"
  1233 ;; Parameters:    Size  Location     Type
  1234 ;;		None
  1235 ;; Auto vars:     Size  Location     Type
  1236 ;;		None
  1237 ;; Return value:  Size  Location     Type
  1238 ;;                  1    wreg      void 
  1239 ;; Registers used:
  1240 ;;		wreg, status,2, status,0, cstack
  1241 ;; Tracked objects:
  1242 ;;		On entry : 0/0
  1243 ;;		On exit  : 0/0
  1244 ;;		Unchanged: 0/0
  1245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1246 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1247 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1248 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1249 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1250 ;;Total ram usage:        0 bytes
  1251 ;; Hardware stack levels used: 1
  1252 ;; Hardware stack levels required when called: 1
  1253 ;; This function calls:
  1254 ;;		_I2C_2_Master_Idle
  1255 ;; This function is called by:
  1256 ;;		_color_writetoaddr
  1257 ;;		_color_read_Red
  1258 ;;		_color_read_Blue
  1259 ;;		_color_read_Green
  1260 ;;		_color_read_Clear
  1261 ;; This function uses a non-reentrant model
  1262 ;;
  1263                           
  1264                           	psect	text8
  1265  001AC6                     __ptext8:
  1266                           	callstack 0
  1267  001AC6                     _I2C_2_Master_Stop:
  1268                           	callstack 27
  1269  001AC6                     
  1270                           ;i2c.c: 41:   I2C_2_Master_Idle();
  1271  001AC6  ECFC  F00C         	call	_I2C_2_Master_Idle	;wreg free
  1272  001ACA                     
  1273                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  1274  001ACA  010E               	movlb	14	; () banked
  1275  001ACC  85DA               	bsf	218,2,b	;volatile
  1276  001ACE                     
  1277                           ; BSR set to: 14
  1278  001ACE  0012               	return		;funcret
  1279  001AD0                     __end_of_I2C_2_Master_Stop:
  1280                           	callstack 0
  1281                           
  1282 ;; *************** function _I2C_2_Master_Start *****************
  1283 ;; Defined at:
  1284 ;;		line 27 in file "i2c.c"
  1285 ;; Parameters:    Size  Location     Type
  1286 ;;		None
  1287 ;; Auto vars:     Size  Location     Type
  1288 ;;		None
  1289 ;; Return value:  Size  Location     Type
  1290 ;;                  1    wreg      void 
  1291 ;; Registers used:
  1292 ;;		wreg, status,2, status,0, cstack
  1293 ;; Tracked objects:
  1294 ;;		On entry : 0/0
  1295 ;;		On exit  : 0/0
  1296 ;;		Unchanged: 0/0
  1297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1298 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1299 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1300 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1301 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1302 ;;Total ram usage:        0 bytes
  1303 ;; Hardware stack levels used: 1
  1304 ;; Hardware stack levels required when called: 1
  1305 ;; This function calls:
  1306 ;;		_I2C_2_Master_Idle
  1307 ;; This function is called by:
  1308 ;;		_color_writetoaddr
  1309 ;;		_color_read_Red
  1310 ;;		_color_read_Blue
  1311 ;;		_color_read_Green
  1312 ;;		_color_read_Clear
  1313 ;; This function uses a non-reentrant model
  1314 ;;
  1315                           
  1316                           	psect	text9
  1317  001AD0                     __ptext9:
  1318                           	callstack 0
  1319  001AD0                     _I2C_2_Master_Start:
  1320                           	callstack 27
  1321  001AD0                     
  1322                           ;i2c.c: 29:   I2C_2_Master_Idle();
  1323  001AD0  ECFC  F00C         	call	_I2C_2_Master_Idle	;wreg free
  1324  001AD4                     
  1325                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  1326  001AD4  010E               	movlb	14	; () banked
  1327  001AD6  81DA               	bsf	218,0,b	;volatile
  1328  001AD8                     
  1329                           ; BSR set to: 14
  1330  001AD8  0012               	return		;funcret
  1331  001ADA                     __end_of_I2C_2_Master_Start:
  1332                           	callstack 0
  1333                           
  1334 ;; *************** function _I2C_2_Master_Idle *****************
  1335 ;; Defined at:
  1336 ;;		line 22 in file "i2c.c"
  1337 ;; Parameters:    Size  Location     Type
  1338 ;;		None
  1339 ;; Auto vars:     Size  Location     Type
  1340 ;;		None
  1341 ;; Return value:  Size  Location     Type
  1342 ;;                  1    wreg      void 
  1343 ;; Registers used:
  1344 ;;		wreg, status,2, status,0
  1345 ;; Tracked objects:
  1346 ;;		On entry : 0/0
  1347 ;;		On exit  : 0/0
  1348 ;;		Unchanged: 0/0
  1349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1350 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1351 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1352 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1353 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1354 ;;Total ram usage:        1 bytes
  1355 ;; Hardware stack levels used: 1
  1356 ;; This function calls:
  1357 ;;		Nothing
  1358 ;; This function is called by:
  1359 ;;		_I2C_2_Master_Start
  1360 ;;		_I2C_2_Master_Stop
  1361 ;;		_I2C_2_Master_Write
  1362 ;;		_I2C_2_Master_RepStart
  1363 ;;		_I2C_2_Master_Read
  1364 ;; This function uses a non-reentrant model
  1365 ;;
  1366                           
  1367                           	psect	text10
  1368  0019F8                     __ptext10:
  1369                           	callstack 0
  1370  0019F8                     _I2C_2_Master_Idle:
  1371                           	callstack 27
  1372  0019F8                     l172:
  1373  0019F8  010E               	movlb	14	; () banked
  1374  0019FA  B5D8               	btfsc	216,2,b	;volatile
  1375  0019FC  EF02  F00D         	goto	u111
  1376  001A00  EF04  F00D         	goto	u110
  1377  001A04                     u111:
  1378  001A04  EFFC  F00C         	goto	l172
  1379  001A08                     u110:
  1380  001A08                     
  1381                           ; BSR set to: 14
  1382  001A08  CEDA F001          	movff	3802,??_I2C_2_Master_Idle	;volatile
  1383  001A0C  0E1F               	movlw	31
  1384  001A0E  1601               	andwf	??_I2C_2_Master_Idle^0,f,c
  1385  001A10  A4D8               	btfss	status,2,c
  1386  001A12  EF0D  F00D         	goto	u121
  1387  001A16  EF0F  F00D         	goto	u120
  1388  001A1A                     u121:
  1389  001A1A  EFFC  F00C         	goto	l172
  1390  001A1E                     u120:
  1391  001A1E                     
  1392                           ; BSR set to: 14
  1393  001A1E  0012               	return		;funcret
  1394  001A20                     __end_of_I2C_2_Master_Idle:
  1395                           	callstack 0
  1396                           
  1397 ;; *************** function _I2C_2_Master_Init *****************
  1398 ;; Defined at:
  1399 ;;		line 4 in file "i2c.c"
  1400 ;; Parameters:    Size  Location     Type
  1401 ;;		None
  1402 ;; Auto vars:     Size  Location     Type
  1403 ;;		None
  1404 ;; Return value:  Size  Location     Type
  1405 ;;                  1    wreg      void 
  1406 ;; Registers used:
  1407 ;;		wreg, status,2
  1408 ;; Tracked objects:
  1409 ;;		On entry : 0/0
  1410 ;;		On exit  : 0/0
  1411 ;;		Unchanged: 0/0
  1412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1414 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1415 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1416 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1417 ;;Total ram usage:        0 bytes
  1418 ;; Hardware stack levels used: 1
  1419 ;; This function calls:
  1420 ;;		Nothing
  1421 ;; This function is called by:
  1422 ;;		_color_click_init
  1423 ;;		_main
  1424 ;; This function uses a non-reentrant model
  1425 ;;
  1426                           
  1427                           	psect	text11
  1428  0019CE                     __ptext11:
  1429                           	callstack 0
  1430  0019CE                     _I2C_2_Master_Init:
  1431                           	callstack 29
  1432  0019CE                     
  1433                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  1434  0019CE  010E               	movlb	14	; () banked
  1435  0019D0  51D9               	movf	217,w,b	;volatile
  1436  0019D2  0BF0               	andlw	-16
  1437  0019D4  0908               	iorlw	8
  1438  0019D6  6FD9               	movwf	217,b	;volatile
  1439  0019D8                     
  1440                           ; BSR set to: 14
  1441                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  1442  0019D8  8BD9               	bsf	217,5,b	;volatile
  1443                           
  1444                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  1445  0019DA  0E9F               	movlw	159
  1446  0019DC  6FD6               	movwf	214,b	;volatile
  1447  0019DE                     
  1448                           ; BSR set to: 14
  1449                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  1450  0019DE  8A84               	bsf	132,5,c	;volatile
  1451  0019E0                     
  1452                           ; BSR set to: 14
  1453                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  1454  0019E0  8C84               	bsf	132,6,c	;volatile
  1455  0019E2                     
  1456                           ; BSR set to: 14
  1457                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  1458  0019E2  9BA7               	bcf	167,5,b	;volatile
  1459  0019E4                     
  1460                           ; BSR set to: 14
  1461                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  1462  0019E4  9DA7               	bcf	167,6,b	;volatile
  1463                           
  1464                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  1465  0019E6  0E1D               	movlw	29
  1466  0019E8  6F1D               	movwf	29,b	;volatile
  1467                           
  1468                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  1469  0019EA  0E1E               	movlw	30
  1470  0019EC  6F1C               	movwf	28,b	;volatile
  1471                           
  1472                           ;i2c.c: 18:   RD5PPS=0x1C;
  1473  0019EE  0E1C               	movlw	28
  1474  0019F0  6F6F               	movwf	111,b	;volatile
  1475                           
  1476                           ;i2c.c: 19:   RD6PPS=0x1B;
  1477  0019F2  0E1B               	movlw	27
  1478  0019F4  6F70               	movwf	112,b	;volatile
  1479  0019F6                     
  1480                           ; BSR set to: 14
  1481  0019F6  0012               	return		;funcret
  1482  0019F8                     __end_of_I2C_2_Master_Init:
  1483                           	callstack 0
  1484                           
  1485 ;; *************** function _action *****************
  1486 ;; Defined at:
  1487 ;;		line 8 in file "movement.c"
  1488 ;; Parameters:    Size  Location     Type
  1489 ;;  color           1    wreg     unsigned char 
  1490 ;;  mL              2   49[COMRAM] PTR struct DC_motor
  1491 ;;		 -> main@motorL(10), 
  1492 ;;  mR              2   51[COMRAM] PTR struct DC_motor
  1493 ;;		 -> main@motorR(10), 
  1494 ;; Auto vars:     Size  Location     Type
  1495 ;;  color           1   53[COMRAM] unsigned char 
  1496 ;; Return value:  Size  Location     Type
  1497 ;;                  1    wreg      void 
  1498 ;; Registers used:
  1499 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1500 ;; Tracked objects:
  1501 ;;		On entry : 0/0
  1502 ;;		On exit  : 0/0
  1503 ;;		Unchanged: 0/0
  1504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1505 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1506 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1508 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1509 ;;Total ram usage:        5 bytes
  1510 ;; Hardware stack levels used: 1
  1511 ;; Hardware stack levels required when called: 5
  1512 ;; This function calls:
  1513 ;;		_fullSpeedAhead
  1514 ;;		_goback
  1515 ;;		_reverse_square
  1516 ;;		_short_reverse
  1517 ;;		_stop
  1518 ;;		_turnLeft
  1519 ;;		_turnRight
  1520 ;; This function is called by:
  1521 ;;		_main
  1522 ;; This function uses a non-reentrant model
  1523 ;;
  1524                           
  1525                           	psect	text12
  1526  000E54                     __ptext12:
  1527                           	callstack 0
  1528  000E54                     _action:
  1529                           	callstack 25
  1530                           
  1531                           ; BSR set to: 14
  1532                           ;incstack = 0
  1533                           ;action@color stored from wreg
  1534  000E54  6E36               	movwf	action@color^0,c
  1535  000E56                     
  1536                           ;movement.c: 8: void action(unsigned char color, struct DC_motor *mL, struct DC_motor *m
      +                          R);movement.c: 9: { fullSpeedAhead(mL,mR);
  1537  000E56  C032  F01A         	movff	action@mL,fullSpeedAhead@mL
  1538  000E5A  C033  F01B         	movff	action@mL+1,fullSpeedAhead@mL+1
  1539  000E5E  C034  F01C         	movff	action@mR,fullSpeedAhead@mR
  1540  000E62  C035  F01D         	movff	action@mR+1,fullSpeedAhead@mR+1
  1541  000E66  ECDA  F00B         	call	_fullSpeedAhead	;wreg free
  1542  000E6A                     
  1543                           ;movement.c: 10:     if (color != 0){stop(mL,mR);
  1544  000E6A  5036               	movf	action@color^0,w,c
  1545  000E6C  B4D8               	btfsc	status,2,c
  1546  000E6E  EF3B  F007         	goto	u1081
  1547  000E72  EF3D  F007         	goto	u1080
  1548  000E76                     u1081:
  1549  000E76  EF3C  F008         	goto	l542
  1550  000E7A                     u1080:
  1551  000E7A  C032  F01A         	movff	action@mL,stop@mL
  1552  000E7E  C033  F01B         	movff	action@mL+1,stop@mL+1
  1553  000E82  C034  F01C         	movff	action@mR,stop@mR
  1554  000E86  C035  F01D         	movff	action@mR+1,stop@mR+1
  1555  000E8A  EC7C  F00B         	call	_stop	;wreg free
  1556  000E8E                     
  1557                           ;movement.c: 11:         if (color == 1){
  1558  000E8E  0436               	decf	action@color^0,w,c
  1559  000E90  A4D8               	btfss	status,2,c
  1560  000E92  EF4D  F007         	goto	u1091
  1561  000E96  EF4F  F007         	goto	u1090
  1562  000E9A                     u1091:
  1563  000E9A  EF65  F007         	goto	l2296
  1564  000E9E                     u1090:
  1565  000E9E                     
  1566                           ;movement.c: 12:             short_reverse(mL,mR);
  1567  000E9E  C032  F026         	movff	action@mL,short_reverse@mL
  1568  000EA2  C033  F027         	movff	action@mL+1,short_reverse@mL+1
  1569  000EA6  C034  F028         	movff	action@mR,short_reverse@mR
  1570  000EAA  C035  F029         	movff	action@mR+1,short_reverse@mR+1
  1571  000EAE  EC6C  F00C         	call	_short_reverse	;wreg free
  1572                           
  1573                           ;movement.c: 13:             turnRight(mL,mR,90);
  1574  000EB2  C032  F020         	movff	action@mL,turnRight@mL
  1575  000EB6  C033  F021         	movff	action@mL+1,turnRight@mL+1
  1576  000EBA  C034  F022         	movff	action@mR,turnRight@mR
  1577  000EBE  C035  F023         	movff	action@mR+1,turnRight@mR+1
  1578  000EC2  0E5A               	movlw	90
  1579  000EC4  6E24               	movwf	turnRight@angle_right^0,c
  1580  000EC6  EC27  F009         	call	_turnRight	;wreg free
  1581  000ECA                     l2296:
  1582                           
  1583                           ;movement.c: 15:         if (color == 2){
  1584  000ECA  0E02               	movlw	2
  1585  000ECC  1836               	xorwf	action@color^0,w,c
  1586  000ECE  A4D8               	btfss	status,2,c
  1587  000ED0  EF6C  F007         	goto	u1101
  1588  000ED4  EF6E  F007         	goto	u1100
  1589  000ED8                     u1101:
  1590  000ED8  EF84  F007         	goto	l2300
  1591  000EDC                     u1100:
  1592  000EDC                     
  1593                           ;movement.c: 16:             short_reverse(mL,mR);
  1594  000EDC  C032  F026         	movff	action@mL,short_reverse@mL
  1595  000EE0  C033  F027         	movff	action@mL+1,short_reverse@mL+1
  1596  000EE4  C034  F028         	movff	action@mR,short_reverse@mR
  1597  000EE8  C035  F029         	movff	action@mR+1,short_reverse@mR+1
  1598  000EEC  EC6C  F00C         	call	_short_reverse	;wreg free
  1599                           
  1600                           ;movement.c: 17:             turnLeft(mL,mR,90);
  1601  000EF0  C032  F020         	movff	action@mL,turnLeft@mL
  1602  000EF4  C033  F021         	movff	action@mL+1,turnLeft@mL+1
  1603  000EF8  C034  F022         	movff	action@mR,turnLeft@mR
  1604  000EFC  C035  F023         	movff	action@mR+1,turnLeft@mR+1
  1605  000F00  0E5A               	movlw	90
  1606  000F02  6E24               	movwf	turnLeft@angle_left^0,c
  1607  000F04  ECBC  F009         	call	_turnLeft	;wreg free
  1608  000F08                     l2300:
  1609                           
  1610                           ;movement.c: 19:         if (color == 3){
  1611  000F08  0E03               	movlw	3
  1612  000F0A  1836               	xorwf	action@color^0,w,c
  1613  000F0C  A4D8               	btfss	status,2,c
  1614  000F0E  EF8B  F007         	goto	u1111
  1615  000F12  EF8D  F007         	goto	u1110
  1616  000F16                     u1111:
  1617  000F16  EFA3  F007         	goto	l2304
  1618  000F1A                     u1110:
  1619  000F1A                     
  1620                           ;movement.c: 20:             short_reverse(mL,mR);
  1621  000F1A  C032  F026         	movff	action@mL,short_reverse@mL
  1622  000F1E  C033  F027         	movff	action@mL+1,short_reverse@mL+1
  1623  000F22  C034  F028         	movff	action@mR,short_reverse@mR
  1624  000F26  C035  F029         	movff	action@mR+1,short_reverse@mR+1
  1625  000F2A  EC6C  F00C         	call	_short_reverse	;wreg free
  1626                           
  1627                           ;movement.c: 21:             turnLeft(mL,mR,180);
  1628  000F2E  C032  F020         	movff	action@mL,turnLeft@mL
  1629  000F32  C033  F021         	movff	action@mL+1,turnLeft@mL+1
  1630  000F36  C034  F022         	movff	action@mR,turnLeft@mR
  1631  000F3A  C035  F023         	movff	action@mR+1,turnLeft@mR+1
  1632  000F3E  0EB4               	movlw	180
  1633  000F40  6E24               	movwf	turnLeft@angle_left^0,c
  1634  000F42  ECBC  F009         	call	_turnLeft	;wreg free
  1635  000F46                     l2304:
  1636                           
  1637                           ;movement.c: 23:         if (color == 4){
  1638  000F46  0E04               	movlw	4
  1639  000F48  1836               	xorwf	action@color^0,w,c
  1640  000F4A  A4D8               	btfss	status,2,c
  1641  000F4C  EFAA  F007         	goto	u1121
  1642  000F50  EFAC  F007         	goto	u1120
  1643  000F54                     u1121:
  1644  000F54  EFC2  F007         	goto	l2308
  1645  000F58                     u1120:
  1646  000F58                     
  1647                           ;movement.c: 24:             reverse_square(mL,mR);
  1648  000F58  C032  F026         	movff	action@mL,reverse_square@mL
  1649  000F5C  C033  F027         	movff	action@mL+1,reverse_square@mL+1
  1650  000F60  C034  F028         	movff	action@mR,reverse_square@mR
  1651  000F64  C035  F029         	movff	action@mR+1,reverse_square@mR+1
  1652  000F68  EC8D  F00C         	call	_reverse_square	;wreg free
  1653                           
  1654                           ;movement.c: 25:             turnRight(mL,mR,90);
  1655  000F6C  C032  F020         	movff	action@mL,turnRight@mL
  1656  000F70  C033  F021         	movff	action@mL+1,turnRight@mL+1
  1657  000F74  C034  F022         	movff	action@mR,turnRight@mR
  1658  000F78  C035  F023         	movff	action@mR+1,turnRight@mR+1
  1659  000F7C  0E5A               	movlw	90
  1660  000F7E  6E24               	movwf	turnRight@angle_right^0,c
  1661  000F80  EC27  F009         	call	_turnRight	;wreg free
  1662  000F84                     l2308:
  1663                           
  1664                           ;movement.c: 27:         if (color == 5){
  1665  000F84  0E05               	movlw	5
  1666  000F86  1836               	xorwf	action@color^0,w,c
  1667  000F88  A4D8               	btfss	status,2,c
  1668  000F8A  EFC9  F007         	goto	u1131
  1669  000F8E  EFCB  F007         	goto	u1130
  1670  000F92                     u1131:
  1671  000F92  EFE1  F007         	goto	l2312
  1672  000F96                     u1130:
  1673  000F96                     
  1674                           ;movement.c: 28:             reverse_square(mL,mR);
  1675  000F96  C032  F026         	movff	action@mL,reverse_square@mL
  1676  000F9A  C033  F027         	movff	action@mL+1,reverse_square@mL+1
  1677  000F9E  C034  F028         	movff	action@mR,reverse_square@mR
  1678  000FA2  C035  F029         	movff	action@mR+1,reverse_square@mR+1
  1679  000FA6  EC8D  F00C         	call	_reverse_square	;wreg free
  1680                           
  1681                           ;movement.c: 29:             turnLeft(mL,mR,90);
  1682  000FAA  C032  F020         	movff	action@mL,turnLeft@mL
  1683  000FAE  C033  F021         	movff	action@mL+1,turnLeft@mL+1
  1684  000FB2  C034  F022         	movff	action@mR,turnLeft@mR
  1685  000FB6  C035  F023         	movff	action@mR+1,turnLeft@mR+1
  1686  000FBA  0E5A               	movlw	90
  1687  000FBC  6E24               	movwf	turnLeft@angle_left^0,c
  1688  000FBE  ECBC  F009         	call	_turnLeft	;wreg free
  1689  000FC2                     l2312:
  1690                           
  1691                           ;movement.c: 31:         if (color == 6){
  1692  000FC2  0E06               	movlw	6
  1693  000FC4  1836               	xorwf	action@color^0,w,c
  1694  000FC6  A4D8               	btfss	status,2,c
  1695  000FC8  EFE8  F007         	goto	u1141
  1696  000FCC  EFEA  F007         	goto	u1140
  1697  000FD0                     u1141:
  1698  000FD0  EF00  F008         	goto	l2316
  1699  000FD4                     u1140:
  1700  000FD4                     
  1701                           ;movement.c: 32:             short_reverse(mL,mR);
  1702  000FD4  C032  F026         	movff	action@mL,short_reverse@mL
  1703  000FD8  C033  F027         	movff	action@mL+1,short_reverse@mL+1
  1704  000FDC  C034  F028         	movff	action@mR,short_reverse@mR
  1705  000FE0  C035  F029         	movff	action@mR+1,short_reverse@mR+1
  1706  000FE4  EC6C  F00C         	call	_short_reverse	;wreg free
  1707                           
  1708                           ;movement.c: 33:             turnRight(mL,mR,135);
  1709  000FE8  C032  F020         	movff	action@mL,turnRight@mL
  1710  000FEC  C033  F021         	movff	action@mL+1,turnRight@mL+1
  1711  000FF0  C034  F022         	movff	action@mR,turnRight@mR
  1712  000FF4  C035  F023         	movff	action@mR+1,turnRight@mR+1
  1713  000FF8  0E87               	movlw	135
  1714  000FFA  6E24               	movwf	turnRight@angle_right^0,c
  1715  000FFC  EC27  F009         	call	_turnRight	;wreg free
  1716  001000                     l2316:
  1717                           
  1718                           ;movement.c: 35:         if (color == 7){
  1719  001000  0E07               	movlw	7
  1720  001002  1836               	xorwf	action@color^0,w,c
  1721  001004  A4D8               	btfss	status,2,c
  1722  001006  EF07  F008         	goto	u1151
  1723  00100A  EF09  F008         	goto	u1150
  1724  00100E                     u1151:
  1725  00100E  EF1F  F008         	goto	l2320
  1726  001012                     u1150:
  1727  001012                     
  1728                           ;movement.c: 36:             short_reverse(mL,mR);
  1729  001012  C032  F026         	movff	action@mL,short_reverse@mL
  1730  001016  C033  F027         	movff	action@mL+1,short_reverse@mL+1
  1731  00101A  C034  F028         	movff	action@mR,short_reverse@mR
  1732  00101E  C035  F029         	movff	action@mR+1,short_reverse@mR+1
  1733  001022  EC6C  F00C         	call	_short_reverse	;wreg free
  1734                           
  1735                           ;movement.c: 37:             turnLeft(mL,mR,135);
  1736  001026  C032  F020         	movff	action@mL,turnLeft@mL
  1737  00102A  C033  F021         	movff	action@mL+1,turnLeft@mL+1
  1738  00102E  C034  F022         	movff	action@mR,turnLeft@mR
  1739  001032  C035  F023         	movff	action@mR+1,turnLeft@mR+1
  1740  001036  0E87               	movlw	135
  1741  001038  6E24               	movwf	turnLeft@angle_left^0,c
  1742  00103A  ECBC  F009         	call	_turnLeft	;wreg free
  1743  00103E                     l2320:
  1744                           
  1745                           ;movement.c: 39:         if (color == 8){
  1746  00103E  0E08               	movlw	8
  1747  001040  1836               	xorwf	action@color^0,w,c
  1748  001042  A4D8               	btfss	status,2,c
  1749  001044  EF26  F008         	goto	u1161
  1750  001048  EF28  F008         	goto	u1160
  1751  00104C                     u1161:
  1752  00104C  EF3C  F008         	goto	l542
  1753  001050                     u1160:
  1754  001050                     
  1755                           ;movement.c: 40:             short_reverse(mL,mR);
  1756  001050  C032  F026         	movff	action@mL,short_reverse@mL
  1757  001054  C033  F027         	movff	action@mL+1,short_reverse@mL+1
  1758  001058  C034  F028         	movff	action@mR,short_reverse@mR
  1759  00105C  C035  F029         	movff	action@mR+1,short_reverse@mR+1
  1760  001060  EC6C  F00C         	call	_short_reverse	;wreg free
  1761                           
  1762                           ;movement.c: 41:             goback(mL,mR);
  1763  001064  C032  F02E         	movff	action@mL,goback@mL
  1764  001068  C033  F02F         	movff	action@mL+1,goback@mL+1
  1765  00106C  C034  F030         	movff	action@mR,goback@mR
  1766  001070  C035  F031         	movff	action@mR+1,goback@mR+1
  1767  001074  EC50  F00D         	call	_goback	;wreg free
  1768  001078                     l542:
  1769  001078  0012               	return		;funcret
  1770  00107A                     __end_of_action:
  1771                           	callstack 0
  1772                           
  1773 ;; *************** function _turnRight *****************
  1774 ;; Defined at:
  1775 ;;		line 120 in file "dc_motor.c"
  1776 ;; Parameters:    Size  Location     Type
  1777 ;;  mL              2   31[COMRAM] PTR struct DC_motor
  1778 ;;		 -> main@motorL(10), 
  1779 ;;  mR              2   33[COMRAM] PTR struct DC_motor
  1780 ;;		 -> main@motorR(10), 
  1781 ;;  angle_right     1   35[COMRAM] unsigned char 
  1782 ;; Auto vars:     Size  Location     Type
  1783 ;;  i               2   41[COMRAM] unsigned int 
  1784 ;;  i               2   39[COMRAM] unsigned int 
  1785 ;;  delay           2   43[COMRAM] unsigned int 
  1786 ;;  delay_180       2   37[COMRAM] unsigned int 
  1787 ;; Return value:  Size  Location     Type
  1788 ;;                  1    wreg      void 
  1789 ;; Registers used:
  1790 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1791 ;; Tracked objects:
  1792 ;;		On entry : 0/0
  1793 ;;		On exit  : 0/0
  1794 ;;		Unchanged: 0/0
  1795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1796 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1797 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1798 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1799 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1800 ;;Total ram usage:       14 bytes
  1801 ;; Hardware stack levels used: 1
  1802 ;; Hardware stack levels required when called: 3
  1803 ;; This function calls:
  1804 ;;		_setMotorPWM
  1805 ;;		_stop
  1806 ;; This function is called by:
  1807 ;;		_action
  1808 ;;		_movement
  1809 ;;		_test_action
  1810 ;; This function uses a non-reentrant model
  1811 ;;
  1812                           
  1813                           	psect	text13
  1814  00124E                     __ptext13:
  1815                           	callstack 0
  1816  00124E                     _turnRight:
  1817                           	callstack 26
  1818  00124E                     
  1819                           ;dc_motor.c: 120: void turnRight(struct DC_motor *mL, struct DC_motor *mR, unsigned char
      +                           angle_right);dc_motor.c: 121: {;dc_motor.c: 122:     mL->direction=1;
  1820  00124E  EE20 F001          	lfsr	2,1
  1821  001252  5020               	movf	turnRight@mL^0,w,c
  1822  001254  26D9               	addwf	fsr2l,f,c
  1823  001256  5021               	movf	(turnRight@mL+1)^0,w,c
  1824  001258  22DA               	addwfc	fsr2h,f,c
  1825  00125A  0E01               	movlw	1
  1826  00125C  6EDF               	movwf	indf2,c
  1827                           
  1828                           ;dc_motor.c: 123:     mR->direction=1;
  1829  00125E  EE20 F001          	lfsr	2,1
  1830  001262  5022               	movf	turnRight@mR^0,w,c
  1831  001264  26D9               	addwf	fsr2l,f,c
  1832  001266  5023               	movf	(turnRight@mR+1)^0,w,c
  1833  001268  22DA               	addwfc	fsr2h,f,c
  1834  00126A  0E01               	movlw	1
  1835  00126C  6EDF               	movwf	indf2,c
  1836                           
  1837                           ;dc_motor.c: 124:     while (mL->power <25){
  1838  00126E  EF58  F009         	goto	l2196
  1839  001272                     l2188:
  1840                           
  1841                           ;dc_motor.c: 125:         mL->power += 5;
  1842  001272  C020  FFD9         	movff	turnRight@mL,fsr2l
  1843  001276  C021  FFDA         	movff	turnRight@mL+1,fsr2h
  1844  00127A  0E05               	movlw	5
  1845  00127C  26DF               	addwf	indf2,f,c
  1846                           
  1847                           ;dc_motor.c: 126:         mR->power = 0;
  1848  00127E  C022  FFD9         	movff	turnRight@mR,fsr2l
  1849  001282  C023  FFDA         	movff	turnRight@mR+1,fsr2h
  1850  001286  0E00               	movlw	0
  1851  001288  6EDF               	movwf	indf2,c
  1852  00128A                     
  1853                           ;dc_motor.c: 127:         setMotorPWM(mL);
  1854  00128A  C020  F00F         	movff	turnRight@mL,setMotorPWM@m
  1855  00128E  C021  F010         	movff	turnRight@mL+1,setMotorPWM@m+1
  1856  001292  EC3D  F008         	call	_setMotorPWM	;wreg free
  1857  001296                     
  1858                           ;dc_motor.c: 128:         setMotorPWM(mR);
  1859  001296  C022  F00F         	movff	turnRight@mR,setMotorPWM@m
  1860  00129A  C023  F010         	movff	turnRight@mR+1,setMotorPWM@m+1
  1861  00129E  EC3D  F008         	call	_setMotorPWM	;wreg free
  1862  0012A2                     
  1863                           ;dc_motor.c: 129:         _delay((unsigned long)((10)*(64000000/4000.0)));
  1864  0012A2  0ED0               	movlw	208
  1865  0012A4  6E25               	movwf	??_turnRight^0,c
  1866  0012A6  0ECA               	movlw	202
  1867  0012A8                     u1277:
  1868  0012A8  2EE8               	decfsz	wreg,f,c
  1869  0012AA  D7FE               	bra	u1277
  1870  0012AC  2E25               	decfsz	??_turnRight^0,f,c
  1871  0012AE  D7FC               	bra	u1277
  1872  0012B0                     l2196:
  1873                           
  1874                           ;dc_motor.c: 124:     while (mL->power <25){
  1875  0012B0  C020  FFD9         	movff	turnRight@mL,fsr2l
  1876  0012B4  C021  FFDA         	movff	turnRight@mL+1,fsr2h
  1877  0012B8  0E18               	movlw	24
  1878  0012BA  64DF               	cpfsgt	indf2,c
  1879  0012BC  EF62  F009         	goto	u1021
  1880  0012C0  EF64  F009         	goto	u1020
  1881  0012C4                     u1021:
  1882  0012C4  EF39  F009         	goto	l2188
  1883  0012C8                     u1020:
  1884  0012C8                     
  1885                           ;dc_motor.c: 131:     unsigned int delay = angle_right * SENSITIVITY;
  1886  0012C8  5024               	movf	turnRight@angle_right^0,w,c
  1887  0012CA  025F               	mulwf	_SENSITIVITY^0,c
  1888  0012CC  CFF3 F02C          	movff	prodl,turnRight@delay
  1889  0012D0  CFF4 F02D          	movff	prodh,turnRight@delay+1
  1890  0012D4                     
  1891                           ;dc_motor.c: 132:     unsigned int delay_180 = delay + CALIBRATION_180;
  1892  0012D4  0E28               	movlw	40
  1893  0012D6  242C               	addwf	turnRight@delay^0,w,c
  1894  0012D8  6E26               	movwf	turnRight@delay_180^0,c
  1895  0012DA  0E00               	movlw	0
  1896  0012DC  202D               	addwfc	(turnRight@delay+1)^0,w,c
  1897  0012DE  6E27               	movwf	(turnRight@delay_180+1)^0,c
  1898  0012E0                     
  1899                           ;dc_motor.c: 133:     if (angle_right == 180){
  1900  0012E0  0EB4               	movlw	180
  1901  0012E2  1824               	xorwf	turnRight@angle_right^0,w,c
  1902  0012E4  A4D8               	btfss	status,2,c
  1903  0012E6  EF77  F009         	goto	u1031
  1904  0012EA  EF79  F009         	goto	u1030
  1905  0012EE                     u1031:
  1906  0012EE  EF96  F009         	goto	l2210
  1907  0012F2                     u1030:
  1908  0012F2                     
  1909                           ;dc_motor.c: 134:         for(unsigned int i = 0; i <delay_180; i++){_delay((unsigned lo
      +                          ng)((1)*(64000000/4000.0)));}
  1910  0012F2  0E00               	movlw	0
  1911  0012F4  6E29               	movwf	(turnRight@i+1)^0,c
  1912  0012F6  0E00               	movlw	0
  1913  0012F8  6E28               	movwf	turnRight@i^0,c
  1914  0012FA  EF89  F009         	goto	l300
  1915  0012FE                     l2206:
  1916  0012FE  0E15               	movlw	21
  1917  001300  6E25               	movwf	??_turnRight^0,c
  1918  001302  0EC6               	movlw	198
  1919  001304                     u1287:
  1920  001304  2EE8               	decfsz	wreg,f,c
  1921  001306  D7FE               	bra	u1287
  1922  001308  2E25               	decfsz	??_turnRight^0,f,c
  1923  00130A  D7FC               	bra	u1287
  1924  00130C  D000               	nop2	
  1925  00130E  4A28               	infsnz	turnRight@i^0,f,c
  1926  001310  2A29               	incf	(turnRight@i+1)^0,f,c
  1927  001312                     l300:
  1928  001312  5026               	movf	turnRight@delay_180^0,w,c
  1929  001314  5C28               	subwf	turnRight@i^0,w,c
  1930  001316  5027               	movf	(turnRight@delay_180+1)^0,w,c
  1931  001318  5829               	subwfb	(turnRight@i+1)^0,w,c
  1932  00131A  A0D8               	btfss	status,0,c
  1933  00131C  EF92  F009         	goto	u1041
  1934  001320  EF94  F009         	goto	u1040
  1935  001324                     u1041:
  1936  001324  EF7F  F009         	goto	l2206
  1937  001328                     u1040:
  1938  001328  EFB1  F009         	goto	l2216
  1939  00132C                     l2210:
  1940                           
  1941                           ;dc_motor.c: 137:         for(unsigned int i = 0; i < delay; i++){_delay((unsigned long)
      +                          ((1)*(64000000/4000.0)));}
  1942  00132C  0E00               	movlw	0
  1943  00132E  6E2B               	movwf	(turnRight@i_1199+1)^0,c
  1944  001330  0E00               	movlw	0
  1945  001332  6E2A               	movwf	turnRight@i_1199^0,c
  1946  001334  EFA6  F009         	goto	l304
  1947  001338                     l2212:
  1948  001338  0E15               	movlw	21
  1949  00133A  6E25               	movwf	??_turnRight^0,c
  1950  00133C  0EC6               	movlw	198
  1951  00133E                     u1297:
  1952  00133E  2EE8               	decfsz	wreg,f,c
  1953  001340  D7FE               	bra	u1297
  1954  001342  2E25               	decfsz	??_turnRight^0,f,c
  1955  001344  D7FC               	bra	u1297
  1956  001346  D000               	nop2	
  1957  001348  4A2A               	infsnz	turnRight@i_1199^0,f,c
  1958  00134A  2A2B               	incf	(turnRight@i_1199+1)^0,f,c
  1959  00134C                     l304:
  1960  00134C  502C               	movf	turnRight@delay^0,w,c
  1961  00134E  5C2A               	subwf	turnRight@i_1199^0,w,c
  1962  001350  502D               	movf	(turnRight@delay+1)^0,w,c
  1963  001352  582B               	subwfb	(turnRight@i_1199+1)^0,w,c
  1964  001354  A0D8               	btfss	status,0,c
  1965  001356  EFAF  F009         	goto	u1051
  1966  00135A  EFB1  F009         	goto	u1050
  1967  00135E                     u1051:
  1968  00135E  EF9C  F009         	goto	l2212
  1969  001362                     u1050:
  1970  001362                     l2216:
  1971                           
  1972                           ;dc_motor.c: 139:     stop(mL,mR);
  1973  001362  C020  F01A         	movff	turnRight@mL,stop@mL
  1974  001366  C021  F01B         	movff	turnRight@mL+1,stop@mL+1
  1975  00136A  C022  F01C         	movff	turnRight@mR,stop@mR
  1976  00136E  C023  F01D         	movff	turnRight@mR+1,stop@mR+1
  1977  001372  EC7C  F00B         	call	_stop	;wreg free
  1978  001376  0012               	return		;funcret
  1979  001378                     __end_of_turnRight:
  1980                           	callstack 0
  1981                           
  1982 ;; *************** function _short_reverse *****************
  1983 ;; Defined at:
  1984 ;;		line 177 in file "dc_motor.c"
  1985 ;; Parameters:    Size  Location     Type
  1986 ;;  mL              2   37[COMRAM] PTR struct DC_motor
  1987 ;;		 -> main@motorL(10), 
  1988 ;;  mR              2   39[COMRAM] PTR struct DC_motor
  1989 ;;		 -> main@motorR(10), 
  1990 ;; Auto vars:     Size  Location     Type
  1991 ;;		None
  1992 ;; Return value:  Size  Location     Type
  1993 ;;                  1    wreg      void 
  1994 ;; Registers used:
  1995 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1996 ;; Tracked objects:
  1997 ;;		On entry : 0/0
  1998 ;;		On exit  : 0/0
  1999 ;;		Unchanged: 0/0
  2000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2001 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2002 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2003 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2004 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2005 ;;Total ram usage:        6 bytes
  2006 ;; Hardware stack levels used: 1
  2007 ;; Hardware stack levels required when called: 4
  2008 ;; This function calls:
  2009 ;;		_fullSpeedBack
  2010 ;;		_stop
  2011 ;; This function is called by:
  2012 ;;		_action
  2013 ;; This function uses a non-reentrant model
  2014 ;;
  2015                           
  2016                           	psect	text14
  2017  0018D8                     __ptext14:
  2018                           	callstack 0
  2019  0018D8                     _short_reverse:
  2020                           	callstack 25
  2021  0018D8                     
  2022                           ;dc_motor.c: 177: void short_reverse(struct DC_motor *mL, struct DC_motor *mR);dc_motor.
      +                          c: 178: { fullSpeedBack(mL, mR);
  2023  0018D8  C026  F020         	movff	short_reverse@mL,fullSpeedBack@mL
  2024  0018DC  C027  F021         	movff	short_reverse@mL+1,fullSpeedBack@mL+1
  2025  0018E0  C028  F022         	movff	short_reverse@mR,fullSpeedBack@mR
  2026  0018E4  C029  F023         	movff	short_reverse@mR+1,fullSpeedBack@mR+1
  2027  0018E8  EC1C  F00B         	call	_fullSpeedBack	;wreg free
  2028  0018EC                     
  2029                           ;dc_motor.c: 179:     _delay((unsigned long)((500)*(64000000/4000.0)));
  2030  0018EC  0E29               	movlw	41
  2031  0018EE  6E2B               	movwf	(??_short_reverse+1)^0,c
  2032  0018F0  0E96               	movlw	150
  2033  0018F2  6E2A               	movwf	??_short_reverse^0,c
  2034  0018F4  0E7F               	movlw	127
  2035  0018F6                     u1307:
  2036  0018F6  2EE8               	decfsz	wreg,f,c
  2037  0018F8  D7FE               	bra	u1307
  2038  0018FA  2E2A               	decfsz	??_short_reverse^0,f,c
  2039  0018FC  D7FC               	bra	u1307
  2040  0018FE  2E2B               	decfsz	(??_short_reverse+1)^0,f,c
  2041  001900  D7FA               	bra	u1307
  2042  001902  F000               	nop	
  2043  001904                     
  2044                           ;dc_motor.c: 180:     stop(mL,mR);
  2045  001904  C026  F01A         	movff	short_reverse@mL,stop@mL
  2046  001908  C027  F01B         	movff	short_reverse@mL+1,stop@mL+1
  2047  00190C  C028  F01C         	movff	short_reverse@mR,stop@mR
  2048  001910  C029  F01D         	movff	short_reverse@mR+1,stop@mR+1
  2049  001914  EC7C  F00B         	call	_stop	;wreg free
  2050  001918  0012               	return		;funcret
  2051  00191A                     __end_of_short_reverse:
  2052                           	callstack 0
  2053                           
  2054 ;; *************** function _reverse_square *****************
  2055 ;; Defined at:
  2056 ;;		line 183 in file "dc_motor.c"
  2057 ;; Parameters:    Size  Location     Type
  2058 ;;  mL              2   37[COMRAM] PTR struct DC_motor
  2059 ;;		 -> main@motorL(10), 
  2060 ;;  mR              2   39[COMRAM] PTR struct DC_motor
  2061 ;;		 -> main@motorR(10), 
  2062 ;; Auto vars:     Size  Location     Type
  2063 ;;		None
  2064 ;; Return value:  Size  Location     Type
  2065 ;;                  1    wreg      void 
  2066 ;; Registers used:
  2067 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2068 ;; Tracked objects:
  2069 ;;		On entry : 0/0
  2070 ;;		On exit  : 0/0
  2071 ;;		Unchanged: 0/0
  2072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2073 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2074 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2075 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2076 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2077 ;;Total ram usage:        6 bytes
  2078 ;; Hardware stack levels used: 1
  2079 ;; Hardware stack levels required when called: 4
  2080 ;; This function calls:
  2081 ;;		_fullSpeedBack
  2082 ;;		_stop
  2083 ;; This function is called by:
  2084 ;;		_action
  2085 ;; This function uses a non-reentrant model
  2086 ;;
  2087                           
  2088                           	psect	text15
  2089  00191A                     __ptext15:
  2090                           	callstack 0
  2091  00191A                     _reverse_square:
  2092                           	callstack 25
  2093  00191A                     
  2094                           ;dc_motor.c: 183: void reverse_square(struct DC_motor *mL, struct DC_motor *mR);dc_motor
      +                          .c: 184: { fullSpeedBack(mL, mR);
  2095  00191A  C026  F020         	movff	reverse_square@mL,fullSpeedBack@mL
  2096  00191E  C027  F021         	movff	reverse_square@mL+1,fullSpeedBack@mL+1
  2097  001922  C028  F022         	movff	reverse_square@mR,fullSpeedBack@mR
  2098  001926  C029  F023         	movff	reverse_square@mR+1,fullSpeedBack@mR+1
  2099  00192A  EC1C  F00B         	call	_fullSpeedBack	;wreg free
  2100  00192E                     
  2101                           ;dc_motor.c: 185:     _delay((unsigned long)((1000)*(64000000/4000.0)));
  2102  00192E  0E52               	movlw	82
  2103  001930  6E2B               	movwf	(??_reverse_square+1)^0,c
  2104  001932  0E2B               	movlw	43
  2105  001934  6E2A               	movwf	??_reverse_square^0,c
  2106  001936  0E00               	movlw	0
  2107  001938                     u1317:
  2108  001938  2EE8               	decfsz	wreg,f,c
  2109  00193A  D7FE               	bra	u1317
  2110  00193C  2E2A               	decfsz	??_reverse_square^0,f,c
  2111  00193E  D7FC               	bra	u1317
  2112  001940  2E2B               	decfsz	(??_reverse_square+1)^0,f,c
  2113  001942  D7FA               	bra	u1317
  2114  001944  D000               	nop2	
  2115  001946                     
  2116                           ;dc_motor.c: 186:     stop(mL,mR);
  2117  001946  C026  F01A         	movff	reverse_square@mL,stop@mL
  2118  00194A  C027  F01B         	movff	reverse_square@mL+1,stop@mL+1
  2119  00194E  C028  F01C         	movff	reverse_square@mR,stop@mR
  2120  001952  C029  F01D         	movff	reverse_square@mR+1,stop@mR+1
  2121  001956  EC7C  F00B         	call	_stop	;wreg free
  2122  00195A  0012               	return		;funcret
  2123  00195C                     __end_of_reverse_square:
  2124                           	callstack 0
  2125                           
  2126 ;; *************** function _fullSpeedBack *****************
  2127 ;; Defined at:
  2128 ;;		line 162 in file "dc_motor.c"
  2129 ;; Parameters:    Size  Location     Type
  2130 ;;  mL              2   31[COMRAM] PTR struct DC_motor
  2131 ;;		 -> main@motorL(10), 
  2132 ;;  mR              2   33[COMRAM] PTR struct DC_motor
  2133 ;;		 -> main@motorR(10), 
  2134 ;; Auto vars:     Size  Location     Type
  2135 ;;		None
  2136 ;; Return value:  Size  Location     Type
  2137 ;;                  1    wreg      void 
  2138 ;; Registers used:
  2139 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2140 ;; Tracked objects:
  2141 ;;		On entry : 0/0
  2142 ;;		On exit  : 0/0
  2143 ;;		Unchanged: 0/0
  2144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2145 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2146 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2147 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2148 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2149 ;;Total ram usage:        6 bytes
  2150 ;; Hardware stack levels used: 1
  2151 ;; Hardware stack levels required when called: 3
  2152 ;; This function calls:
  2153 ;;		_setMotorPWM
  2154 ;;		_stop
  2155 ;; This function is called by:
  2156 ;;		_short_reverse
  2157 ;;		_reverse_square
  2158 ;; This function uses a non-reentrant model
  2159 ;;
  2160                           
  2161                           	psect	text16
  2162  001638                     __ptext16:
  2163                           	callstack 0
  2164  001638                     _fullSpeedBack:
  2165                           	callstack 25
  2166  001638                     
  2167                           ;dc_motor.c: 162: void fullSpeedBack(struct DC_motor *mL, struct DC_motor *mR);dc_motor.
      +                          c: 163: {;dc_motor.c: 164:     mL->direction=0;
  2168  001638  EE20 F001          	lfsr	2,1
  2169  00163C  5020               	movf	fullSpeedBack@mL^0,w,c
  2170  00163E  26D9               	addwf	fsr2l,f,c
  2171  001640  5021               	movf	(fullSpeedBack@mL+1)^0,w,c
  2172  001642  22DA               	addwfc	fsr2h,f,c
  2173  001644  0E00               	movlw	0
  2174  001646  6EDF               	movwf	indf2,c
  2175                           
  2176                           ;dc_motor.c: 165:     mR->direction=0;
  2177  001648  EE20 F001          	lfsr	2,1
  2178  00164C  5022               	movf	fullSpeedBack@mR^0,w,c
  2179  00164E  26D9               	addwf	fsr2l,f,c
  2180  001650  5023               	movf	(fullSpeedBack@mR+1)^0,w,c
  2181  001652  22DA               	addwfc	fsr2h,f,c
  2182  001654  0E00               	movlw	0
  2183  001656  6EDF               	movwf	indf2,c
  2184                           
  2185                           ;dc_motor.c: 166:     while (mL->power<50 && mR->power<50){
  2186  001658  EF4D  F00B         	goto	l2176
  2187  00165C                     l2168:
  2188                           
  2189                           ;dc_motor.c: 167:         mL->power += 10;
  2190  00165C  C020  FFD9         	movff	fullSpeedBack@mL,fsr2l
  2191  001660  C021  FFDA         	movff	fullSpeedBack@mL+1,fsr2h
  2192  001664  0E0A               	movlw	10
  2193  001666  26DF               	addwf	indf2,f,c
  2194                           
  2195                           ;dc_motor.c: 168:         mR->power += 10;
  2196  001668  C022  FFD9         	movff	fullSpeedBack@mR,fsr2l
  2197  00166C  C023  FFDA         	movff	fullSpeedBack@mR+1,fsr2h
  2198  001670  0E0A               	movlw	10
  2199  001672  26DF               	addwf	indf2,f,c
  2200  001674                     
  2201                           ;dc_motor.c: 169:         setMotorPWM(mL);
  2202  001674  C020  F00F         	movff	fullSpeedBack@mL,setMotorPWM@m
  2203  001678  C021  F010         	movff	fullSpeedBack@mL+1,setMotorPWM@m+1
  2204  00167C  EC3D  F008         	call	_setMotorPWM	;wreg free
  2205  001680                     
  2206                           ;dc_motor.c: 170:         setMotorPWM(mR);
  2207  001680  C022  F00F         	movff	fullSpeedBack@mR,setMotorPWM@m
  2208  001684  C023  F010         	movff	fullSpeedBack@mR+1,setMotorPWM@m+1
  2209  001688  EC3D  F008         	call	_setMotorPWM	;wreg free
  2210  00168C                     
  2211                           ;dc_motor.c: 171:         _delay((unsigned long)((10)*(64000000/4000.0)));
  2212  00168C  0ED0               	movlw	208
  2213  00168E  6E24               	movwf	??_fullSpeedBack^0,c
  2214  001690  0ECA               	movlw	202
  2215  001692                     u1327:
  2216  001692  2EE8               	decfsz	wreg,f,c
  2217  001694  D7FE               	bra	u1327
  2218  001696  2E24               	decfsz	??_fullSpeedBack^0,f,c
  2219  001698  D7FC               	bra	u1327
  2220  00169A                     l2176:
  2221                           
  2222                           ;dc_motor.c: 166:     while (mL->power<50 && mR->power<50){
  2223  00169A  C020  FFD9         	movff	fullSpeedBack@mL,fsr2l
  2224  00169E  C021  FFDA         	movff	fullSpeedBack@mL+1,fsr2h
  2225  0016A2  0E32               	movlw	50
  2226  0016A4  60DF               	cpfslt	indf2,c
  2227  0016A6  EF57  F00B         	goto	u1001
  2228  0016AA  EF59  F00B         	goto	u1000
  2229  0016AE                     u1001:
  2230  0016AE  EF65  F00B         	goto	l2180
  2231  0016B2                     u1000:
  2232  0016B2  C022  FFD9         	movff	fullSpeedBack@mR,fsr2l
  2233  0016B6  C023  FFDA         	movff	fullSpeedBack@mR+1,fsr2h
  2234  0016BA  0E31               	movlw	49
  2235  0016BC  64DF               	cpfsgt	indf2,c
  2236  0016BE  EF63  F00B         	goto	u1011
  2237  0016C2  EF65  F00B         	goto	u1010
  2238  0016C6                     u1011:
  2239  0016C6  EF2E  F00B         	goto	l2168
  2240  0016CA                     u1010:
  2241  0016CA                     l2180:
  2242                           
  2243                           ;dc_motor.c: 173:     _delay((unsigned long)((500)*(64000000/4000.0)));
  2244  0016CA  0E29               	movlw	41
  2245  0016CC  6E25               	movwf	(??_fullSpeedBack+1)^0,c
  2246  0016CE  0E96               	movlw	150
  2247  0016D0  6E24               	movwf	??_fullSpeedBack^0,c
  2248  0016D2  0E7F               	movlw	127
  2249  0016D4                     u1337:
  2250  0016D4  2EE8               	decfsz	wreg,f,c
  2251  0016D6  D7FE               	bra	u1337
  2252  0016D8  2E24               	decfsz	??_fullSpeedBack^0,f,c
  2253  0016DA  D7FC               	bra	u1337
  2254  0016DC  2E25               	decfsz	(??_fullSpeedBack+1)^0,f,c
  2255  0016DE  D7FA               	bra	u1337
  2256  0016E0  F000               	nop	
  2257  0016E2                     
  2258                           ;dc_motor.c: 174:     stop(mL,mR);
  2259  0016E2  C020  F01A         	movff	fullSpeedBack@mL,stop@mL
  2260  0016E6  C021  F01B         	movff	fullSpeedBack@mL+1,stop@mL+1
  2261  0016EA  C022  F01C         	movff	fullSpeedBack@mR,stop@mR
  2262  0016EE  C023  F01D         	movff	fullSpeedBack@mR+1,stop@mR+1
  2263  0016F2  EC7C  F00B         	call	_stop	;wreg free
  2264  0016F6  0012               	return		;funcret
  2265  0016F8                     __end_of_fullSpeedBack:
  2266                           	callstack 0
  2267                           
  2268 ;; *************** function _goback *****************
  2269 ;; Defined at:
  2270 ;;		line 75 in file "movement.c"
  2271 ;; Parameters:    Size  Location     Type
  2272 ;;  mL              2   45[COMRAM] PTR struct DC_motor
  2273 ;;		 -> main@motorL(10), 
  2274 ;;  mR              2   47[COMRAM] PTR struct DC_motor
  2275 ;;		 -> main@motorR(10), 
  2276 ;; Auto vars:     Size  Location     Type
  2277 ;;		None
  2278 ;; Return value:  Size  Location     Type
  2279 ;;                  1    wreg      void 
  2280 ;; Registers used:
  2281 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2282 ;; Tracked objects:
  2283 ;;		On entry : 0/0
  2284 ;;		On exit  : 0/0
  2285 ;;		Unchanged: 0/0
  2286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2287 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2288 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2289 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2290 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2291 ;;Total ram usage:        4 bytes
  2292 ;; Hardware stack levels used: 1
  2293 ;; Hardware stack levels required when called: 4
  2294 ;; This function calls:
  2295 ;;		_turnLeft
  2296 ;; This function is called by:
  2297 ;;		_action
  2298 ;; This function uses a non-reentrant model
  2299 ;;
  2300                           
  2301                           	psect	text17
  2302  001AA0                     __ptext17:
  2303                           	callstack 0
  2304  001AA0                     _goback:
  2305                           	callstack 25
  2306  001AA0                     
  2307                           ;movement.c: 75: void goback(struct DC_motor *mL, struct DC_motor *mR);movement.c: 76: {
      +                          ;movement.c: 77:     turnLeft(mL, mR, 180);
  2308  001AA0  C02E  F020         	movff	goback@mL,turnLeft@mL
  2309  001AA4  C02F  F021         	movff	goback@mL+1,turnLeft@mL+1
  2310  001AA8  C030  F022         	movff	goback@mR,turnLeft@mR
  2311  001AAC  C031  F023         	movff	goback@mR+1,turnLeft@mR+1
  2312  001AB0  0EB4               	movlw	180
  2313  001AB2  6E24               	movwf	turnLeft@angle_left^0,c
  2314  001AB4  ECBC  F009         	call	_turnLeft	;wreg free
  2315  001AB8  0012               	return		;funcret
  2316  001ABA                     __end_of_goback:
  2317                           	callstack 0
  2318                           
  2319 ;; *************** function _turnLeft *****************
  2320 ;; Defined at:
  2321 ;;		line 97 in file "dc_motor.c"
  2322 ;; Parameters:    Size  Location     Type
  2323 ;;  mL              2   31[COMRAM] PTR struct DC_motor
  2324 ;;		 -> main@motorL(10), 
  2325 ;;  mR              2   33[COMRAM] PTR struct DC_motor
  2326 ;;		 -> main@motorR(10), 
  2327 ;;  angle_left      1   35[COMRAM] unsigned char 
  2328 ;; Auto vars:     Size  Location     Type
  2329 ;;  i               2   41[COMRAM] unsigned int 
  2330 ;;  i               2   39[COMRAM] unsigned int 
  2331 ;;  delay           2   43[COMRAM] unsigned int 
  2332 ;;  delay_180       2   37[COMRAM] unsigned int 
  2333 ;; Return value:  Size  Location     Type
  2334 ;;                  1    wreg      void 
  2335 ;; Registers used:
  2336 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2337 ;; Tracked objects:
  2338 ;;		On entry : 0/0
  2339 ;;		On exit  : 0/0
  2340 ;;		Unchanged: 0/0
  2341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2342 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2343 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2344 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2345 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2346 ;;Total ram usage:       14 bytes
  2347 ;; Hardware stack levels used: 1
  2348 ;; Hardware stack levels required when called: 3
  2349 ;; This function calls:
  2350 ;;		_setMotorPWM
  2351 ;;		_stop
  2352 ;; This function is called by:
  2353 ;;		_action
  2354 ;;		_goback
  2355 ;;		_test_action
  2356 ;; This function uses a non-reentrant model
  2357 ;;
  2358                           
  2359                           	psect	text18
  2360  001378                     __ptext18:
  2361                           	callstack 0
  2362  001378                     _turnLeft:
  2363                           	callstack 26
  2364  001378                     
  2365                           ;dc_motor.c: 97: void turnLeft(struct DC_motor *mL, struct DC_motor *mR, unsigned char a
      +                          ngle_left);dc_motor.c: 98: {;dc_motor.c: 99:       mL->direction=1;
  2366  001378  EE20 F001          	lfsr	2,1
  2367  00137C  5020               	movf	turnLeft@mL^0,w,c
  2368  00137E  26D9               	addwf	fsr2l,f,c
  2369  001380  5021               	movf	(turnLeft@mL+1)^0,w,c
  2370  001382  22DA               	addwfc	fsr2h,f,c
  2371  001384  0E01               	movlw	1
  2372  001386  6EDF               	movwf	indf2,c
  2373                           
  2374                           ;dc_motor.c: 100:       mR->direction=1;
  2375  001388  EE20 F001          	lfsr	2,1
  2376  00138C  5022               	movf	turnLeft@mR^0,w,c
  2377  00138E  26D9               	addwf	fsr2l,f,c
  2378  001390  5023               	movf	(turnLeft@mR+1)^0,w,c
  2379  001392  22DA               	addwfc	fsr2h,f,c
  2380  001394  0E01               	movlw	1
  2381  001396  6EDF               	movwf	indf2,c
  2382                           
  2383                           ;dc_motor.c: 101:       while (mR->power <25){
  2384  001398  EFED  F009         	goto	l2144
  2385  00139C                     l2136:
  2386                           
  2387                           ;dc_motor.c: 102:         mR->power += 5;
  2388  00139C  C022  FFD9         	movff	turnLeft@mR,fsr2l
  2389  0013A0  C023  FFDA         	movff	turnLeft@mR+1,fsr2h
  2390  0013A4  0E05               	movlw	5
  2391  0013A6  26DF               	addwf	indf2,f,c
  2392                           
  2393                           ;dc_motor.c: 103:         mL->power = 0;
  2394  0013A8  C020  FFD9         	movff	turnLeft@mL,fsr2l
  2395  0013AC  C021  FFDA         	movff	turnLeft@mL+1,fsr2h
  2396  0013B0  0E00               	movlw	0
  2397  0013B2  6EDF               	movwf	indf2,c
  2398  0013B4                     
  2399                           ;dc_motor.c: 104:         setMotorPWM(mL);
  2400  0013B4  C020  F00F         	movff	turnLeft@mL,setMotorPWM@m
  2401  0013B8  C021  F010         	movff	turnLeft@mL+1,setMotorPWM@m+1
  2402  0013BC  EC3D  F008         	call	_setMotorPWM	;wreg free
  2403  0013C0                     
  2404                           ;dc_motor.c: 105:         setMotorPWM(mR);
  2405  0013C0  C022  F00F         	movff	turnLeft@mR,setMotorPWM@m
  2406  0013C4  C023  F010         	movff	turnLeft@mR+1,setMotorPWM@m+1
  2407  0013C8  EC3D  F008         	call	_setMotorPWM	;wreg free
  2408  0013CC                     
  2409                           ;dc_motor.c: 106:         _delay((unsigned long)((10)*(64000000/4000.0)));
  2410  0013CC  0ED0               	movlw	208
  2411  0013CE  6E25               	movwf	??_turnLeft^0,c
  2412  0013D0  0ECA               	movlw	202
  2413  0013D2                     u1347:
  2414  0013D2  2EE8               	decfsz	wreg,f,c
  2415  0013D4  D7FE               	bra	u1347
  2416  0013D6  2E25               	decfsz	??_turnLeft^0,f,c
  2417  0013D8  D7FC               	bra	u1347
  2418  0013DA                     l2144:
  2419                           
  2420                           ;dc_motor.c: 101:       while (mR->power <25){
  2421  0013DA  C022  FFD9         	movff	turnLeft@mR,fsr2l
  2422  0013DE  C023  FFDA         	movff	turnLeft@mR+1,fsr2h
  2423  0013E2  0E18               	movlw	24
  2424  0013E4  64DF               	cpfsgt	indf2,c
  2425  0013E6  EFF7  F009         	goto	u961
  2426  0013EA  EFF9  F009         	goto	u960
  2427  0013EE                     u961:
  2428  0013EE  EFCE  F009         	goto	l2136
  2429  0013F2                     u960:
  2430  0013F2                     
  2431                           ;dc_motor.c: 108:     unsigned int delay = angle_left * SENSITIVITY;
  2432  0013F2  5024               	movf	turnLeft@angle_left^0,w,c
  2433  0013F4  025F               	mulwf	_SENSITIVITY^0,c
  2434  0013F6  CFF3 F02C          	movff	prodl,turnLeft@delay
  2435  0013FA  CFF4 F02D          	movff	prodh,turnLeft@delay+1
  2436  0013FE                     
  2437                           ;dc_motor.c: 109:     unsigned int delay_180 = delay + CALIBRATION_180;
  2438  0013FE  0E28               	movlw	40
  2439  001400  242C               	addwf	turnLeft@delay^0,w,c
  2440  001402  6E26               	movwf	turnLeft@delay_180^0,c
  2441  001404  0E00               	movlw	0
  2442  001406  202D               	addwfc	(turnLeft@delay+1)^0,w,c
  2443  001408  6E27               	movwf	(turnLeft@delay_180+1)^0,c
  2444  00140A                     
  2445                           ;dc_motor.c: 110:     if (angle_left == 180){
  2446  00140A  0EB4               	movlw	180
  2447  00140C  1824               	xorwf	turnLeft@angle_left^0,w,c
  2448  00140E  A4D8               	btfss	status,2,c
  2449  001410  EF0C  F00A         	goto	u971
  2450  001414  EF0E  F00A         	goto	u970
  2451  001418                     u971:
  2452  001418  EF2B  F00A         	goto	l2158
  2453  00141C                     u970:
  2454  00141C                     
  2455                           ;dc_motor.c: 111:         for(unsigned int i = 0; i <delay_180; i++){_delay((unsigned lo
      +                          ng)((1)*(64000000/4000.0)));}
  2456  00141C  0E00               	movlw	0
  2457  00141E  6E29               	movwf	(turnLeft@i+1)^0,c
  2458  001420  0E00               	movlw	0
  2459  001422  6E28               	movwf	turnLeft@i^0,c
  2460  001424  EF1E  F00A         	goto	l286
  2461  001428                     l2154:
  2462  001428  0E15               	movlw	21
  2463  00142A  6E25               	movwf	??_turnLeft^0,c
  2464  00142C  0EC6               	movlw	198
  2465  00142E                     u1357:
  2466  00142E  2EE8               	decfsz	wreg,f,c
  2467  001430  D7FE               	bra	u1357
  2468  001432  2E25               	decfsz	??_turnLeft^0,f,c
  2469  001434  D7FC               	bra	u1357
  2470  001436  D000               	nop2	
  2471  001438  4A28               	infsnz	turnLeft@i^0,f,c
  2472  00143A  2A29               	incf	(turnLeft@i+1)^0,f,c
  2473  00143C                     l286:
  2474  00143C  5026               	movf	turnLeft@delay_180^0,w,c
  2475  00143E  5C28               	subwf	turnLeft@i^0,w,c
  2476  001440  5027               	movf	(turnLeft@delay_180+1)^0,w,c
  2477  001442  5829               	subwfb	(turnLeft@i+1)^0,w,c
  2478  001444  A0D8               	btfss	status,0,c
  2479  001446  EF27  F00A         	goto	u981
  2480  00144A  EF29  F00A         	goto	u980
  2481  00144E                     u981:
  2482  00144E  EF14  F00A         	goto	l2154
  2483  001452                     u980:
  2484  001452  EF46  F00A         	goto	l2164
  2485  001456                     l2158:
  2486                           
  2487                           ;dc_motor.c: 114:         for(unsigned int i = 0; i < delay; i++){_delay((unsigned long)
      +                          ((1)*(64000000/4000.0)));}
  2488  001456  0E00               	movlw	0
  2489  001458  6E2B               	movwf	(turnLeft@i_1176+1)^0,c
  2490  00145A  0E00               	movlw	0
  2491  00145C  6E2A               	movwf	turnLeft@i_1176^0,c
  2492  00145E  EF3B  F00A         	goto	l290
  2493  001462                     l2160:
  2494  001462  0E15               	movlw	21
  2495  001464  6E25               	movwf	??_turnLeft^0,c
  2496  001466  0EC6               	movlw	198
  2497  001468                     u1367:
  2498  001468  2EE8               	decfsz	wreg,f,c
  2499  00146A  D7FE               	bra	u1367
  2500  00146C  2E25               	decfsz	??_turnLeft^0,f,c
  2501  00146E  D7FC               	bra	u1367
  2502  001470  D000               	nop2	
  2503  001472  4A2A               	infsnz	turnLeft@i_1176^0,f,c
  2504  001474  2A2B               	incf	(turnLeft@i_1176+1)^0,f,c
  2505  001476                     l290:
  2506  001476  502C               	movf	turnLeft@delay^0,w,c
  2507  001478  5C2A               	subwf	turnLeft@i_1176^0,w,c
  2508  00147A  502D               	movf	(turnLeft@delay+1)^0,w,c
  2509  00147C  582B               	subwfb	(turnLeft@i_1176+1)^0,w,c
  2510  00147E  A0D8               	btfss	status,0,c
  2511  001480  EF44  F00A         	goto	u991
  2512  001484  EF46  F00A         	goto	u990
  2513  001488                     u991:
  2514  001488  EF31  F00A         	goto	l2160
  2515  00148C                     u990:
  2516  00148C                     l2164:
  2517                           
  2518                           ;dc_motor.c: 116:     stop(mL,mR);
  2519  00148C  C020  F01A         	movff	turnLeft@mL,stop@mL
  2520  001490  C021  F01B         	movff	turnLeft@mL+1,stop@mL+1
  2521  001494  C022  F01C         	movff	turnLeft@mR,stop@mR
  2522  001498  C023  F01D         	movff	turnLeft@mR+1,stop@mR+1
  2523  00149C  EC7C  F00B         	call	_stop	;wreg free
  2524  0014A0  0012               	return		;funcret
  2525  0014A2                     __end_of_turnLeft:
  2526                           	callstack 0
  2527                           
  2528 ;; *************** function _stop *****************
  2529 ;; Defined at:
  2530 ;;		line 84 in file "dc_motor.c"
  2531 ;; Parameters:    Size  Location     Type
  2532 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  2533 ;;		 -> main@motorL(10), 
  2534 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  2535 ;;		 -> main@motorR(10), 
  2536 ;; Auto vars:     Size  Location     Type
  2537 ;;		None
  2538 ;; Return value:  Size  Location     Type
  2539 ;;                  1    wreg      void 
  2540 ;; Registers used:
  2541 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2542 ;; Tracked objects:
  2543 ;;		On entry : 0/0
  2544 ;;		On exit  : 0/0
  2545 ;;		Unchanged: 0/0
  2546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2547 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2548 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2549 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2550 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2551 ;;Total ram usage:        6 bytes
  2552 ;; Hardware stack levels used: 1
  2553 ;; Hardware stack levels required when called: 2
  2554 ;; This function calls:
  2555 ;;		_setMotorPWM
  2556 ;; This function is called by:
  2557 ;;		_turnLeft
  2558 ;;		_turnRight
  2559 ;;		_fullSpeedBack
  2560 ;;		_short_reverse
  2561 ;;		_reverse_square
  2562 ;;		_action
  2563 ;;		_fullSpeedAhead_test
  2564 ;; This function uses a non-reentrant model
  2565 ;;
  2566                           
  2567                           	psect	text19
  2568  0016F8                     __ptext19:
  2569                           	callstack 0
  2570  0016F8                     _stop:
  2571                           	callstack 26
  2572  0016F8                     
  2573                           ;dc_motor.c: 84: void stop(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 85: {;d
      +                          c_motor.c: 86:     while (mL->power >0 || mR->power >0){
  2574  0016F8  EFB5  F00B         	goto	l2128
  2575  0016FC                     l2114:
  2576                           
  2577                           ;dc_motor.c: 87:         if (mL->power !=0){mL->power -= 5;}
  2578  0016FC  C01A  FFD9         	movff	stop@mL,fsr2l
  2579  001700  C01B  FFDA         	movff	stop@mL+1,fsr2h
  2580  001704  50DF               	movf	indf2,w,c
  2581  001706  B4D8               	btfsc	status,2,c
  2582  001708  EF88  F00B         	goto	u921
  2583  00170C  EF8A  F00B         	goto	u920
  2584  001710                     u921:
  2585  001710  EF90  F00B         	goto	l2118
  2586  001714                     u920:
  2587  001714  C01A  FFD9         	movff	stop@mL,fsr2l
  2588  001718  C01B  FFDA         	movff	stop@mL+1,fsr2h
  2589  00171C  0E05               	movlw	5
  2590  00171E  5EDF               	subwf	indf2,f,c
  2591  001720                     l2118:
  2592                           
  2593                           ;dc_motor.c: 88:         if (mR->power !=0){mR->power -= 5;}
  2594  001720  C01C  FFD9         	movff	stop@mR,fsr2l
  2595  001724  C01D  FFDA         	movff	stop@mR+1,fsr2h
  2596  001728  50DF               	movf	indf2,w,c
  2597  00172A  B4D8               	btfsc	status,2,c
  2598  00172C  EF9A  F00B         	goto	u931
  2599  001730  EF9C  F00B         	goto	u930
  2600  001734                     u931:
  2601  001734  EFA2  F00B         	goto	l2122
  2602  001738                     u930:
  2603  001738  C01C  FFD9         	movff	stop@mR,fsr2l
  2604  00173C  C01D  FFDA         	movff	stop@mR+1,fsr2h
  2605  001740  0E05               	movlw	5
  2606  001742  5EDF               	subwf	indf2,f,c
  2607  001744                     l2122:
  2608                           
  2609                           ;dc_motor.c: 89:         setMotorPWM(mL);
  2610  001744  C01A  F00F         	movff	stop@mL,setMotorPWM@m
  2611  001748  C01B  F010         	movff	stop@mL+1,setMotorPWM@m+1
  2612  00174C  EC3D  F008         	call	_setMotorPWM	;wreg free
  2613  001750                     
  2614                           ;dc_motor.c: 90:         setMotorPWM(mR);
  2615  001750  C01C  F00F         	movff	stop@mR,setMotorPWM@m
  2616  001754  C01D  F010         	movff	stop@mR+1,setMotorPWM@m+1
  2617  001758  EC3D  F008         	call	_setMotorPWM	;wreg free
  2618  00175C                     
  2619                           ;dc_motor.c: 91:         _delay((unsigned long)((10)*(64000000/4000.0)));
  2620  00175C  0ED0               	movlw	208
  2621  00175E  6E1E               	movwf	??_stop^0,c
  2622  001760  0ECA               	movlw	202
  2623  001762                     u1377:
  2624  001762  2EE8               	decfsz	wreg,f,c
  2625  001764  D7FE               	bra	u1377
  2626  001766  2E1E               	decfsz	??_stop^0,f,c
  2627  001768  D7FC               	bra	u1377
  2628  00176A                     l2128:
  2629                           
  2630                           ;dc_motor.c: 86:     while (mL->power >0 || mR->power >0){
  2631  00176A  C01A  FFD9         	movff	stop@mL,fsr2l
  2632  00176E  C01B  FFDA         	movff	stop@mL+1,fsr2h
  2633  001772  50DF               	movf	indf2,w,c
  2634  001774  A4D8               	btfss	status,2,c
  2635  001776  EFBF  F00B         	goto	u941
  2636  00177A  EFC1  F00B         	goto	u940
  2637  00177E                     u941:
  2638  00177E  EF7E  F00B         	goto	l2114
  2639  001782                     u940:
  2640  001782  C01C  FFD9         	movff	stop@mR,fsr2l
  2641  001786  C01D  FFDA         	movff	stop@mR+1,fsr2h
  2642  00178A  50DF               	movf	indf2,w,c
  2643  00178C  A4D8               	btfss	status,2,c
  2644  00178E  EFCB  F00B         	goto	u951
  2645  001792  EFCD  F00B         	goto	u950
  2646  001796                     u951:
  2647  001796  EF7E  F00B         	goto	l2114
  2648  00179A                     u950:
  2649  00179A                     
  2650                           ;dc_motor.c: 93:     _delay((unsigned long)((1000)*(64000000/4000.0)));
  2651  00179A  0E52               	movlw	82
  2652  00179C  6E1F               	movwf	(??_stop+1)^0,c
  2653  00179E  0E2B               	movlw	43
  2654  0017A0  6E1E               	movwf	??_stop^0,c
  2655  0017A2  0E00               	movlw	0
  2656  0017A4                     u1387:
  2657  0017A4  2EE8               	decfsz	wreg,f,c
  2658  0017A6  D7FE               	bra	u1387
  2659  0017A8  2E1E               	decfsz	??_stop^0,f,c
  2660  0017AA  D7FC               	bra	u1387
  2661  0017AC  2E1F               	decfsz	(??_stop+1)^0,f,c
  2662  0017AE  D7FA               	bra	u1387
  2663  0017B0  D000               	nop2	
  2664  0017B2  0012               	return		;funcret
  2665  0017B4                     __end_of_stop:
  2666                           	callstack 0
  2667                           
  2668 ;; *************** function _fullSpeedAhead *****************
  2669 ;; Defined at:
  2670 ;;		line 143 in file "dc_motor.c"
  2671 ;; Parameters:    Size  Location     Type
  2672 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  2673 ;;		 -> main@motorL(10), 
  2674 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  2675 ;;		 -> main@motorR(10), 
  2676 ;; Auto vars:     Size  Location     Type
  2677 ;;		None
  2678 ;; Return value:  Size  Location     Type
  2679 ;;                  1    wreg      void 
  2680 ;; Registers used:
  2681 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2682 ;; Tracked objects:
  2683 ;;		On entry : 0/0
  2684 ;;		On exit  : 0/0
  2685 ;;		Unchanged: 0/0
  2686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2687 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2688 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2689 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2690 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2691 ;;Total ram usage:        5 bytes
  2692 ;; Hardware stack levels used: 1
  2693 ;; Hardware stack levels required when called: 2
  2694 ;; This function calls:
  2695 ;;		_setMotorPWM
  2696 ;; This function is called by:
  2697 ;;		_action
  2698 ;;		_fullSpeedAhead_test
  2699 ;; This function uses a non-reentrant model
  2700 ;;
  2701                           
  2702                           	psect	text20
  2703  0017B4                     __ptext20:
  2704                           	callstack 0
  2705  0017B4                     _fullSpeedAhead:
  2706                           	callstack 27
  2707  0017B4                     
  2708                           ;dc_motor.c: 143: void fullSpeedAhead(struct DC_motor *mL, struct DC_motor *mR);dc_motor
      +                          .c: 144: {;dc_motor.c: 145:     mL->direction=1;
  2709  0017B4  EE20 F001          	lfsr	2,1
  2710  0017B8  501A               	movf	fullSpeedAhead@mL^0,w,c
  2711  0017BA  26D9               	addwf	fsr2l,f,c
  2712  0017BC  501B               	movf	(fullSpeedAhead@mL+1)^0,w,c
  2713  0017BE  22DA               	addwfc	fsr2h,f,c
  2714  0017C0  0E01               	movlw	1
  2715  0017C2  6EDF               	movwf	indf2,c
  2716                           
  2717                           ;dc_motor.c: 146:     mR->direction=1;
  2718  0017C4  EE20 F001          	lfsr	2,1
  2719  0017C8  501C               	movf	fullSpeedAhead@mR^0,w,c
  2720  0017CA  26D9               	addwf	fsr2l,f,c
  2721  0017CC  501D               	movf	(fullSpeedAhead@mR+1)^0,w,c
  2722  0017CE  22DA               	addwfc	fsr2h,f,c
  2723  0017D0  0E01               	movlw	1
  2724  0017D2  6EDF               	movwf	indf2,c
  2725                           
  2726                           ;dc_motor.c: 147:     while (mL->power<40 && mR->power<40){
  2727  0017D4  EF0B  F00C         	goto	l2228
  2728  0017D8                     l2220:
  2729                           
  2730                           ;dc_motor.c: 148:         mL->power += 10;
  2731  0017D8  C01A  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  2732  0017DC  C01B  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  2733  0017E0  0E0A               	movlw	10
  2734  0017E2  26DF               	addwf	indf2,f,c
  2735                           
  2736                           ;dc_motor.c: 149:         mR->power += 10;
  2737  0017E4  C01C  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  2738  0017E8  C01D  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  2739  0017EC  0E0A               	movlw	10
  2740  0017EE  26DF               	addwf	indf2,f,c
  2741  0017F0                     
  2742                           ;dc_motor.c: 150:         setMotorPWM(mL);
  2743  0017F0  C01A  F00F         	movff	fullSpeedAhead@mL,setMotorPWM@m
  2744  0017F4  C01B  F010         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  2745  0017F8  EC3D  F008         	call	_setMotorPWM	;wreg free
  2746  0017FC                     
  2747                           ;dc_motor.c: 151:         setMotorPWM(mR);
  2748  0017FC  C01C  F00F         	movff	fullSpeedAhead@mR,setMotorPWM@m
  2749  001800  C01D  F010         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  2750  001804  EC3D  F008         	call	_setMotorPWM	;wreg free
  2751  001808                     
  2752                           ;dc_motor.c: 152:         _delay((unsigned long)((10)*(64000000/4000.0)));
  2753  001808  0ED0               	movlw	208
  2754  00180A  6E1E               	movwf	??_fullSpeedAhead^0,c
  2755  00180C  0ECA               	movlw	202
  2756  00180E                     u1397:
  2757  00180E  2EE8               	decfsz	wreg,f,c
  2758  001810  D7FE               	bra	u1397
  2759  001812  2E1E               	decfsz	??_fullSpeedAhead^0,f,c
  2760  001814  D7FC               	bra	u1397
  2761  001816                     l2228:
  2762                           
  2763                           ;dc_motor.c: 147:     while (mL->power<40 && mR->power<40){
  2764  001816  C01A  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  2765  00181A  C01B  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  2766  00181E  0E28               	movlw	40
  2767  001820  60DF               	cpfslt	indf2,c
  2768  001822  EF15  F00C         	goto	u1061
  2769  001826  EF17  F00C         	goto	u1060
  2770  00182A                     u1061:
  2771  00182A  EF23  F00C         	goto	l315
  2772  00182E                     u1060:
  2773  00182E  C01C  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  2774  001832  C01D  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  2775  001836  0E27               	movlw	39
  2776  001838  64DF               	cpfsgt	indf2,c
  2777  00183A  EF21  F00C         	goto	u1071
  2778  00183E  EF23  F00C         	goto	u1070
  2779  001842                     u1071:
  2780  001842  EFEC  F00B         	goto	l2220
  2781  001846                     u1070:
  2782  001846                     l315:
  2783  001846  0012               	return		;funcret
  2784  001848                     __end_of_fullSpeedAhead:
  2785                           	callstack 0
  2786                           
  2787 ;; *************** function _setMotorPWM *****************
  2788 ;; Defined at:
  2789 ;;		line 61 in file "dc_motor.c"
  2790 ;; Parameters:    Size  Location     Type
  2791 ;;  m               2   14[COMRAM] PTR struct DC_motor
  2792 ;;		 -> main@motorR(10), main@motorL(10), 
  2793 ;; Auto vars:     Size  Location     Type
  2794 ;;  PWMduty         2   23[COMRAM] int 
  2795 ;; Return value:  Size  Location     Type
  2796 ;;                  1    wreg      void 
  2797 ;; Registers used:
  2798 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2799 ;; Tracked objects:
  2800 ;;		On entry : 0/0
  2801 ;;		On exit  : 0/0
  2802 ;;		Unchanged: 0/0
  2803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2804 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2805 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2806 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2807 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2808 ;;Total ram usage:       11 bytes
  2809 ;; Hardware stack levels used: 1
  2810 ;; Hardware stack levels required when called: 1
  2811 ;; This function calls:
  2812 ;;		___awdiv
  2813 ;;		___wmul
  2814 ;; This function is called by:
  2815 ;;		_stop
  2816 ;;		_turnLeft
  2817 ;;		_turnRight
  2818 ;;		_fullSpeedAhead
  2819 ;;		_fullSpeedBack
  2820 ;; This function uses a non-reentrant model
  2821 ;;
  2822                           
  2823                           	psect	text21
  2824  00107A                     __ptext21:
  2825                           	callstack 0
  2826  00107A                     _setMotorPWM:
  2827                           	callstack 26
  2828  00107A                     
  2829                           ;dc_motor.c: 61: void setMotorPWM(struct DC_motor *m);dc_motor.c: 62: {;dc_motor.c: 63: 
      +                           int PWMduty;;dc_motor.c: 65:  if (m->direction){
  2830  00107A  EE20 F001          	lfsr	2,1
  2831  00107E  500F               	movf	setMotorPWM@m^0,w,c
  2832  001080  26D9               	addwf	fsr2l,f,c
  2833  001082  5010               	movf	(setMotorPWM@m+1)^0,w,c
  2834  001084  22DA               	addwfc	fsr2h,f,c
  2835  001086  50DF               	movf	indf2,w,c
  2836  001088  B4D8               	btfsc	status,2,c
  2837  00108A  EF49  F008         	goto	u881
  2838  00108E  EF4B  F008         	goto	u880
  2839  001092                     u881:
  2840  001092  EF7C  F008         	goto	l2102
  2841  001096                     u880:
  2842  001096                     
  2843                           ;dc_motor.c: 67:   PWMduty=m->PWMperiod - ((int)(m->power)*(m->PWMperiod))/100;
  2844  001096  C00F  FFD9         	movff	setMotorPWM@m,fsr2l
  2845  00109A  C010  FFDA         	movff	setMotorPWM@m+1,fsr2h
  2846  00109E  50DF               	movf	indf2,w,c
  2847  0010A0  6E11               	movwf	??_setMotorPWM^0,c
  2848  0010A2  5011               	movf	??_setMotorPWM^0,w,c
  2849  0010A4  6E01               	movwf	___wmul@multiplier^0,c
  2850  0010A6  6A02               	clrf	(___wmul@multiplier+1)^0,c
  2851  0010A8  EE20 F007          	lfsr	2,7
  2852  0010AC  500F               	movf	setMotorPWM@m^0,w,c
  2853  0010AE  26D9               	addwf	fsr2l,f,c
  2854  0010B0  5010               	movf	(setMotorPWM@m+1)^0,w,c
  2855  0010B2  22DA               	addwfc	fsr2h,f,c
  2856  0010B4  CFDE F003          	movff	postinc2,___wmul@multiplicand
  2857  0010B8  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  2858  0010BC  EC10  F00D         	call	___wmul	;wreg free
  2859  0010C0  C001  F007         	movff	?___wmul,___awdiv@dividend
  2860  0010C4  C002  F008         	movff	?___wmul+1,___awdiv@dividend+1
  2861  0010C8  0E00               	movlw	0
  2862  0010CA  6E0A               	movwf	(___awdiv@divisor+1)^0,c
  2863  0010CC  0E64               	movlw	100
  2864  0010CE  6E09               	movwf	___awdiv@divisor^0,c
  2865  0010D0  ECBA  F00A         	call	___awdiv	;wreg free
  2866  0010D4  EE20 F007          	lfsr	2,7
  2867  0010D8  500F               	movf	setMotorPWM@m^0,w,c
  2868  0010DA  26D9               	addwf	fsr2l,f,c
  2869  0010DC  5010               	movf	(setMotorPWM@m+1)^0,w,c
  2870  0010DE  22DA               	addwfc	fsr2h,f,c
  2871  0010E0  CFDE F012          	movff	postinc2,??_setMotorPWM+1
  2872  0010E4  CFDD F013          	movff	postdec2,??_setMotorPWM+2
  2873  0010E8  5007               	movf	?___awdiv^0,w,c
  2874  0010EA  5C12               	subwf	(??_setMotorPWM+1)^0,w,c
  2875  0010EC  6E18               	movwf	setMotorPWM@PWMduty^0,c
  2876  0010EE  5008               	movf	(?___awdiv+1)^0,w,c
  2877  0010F0  5813               	subwfb	(??_setMotorPWM+2)^0,w,c
  2878  0010F2  6E19               	movwf	(setMotorPWM@PWMduty+1)^0,c
  2879                           
  2880                           ;dc_motor.c: 68:  }
  2881  0010F4  EF9F  F008         	goto	l2104
  2882  0010F8                     l2102:
  2883                           
  2884                           ;dc_motor.c: 71:   PWMduty=((int)(m->power)*(m->PWMperiod))/100;
  2885  0010F8  C00F  FFD9         	movff	setMotorPWM@m,fsr2l
  2886  0010FC  C010  FFDA         	movff	setMotorPWM@m+1,fsr2h
  2887  001100  50DF               	movf	indf2,w,c
  2888  001102  6E11               	movwf	??_setMotorPWM^0,c
  2889  001104  5011               	movf	??_setMotorPWM^0,w,c
  2890  001106  6E01               	movwf	___wmul@multiplier^0,c
  2891  001108  6A02               	clrf	(___wmul@multiplier+1)^0,c
  2892  00110A  EE20 F007          	lfsr	2,7
  2893  00110E  500F               	movf	setMotorPWM@m^0,w,c
  2894  001110  26D9               	addwf	fsr2l,f,c
  2895  001112  5010               	movf	(setMotorPWM@m+1)^0,w,c
  2896  001114  22DA               	addwfc	fsr2h,f,c
  2897  001116  CFDE F003          	movff	postinc2,___wmul@multiplicand
  2898  00111A  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  2899  00111E  EC10  F00D         	call	___wmul	;wreg free
  2900  001122  C001  F007         	movff	?___wmul,___awdiv@dividend
  2901  001126  C002  F008         	movff	?___wmul+1,___awdiv@dividend+1
  2902  00112A  0E00               	movlw	0
  2903  00112C  6E0A               	movwf	(___awdiv@divisor+1)^0,c
  2904  00112E  0E64               	movlw	100
  2905  001130  6E09               	movwf	___awdiv@divisor^0,c
  2906  001132  ECBA  F00A         	call	___awdiv	;wreg free
  2907  001136  C007  F018         	movff	?___awdiv,setMotorPWM@PWMduty
  2908  00113A  C008  F019         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  2909  00113E                     l2104:
  2910                           
  2911                           ;dc_motor.c: 74:  *(m->dutyHighByte) = PWMduty;
  2912  00113E  EE20 F002          	lfsr	2,2
  2913  001142  500F               	movf	setMotorPWM@m^0,w,c
  2914  001144  26D9               	addwf	fsr2l,f,c
  2915  001146  5010               	movf	(setMotorPWM@m+1)^0,w,c
  2916  001148  22DA               	addwfc	fsr2h,f,c
  2917  00114A  CFDE F011          	movff	postinc2,??_setMotorPWM
  2918  00114E  CFDD F012          	movff	postdec2,??_setMotorPWM+1
  2919  001152  C011  FFD9         	movff	??_setMotorPWM,fsr2l
  2920  001156  C012  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2921  00115A  C018  FFDF         	movff	setMotorPWM@PWMduty,indf2
  2922  00115E                     
  2923                           ;dc_motor.c: 76:  if (m->direction){
  2924  00115E  EE20 F001          	lfsr	2,1
  2925  001162  500F               	movf	setMotorPWM@m^0,w,c
  2926  001164  26D9               	addwf	fsr2l,f,c
  2927  001166  5010               	movf	(setMotorPWM@m+1)^0,w,c
  2928  001168  22DA               	addwfc	fsr2h,f,c
  2929  00116A  50DF               	movf	indf2,w,c
  2930  00116C  B4D8               	btfsc	status,2,c
  2931  00116E  EFBB  F008         	goto	u891
  2932  001172  EFBD  F008         	goto	u890
  2933  001176                     u891:
  2934  001176  EFF2  F008         	goto	l2110
  2935  00117A                     u890:
  2936  00117A                     
  2937                           ;dc_motor.c: 77:   *(m->dir_LAT) = *(m->dir_LAT) | (1<<(m->dir_pin));
  2938  00117A  EE20 F004          	lfsr	2,4
  2939  00117E  500F               	movf	setMotorPWM@m^0,w,c
  2940  001180  26D9               	addwf	fsr2l,f,c
  2941  001182  5010               	movf	(setMotorPWM@m+1)^0,w,c
  2942  001184  22DA               	addwfc	fsr2h,f,c
  2943  001186  CFDE F011          	movff	postinc2,??_setMotorPWM
  2944  00118A  CFDD F012          	movff	postdec2,??_setMotorPWM+1
  2945  00118E  C011  FFD9         	movff	??_setMotorPWM,fsr2l
  2946  001192  C012  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2947  001196  EE10 F004          	lfsr	1,4
  2948  00119A  500F               	movf	setMotorPWM@m^0,w,c
  2949  00119C  26E1               	addwf	fsr1l,f,c
  2950  00119E  5010               	movf	(setMotorPWM@m+1)^0,w,c
  2951  0011A0  22E2               	addwfc	fsr1h,f,c
  2952  0011A2  CFE6 F013          	movff	postinc1,??_setMotorPWM+2
  2953  0011A6  CFE5 F014          	movff	postdec1,??_setMotorPWM+3
  2954  0011AA  C013  FFE1         	movff	??_setMotorPWM+2,fsr1l
  2955  0011AE  C014  FFE2         	movff	??_setMotorPWM+3,fsr1h
  2956  0011B2  50E7               	movf	indf1,w,c
  2957  0011B4  6E15               	movwf	(??_setMotorPWM+4)^0,c
  2958  0011B6  EE10 F006          	lfsr	1,6
  2959  0011BA  500F               	movf	setMotorPWM@m^0,w,c
  2960  0011BC  26E1               	addwf	fsr1l,f,c
  2961  0011BE  5010               	movf	(setMotorPWM@m+1)^0,w,c
  2962  0011C0  22E2               	addwfc	fsr1h,f,c
  2963  0011C2  50E7               	movf	indf1,w,c
  2964  0011C4  6E16               	movwf	(??_setMotorPWM+5)^0,c
  2965  0011C6  0E01               	movlw	1
  2966  0011C8  6E17               	movwf	(??_setMotorPWM+6)^0,c
  2967  0011CA  2A16               	incf	(??_setMotorPWM+5)^0,f,c
  2968  0011CC  EFEA  F008         	goto	u904
  2969  0011D0                     u905:
  2970  0011D0  90D8               	bcf	status,0,c
  2971  0011D2  3617               	rlcf	(??_setMotorPWM+6)^0,f,c
  2972  0011D4                     u904:
  2973  0011D4  2E16               	decfsz	(??_setMotorPWM+5)^0,f,c
  2974  0011D6  EFE8  F008         	goto	u905
  2975  0011DA  5017               	movf	(??_setMotorPWM+6)^0,w,c
  2976  0011DC  1015               	iorwf	(??_setMotorPWM+4)^0,w,c
  2977  0011DE  6EDF               	movwf	indf2,c
  2978                           
  2979                           ;dc_motor.c: 78:  } else {
  2980  0011E0  EF26  F009         	goto	l271
  2981  0011E4                     l2110:
  2982                           
  2983                           ;dc_motor.c: 79:   *(m->dir_LAT) = *(m->dir_LAT) & (~(1<<(m->dir_pin)));
  2984  0011E4  EE20 F004          	lfsr	2,4
  2985  0011E8  500F               	movf	setMotorPWM@m^0,w,c
  2986  0011EA  26D9               	addwf	fsr2l,f,c
  2987  0011EC  5010               	movf	(setMotorPWM@m+1)^0,w,c
  2988  0011EE  22DA               	addwfc	fsr2h,f,c
  2989  0011F0  CFDE F011          	movff	postinc2,??_setMotorPWM
  2990  0011F4  CFDD F012          	movff	postdec2,??_setMotorPWM+1
  2991  0011F8  C011  FFD9         	movff	??_setMotorPWM,fsr2l
  2992  0011FC  C012  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2993  001200  EE10 F004          	lfsr	1,4
  2994  001204  500F               	movf	setMotorPWM@m^0,w,c
  2995  001206  26E1               	addwf	fsr1l,f,c
  2996  001208  5010               	movf	(setMotorPWM@m+1)^0,w,c
  2997  00120A  22E2               	addwfc	fsr1h,f,c
  2998  00120C  CFE6 F013          	movff	postinc1,??_setMotorPWM+2
  2999  001210  CFE5 F014          	movff	postdec1,??_setMotorPWM+3
  3000  001214  C013  FFE1         	movff	??_setMotorPWM+2,fsr1l
  3001  001218  C014  FFE2         	movff	??_setMotorPWM+3,fsr1h
  3002  00121C  50E7               	movf	indf1,w,c
  3003  00121E  6E15               	movwf	(??_setMotorPWM+4)^0,c
  3004  001220  EE10 F006          	lfsr	1,6
  3005  001224  500F               	movf	setMotorPWM@m^0,w,c
  3006  001226  26E1               	addwf	fsr1l,f,c
  3007  001228  5010               	movf	(setMotorPWM@m+1)^0,w,c
  3008  00122A  22E2               	addwfc	fsr1h,f,c
  3009  00122C  50E7               	movf	indf1,w,c
  3010  00122E  6E16               	movwf	(??_setMotorPWM+5)^0,c
  3011  001230  0E01               	movlw	1
  3012  001232  6E17               	movwf	(??_setMotorPWM+6)^0,c
  3013  001234  2A16               	incf	(??_setMotorPWM+5)^0,f,c
  3014  001236  EF1F  F009         	goto	u914
  3015  00123A                     u915:
  3016  00123A  90D8               	bcf	status,0,c
  3017  00123C  3617               	rlcf	(??_setMotorPWM+6)^0,f,c
  3018  00123E                     u914:
  3019  00123E  2E16               	decfsz	(??_setMotorPWM+5)^0,f,c
  3020  001240  EF1D  F009         	goto	u915
  3021  001244  5017               	movf	(??_setMotorPWM+6)^0,w,c
  3022  001246  0AFF               	xorlw	255
  3023  001248  1415               	andwf	(??_setMotorPWM+4)^0,w,c
  3024  00124A  6EDF               	movwf	indf2,c
  3025  00124C                     l271:
  3026  00124C  0012               	return		;funcret
  3027  00124E                     __end_of_setMotorPWM:
  3028                           	callstack 0
  3029                           
  3030 ;; *************** function ___wmul *****************
  3031 ;; Defined at:
  3032 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\Umul16.c"
  3033 ;; Parameters:    Size  Location     Type
  3034 ;;  multiplier      2    0[COMRAM] unsigned int 
  3035 ;;  multiplicand    2    2[COMRAM] unsigned int 
  3036 ;; Auto vars:     Size  Location     Type
  3037 ;;  product         2    4[COMRAM] unsigned int 
  3038 ;; Return value:  Size  Location     Type
  3039 ;;                  2    0[COMRAM] unsigned int 
  3040 ;; Registers used:
  3041 ;;		wreg, status,2, status,0, prodl, prodh
  3042 ;; Tracked objects:
  3043 ;;		On entry : 0/0
  3044 ;;		On exit  : 0/0
  3045 ;;		Unchanged: 0/0
  3046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3047 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3048 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3049 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3050 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3051 ;;Total ram usage:        6 bytes
  3052 ;; Hardware stack levels used: 1
  3053 ;; This function calls:
  3054 ;;		Nothing
  3055 ;; This function is called by:
  3056 ;;		_setMotorPWM
  3057 ;; This function uses a non-reentrant model
  3058 ;;
  3059                           
  3060                           	psect	text22
  3061  001A20                     __ptext22:
  3062                           	callstack 0
  3063  001A20                     ___wmul:
  3064                           	callstack 26
  3065  001A20  5001               	movf	___wmul@multiplier^0,w,c
  3066  001A22  0203               	mulwf	___wmul@multiplicand^0,c
  3067  001A24  CFF3 F005          	movff	prodl,___wmul@product
  3068  001A28  CFF4 F006          	movff	prodh,___wmul@product+1
  3069  001A2C  5001               	movf	___wmul@multiplier^0,w,c
  3070  001A2E  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  3071  001A30  50F3               	movf	243,w,c
  3072  001A32  2606               	addwf	(___wmul@product+1)^0,f,c
  3073  001A34  5002               	movf	(___wmul@multiplier+1)^0,w,c
  3074  001A36  0203               	mulwf	___wmul@multiplicand^0,c
  3075  001A38  50F3               	movf	243,w,c
  3076  001A3A  2606               	addwf	(___wmul@product+1)^0,f,c
  3077  001A3C  C005  F001         	movff	___wmul@product,?___wmul
  3078  001A40  C006  F002         	movff	___wmul@product+1,?___wmul+1
  3079  001A44  0012               	return		;funcret
  3080  001A46                     __end_of___wmul:
  3081                           	callstack 0
  3082                           
  3083 ;; *************** function ___awdiv *****************
  3084 ;; Defined at:
  3085 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\awdiv.c"
  3086 ;; Parameters:    Size  Location     Type
  3087 ;;  dividend        2    6[COMRAM] int 
  3088 ;;  divisor         2    8[COMRAM] int 
  3089 ;; Auto vars:     Size  Location     Type
  3090 ;;  quotient        2   12[COMRAM] int 
  3091 ;;  sign            1   11[COMRAM] unsigned char 
  3092 ;;  counter         1   10[COMRAM] unsigned char 
  3093 ;; Return value:  Size  Location     Type
  3094 ;;                  2    6[COMRAM] int 
  3095 ;; Registers used:
  3096 ;;		wreg, status,2, status,0
  3097 ;; Tracked objects:
  3098 ;;		On entry : 0/0
  3099 ;;		On exit  : 0/0
  3100 ;;		Unchanged: 0/0
  3101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3102 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3103 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3104 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3105 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3106 ;;Total ram usage:        8 bytes
  3107 ;; Hardware stack levels used: 1
  3108 ;; This function calls:
  3109 ;;		Nothing
  3110 ;; This function is called by:
  3111 ;;		_setMotorPWM
  3112 ;; This function uses a non-reentrant model
  3113 ;;
  3114                           
  3115                           	psect	text23
  3116  001574                     __ptext23:
  3117                           	callstack 0
  3118  001574                     ___awdiv:
  3119                           	callstack 26
  3120  001574  0E00               	movlw	0
  3121  001576  6E0C               	movwf	___awdiv@sign^0,c
  3122  001578  BE0A               	btfsc	(___awdiv@divisor+1)^0,7,c
  3123  00157A  EFC3  F00A         	goto	u820
  3124  00157E  EFC1  F00A         	goto	u821
  3125  001582                     u821:
  3126  001582  EFC9  F00A         	goto	l2062
  3127  001586                     u820:
  3128  001586  6C09               	negf	___awdiv@divisor^0,c
  3129  001588  1E0A               	comf	(___awdiv@divisor+1)^0,f,c
  3130  00158A  B0D8               	btfsc	status,0,c
  3131  00158C  2A0A               	incf	(___awdiv@divisor+1)^0,f,c
  3132  00158E  0E01               	movlw	1
  3133  001590  6E0C               	movwf	___awdiv@sign^0,c
  3134  001592                     l2062:
  3135  001592  BE08               	btfsc	(___awdiv@dividend+1)^0,7,c
  3136  001594  EFD0  F00A         	goto	u830
  3137  001598  EFCE  F00A         	goto	u831
  3138  00159C                     u831:
  3139  00159C  EFD6  F00A         	goto	l2068
  3140  0015A0                     u830:
  3141  0015A0  6C07               	negf	___awdiv@dividend^0,c
  3142  0015A2  1E08               	comf	(___awdiv@dividend+1)^0,f,c
  3143  0015A4  B0D8               	btfsc	status,0,c
  3144  0015A6  2A08               	incf	(___awdiv@dividend+1)^0,f,c
  3145  0015A8  0E01               	movlw	1
  3146  0015AA  1A0C               	xorwf	___awdiv@sign^0,f,c
  3147  0015AC                     l2068:
  3148  0015AC  0E00               	movlw	0
  3149  0015AE  6E0E               	movwf	(___awdiv@quotient+1)^0,c
  3150  0015B0  0E00               	movlw	0
  3151  0015B2  6E0D               	movwf	___awdiv@quotient^0,c
  3152  0015B4  5009               	movf	___awdiv@divisor^0,w,c
  3153  0015B6  100A               	iorwf	(___awdiv@divisor+1)^0,w,c
  3154  0015B8  B4D8               	btfsc	status,2,c
  3155  0015BA  EFE1  F00A         	goto	u841
  3156  0015BE  EFE3  F00A         	goto	u840
  3157  0015C2                     u841:
  3158  0015C2  EF0B  F00B         	goto	l2090
  3159  0015C6                     u840:
  3160  0015C6  0E01               	movlw	1
  3161  0015C8  6E0B               	movwf	___awdiv@counter^0,c
  3162  0015CA  EFEB  F00A         	goto	l2076
  3163  0015CE                     l2074:
  3164  0015CE  90D8               	bcf	status,0,c
  3165  0015D0  3609               	rlcf	___awdiv@divisor^0,f,c
  3166  0015D2  360A               	rlcf	(___awdiv@divisor+1)^0,f,c
  3167  0015D4  2A0B               	incf	___awdiv@counter^0,f,c
  3168  0015D6                     l2076:
  3169  0015D6  AE0A               	btfss	(___awdiv@divisor+1)^0,7,c
  3170  0015D8  EFF0  F00A         	goto	u851
  3171  0015DC  EFF2  F00A         	goto	u850
  3172  0015E0                     u851:
  3173  0015E0  EFE7  F00A         	goto	l2074
  3174  0015E4                     u850:
  3175  0015E4                     l2078:
  3176  0015E4  90D8               	bcf	status,0,c
  3177  0015E6  360D               	rlcf	___awdiv@quotient^0,f,c
  3178  0015E8  360E               	rlcf	(___awdiv@quotient+1)^0,f,c
  3179  0015EA  5009               	movf	___awdiv@divisor^0,w,c
  3180  0015EC  5C07               	subwf	___awdiv@dividend^0,w,c
  3181  0015EE  500A               	movf	(___awdiv@divisor+1)^0,w,c
  3182  0015F0  5808               	subwfb	(___awdiv@dividend+1)^0,w,c
  3183  0015F2  A0D8               	btfss	status,0,c
  3184  0015F4  EFFE  F00A         	goto	u861
  3185  0015F8  EF00  F00B         	goto	u860
  3186  0015FC                     u861:
  3187  0015FC  EF05  F00B         	goto	l2086
  3188  001600                     u860:
  3189  001600  5009               	movf	___awdiv@divisor^0,w,c
  3190  001602  5E07               	subwf	___awdiv@dividend^0,f,c
  3191  001604  500A               	movf	(___awdiv@divisor+1)^0,w,c
  3192  001606  5A08               	subwfb	(___awdiv@dividend+1)^0,f,c
  3193  001608  800D               	bsf	___awdiv@quotient^0,0,c
  3194  00160A                     l2086:
  3195  00160A  90D8               	bcf	status,0,c
  3196  00160C  320A               	rrcf	(___awdiv@divisor+1)^0,f,c
  3197  00160E  3209               	rrcf	___awdiv@divisor^0,f,c
  3198  001610  2E0B               	decfsz	___awdiv@counter^0,f,c
  3199  001612  EFF2  F00A         	goto	l2078
  3200  001616                     l2090:
  3201  001616  500C               	movf	___awdiv@sign^0,w,c
  3202  001618  B4D8               	btfsc	status,2,c
  3203  00161A  EF11  F00B         	goto	u871
  3204  00161E  EF13  F00B         	goto	u870
  3205  001622                     u871:
  3206  001622  EF17  F00B         	goto	l2094
  3207  001626                     u870:
  3208  001626  6C0D               	negf	___awdiv@quotient^0,c
  3209  001628  1E0E               	comf	(___awdiv@quotient+1)^0,f,c
  3210  00162A  B0D8               	btfsc	status,0,c
  3211  00162C  2A0E               	incf	(___awdiv@quotient+1)^0,f,c
  3212  00162E                     l2094:
  3213  00162E  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  3214  001632  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  3215  001636  0012               	return		;funcret
  3216  001638                     __end_of___awdiv:
  3217                           	callstack 0
  3218                           
  3219                           	psect	rparam
  3220  0000                     
  3221                           	psect	idloc
  3222                           
  3223                           ;Config register IDLOC0 @ 0x200000
  3224                           ;	unspecified, using default values
  3225  200000                     	org	2097152
  3226  200000  0FFF               	dw	4095
  3227                           
  3228                           ;Config register IDLOC1 @ 0x200002
  3229                           ;	unspecified, using default values
  3230  200002                     	org	2097154
  3231  200002  0FFF               	dw	4095
  3232                           
  3233                           ;Config register IDLOC2 @ 0x200004
  3234                           ;	unspecified, using default values
  3235  200004                     	org	2097156
  3236  200004  0FFF               	dw	4095
  3237                           
  3238                           ;Config register IDLOC3 @ 0x200006
  3239                           ;	unspecified, using default values
  3240  200006                     	org	2097158
  3241  200006  0FFF               	dw	4095
  3242                           
  3243                           ;Config register IDLOC4 @ 0x200008
  3244                           ;	unspecified, using default values
  3245  200008                     	org	2097160
  3246  200008  0FFF               	dw	4095
  3247                           
  3248                           ;Config register IDLOC5 @ 0x20000A
  3249                           ;	unspecified, using default values
  3250  20000A                     	org	2097162
  3251  20000A  0FFF               	dw	4095
  3252                           
  3253                           ;Config register IDLOC6 @ 0x20000C
  3254                           ;	unspecified, using default values
  3255  20000C                     	org	2097164
  3256  20000C  0FFF               	dw	4095
  3257                           
  3258                           ;Config register IDLOC7 @ 0x20000E
  3259                           ;	unspecified, using default values
  3260  20000E                     	org	2097166
  3261  20000E  0FFF               	dw	4095
  3262                           
  3263                           	psect	config
  3264                           
  3265                           ;Config register CONFIG1L @ 0x300000
  3266                           ;	External Oscillator mode Selection bits
  3267                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  3268                           ;	Power-up default value for COSC bits
  3269                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  3270  300000                     	org	3145728
  3271  300000  AA                 	db	170
  3272                           
  3273                           ;Config register CONFIG1H @ 0x300001
  3274                           ;	unspecified, using default values
  3275                           ;	Clock Out Enable bit
  3276                           ;	CLKOUTEN = 0x1, unprogrammed default
  3277                           ;	Clock Switch Enable bit
  3278                           ;	CSWEN = 0x1, unprogrammed default
  3279                           ;	Fail-Safe Clock Monitor Enable bit
  3280                           ;	FCMEN = 0x1, unprogrammed default
  3281  300001                     	org	3145729
  3282  300001  FF                 	db	255
  3283                           
  3284                           ;Config register CONFIG2L @ 0x300002
  3285                           ;	unspecified, using default values
  3286                           ;	Master Clear Enable bit
  3287                           ;	MCLRE = 0x1, unprogrammed default
  3288                           ;	Power-up Timer Enable bit
  3289                           ;	PWRTE = 0x1, unprogrammed default
  3290                           ;	Low-power BOR enable bit
  3291                           ;	LPBOREN = 0x1, unprogrammed default
  3292                           ;	Brown-out Reset Enable bits
  3293                           ;	BOREN = 0x3, unprogrammed default
  3294  300002                     	org	3145730
  3295  300002  FF                 	db	255
  3296                           
  3297                           ;Config register CONFIG2H @ 0x300003
  3298                           ;	unspecified, using default values
  3299                           ;	Brown Out Reset Voltage selection bits
  3300                           ;	BORV = 0x3, unprogrammed default
  3301                           ;	ZCD Disable bit
  3302                           ;	ZCD = 0x1, unprogrammed default
  3303                           ;	PPSLOCK bit One-Way Set Enable bit
  3304                           ;	PPS1WAY = 0x1, unprogrammed default
  3305                           ;	Stack Full/Underflow Reset Enable bit
  3306                           ;	STVREN = 0x1, unprogrammed default
  3307                           ;	Debugger Enable bit
  3308                           ;	DEBUG = 0x1, unprogrammed default
  3309                           ;	Extended Instruction Set Enable bit
  3310                           ;	XINST = 0x1, unprogrammed default
  3311  300003                     	org	3145731
  3312  300003  FF                 	db	255
  3313                           
  3314                           ;Config register CONFIG3L @ 0x300004
  3315                           ;	WDT Period Select bits
  3316                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  3317                           ;	WDT operating mode
  3318                           ;	WDTE = OFF, WDT Disabled
  3319  300004                     	org	3145732
  3320  300004  9F                 	db	159
  3321                           
  3322                           ;Config register CONFIG3H @ 0x300005
  3323                           ;	unspecified, using default values
  3324                           ;	WDT Window Select bits
  3325                           ;	WDTCWS = 0x7, unprogrammed default
  3326                           ;	WDT input clock selector
  3327                           ;	WDTCCS = 0x7, unprogrammed default
  3328  300005                     	org	3145733
  3329  300005  FF                 	db	255
  3330                           
  3331                           ;Config register CONFIG4L @ 0x300006
  3332                           ;	unspecified, using default values
  3333                           ;	Write Protection Block 0
  3334                           ;	WRT0 = 0x1, unprogrammed default
  3335                           ;	Write Protection Block 1
  3336                           ;	WRT1 = 0x1, unprogrammed default
  3337                           ;	Write Protection Block 2
  3338                           ;	WRT2 = 0x1, unprogrammed default
  3339                           ;	Write Protection Block 3
  3340                           ;	WRT3 = 0x1, unprogrammed default
  3341                           ;	Write Protection Block 3
  3342                           ;	WRT4 = 0x1, unprogrammed default
  3343                           ;	Write Protection Block 3
  3344                           ;	WRT5 = 0x1, unprogrammed default
  3345                           ;	Write Protection Block 3
  3346                           ;	WRT6 = 0x1, unprogrammed default
  3347                           ;	Write Protection Block 3
  3348                           ;	WRT7 = 0x1, unprogrammed default
  3349  300006                     	org	3145734
  3350  300006  FF                 	db	255
  3351                           
  3352                           ;Config register CONFIG4H @ 0x300007
  3353                           ;	unspecified, using default values
  3354                           ;	Configuration Register Write Protection bit
  3355                           ;	WRTC = 0x1, unprogrammed default
  3356                           ;	Boot Block Write Protection bit
  3357                           ;	WRTB = 0x1, unprogrammed default
  3358                           ;	Data EEPROM Write Protection bit
  3359                           ;	WRTD = 0x1, unprogrammed default
  3360                           ;	Scanner Enable bit
  3361                           ;	SCANE = 0x1, unprogrammed default
  3362                           ;	Low Voltage Programming Enable bit
  3363                           ;	LVP = 0x1, unprogrammed default
  3364  300007                     	org	3145735
  3365  300007  FF                 	db	255
  3366                           
  3367                           ;Config register CONFIG5L @ 0x300008
  3368                           ;	unspecified, using default values
  3369                           ;	UserNVM Program Memory Code Protection bit
  3370                           ;	CP = 0x1, unprogrammed default
  3371                           ;	DataNVM Memory Code Protection bit
  3372                           ;	CPD = 0x1, unprogrammed default
  3373  300008                     	org	3145736
  3374  300008  FF                 	db	255
  3375                           
  3376                           ;Config register CONFIG5H @ 0x300009
  3377                           ;	unspecified, using default values
  3378  300009                     	org	3145737
  3379  300009  FF                 	db	255
  3380                           
  3381                           ;Config register CONFIG6L @ 0x30000A
  3382                           ;	unspecified, using default values
  3383                           ;	Table Read Protection Block 0
  3384                           ;	EBTR0 = 0x1, unprogrammed default
  3385                           ;	Table Read Protection Block 1
  3386                           ;	EBTR1 = 0x1, unprogrammed default
  3387                           ;	Table Read Protection Block 2
  3388                           ;	EBTR2 = 0x1, unprogrammed default
  3389                           ;	Table Read Protection Block 3
  3390                           ;	EBTR3 = 0x1, unprogrammed default
  3391                           ;	Table Read Protection Block 4
  3392                           ;	EBTR4 = 0x1, unprogrammed default
  3393                           ;	Table Read Protection Block 5
  3394                           ;	EBTR5 = 0x1, unprogrammed default
  3395                           ;	Table Read Protection Block 6
  3396                           ;	EBTR6 = 0x1, unprogrammed default
  3397                           ;	Table Read Protection Block 7
  3398                           ;	EBTR7 = 0x1, unprogrammed default
  3399  30000A                     	org	3145738
  3400  30000A  FF                 	db	255
  3401                           
  3402                           ;Config register CONFIG6H @ 0x30000B
  3403                           ;	unspecified, using default values
  3404                           ;	Boot Block Table Read Protection bit
  3405                           ;	EBTRB = 0x1, unprogrammed default
  3406  30000B                     	org	3145739
  3407  30000B  FF                 	db	255
  3408                           tosu	equ	0xFFF
  3409                           tosh	equ	0xFFE
  3410                           tosl	equ	0xFFD
  3411                           stkptr	equ	0xFFC
  3412                           pclatu	equ	0xFFB
  3413                           pclath	equ	0xFFA
  3414                           pcl	equ	0xFF9
  3415                           tblptru	equ	0xFF8
  3416                           tblptrh	equ	0xFF7
  3417                           tblptrl	equ	0xFF6
  3418                           tablat	equ	0xFF5
  3419                           prodh	equ	0xFF4
  3420                           prodl	equ	0xFF3
  3421                           indf0	equ	0xFEF
  3422                           postinc0	equ	0xFEE
  3423                           postdec0	equ	0xFED
  3424                           preinc0	equ	0xFEC
  3425                           plusw0	equ	0xFEB
  3426                           fsr0h	equ	0xFEA
  3427                           fsr0l	equ	0xFE9
  3428                           wreg	equ	0xFE8
  3429                           indf1	equ	0xFE7
  3430                           postinc1	equ	0xFE6
  3431                           postdec1	equ	0xFE5
  3432                           preinc1	equ	0xFE4
  3433                           plusw1	equ	0xFE3
  3434                           fsr1h	equ	0xFE2
  3435                           fsr1l	equ	0xFE1
  3436                           bsr	equ	0xFE0
  3437                           indf2	equ	0xFDF
  3438                           postinc2	equ	0xFDE
  3439                           postdec2	equ	0xFDD
  3440                           preinc2	equ	0xFDC
  3441                           plusw2	equ	0xFDB
  3442                           fsr2h	equ	0xFDA
  3443                           fsr2l	equ	0xFD9
  3444                           status	equ	0xFD8

Data Sizes:
    Strings     77
    Constant    4
    Data        2
    BSS         109
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     74      95
    BANK0           160      0      90
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    vfprintf$2	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), 

    vfprintf$1	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_14(CODE[5]), STR_13(CODE[6]), STR_2(CODE[12]), STR_1(CODE[14]), 

    vfprintf$0	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    S2288$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S2288$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    goback@mR	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(COMRAM[10]), 

    goback@mL	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(COMRAM[10]), 

    action@mR	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(COMRAM[10]), 

    action@mL	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(COMRAM[10]), 

    motorR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhllll[1]), PWM6DCH(BITBIGSFRhhhllll[1]), 

    motorL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhllll[1]), PWM6DCH(BITBIGSFRhhhllll[1]), 

    voltage_display@m.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    voltage_display@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhllll[1]), PWM6DCH(BITBIGSFRhhhllll[1]), 

    voltage_read@m.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    voltage_read@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhllll[1]), PWM6DCH(BITBIGSFRhhhllll[1]), 

    reverse_square@mR	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(COMRAM[10]), 

    reverse_square@mL	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(COMRAM[10]), 

    short_reverse@mR	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(COMRAM[10]), 

    short_reverse@mL	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(COMRAM[10]), 

    fullSpeedBack@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    fullSpeedBack@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhllll[1]), PWM6DCH(BITBIGSFRhhhllll[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(COMRAM[10]), 

    fullSpeedBack@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    fullSpeedBack@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhllll[1]), PWM6DCH(BITBIGSFRhhhllll[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(COMRAM[10]), 

    fullSpeedAhead@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    fullSpeedAhead@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhllll[1]), PWM6DCH(BITBIGSFRhhhllll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(COMRAM[10]), 

    fullSpeedAhead@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    fullSpeedAhead@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhllll[1]), PWM6DCH(BITBIGSFRhhhllll[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(COMRAM[10]), 

    turnRight@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhllll[1]), PWM6DCH(BITBIGSFRhhhllll[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(COMRAM[10]), 

    turnRight@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhllll[1]), PWM6DCH(BITBIGSFRhhhllll[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(COMRAM[10]), 

    turnLeft@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhllll[1]), PWM6DCH(BITBIGSFRhhhllll[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(COMRAM[10]), 

    turnLeft@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhllll[1]), PWM6DCH(BITBIGSFRhhhllll[1]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(COMRAM[10]), 

    stop@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhllll[1]), PWM6DCH(BITBIGSFRhhhllll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(COMRAM[10]), 

    stop@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhllll[1]), PWM6DCH(BITBIGSFRhhhllll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(COMRAM[10]), 

    setMotorPWM@m.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhllll[1]), PWM6DCH(BITBIGSFRhhhllll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(COMRAM[10]), main@motorL(COMRAM[10]), 

    initDCmotors_parameter@motorR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    initDCmotors_parameter@motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhllll[1]), PWM6DCH(BITBIGSFRhhhllll[1]), 

    initDCmotors_parameter@motorR	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(COMRAM[10]), 

    initDCmotors_parameter@motorL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    initDCmotors_parameter@motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhllll[1]), PWM6DCH(BITBIGSFRhhhllll[1]), 

    initDCmotors_parameter@motorL	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(COMRAM[10]), 

    motorR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhllll[1]), PWM6DCH(BITBIGSFRhhhllll[1]), 

    S224DC_motor$dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    motorL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    S224DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhllll[1]), PWM6DCH(BITBIGSFRhhhllll[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhllll[1]), PWM6DCH(BITBIGSFRhhhllll[1]), 


Critical Paths under _main in COMRAM

    _main->_action
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _action->_goback
    _turnRight->_stop
    _short_reverse->_fullSpeedBack
    _reverse_square->_fullSpeedBack
    _fullSpeedBack->_stop
    _goback->_turnLeft
    _turnLeft->_stop
    _stop->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                47    47      0   48436
                                             54 COMRAM    20    20      0
                  _I2C_2_Master_Init
                             _action
                   _color_click_init
                    _initDCmotorsPWM
             _initDCmotors_parameter
                         _initUSART4
                           _pin_init
 ---------------------------------------------------------------------------------
 (1) _pin_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotors_parameter                               4     0      4     416
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      76
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     287
                                              4 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     287
                                              2 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      15
                                              1 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _action                                               5     1      4   47470
                                             49 COMRAM     5     1      4
                     _fullSpeedAhead
                             _goback
                     _reverse_square
                      _short_reverse
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _turnRight                                           14     9      5    6852
                                             31 COMRAM    14     9      5
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _short_reverse                                        6     2      4    9833
                                             37 COMRAM     6     2      4
                      _fullSpeedBack
                               _stop
 ---------------------------------------------------------------------------------
 (2) _reverse_square                                       6     2      4    9225
                                             37 COMRAM     6     2      4
                      _fullSpeedBack
                               _stop
 ---------------------------------------------------------------------------------
 (3) _fullSpeedBack                                        6     2      4    5650
                                             31 COMRAM     6     2      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _goback                                               4     0      4    7504
                                             45 COMRAM     4     0      4
                           _turnLeft
 ---------------------------------------------------------------------------------
 (2) _turnLeft                                            14     9      5    7308
                                             31 COMRAM    14     9      5
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (3) _stop                                                 6     2      4    3183
                                             25 COMRAM     6     2      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _fullSpeedAhead                                       5     1      4    2423
                                             25 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (4) _setMotorPWM                                         11     9      2    1943
                                             14 COMRAM    11     9      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     355
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4     496
                                              6 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_2_Master_Init
   _action
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _goback
       _turnLeft
         _setMotorPWM
         _stop
           _setMotorPWM
     _reverse_square
       _fullSpeedBack
         _setMotorPWM
         _stop
       _stop
     _short_reverse
       _fullSpeedBack
       _stop
     _stop
     _turnLeft
     _turnRight
       _setMotorPWM
       _stop
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
   _initDCmotorsPWM
   _initDCmotors_parameter
   _initUSART4
   _pin_init

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      59        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      5A       5       56.2%
BITBIGSFRllhhl      6E      0       0      44        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     4A      5F       1      100.0%
BITBIGSFRhhhh       40      0       0      32        0.0%
BITBIGSFRlllllh     32      0       0      49        0.0%
BITBIGSFRlllllh     2A      0       0      53        0.0%
BITBIGSFRllllll     26      0       0      57        0.0%
BITBIGSFRllllhh     20      0       0      47        0.0%
BITBIGSFRhhhlh      17      0       0      33        0.0%
BITBIGSFRllhhhh     14      0       0      41        0.0%
BITBIGSFRhhhlll     11      0       0      35        0.0%
BITBIGSFRlllllh      F      0       0      55        0.0%
BITBIGSFRllllhl      C      0       0      48        0.0%
BITBIGSFRlllllh      9      0       0      54        0.0%
BITBIGSFRllhlll      8      0       0      45        0.0%
BITBIGSFRllhhhl      6      0       0      43        0.0%
BITBIGSFRllllll      6      0       0      56        0.0%
BITBIGSFRlllllh      6      0       0      52        0.0%
BITBIGSFRhhhlll      6      0       0      36        0.0%
BITBIGSFRlllllh      5      0       0      51        0.0%
BITBIGSFRllhhhh      3      0       0      42        0.0%
BITBIGSFRlllllh      3      0       0      50        0.0%
BITBIGSFRhlh         1      0       0      37        0.0%
BITBIGSFRhhhllh      1      0       0      34        0.0%
BITBIGSFRlhh         1      0       0      39        0.0%
BITBIGSFRlllh        1      0       0      46        0.0%
BITBIGSFRlhl         1      0       0      40        0.0%
BITBIGSFRhll         1      0       0      38        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      B9      58        0.0%
DATA                 0      0      B9       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.35 build 20211206165544 
Symbol Table                                                                                   Wed Mar 09 20:27:11 2022

                ?_short_reverse 0026                              l51 19CC                              l54 1A64  
                  ___awdiv@sign 000C             ___wmul@multiplicand 0003                             l300 1312  
                           l304 134C                             l315 1846                             l307 1376  
                           l332 195A                             l172 19F8                             l261 18D6  
                           l326 16F6                             l271 124C                             l175 1A1E  
                           l184 1ACE                             l264 1572                             l329 1918  
                           l169 19F6                             l290 1476                             l178 1AD8  
                           l187 1AC4                             l293 14A0                             l286 143C  
                           l542 1078                             l279 17B2                             l551 1AB8  
                           l384 1A82                             l464 188E                             l465 188E  
                           l554 1A44                             l548 1A9E                             l785 1636  
                           u110 1A08                             u111 1A04                             u120 1A1E  
                           u121 1A1A                             u820 1586                             u821 1582  
                           u830 15A0                             u831 159C                             u840 15C6  
                           u904 11D4                             u920 1714                             u841 15C2  
                           u905 11D0                             u921 1710                             u850 15E4  
                           u914 123E                             u930 1738                             u851 15E0  
                           u915 123A                             u931 1734                             u860 1600  
                           u940 1782                             u861 15FC                             u941 177E  
                           u870 1626                             u950 179A                             u871 1622  
                           u951 1796                             u880 1096                             u960 13F2  
                           u881 1092                             u961 13EE                             u890 117A  
                           u970 141C                             u891 1176                             u971 1418  
                           u980 1452                             u981 144E                             u990 148C  
                           u991 1488                             wreg 000FE8                            l2100 1096  
                          l2110 11E4                            l2102 10F8                            l2104 113E  
                          l2120 1738                            l2112 16F8                            l2200 12D4  
                          l1320 1A08                            l2050 1A3C                            l2106 115E  
                          l2130 1782                            l2122 1744                            l2114 16FC  
                          l2210 132C                            l2202 12E0                            l1410 19DE  
                          l2060 158E                            l2108 117A                            l2220 17D8  
                          l2132 179A                            l2124 1750                            l2116 1714  
                          l2140 13C0                            l2212 1338                            l2204 12F2  
                          l2300 0F08                            l1412 19E0                            l2070 15B4  
                          l2062 1592                            l2054 1574                            l2230 182E  
                          l2222 17F0                            l2126 175C                            l2118 1720  
                          l2150 140A                            l2142 13CC                            l2134 1378  
                          l2214 1348                            l2206 12FE                            l2310 0F96  
                          l2302 0F1A                            l1414 19E2                            l1406 19CE  
                          l1318 19F8                            l1350 1AC0                            l2080 15EA  
                          l2072 15C6                            l2064 15A0                            l2056 1578  
                          l2048 1A20                            l2224 17FC                            l2128 176A  
                          l2160 1462                            l2152 141C                            l2136 139C  
                          l2144 13DA                            l2240 192E                            l2232 18D8  
                          l2216 1362                            l2208 130E                            l2320 103E  
                          l2312 0FC2                            l2304 0F46                            l1416 19E4  
                          l1408 19D8                            l1344 1AD0                            l1352 1AC6  
                          l2400 1878                            l2082 1600                            l2074 15CE  
                          l2090 1616                            l2066 15A8                            l2058 1586  
                          l2226 1808                            l2218 17B4                            l2162 1472  
                          l2154 1428                            l2146 13F2                            l2138 13B4  
                          l2170 1674                            l2242 1946                            l2234 18EC  
                          l2322 1050                            l2314 0FD4                            l2306 0F58  
                          l1346 1AD4                            l1354 1ACA                            l2250 19A8  
                          l2092 1626                            l2084 1608                            l2076 15D6  
                          l2068 15AC                            l2228 1816                            l2164 148C  
                          l2156 1438                            l2148 13FE                            l2244 1AA0  
                          l2180 16CA                            l2172 1680                            l2236 1904  
                          l2316 1000                            l2308 0F84                            l1348 1ABC  
                          l2252 19B8                            l2260 18BE                            l2094 162E  
                          l2086 160A                            l2078 15E4                            l2158 1456  
                          l2182 16E2                            l2174 168C                            l2166 1638  
                          l2238 191A                            l2190 128A                            l2318 1012  
                          l2254 19C2                            l2246 199A                            l2262 18D2  
                          l2270 14BE                            l1606 1A84                            l2088 1610  
                          l2168 165C                            l2176 169A                            l2192 1296  
                          l2184 1A48                            l2248 199E                            l2264 18D4  
                          l2256 1896                            l2272 14D2                            l2098 107A  
                          l2178 16B2                            l2194 12A2                            l2186 124E  
                          l2290 0E7A                            l2258 18A6                            l2274 14E6  
                          l2266 14A2                            l2188 1272                            l2196 12B0  
                          l2292 0E8E                            l2276 14F6                            l2268 14AE  
                          l2198 12C8                            l2294 0E9E                            l2286 0E56  
                          l2278 150A                            l1590 1A72                            l2390 1850  
                          l2296 0ECA                            l2288 0E6A                            l1592 1A7C  
                          l2392 185C                            l2298 0EDC                            l1594 1A7E  
                          l1586 1A66                            l2394 1860                            l2386 1848  
                          l1596 1A80                            l1588 1A70                            l2396 1874  
                          l2388 184C                            l2398 1878                            STR_1 0E05  
                          STR_3 0E3E                            STR_4 0E4E                            STR_5 0E38  
                          STR_6 0E44                            STR_7 0E25                            STR_8 0E49  
                          STR_9 0E1E                            u1000 16B2                            u1001 16AE  
                          u1010 16CA                            u1011 16C6                            u1020 12C8  
                          u1100 0EDC                            u1021 12C4                            u1101 0ED8  
                          u1030 12F2                            u1110 0F1A                            u1031 12EE  
                          u1111 0F16                            u1040 1328                            u1120 0F58  
                          u1041 1324                            u1121 0F54                            u1050 1362  
                          u1130 0F96                            u1051 135E                            u1131 0F92  
                          u1060 182E                            u1140 0FD4                            u1061 182A  
                          u1141 0FD0                            u1070 1846                            u1150 1012  
                          u1071 1842                            u1151 100E                            u1160 1050  
                          u1080 0E7A                            u1161 104C                            u1081 0E76  
                          u1090 0E9E                            u1307 18F6                            u1091 0E9A  
                          u1317 1938                            u1327 1692                    _BAUD4CONbits 000EE9  
                          u1337 16D4                            _LATE 000F7D                            u1347 13D2  
                          u1267 19AE                            _LATG 000F7F                            u1357 142E  
                          u1277 12A8                            u1367 1468                            u1287 1304  
                          u1377 1762                            u1297 133E                            _T2PR 000FBC  
                          u1387 17A4                            u1397 180E                            _main 1848  
                          fsr1h 000FE2                            fsr2h 000FDA                            indf1 000FE7  
                          indf2 000FDF                            fsr1l 000FE1                            fsr2l 000FD9  
                          _stop 16F8                            prodh 000FF4                            prodl 000FF3  
                          start 0000                    ___param_bank 000000                           ?_main 0001  
                         _ADPCH 000F5F                 __end_of___awdiv 1638                           STR_10 0E13  
                         STR_11 0E2C                           STR_12 0E32                           ?_stop 001A  
               ___awdiv@divisor 0009                 ___awdiv@counter 000B      __end_of_I2C_2_Master_Start 1ADA  
    __end_of_I2C_2_Master_Write 1AC6                           _color 0059                           _toint 0E01  
                         tablat 000FF5                           status 000FD8                 ??_short_reverse 002A  
               __initialization 195C                    __end_of_main 1896                    __end_of_stop 17B4  
                        ??_main 0037                          ??_stop 001E                   __activetblptr 000001  
        _initDCmotors_parameter 14A2                    ?_setMotorPWM 000F                          _ADRESH 000F64  
              ___awdiv@dividend 0007                          _RC0PPS 000E62                          _RC4REG 000EE3  
                        _RE2PPS 000E74                          _RD5PPS 000E6F                          _RC7PPS 000E69  
                        _RD6PPS 000E70              turnLeft@angle_left 0024        __end_of_color_click_init 19CE  
                        _RX4PPS 000E15                          _TX4REG 000EE4                          ___wmul 1A20  
                     ??___awdiv 000B                          _action 0E54                          _goback 1AA0  
                        clear_0 197A                          clear_1 1986                ___awdiv@quotient 000D  
                        _motorL 004B                          _motorR 00B0                          isa$std 000001  
              __end_of_pin_init 1AA0                    __pdataCOMRAM 005E                    __mediumconst 0000  
                        tblptrh 000FF7                          tblptrl 000FF6                          tblptru 000FF8  
                        stop@mL 001A                          stop@mR 001C               ??_initDCmotorsPWM 0003  
              __end_of_turnLeft 14A2                 fullSpeedBack@mL 0020                 fullSpeedBack@mR 0022  
                    __accesstop 0060         __end_of__initialization 198C    initDCmotors_parameter@motorL 0001  
  initDCmotors_parameter@motorR 0003                   ___rparam_used 000001                  __pcstackCOMRAM 0001  
                 _fullSpeedBack 1638            turnRight@angle_right 0024                   __end_of_toint 0E05  
                    __pbssBANK0 0060               _color_writetoaddr 1A46                    _T2CLKCONbits 000FBF  
                ?_fullSpeedBack 0020              ?_color_writetoaddr 0003                         ?___wmul 0001  
                       ?_action 0032                         ?_goback 002E             ??_color_writetoaddr 0004  
                       _SP4BRGH 000EE6                         _SP4BRGL 000EE5                         _PWM6DCH 000FA3  
                       _PWM7DCH 000FA0                         _SSP2ADD 000ED6                         _SSP2BUF 000ED5  
        color_writetoaddr@value 0003       __end_of_color_writetoaddr 1A66                       _ADREFbits 000F58  
            _I2C_2_Master_Start 1AD0                      _initUSART4 1A66              _I2C_2_Master_Write 1ABA  
                     ?_pin_init 0001                         __Hparam 0000                         __Lparam 0000  
                       ___awdiv 1574             ?_I2C_2_Master_Start 0001             ?_I2C_2_Master_Write 0001  
                  __psmallconst 0E00                         __pcinit 195C                         __ramtop 0E00  
                     ?_turnLeft 0020                         __ptext0 1848                         __ptext1 1A84  
                       __ptext2 1A66                         __ptext3 14A2                         __ptext4 1896  
                       __ptext5 199A                         __ptext6 1A46                         __ptext7 1ABA  
                       __ptext8 1AC6                         __ptext9 1AD0         ?_initDCmotors_parameter 0001  
                     _T2CONbits 000FBD                       _T2HLTbits 000FBE                   _RxBufWriteCnt 005D  
          ??_I2C_2_Master_Start 0002            ??_I2C_2_Master_Write 0002            end_of_initialization 198C  
            setMotorPWM@PWMduty 0018                 _CALIBRATION_180 005E               ?_color_click_init 0001  
               ??_fullSpeedBack 0024                      ??_pin_init 0001              ??_color_click_init 0005  
         __end_of_short_reverse 191A                         postdec1 000FE5                         postdec2 000FDD  
                       postinc0 000FEE                         postinc1 000FE6                         postinc2 000FDE  
               _initDCmotorsPWM 1896                      ??_turnLeft 0025  __end_of_initDCmotors_parameter 1574  
                     _PORTFbits 000F8E               __end_of_turnRight 1378                       _TRISAbits 000F81  
                     _TRISCbits 000F83                       _TRISDbits 000F84                       _TRISEbits 000F85  
                     _TRISFbits 000F86                       _TRISGbits 000F87                fullSpeedAhead@mL 001A  
              fullSpeedAhead@mR 001C        color_writetoaddr@address 0004                    _EUSART4RXbuf 009C  
                  _EUSART4TXbuf 0060                     ?_initUSART4 0001                      main@motorL 0037  
                    main@motorR 0041                  _fullSpeedAhead 17B4                  __end_of___wmul 1A46  
                __end_of_action 107A                   __pidataCOMRAM 1ADA                  __end_of_goback 1ABA  
            turnRight@delay_180 0026             start_initialization 195C                   _TxBufWriteCnt 005B  
             turnLeft@delay_180 0026                  _reverse_square 191A         __end_of_initDCmotorsPWM 18D8  
        __end_of_fullSpeedAhead 1848                        ??___wmul 0005                        ??_action 0036  
                      ??_goback 0032                 short_reverse@mL 0026                 short_reverse@mR 0028  
                   __pbssCOMRAM 004B          __end_of_reverse_square 195C                 ?_fullSpeedAhead 001A  
                      ?___awdiv 0007                 turnRight@i_1199 002A                  turnLeft@i_1176 002A  
                   __smallconst 0E00               _I2C_2_Master_Idle 19F8               _I2C_2_Master_Init 19CE  
             _I2C_2_Master_Stop 1AC6                    _RxBufReadCnt 005C              ?_I2C_2_Master_Idle 0001  
            ?_I2C_2_Master_Init 0001                   ??_setMotorPWM 0011              ?_I2C_2_Master_Stop 0001  
      initDCmotorsPWM@PWMperiod 0001             ??_I2C_2_Master_Idle 0001             ??_I2C_2_Master_Init 0001  
                ___wmul@product 0005                        _LATAbits 000F79             ??_I2C_2_Master_Stop 0002  
                      _LATCbits 000F7B                        _LATEbits 000F7D                        _LATFbits 000F7E  
                      _LATGbits 000F7F                 ?_reverse_square 0026                        _PIE4bits 000E2D  
                   turnRight@mL 0020                     turnRight@mR 0022                        _PIR4bits 000E37  
              ?_initDCmotorsPWM 0001                        _SSP2CON2 000EDA                        _SSP2STAT 000ED8  
                    _ADCON0bits 000F60       __end_of_I2C_2_Master_Idle 1A20       __end_of_I2C_2_Master_Init 19F8  
             ___wmul@multiplier 0001       __end_of_I2C_2_Master_Stop 1AD0                    setMotorPWM@m 000F  
   I2C_2_Master_Write@data_byte 0002                    _TxBufReadCnt 005A                       _turnRight 124E  
           __end_of_setMotorPWM 124E                      roundf@F527 0055                    ??_initUSART4 0001  
                      __Hrparam 0000                        __Lrparam 0000           __end_of_fullSpeedBack 16F8  
                  __Lsmallconst 0E00                      _ANSELDbits 000EA7                      _ANSELFbits 000EB4  
                   action@color 0036              __end_of_initUSART4 1A84                      ?_turnRight 0020  
                      __ptext10 19F8                        __ptext11 19CE                        __ptext20 17B4  
                      __ptext12 0E54                        __ptext21 107A                        __ptext13 124E  
                      __ptext22 1A20                        __ptext14 18D8                        __ptext23 1574  
                      __ptext15 191A                        __ptext16 1638                        __ptext17 1AA0  
                      __ptext18 1378                        __ptext19 16F8                    _SSP2CON1bits 000ED9  
                  _SSP2CON2bits 000EDA                  turnRight@delay 002C                   turnLeft@delay 002C  
                      action@mL 0032                        action@mR 0034                      turnLeft@mL 0020  
                    turnLeft@mR 0022                        _pin_init 1A84                      turnRight@i 0028  
                      isa$xinst 000000                      _RC4STAbits 000EE7                     _SENSITIVITY 005F  
                      goback@mL 002E                        goback@mR 0030                        _turnLeft 1378  
                   _setMotorPWM 107A                     _PWM6CONbits 000FA4                     _PWM7CONbits 000FA1  
              ??_fullSpeedAhead 001E                       turnLeft@i 0028                reverse_square@mL 0026  
              reverse_square@mR 0028        ??_initDCmotors_parameter 0005                   _short_reverse 18D8  
              _color_click_init 199A                      _SSP2DATPPS 000E1D                      _SSP2CLKPPS 000E1C  
                   ??_turnRight 0025                ??_reverse_square 002A                      _TX4STAbits 000EE8  
