

Microchip MPLAB XC8 Assembler V2.35 build 20211206165544 
                                                                                               Tue Mar 15 15:27:53 2022

Microchip MPLAB XC8 C Compiler v2.35 (Free license) build 20211206165544 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=3
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=3
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=3
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=3
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=3
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=3
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=2
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=2
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=3
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=3
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=2
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=2
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=2
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=2
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=2
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=2
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=2
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1,group=2
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	text59,global,reloc=2,class=CODE,delta=1
    74                           	psect	text60,global,reloc=2,class=CODE,delta=1
    75                           	psect	text61,global,reloc=2,class=CODE,delta=1
    76                           	psect	text62,global,reloc=2,class=CODE,delta=1
    77                           	psect	text63,global,reloc=2,class=CODE,delta=1
    78                           	psect	text64,global,reloc=2,class=CODE,delta=1
    79                           	psect	text65,global,reloc=2,class=CODE,delta=1
    80                           	psect	text66,global,reloc=2,class=CODE,delta=1
    81                           	psect	text67,global,reloc=2,class=CODE,delta=1
    82                           	psect	text68,global,reloc=2,class=CODE,delta=1
    83                           	psect	text69,global,reloc=2,class=CODE,delta=1
    84                           	psect	text70,global,reloc=2,class=CODE,delta=1
    85                           	psect	text71,global,reloc=2,class=CODE,delta=1
    86                           	psect	text72,global,reloc=2,class=CODE,delta=1
    87                           	psect	text73,global,reloc=2,class=CODE,delta=1,group=2
    88                           	psect	text74,global,reloc=2,class=CODE,delta=1,group=2
    89                           	psect	text75,global,reloc=2,class=CODE,delta=1
    90                           	psect	text76,global,reloc=2,class=CODE,delta=1
    91                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    92                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    93                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    94                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    95                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    96                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    97  0000                     
    98                           ; Version 2.35
    99                           ; Generated 05/05/2021 GMT
   100                           ; 
   101                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
   102                           ; All rights reserved.
   103                           ; 
   104                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   105                           ; 
   106                           ; Redistribution and use in source and binary forms, with or without modification, are
   107                           ; permitted provided that the following conditions are met:
   108                           ; 
   109                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   110                           ;        conditions and the following disclaimer.
   111                           ; 
   112                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   113                           ;        of conditions and the following disclaimer in the documentation and/or other
   114                           ;        materials provided with the distribution. Publication is not required when
   115                           ;        this file is used in an embedded application.
   116                           ; 
   117                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   118                           ;        software without specific prior written permission.
   119                           ; 
   120                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   121                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   122                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   123                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   124                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   125                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   126                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   127                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   128                           ; 
   129                           ; 
   130                           ; Code-generator required, PIC18F67K40 Definitions
   131                           ; 
   132                           ; SFR Addresses
   133  0000                     
   134                           	psect	idataBANK0
   135  005E9C                     __pidataBANK0:
   136                           	callstack 0
   137                           
   138                           ;initializer for _SENSITIVITY
   139  005E9C  09                 	db	9
   140                           
   141                           	psect	smallconst
   142  000E00                     __psmallconst:
   143                           	callstack 0
   144  000E00  00                 	db	0
   145  000E01  0000               	dw	0
   146  000E03  4B00               	dw	19200
   147  000E05                     __end_of_toint:
   148                           	callstack 0
   149  0000                     _TX4REG	set	3812
   150  0000                     _RC4STAbits	set	3815
   151  0000                     _SP4BRGH	set	3814
   152  0000                     _LATEbits	set	3965
   153  0000                     _TRISGbits	set	3975
   154  0000                     _TRISEbits	set	3973
   155  0000                     _LATGbits	set	3967
   156  0000                     _LATFbits	set	3966
   157  0000                     _TRISFbits	set	3974
   158  0000                     _SSP2CON2bits	set	3802
   159  0000                     _LATG	set	3967
   160  0000                     _LATE	set	3965
   161  0000                     _RX4PPS	set	3605
   162  0000                     _SSP2CLKPPS	set	3612
   163  0000                     _SSP2DATPPS	set	3613
   164  0000                     _ANSELDbits	set	3751
   165  0000                     _SSP2ADD	set	3798
   166  0000                     _SSP2CON1bits	set	3801
   167  0000                     _LATAbits	set	3961
   168  0000                     _LATDbits	set	3964
   169  0000                     _LATHbits	set	3968
   170  0000                     _TRISDbits	set	3972
   171  0000                     _TRISHbits	set	3976
   172  0000                     _PORTFbits	set	3982
   173  0000                     _T2PR	set	4028
   174  0000                     _T2CONbits	set	4029
   175  0000                     _PWM7DCH	set	4000
   176  0000                     _PWM6DCH	set	4003
   177  0000                     _TRISAbits	set	3969
   178  0000                     _TRISCbits	set	3971
   179  0000                     _LATCbits	set	3963
   180  0000                     _RC4REG	set	3811
   181  0000                     _SP4BRGL	set	3813
   182  0000                     _TX4STAbits	set	3816
   183  0000                     _BAUD4CONbits	set	3817
   184  0000                     _SSP2CON2	set	3802
   185  0000                     _SSP2STAT	set	3800
   186  0000                     _ANSELFbits	set	3764
   187  0000                     _SSP2BUF	set	3797
   188  0000                     _PIE0bits	set	3625
   189  0000                     _PIR4bits	set	3639
   190  0000                     _RC0PPS	set	3682
   191  0000                     _RC7PPS	set	3689
   192  0000                     _RD5PPS	set	3695
   193  0000                     _RE2PPS	set	3700
   194  0000                     _RD6PPS	set	3696
   195  0000                     _TMR0L	set	4051
   196  0000                     _TMR0H	set	4052
   197  0000                     _T0CON0bits	set	4053
   198  0000                     _T2CLKCONbits	set	4031
   199  0000                     _T2HLTbits	set	4030
   200  0000                     _PWM6CONbits	set	4004
   201  0000                     _PWM7CONbits	set	4001
   202  0000                     _T0CON1bits	set	4054
   203  0000                     _INTCONbits	set	4082
   204  0000                     _PIR0bits	set	3635
   205  000E05                     STR_1:
   206                           
   207                           ; BSR set to: 14
   208  000E05  25                 	db	37
   209  000E06  64                 	db	100	;'d'
   210  000E07  09                 	db	9
   211  000E08  25                 	db	37
   212  000E09  64                 	db	100	;'d'
   213  000E0A  09                 	db	9
   214  000E0B  25                 	db	37
   215  000E0C  64                 	db	100	;'d'
   216  000E0D  09                 	db	9
   217  000E0E  25                 	db	37
   218  000E0F  64                 	db	100	;'d'
   219  000E10  0D                 	db	13
   220  000E11  0A                 	db	10
   221  000E12  00                 	db	0
   222  000E13  00                 	db	0	; dummy byte at the end
   223  0000                     
   224                           ; #config settings
   225                           
   226                           	psect	cinit
   227  005AF0                     __pcinit:
   228                           	callstack 0
   229  005AF0                     start_initialization:
   230                           	callstack 0
   231  005AF0                     __initialization:
   232                           	callstack 0
   233                           
   234                           ; Initialize objects allocated to BANK0 (1 bytes)
   235                           ; load TBLPTR registers with __pidataBANK0
   236  005AF0  0E9C               	movlw	low __pidataBANK0
   237  005AF2  6EF6               	movwf	tblptrl,c
   238  005AF4  0E5E               	movlw	high __pidataBANK0
   239  005AF6  6EF7               	movwf	tblptrh,c
   240  005AF8  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   241  005AFA  6EF8               	movwf	tblptru,c
   242  005AFC  0009               	tblrd		*+	;fetch initializer
   243  005AFE  CFF5 F0FE          	movff	tablat,__pdataBANK0
   244                           
   245                           ; Clear objects allocated to BANK1 (104 bytes)
   246  005B02  EE01  F000         	lfsr	0,__pbssBANK1
   247  005B06  0E68               	movlw	104
   248  005B08                     clear_0:
   249  005B08  6AEE               	clrf	postinc0,c
   250  005B0A  06E8               	decf	wreg,f,c
   251  005B0C  E1FD               	bnz	clear_0
   252                           
   253                           ; Clear objects allocated to BANK0 (6 bytes)
   254  005B0E  0100               	movlb	0
   255  005B10  6BFD               	clrf	(__pbssBANK0+5)& (0+255),b
   256  005B12  6BFC               	clrf	(__pbssBANK0+4)& (0+255),b
   257  005B14  6BFB               	clrf	(__pbssBANK0+3)& (0+255),b
   258  005B16  6BFA               	clrf	(__pbssBANK0+2)& (0+255),b
   259  005B18  6BF9               	clrf	(__pbssBANK0+1)& (0+255),b
   260  005B1A  6BF8               	clrf	__pbssBANK0& (0+255),b
   261  005B1C                     end_of_initialization:
   262                           	callstack 0
   263  005B1C                     __end_of__initialization:
   264                           	callstack 0
   265  005B1C  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   266  005B1E  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   267  005B20  0E00               	movlw	low (__Lsmallconst shr (0+16))
   268  005B22  6EF8               	movwf	tblptru,c
   269  005B24  0E0E               	movlw	high __Lsmallconst
   270  005B26  6EF7               	movwf	tblptrh,c
   271  005B28  0100               	movlb	0
   272  005B2A  EFC3  F019         	goto	_main	;jump to C main() function
   273                           
   274                           	psect	bssBANK0
   275  0000F8                     __pbssBANK0:
   276                           	callstack 0
   277  0000F8                     _width:
   278                           	callstack 0
   279  0000F8                     	ds	2
   280  0000FA                     _prec:
   281                           	callstack 0
   282  0000FA                     	ds	2
   283  0000FC                     _flags:
   284                           	callstack 0
   285  0000FC                     	ds	2
   286                           
   287                           	psect	dataBANK0
   288  0000FE                     __pdataBANK0:
   289                           	callstack 0
   290  0000FE                     _SENSITIVITY:
   291                           	callstack 0
   292  0000FE                     	ds	1
   293                           
   294                           	psect	bssBANK1
   295  000100                     __pbssBANK1:
   296                           	callstack 0
   297  000100                     _memory:
   298                           	callstack 0
   299  000100                     	ds	40
   300  000128                     _motorR:
   301                           	callstack 0
   302  000128                     	ds	9
   303  000131                     _motorL:
   304                           	callstack 0
   305  000131                     	ds	9
   306  00013A                     roundf@F527:
   307                           	callstack 0
   308  00013A                     	ds	4
   309  00013E                     _nout:
   310                           	callstack 0
   311  00013E                     	ds	2
   312  000140                     _stop_move:
   313                           	callstack 0
   314  000140                     	ds	2
   315  000142                     _start_move:
   316                           	callstack 0
   317  000142                     	ds	2
   318  000144                     _centisecond:
   319                           	callstack 0
   320  000144                     	ds	2
   321  000146                     _color:
   322                           	callstack 0
   323  000146                     	ds	1
   324  000147                     _array_index:
   325                           	callstack 0
   326  000147                     	ds	1
   327  000148                     _dbuf:
   328                           	callstack 0
   329  000148                     	ds	32
   330                           
   331                           	psect	cstackBANK1
   332  000168                     __pcstackBANK1:
   333                           	callstack 0
   334  000168                     main@amb:
   335                           	callstack 0
   336                           
   337                           ; 8 bytes @ 0x0
   338  000168                     	ds	8
   339  000170                     main@amb_light:
   340                           	callstack 0
   341                           
   342                           ; 2 bytes @ 0x8
   343  000170                     	ds	2
   344  000172                     main@setup:
   345                           	callstack 0
   346                           
   347                           ; 1 bytes @ 0xA
   348  000172                     	ds	1
   349  000173                     main@stop_signal:
   350                           	callstack 0
   351                           
   352                           ; 1 bytes @ 0xB
   353  000173                     	ds	1
   354  000174                     main@rgb:
   355                           	callstack 0
   356                           
   357                           ; 8 bytes @ 0xC
   358  000174                     	ds	8
   359  00017C                     main@white:
   360                           	callstack 0
   361                           
   362                           ; 28 bytes @ 0x14
   363  00017C                     	ds	28
   364  000198                     main@motorL:
   365                           	callstack 0
   366                           
   367                           ; 9 bytes @ 0x30
   368  000198                     	ds	9
   369  0001A1                     main@motorR:
   370                           	callstack 0
   371                           
   372                           ; 9 bytes @ 0x39
   373  0001A1                     	ds	9
   374                           
   375                           	psect	cstackBANK0
   376  000060                     __pcstackBANK0:
   377                           	callstack 0
   378  000060                     ??___fltol:
   379  000060                     ?_sprintf:
   380                           	callstack 0
   381  000060                     sprintf@s:
   382                           	callstack 0
   383                           
   384                           ; 2 bytes @ 0x0
   385  000060                     	ds	2
   386  000062                     sprintf@fmt:
   387                           	callstack 0
   388                           
   389                           ; 2 bytes @ 0x2
   390  000062                     	ds	2
   391  000064                     ___fltol@sign1:
   392                           	callstack 0
   393                           
   394                           ; 1 bytes @ 0x4
   395  000064                     	ds	1
   396  000065                     ___fltol@exp1:
   397                           	callstack 0
   398                           
   399                           ; 1 bytes @ 0x5
   400  000065                     	ds	1
   401  000066                     ?_lroundf:
   402                           	callstack 0
   403  000066                     lroundf@x:
   404                           	callstack 0
   405                           
   406                           ; 4 bytes @ 0x6
   407  000066                     	ds	4
   408  00006A                     ?_amb_light_measure:
   409                           	callstack 0
   410  00006A                     compare@lower:
   411                           	callstack 0
   412  00006A                     amb_light_measure@amb:
   413                           	callstack 0
   414  00006A                     distance_measure@mL:
   415                           	callstack 0
   416                           
   417                           ; 2 bytes @ 0xA
   418  00006A                     	ds	2
   419  00006C                     ??_amb_light_measure:
   420  00006C                     compare@value2compare:
   421                           	callstack 0
   422  00006C                     distance_measure@mR:
   423                           	callstack 0
   424  00006C                     sprintf@ap:
   425                           	callstack 0
   426                           
   427                           ; 2 bytes @ 0xC
   428  00006C                     	ds	2
   429  00006E                     compare@upper:
   430                           	callstack 0
   431  00006E                     amb_light_measure@upper_bound:
   432                           	callstack 0
   433  00006E                     distance_measure@amb_light:
   434                           	callstack 0
   435  00006E                     sprintf@f:
   436                           	callstack 0
   437                           
   438                           ; 11 bytes @ 0xE
   439  00006E                     	ds	2
   440  000070                     ??_distance_measure:
   441  000070                     compare@result:
   442                           	callstack 0
   443  000070                     amb_light_measure@CC_amb_ave:
   444                           	callstack 0
   445                           
   446                           ; 2 bytes @ 0x10
   447  000070                     	ds	1
   448  000071                     detect_color@m:
   449                           	callstack 0
   450                           
   451                           ; 2 bytes @ 0x11
   452  000071                     	ds	1
   453  000072                     amb_light_measure@CC_amb_1:
   454                           	callstack 0
   455  000072                     distance_measure@CG_amb:
   456                           	callstack 0
   457                           
   458                           ; 2 bytes @ 0x12
   459  000072                     	ds	1
   460  000073                     detect_color@w:
   461                           	callstack 0
   462                           
   463                           ; 2 bytes @ 0x13
   464  000073                     	ds	1
   465  000074                     amb_light_measure@CC_amb_2:
   466                           	callstack 0
   467  000074                     _distance_measure$3206:
   468                           	callstack 0
   469                           
   470                           ; 4 bytes @ 0x14
   471  000074                     	ds	1
   472  000075                     ??_detect_color:
   473                           
   474                           ; 1 bytes @ 0x15
   475  000075                     	ds	1
   476  000076                     amb_light_measure@CC_amb_3:
   477                           	callstack 0
   478                           
   479                           ; 2 bytes @ 0x16
   480  000076                     	ds	2
   481  000078                     distance_measure@CC_amb:
   482                           	callstack 0
   483                           
   484                           ; 2 bytes @ 0x18
   485  000078                     	ds	1
   486  000079                     detect_color@RG:
   487                           	callstack 0
   488  000079                     color_display@buf:
   489                           	callstack 0
   490  000079                     color_predict@buf:
   491                           	callstack 0
   492                           
   493                           ; 100 bytes @ 0x19
   494  000079                     	ds	1
   495  00007A                     distance_measure@threshold:
   496                           	callstack 0
   497                           
   498                           ; 2 bytes @ 0x1A
   499  00007A                     	ds	1
   500  00007B                     detect_color@BC:
   501                           	callstack 0
   502                           
   503                           ; 2 bytes @ 0x1B
   504  00007B                     	ds	1
   505  00007C                     distance_measure@stop:
   506                           	callstack 0
   507                           
   508                           ; 1 bytes @ 0x1C
   509  00007C                     	ds	1
   510  00007D                     detect_color@GR:
   511                           	callstack 0
   512                           
   513                           ; 2 bytes @ 0x1D
   514  00007D                     	ds	2
   515  00007F                     detect_color@BB:
   516                           	callstack 0
   517                           
   518                           ; 2 bytes @ 0x1F
   519  00007F                     	ds	2
   520  000081                     detect_color@RB:
   521                           	callstack 0
   522                           
   523                           ; 2 bytes @ 0x21
   524  000081                     	ds	2
   525  000083                     detect_color@GB:
   526                           	callstack 0
   527                           
   528                           ; 2 bytes @ 0x23
   529  000083                     	ds	2
   530  000085                     detect_color@BR:
   531                           	callstack 0
   532                           
   533                           ; 2 bytes @ 0x25
   534  000085                     	ds	2
   535  000087                     detect_color@GG:
   536                           	callstack 0
   537                           
   538                           ; 2 bytes @ 0x27
   539  000087                     	ds	2
   540  000089                     detect_color@color:
   541                           	callstack 0
   542                           
   543                           ; 1 bytes @ 0x29
   544  000089                     	ds	1
   545  00008A                     detect_color@RR:
   546                           	callstack 0
   547                           
   548                           ; 2 bytes @ 0x2A
   549  00008A                     	ds	2
   550  00008C                     detect_color@BG:
   551                           	callstack 0
   552                           
   553                           ; 2 bytes @ 0x2C
   554  00008C                     	ds	2
   555  00008E                     _detect_color$3205:
   556                           	callstack 0
   557                           
   558                           ; 4 bytes @ 0x2E
   559  00008E                     	ds	4
   560  000092                     verify_color@m:
   561                           	callstack 0
   562                           
   563                           ; 2 bytes @ 0x32
   564  000092                     	ds	2
   565  000094                     verify_color@w:
   566                           	callstack 0
   567                           
   568                           ; 2 bytes @ 0x34
   569  000094                     	ds	2
   570  000096                     ??_verify_color:
   571                           
   572                           ; 1 bytes @ 0x36
   573  000096                     	ds	2
   574  000098                     verify_color@color2:
   575                           	callstack 0
   576                           
   577                           ; 2 bytes @ 0x38
   578  000098                     	ds	2
   579  00009A                     verify_color@color:
   580                           	callstack 0
   581                           
   582                           ; 1 bytes @ 0x3A
   583  00009A                     	ds	67
   584  0000DD                     color_predict@color:
   585                           	callstack 0
   586                           
   587                           ; 1 bytes @ 0x7D
   588  0000DD                     	ds	1
   589  0000DE                     color_data_collection@i:
   590                           	callstack 0
   591                           
   592                           ; 2 bytes @ 0x7E
   593  0000DE                     	ds	2
   594  0000E0                     color_data_collection@j:
   595                           	callstack 0
   596                           
   597                           ; 2 bytes @ 0x80
   598  0000E0                     	ds	2
   599  0000E2                     color_data_collection@k:
   600                           	callstack 0
   601                           
   602                           ; 2 bytes @ 0x82
   603  0000E2                     	ds	2
   604  0000E4                     color_data_collection@x:
   605                           	callstack 0
   606                           
   607                           ; 2 bytes @ 0x84
   608  0000E4                     	ds	2
   609  0000E6                     test_function@m:
   610                           	callstack 0
   611                           
   612                           ; 2 bytes @ 0x86
   613  0000E6                     	ds	2
   614  0000E8                     test_function@w:
   615                           	callstack 0
   616                           
   617                           ; 2 bytes @ 0x88
   618  0000E8                     	ds	2
   619  0000EA                     test_function@mL:
   620                           	callstack 0
   621                           
   622                           ; 2 bytes @ 0x8A
   623  0000EA                     	ds	2
   624  0000EC                     test_function@mR:
   625                           	callstack 0
   626                           
   627                           ; 2 bytes @ 0x8C
   628  0000EC                     	ds	2
   629  0000EE                     ??_test_function:
   630                           
   631                           ; 1 bytes @ 0x8E
   632  0000EE                     	ds	2
   633  0000F0                     test_function@amb_light:
   634                           	callstack 0
   635                           
   636                           ; 2 bytes @ 0x90
   637  0000F0                     	ds	2
   638  0000F2                     test_function@complete:
   639                           	callstack 0
   640                           
   641                           ; 1 bytes @ 0x92
   642  0000F2                     	ds	1
   643  0000F3                     test_function@color:
   644                           	callstack 0
   645                           
   646                           ; 1 bytes @ 0x93
   647  0000F3                     	ds	1
   648  0000F4                     test_function@stop_signal:
   649                           	callstack 0
   650                           
   651                           ; 1 bytes @ 0x94
   652  0000F4                     	ds	1
   653  0000F5                     test_function@test_code:
   654                           	callstack 0
   655                           
   656                           ; 1 bytes @ 0x95
   657  0000F5                     	ds	1
   658  0000F6                     ??_main:
   659                           
   660                           ; 1 bytes @ 0x96
   661  0000F6                     	ds	2
   662                           
   663                           	psect	cstackCOMRAM
   664  000001                     __pcstackCOMRAM:
   665                           	callstack 0
   666  000001                     ??_LED_OFF:
   667  000001                     ??_LED_R:
   668  000001                     ??_LED_C:
   669  000001                     ??_LED_B:
   670  000001                     ??_LED_G:
   671  000001                     ??_I2C_2_Master_Idle:
   672  000001                     ?_strlen:
   673                           	callstack 0
   674  000001                     ?___wmul:
   675                           	callstack 0
   676  000001                     ?___fladd:
   677                           	callstack 0
   678  000001                     ?___flneg:
   679                           	callstack 0
   680  000001                     ?___xxtofl:
   681                           	callstack 0
   682  000001                     ?___aodiv:
   683                           	callstack 0
   684  000001                     ?___aomod:
   685                           	callstack 0
   686  000001                     toggle_light@toggletime:
   687                           	callstack 0
   688  000001                     sendCharSerial4@charToSend:
   689                           	callstack 0
   690  000001                     initDCmotorsPWM@PWMperiod:
   691                           	callstack 0
   692  000001                     initDCmotors_parameter@motorL:
   693                           	callstack 0
   694  000001                     ___wmul@multiplier:
   695                           	callstack 0
   696  000001                     fputc@c:
   697                           	callstack 0
   698  000001                     strlen@s:
   699                           	callstack 0
   700  000001                     ___flge@ff1:
   701                           	callstack 0
   702  000001                     ___flneg@f1:
   703                           	callstack 0
   704  000001                     ___fladd@b:
   705                           	callstack 0
   706  000001                     ___xxtofl@val:
   707                           	callstack 0
   708  000001                     ___aodiv@dividend:
   709                           	callstack 0
   710  000001                     ___aomod@dividend:
   711                           	callstack 0
   712                           
   713                           ; 8 bytes @ 0x0
   714  000001                     	ds	1
   715  000002                     ??_I2C_2_Master_Read:
   716  000002                     ??_toggle_light:
   717  000002                     I2C_2_Master_Write@data_byte:
   718                           	callstack 0
   719  000002                     sendStringSerial4@string:
   720                           	callstack 0
   721                           
   722                           ; 2 bytes @ 0x1
   723  000002                     	ds	1
   724  000003                     color_writetoaddr@value:
   725                           	callstack 0
   726  000003                     I2C_2_Master_Read@ack:
   727                           	callstack 0
   728  000003                     initDCmotors_parameter@motorR:
   729                           	callstack 0
   730  000003                     ___wmul@multiplicand:
   731                           	callstack 0
   732  000003                     fputc@fp:
   733                           	callstack 0
   734  000003                     strlen@a:
   735                           	callstack 0
   736                           
   737                           ; 2 bytes @ 0x2
   738  000003                     	ds	1
   739  000004                     toggle_light@i:
   740                           	callstack 0
   741  000004                     color_writetoaddr@address:
   742                           	callstack 0
   743  000004                     I2C_2_Master_Read@tmp:
   744                           	callstack 0
   745                           
   746                           ; 1 bytes @ 0x3
   747  000004                     	ds	1
   748  000005                     ??_fputc:
   749  000005                     ??_color_click_init:
   750  000005                     ??___xxtofl:
   751  000005                     ?_color_read_Red:
   752                           	callstack 0
   753  000005                     ?_color_read_Blue:
   754                           	callstack 0
   755  000005                     ?_color_read_Green:
   756                           	callstack 0
   757  000005                     ?_color_read_Clear:
   758                           	callstack 0
   759  000005                     toggle_light@lightnumber:
   760                           	callstack 0
   761  000005                     ___wmul@product:
   762                           	callstack 0
   763  000005                     ___flge@ff2:
   764                           	callstack 0
   765  000005                     ___fladd@a:
   766                           	callstack 0
   767                           
   768                           ; 4 bytes @ 0x4
   769  000005                     	ds	2
   770  000007                     ??_color_read_Red:
   771  000007                     ??_color_read_Blue:
   772  000007                     ??_color_read_Green:
   773  000007                     ??_color_read_Clear:
   774  000007                     ?___awdiv:
   775                           	callstack 0
   776  000007                     ___awdiv@dividend:
   777                           	callstack 0
   778                           
   779                           ; 2 bytes @ 0x6
   780  000007                     	ds	2
   781  000009                     ??___fladd:
   782  000009                     ??___flge:
   783  000009                     ___xxtofl@sign:
   784                           	callstack 0
   785  000009                     ___awdiv@divisor:
   786                           	callstack 0
   787  000009                     ___aodiv@divisor:
   788                           	callstack 0
   789  000009                     ___aomod@divisor:
   790                           	callstack 0
   791                           
   792                           ; 8 bytes @ 0x8
   793  000009                     	ds	1
   794  00000A                     ___xxtofl@exp:
   795                           	callstack 0
   796  00000A                     color_read_Red@tmp:
   797                           	callstack 0
   798  00000A                     color_read_Blue@tmp:
   799                           	callstack 0
   800  00000A                     color_read_Green@tmp:
   801                           	callstack 0
   802  00000A                     color_read_Clear@tmp:
   803                           	callstack 0
   804  00000A                     fputs@s:
   805                           	callstack 0
   806                           
   807                           ; 2 bytes @ 0x9
   808  00000A                     	ds	1
   809  00000B                     ___awdiv@counter:
   810                           	callstack 0
   811  00000B                     ___xxtofl@arg:
   812                           	callstack 0
   813                           
   814                           ; 4 bytes @ 0xA
   815  00000B                     	ds	1
   816  00000C                     ___awdiv@sign:
   817                           	callstack 0
   818  00000C                     read_color@m:
   819                           	callstack 0
   820  00000C                     calibrate_white@w:
   821                           	callstack 0
   822  00000C                     fputs@fp:
   823                           	callstack 0
   824                           
   825                           ; 2 bytes @ 0xB
   826  00000C                     	ds	1
   827  00000D                     ___fladd@signs:
   828                           	callstack 0
   829  00000D                     ___awdiv@quotient:
   830                           	callstack 0
   831                           
   832                           ; 2 bytes @ 0xC
   833  00000D                     	ds	1
   834  00000E                     ??_calibrate_white:
   835  00000E                     ___fladd@aexp:
   836                           	callstack 0
   837  00000E                     fputs@c:
   838                           	callstack 0
   839                           
   840                           ; 1 bytes @ 0xD
   841  00000E                     	ds	1
   842  00000F                     ?___fldiv:
   843                           	callstack 0
   844  00000F                     ___fladd@bexp:
   845                           	callstack 0
   846  00000F                     setMotorPWM@m:
   847                           	callstack 0
   848  00000F                     fputs@i:
   849                           	callstack 0
   850  00000F                     ___fldiv@b:
   851                           	callstack 0
   852                           
   853                           ; 4 bytes @ 0xE
   854  00000F                     	ds	1
   855  000010                     ___fladd@grs:
   856                           	callstack 0
   857                           
   858                           ; 1 bytes @ 0xF
   859  000010                     	ds	1
   860  000011                     ??_setMotorPWM:
   861  000011                     ?_pad:
   862                           	callstack 0
   863  000011                     ?___flsub:
   864                           	callstack 0
   865  000011                     ___aodiv@counter:
   866                           	callstack 0
   867  000011                     ___aomod@counter:
   868                           	callstack 0
   869  000011                     pad@fp:
   870                           	callstack 0
   871  000011                     ___flsub@b:
   872                           	callstack 0
   873                           
   874                           ; 4 bytes @ 0x10
   875  000011                     	ds	1
   876  000012                     ___aodiv@sign:
   877                           	callstack 0
   878  000012                     ___aomod@sign:
   879                           	callstack 0
   880                           
   881                           ; 1 bytes @ 0x11
   882  000012                     	ds	1
   883  000013                     ?_abs:
   884                           	callstack 0
   885  000013                     pad@buf:
   886                           	callstack 0
   887  000013                     abs@a:
   888                           	callstack 0
   889  000013                     ___fldiv@a:
   890                           	callstack 0
   891  000013                     ___aodiv@quotient:
   892                           	callstack 0
   893                           
   894                           ; 8 bytes @ 0x12
   895  000013                     	ds	2
   896  000015                     ??_abs:
   897  000015                     pad@p:
   898                           	callstack 0
   899  000015                     ___flsub@a:
   900                           	callstack 0
   901                           
   902                           ; 4 bytes @ 0x14
   903  000015                     	ds	2
   904  000017                     ??___fldiv:
   905  000017                     ??_pad:
   906                           
   907                           ; 1 bytes @ 0x16
   908  000017                     	ds	1
   909  000018                     setMotorPWM@PWMduty:
   910                           	callstack 0
   911  000018                     pad@i:
   912                           	callstack 0
   913                           
   914                           ; 2 bytes @ 0x17
   915  000018                     	ds	1
   916  000019                     
   917                           ; 1 bytes @ 0x18
   918  000019                     	ds	1
   919  00001A                     stop@mL:
   920                           	callstack 0
   921  00001A                     fullSpeedAhead@mL:
   922                           	callstack 0
   923  00001A                     fullSpeedBack@mL:
   924                           	callstack 0
   925  00001A                     pad@w:
   926                           	callstack 0
   927                           
   928                           ; 2 bytes @ 0x19
   929  00001A                     	ds	1
   930  00001B                     ___fldiv@rem:
   931                           	callstack 0
   932                           
   933                           ; 4 bytes @ 0x1A
   934  00001B                     	ds	1
   935  00001C                     ?_dtoa:
   936                           	callstack 0
   937  00001C                     stop@mR:
   938                           	callstack 0
   939  00001C                     fullSpeedAhead@mR:
   940                           	callstack 0
   941  00001C                     fullSpeedBack@mR:
   942                           	callstack 0
   943  00001C                     dtoa@fp:
   944                           	callstack 0
   945                           
   946                           ; 2 bytes @ 0x1B
   947  00001C                     	ds	2
   948  00001E                     ??_stop:
   949  00001E                     ??_fullSpeedAhead:
   950  00001E                     ??_fullSpeedBack:
   951  00001E                     dtoa@d:
   952                           	callstack 0
   953                           
   954                           ; 8 bytes @ 0x1D
   955  00001E                     	ds	1
   956  00001F                     ___fldiv@sign:
   957                           	callstack 0
   958                           
   959                           ; 1 bytes @ 0x1E
   960  00001F                     	ds	1
   961  000020                     turnLeft@mL:
   962                           	callstack 0
   963  000020                     turnRight@mL:
   964                           	callstack 0
   965  000020                     fullSpeedAhead_test@mL:
   966                           	callstack 0
   967  000020                     short_reverse@mL:
   968                           	callstack 0
   969  000020                     short_burst@mL:
   970                           	callstack 0
   971  000020                     ___fldiv@new_exp:
   972                           	callstack 0
   973                           
   974                           ; 2 bytes @ 0x1F
   975  000020                     	ds	2
   976  000022                     turnLeft@mR:
   977                           	callstack 0
   978  000022                     turnRight@mR:
   979                           	callstack 0
   980  000022                     fullSpeedAhead_test@mR:
   981                           	callstack 0
   982  000022                     short_reverse@mR:
   983                           	callstack 0
   984  000022                     short_burst@mR:
   985                           	callstack 0
   986  000022                     ___fldiv@grs:
   987                           	callstack 0
   988                           
   989                           ; 4 bytes @ 0x21
   990  000022                     	ds	2
   991  000024                     ??_short_burst:
   992  000024                     ??_fullSpeedAhead_test:
   993  000024                     turnLeft@angle_left:
   994                           	callstack 0
   995  000024                     turnRight@angle_right:
   996                           	callstack 0
   997  000024                     short_reverse@instruction:
   998                           	callstack 0
   999                           
  1000                           ; 1 bytes @ 0x23
  1001  000024                     	ds	1
  1002  000025                     ??_turnLeft:
  1003  000025                     ??_turnRight:
  1004  000025                     ??_short_reverse:
  1005                           
  1006                           ; 1 bytes @ 0x24
  1007  000025                     	ds	1
  1008  000026                     ??_dtoa:
  1009  000026                     ___fldiv@bexp:
  1010                           	callstack 0
  1011  000026                     turnRight@delay_135:
  1012                           	callstack 0
  1013                           
  1014                           ; 2 bytes @ 0x25
  1015  000026                     	ds	1
  1016  000027                     ___fldiv@aexp:
  1017                           	callstack 0
  1018  000027                     turnLeft@delay_135:
  1019                           	callstack 0
  1020                           
  1021                           ; 2 bytes @ 0x26
  1022  000027                     	ds	1
  1023  000028                     ?___flmul:
  1024                           	callstack 0
  1025  000028                     turnRight@delay_180:
  1026                           	callstack 0
  1027  000028                     ___flmul@b:
  1028                           	callstack 0
  1029                           
  1030                           ; 4 bytes @ 0x27
  1031  000028                     	ds	1
  1032  000029                     turnLeft@delay_180:
  1033                           	callstack 0
  1034                           
  1035                           ; 2 bytes @ 0x28
  1036  000029                     	ds	1
  1037  00002A                     turnRight@i:
  1038                           	callstack 0
  1039                           
  1040                           ; 2 bytes @ 0x29
  1041  00002A                     	ds	1
  1042  00002B                     turnLeft@i:
  1043                           	callstack 0
  1044                           
  1045                           ; 2 bytes @ 0x2A
  1046  00002B                     	ds	1
  1047  00002C                     turnRight@i_1328:
  1048                           	callstack 0
  1049  00002C                     ___flmul@a:
  1050                           	callstack 0
  1051                           
  1052                           ; 4 bytes @ 0x2B
  1053  00002C                     	ds	1
  1054  00002D                     turnLeft@i_1305:
  1055                           	callstack 0
  1056                           
  1057                           ; 2 bytes @ 0x2C
  1058  00002D                     	ds	1
  1059  00002E                     turnRight@i_1329:
  1060                           	callstack 0
  1061  00002E                     _dtoa$2871:
  1062                           	callstack 0
  1063                           
  1064                           ; 2 bytes @ 0x2D
  1065  00002E                     	ds	1
  1066  00002F                     turnLeft@i_1306:
  1067                           	callstack 0
  1068                           
  1069                           ; 2 bytes @ 0x2E
  1070  00002F                     	ds	1
  1071  000030                     ??___flmul:
  1072  000030                     turnRight@delay:
  1073                           	callstack 0
  1074  000030                     dtoa@p:
  1075                           	callstack 0
  1076                           
  1077                           ; 2 bytes @ 0x2F
  1078  000030                     	ds	1
  1079  000031                     turnLeft@delay:
  1080                           	callstack 0
  1081                           
  1082                           ; 2 bytes @ 0x30
  1083  000031                     	ds	1
  1084  000032                     dtoa@w:
  1085                           	callstack 0
  1086                           
  1087                           ; 2 bytes @ 0x31
  1088  000032                     	ds	1
  1089  000033                     goback@mL:
  1090                           	callstack 0
  1091  000033                     test_action@mL:
  1092                           	callstack 0
  1093                           
  1094                           ; 2 bytes @ 0x32
  1095  000033                     	ds	1
  1096  000034                     ___flmul@sign:
  1097                           	callstack 0
  1098  000034                     dtoa@s:
  1099                           	callstack 0
  1100                           
  1101                           ; 2 bytes @ 0x33
  1102  000034                     	ds	1
  1103  000035                     goback@mR:
  1104                           	callstack 0
  1105  000035                     test_action@mR:
  1106                           	callstack 0
  1107  000035                     ___flmul@grs:
  1108                           	callstack 0
  1109                           
  1110                           ; 4 bytes @ 0x34
  1111  000035                     	ds	1
  1112  000036                     dtoa@n:
  1113                           	callstack 0
  1114                           
  1115                           ; 8 bytes @ 0x35
  1116  000036                     	ds	1
  1117  000037                     ??_goback:
  1118  000037                     calibration_motor@mL:
  1119                           	callstack 0
  1120                           
  1121                           ; 2 bytes @ 0x36
  1122  000037                     	ds	2
  1123  000039                     ___flmul@aexp:
  1124                           	callstack 0
  1125  000039                     goback@i:
  1126                           	callstack 0
  1127  000039                     calibration_motor@mR:
  1128                           	callstack 0
  1129                           
  1130                           ; 2 bytes @ 0x38
  1131  000039                     	ds	1
  1132  00003A                     ___flmul@bexp:
  1133                           	callstack 0
  1134                           
  1135                           ; 1 bytes @ 0x39
  1136  00003A                     	ds	1
  1137  00003B                     ??_calibration_motor:
  1138  00003B                     action@mL:
  1139                           	callstack 0
  1140  00003B                     ___flmul@prod:
  1141                           	callstack 0
  1142                           
  1143                           ; 4 bytes @ 0x3A
  1144  00003B                     	ds	2
  1145  00003D                     action@mR:
  1146                           	callstack 0
  1147                           
  1148                           ; 2 bytes @ 0x3C
  1149  00003D                     	ds	1
  1150  00003E                     dtoa@i:
  1151                           	callstack 0
  1152                           
  1153                           ; 2 bytes @ 0x3D
  1154  00003E                     	ds	1
  1155  00003F                     action@color:
  1156                           	callstack 0
  1157  00003F                     ___flmul@temp:
  1158                           	callstack 0
  1159                           
  1160                           ; 2 bytes @ 0x3E
  1161  00003F                     	ds	1
  1162  000040                     ?_vfpfcnvrt:
  1163                           	callstack 0
  1164  000040                     vfpfcnvrt@fp:
  1165                           	callstack 0
  1166                           
  1167                           ; 2 bytes @ 0x3F
  1168  000040                     	ds	1
  1169  000041                     ?_roundf:
  1170                           	callstack 0
  1171  000041                     roundf@x:
  1172                           	callstack 0
  1173                           
  1174                           ; 4 bytes @ 0x40
  1175  000041                     	ds	1
  1176  000042                     vfpfcnvrt@fmt:
  1177                           	callstack 0
  1178                           
  1179                           ; 2 bytes @ 0x41
  1180  000042                     	ds	2
  1181  000044                     vfpfcnvrt@ap:
  1182                           	callstack 0
  1183                           
  1184                           ; 2 bytes @ 0x43
  1185  000044                     	ds	1
  1186  000045                     ??_roundf:
  1187                           
  1188                           ; 1 bytes @ 0x44
  1189  000045                     	ds	1
  1190  000046                     ??_vfpfcnvrt:
  1191                           
  1192                           ; 1 bytes @ 0x45
  1193  000046                     	ds	2
  1194  000048                     vfpfcnvrt@ll:
  1195                           	callstack 0
  1196                           
  1197                           ; 8 bytes @ 0x47
  1198  000048                     	ds	1
  1199  000049                     _roundf$3208:
  1200                           	callstack 0
  1201                           
  1202                           ; 4 bytes @ 0x48
  1203  000049                     	ds	4
  1204  00004D                     roundf@e:
  1205                           	callstack 0
  1206                           
  1207                           ; 2 bytes @ 0x4C
  1208  00004D                     	ds	2
  1209  00004F                     _roundf$3207:
  1210                           	callstack 0
  1211                           
  1212                           ; 4 bytes @ 0x4E
  1213  00004F                     	ds	1
  1214  000050                     ?_vfprintf:
  1215                           	callstack 0
  1216  000050                     vfprintf@fp:
  1217                           	callstack 0
  1218                           
  1219                           ; 2 bytes @ 0x4F
  1220  000050                     	ds	2
  1221  000052                     vfprintf@fmt:
  1222                           	callstack 0
  1223                           
  1224                           ; 2 bytes @ 0x51
  1225  000052                     	ds	1
  1226  000053                     roundf@u:
  1227                           	callstack 0
  1228                           
  1229                           ; 4 bytes @ 0x52
  1230  000053                     	ds	1
  1231  000054                     vfprintf@ap:
  1232                           	callstack 0
  1233                           
  1234                           ; 2 bytes @ 0x53
  1235  000054                     	ds	2
  1236  000056                     vfprintf@cfmt:
  1237                           	callstack 0
  1238                           
  1239                           ; 2 bytes @ 0x55
  1240  000056                     	ds	1
  1241  000057                     roundf@y:
  1242                           	callstack 0
  1243                           
  1244                           ; 4 bytes @ 0x56
  1245  000057                     	ds	1
  1246  000058                     color_display@m:
  1247                           	callstack 0
  1248                           
  1249                           ; 2 bytes @ 0x57
  1250  000058                     	ds	2
  1251  00005A                     color_data_collection@m:
  1252                           	callstack 0
  1253                           
  1254                           ; 2 bytes @ 0x59
  1255  00005A                     	ds	1
  1256  00005B                     ?___fltol:
  1257                           	callstack 0
  1258  00005B                     ___fltol@f1:
  1259                           	callstack 0
  1260                           
  1261                           ; 4 bytes @ 0x5A
  1262  00005B                     	ds	1
  1263  00005C                     ??_color_data_collection:
  1264                           
  1265                           ; 1 bytes @ 0x5B
  1266  00005C                     	ds	3
  1267  00005F                     
  1268                           ; 1 bytes @ 0x5E
  1269 ;;
  1270 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1271 ;;
  1272 ;; *************** function _main *****************
  1273 ;; Defined at:
  1274 ;;		line 29 in file "main.c"
  1275 ;; Parameters:    Size  Location     Type
  1276 ;;		None
  1277 ;; Auto vars:     Size  Location     Type
  1278 ;;  white          28   20[BANK1 ] struct white_card
  1279 ;;  motorR          9   57[BANK1 ] struct DC_motor
  1280 ;;  motorL          9   48[BANK1 ] struct DC_motor
  1281 ;;  rgb             8   12[BANK1 ] struct color_rgb
  1282 ;;  amb             8    0[BANK1 ] struct color_rgb
  1283 ;;  amb_light       2    8[BANK1 ] unsigned int 
  1284 ;;  stop_signal     1   11[BANK1 ] unsigned char 
  1285 ;;  setup           1   10[BANK1 ] unsigned char 
  1286 ;; Return value:  Size  Location     Type
  1287 ;;                  1    wreg      void 
  1288 ;; Registers used:
  1289 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1290 ;; Tracked objects:
  1291 ;;		On entry : 0/0
  1292 ;;		On exit  : 0/0
  1293 ;;		Unchanged: 0/0
  1294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1295 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1296 ;;      Locals:         0       0      66       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1297 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1298 ;;      Totals:         0       2      66       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1299 ;;Total ram usage:       68 bytes
  1300 ;; Hardware stack levels required when called: 12
  1301 ;; This function calls:
  1302 ;;		_I2C_2_Master_Init
  1303 ;;		_Interrupts_init
  1304 ;;		_LED_OFF
  1305 ;;		_Timer0_init
  1306 ;;		_action
  1307 ;;		_amb_light_measure
  1308 ;;		_buggylight_init
  1309 ;;		_calibrate_white
  1310 ;;		_calibration_motor
  1311 ;;		_color_click_init
  1312 ;;		_detect_color
  1313 ;;		_distance_measure
  1314 ;;		_fullSpeedAhead
  1315 ;;		_initDCmotorsPWM
  1316 ;;		_initDCmotors_parameter
  1317 ;;		_initUSART4
  1318 ;;		_pin_init
  1319 ;;		_short_burst
  1320 ;;		_stop
  1321 ;;		_test_function
  1322 ;;		_verify_color
  1323 ;; This function is called by:
  1324 ;;		Startup code after reset
  1325 ;; This function uses a non-reentrant model
  1326 ;;
  1327                           
  1328                           	psect	text0
  1329  003386                     __ptext0:
  1330                           	callstack 0
  1331  003386                     _main:
  1332                           	callstack 19
  1333  003386                     
  1334                           ;main.c: 32:     I2C_2_Master_Init();
  1335  003386  EC51  F02E         	call	_I2C_2_Master_Init	;wreg free
  1336  00338A                     
  1337                           ;main.c: 33:     color_click_init();
  1338  00338A  EC08  F02E         	call	_color_click_init	;wreg free
  1339  00338E                     
  1340                           ;main.c: 34:     initDCmotorsPWM(199);
  1341  00338E  0E00               	movlw	0
  1342  003390  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
  1343  003392  0EC7               	movlw	199
  1344  003394  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
  1345  003396  EC16  F02D         	call	_initDCmotorsPWM	;wreg free
  1346  00339A                     
  1347                           ;main.c: 35:     buggylight_init();
  1348  00339A  EC27  F02F         	call	_buggylight_init	;wreg free
  1349  00339E                     
  1350                           ;main.c: 36:     initUSART4();
  1351  00339E  ECFD  F02E         	call	_initUSART4	;wreg free
  1352  0033A2                     
  1353                           ;main.c: 37:     Timer0_init();
  1354  0033A2  EC0C  F02F         	call	_Timer0_init	;wreg free
  1355  0033A6                     
  1356                           ;main.c: 38:     Interrupts_init();
  1357  0033A6  EC38  F02F         	call	_Interrupts_init	;wreg free
  1358  0033AA                     
  1359                           ;main.c: 40:     struct color_rgb rgb, amb;;main.c: 41:     struct white_card white;;mai
      +                          n.c: 45:     struct DC_motor motorL, motorR;;main.c: 46:     pin_init();
  1360  0033AA  ECDD  F02E         	call	_pin_init	;wreg free
  1361  0033AE                     
  1362                           ;main.c: 47:     initDCmotors_parameter(&motorL, &motorR);
  1363  0033AE  0E98               	movlw	low main@motorL
  1364  0033B0  6E01               	movwf	initDCmotors_parameter@motorL^0,c
  1365  0033B2  0E01               	movlw	high main@motorL
  1366  0033B4  6E02               	movwf	(initDCmotors_parameter@motorL+1)^0,c
  1367  0033B6  0EA1               	movlw	low main@motorR
  1368  0033B8  6E03               	movwf	initDCmotors_parameter@motorR^0,c
  1369  0033BA  0E01               	movlw	high main@motorR
  1370  0033BC  6E04               	movwf	(initDCmotors_parameter@motorR+1)^0,c
  1371  0033BE  EC9D  F027         	call	_initDCmotors_parameter	;wreg free
  1372  0033C2                     
  1373                           ;main.c: 49:     unsigned char stop_signal = 0;
  1374  0033C2  0E00               	movlw	0
  1375  0033C4  0101               	movlb	1	; () banked
  1376  0033C6  6F73               	movwf	main@stop_signal& (0+255),b
  1377  0033C8                     
  1378                           ; BSR set to: 1
  1379                           ;main.c: 51:     unsigned int amb_light = 0;
  1380  0033C8  0E00               	movlw	0
  1381  0033CA  6F71               	movwf	(main@amb_light+1)& (0+255),b
  1382  0033CC  0E00               	movlw	0
  1383  0033CE  6F70               	movwf	main@amb_light& (0+255),b
  1384  0033D0                     
  1385                           ; BSR set to: 1
  1386                           ;main.c: 54:     if (0 == 0){
  1387  0033D0  0E00               	movlw	0
  1388  0033D2  6F72               	movwf	main@setup& (0+255),b
  1389                           
  1390                           ;main.c: 55:         while(!setup){
  1391  0033D4  EF67  F01A         	goto	l5441
  1392  0033D8                     l5411:
  1393                           
  1394                           ; BSR set to: 1
  1395                           ;main.c: 56:             LED_OFF();
  1396  0033D8  EC9D  F02E         	call	_LED_OFF	;wreg free
  1397  0033DC                     
  1398                           ;main.c: 57:             LATDbits.LATD7 = 1;
  1399  0033DC  8E7C               	bsf	124,7,c	;volatile
  1400  0033DE                     
  1401                           ;main.c: 58:             LATHbits.LATH3 = 1;
  1402  0033DE  8680               	bsf	128,3,c	;volatile
  1403  0033E0                     l456:
  1404  0033E0  B48E               	btfsc	142,2,c	;volatile
  1405  0033E2  EFF5  F019         	goto	u5801
  1406  0033E6  EFF7  F019         	goto	u5800
  1407  0033EA                     u5801:
  1408  0033EA  EFF0  F019         	goto	l456
  1409  0033EE                     u5800:
  1410  0033EE                     
  1411                           ;main.c: 60:             if (!PORTFbits.RF2){calibrate_white(&white); LATDbits.LATD7 = 0
      +                          ; _delay((unsigned long)((500)*(64000000/4000.0)));}
  1412  0033EE  B48E               	btfsc	142,2,c	;volatile
  1413  0033F0  EFFC  F019         	goto	u5811
  1414  0033F4  EFFE  F019         	goto	u5810
  1415  0033F8                     u5811:
  1416  0033F8  EF11  F01A         	goto	l460
  1417  0033FC                     u5810:
  1418  0033FC  0E7C               	movlw	low main@white
  1419  0033FE  6E0C               	movwf	calibrate_white@w^0,c
  1420  003400  0E01               	movlw	high main@white
  1421  003402  6E0D               	movwf	(calibrate_white@w+1)^0,c
  1422  003404  EC7A  F01C         	call	_calibrate_white	;wreg free
  1423  003408  9E7C               	bcf	124,7,c	;volatile
  1424  00340A  0E29               	movlw	41
  1425  00340C  0100               	movlb	0	; () banked
  1426  00340E  6FF7               	movwf	(??_main+1)& (0+255),b
  1427  003410  0E96               	movlw	150
  1428  003412  6FF6               	movwf	??_main& (0+255),b
  1429  003414  0E7F               	movlw	127
  1430  003416                     u5927:
  1431  003416  2EE8               	decfsz	wreg,f,c
  1432  003418  D7FE               	bra	u5927
  1433  00341A  2FF6               	decfsz	??_main& (0+255),f,b
  1434  00341C  D7FC               	bra	u5927
  1435  00341E  2FF7               	decfsz	(??_main+1)& (0+255),f,b
  1436  003420  D7FA               	bra	u5927
  1437  003422                     l460:
  1438  003422  B68E               	btfsc	142,3,c	;volatile
  1439  003424  EF16  F01A         	goto	u5821
  1440  003428  EF18  F01A         	goto	u5820
  1441  00342C                     u5821:
  1442  00342C  EF11  F01A         	goto	l460
  1443  003430                     u5820:
  1444  003430                     
  1445                           ;main.c: 62:             if (!PORTFbits.RF3){amb_light = amb_light_measure(&amb); LATHbi
      +                          ts.LATH3 = 0; _delay((unsigned long)((500)*(64000000/4000.0)));}
  1446  003430  B68E               	btfsc	142,3,c	;volatile
  1447  003432  EF1D  F01A         	goto	u5831
  1448  003436  EF1F  F01A         	goto	u5830
  1449  00343A                     u5831:
  1450  00343A  EF37  F01A         	goto	l5429
  1451  00343E                     u5830:
  1452  00343E  0E68               	movlw	low main@amb
  1453  003440  0100               	movlb	0	; () banked
  1454  003442  6F6A               	movwf	amb_light_measure@amb& (0+255),b
  1455  003444  0E01               	movlw	high main@amb
  1456  003446  6F6B               	movwf	(amb_light_measure@amb+1)& (0+255),b
  1457  003448  EC90  F025         	call	_amb_light_measure	;wreg free
  1458  00344C  C06A  F170         	movff	?_amb_light_measure,main@amb_light
  1459  003450  C06B  F171         	movff	?_amb_light_measure+1,main@amb_light+1
  1460  003454  9680               	bcf	128,3,c	;volatile
  1461  003456  0E29               	movlw	41
  1462  003458  0100               	movlb	0	; () banked
  1463  00345A  6FF7               	movwf	(??_main+1)& (0+255),b
  1464  00345C  0E96               	movlw	150
  1465  00345E  6FF6               	movwf	??_main& (0+255),b
  1466  003460  0E7F               	movlw	127
  1467  003462                     u5937:
  1468  003462  2EE8               	decfsz	wreg,f,c
  1469  003464  D7FE               	bra	u5937
  1470  003466  2FF6               	decfsz	??_main& (0+255),f,b
  1471  003468  D7FC               	bra	u5937
  1472  00346A  2FF7               	decfsz	(??_main+1)& (0+255),f,b
  1473  00346C  D7FA               	bra	u5937
  1474  00346E                     l5429:
  1475                           
  1476                           ;main.c: 63:             LATDbits.LATD7 = 1;
  1477  00346E  8E7C               	bsf	124,7,c	;volatile
  1478  003470                     
  1479                           ;main.c: 64:             if (!PORTFbits.RF3){calibration_motor(&motorL, &motorR);}
  1480  003470  B68E               	btfsc	142,3,c	;volatile
  1481  003472  EF3D  F01A         	goto	u5841
  1482  003476  EF3F  F01A         	goto	u5840
  1483  00347A                     u5841:
  1484  00347A  EF49  F01A         	goto	l465
  1485  00347E                     u5840:
  1486  00347E  0E98               	movlw	low main@motorL
  1487  003480  6E37               	movwf	calibration_motor@mL^0,c
  1488  003482  0E01               	movlw	high main@motorL
  1489  003484  6E38               	movwf	(calibration_motor@mL+1)^0,c
  1490  003486  0EA1               	movlw	low main@motorR
  1491  003488  6E39               	movwf	calibration_motor@mR^0,c
  1492  00348A  0E01               	movlw	high main@motorR
  1493  00348C  6E3A               	movwf	(calibration_motor@mR+1)^0,c
  1494  00348E  EC2A  F027         	call	_calibration_motor	;wreg free
  1495  003492                     l465:
  1496  003492  B48E               	btfsc	142,2,c	;volatile
  1497  003494  EF4E  F01A         	goto	u5851
  1498  003498  EF50  F01A         	goto	u5850
  1499  00349C                     u5851:
  1500  00349C  EF49  F01A         	goto	l465
  1501  0034A0                     u5850:
  1502  0034A0                     
  1503                           ;main.c: 66:             if (!PORTFbits.RF2){LATDbits.LATD7 = 0; setup = 1;_delay((unsig
      +                          ned long)((500)*(64000000/4000.0)));}
  1504  0034A0  B48E               	btfsc	142,2,c	;volatile
  1505  0034A2  EF55  F01A         	goto	u5861
  1506  0034A6  EF57  F01A         	goto	u5860
  1507  0034AA                     u5861:
  1508  0034AA  EF67  F01A         	goto	l5441
  1509  0034AE                     u5860:
  1510  0034AE  9E7C               	bcf	124,7,c	;volatile
  1511  0034B0  0E01               	movlw	1
  1512  0034B2  0101               	movlb	1	; () banked
  1513  0034B4  6F72               	movwf	main@setup& (0+255),b
  1514  0034B6                     
  1515                           ; BSR set to: 1
  1516  0034B6  0E29               	movlw	41
  1517  0034B8  0100               	movlb	0	; () banked
  1518  0034BA  6FF7               	movwf	(??_main+1)& (0+255),b
  1519  0034BC  0E96               	movlw	150
  1520  0034BE  6FF6               	movwf	??_main& (0+255),b
  1521  0034C0  0E7F               	movlw	127
  1522  0034C2                     u5947:
  1523  0034C2  2EE8               	decfsz	wreg,f,c
  1524  0034C4  D7FE               	bra	u5947
  1525  0034C6  2FF6               	decfsz	??_main& (0+255),f,b
  1526  0034C8  D7FC               	bra	u5947
  1527  0034CA  2FF7               	decfsz	(??_main+1)& (0+255),f,b
  1528  0034CC  D7FA               	bra	u5947
  1529  0034CE                     l5441:
  1530                           
  1531                           ;main.c: 55:         while(!setup){
  1532  0034CE  0101               	movlb	1	; () banked
  1533  0034D0  5172               	movf	main@setup& (0+255),w,b
  1534  0034D2  B4D8               	btfsc	status,2,c
  1535  0034D4  EF6E  F01A         	goto	u5871
  1536  0034D8  EF70  F01A         	goto	u5870
  1537  0034DC                     u5871:
  1538  0034DC  EFEC  F019         	goto	l5411
  1539  0034E0                     u5870:
  1540  0034E0                     l5445:
  1541                           
  1542                           ; BSR set to: 1
  1543                           ;main.c: 79:             T0CON0bits.T0EN=1;
  1544  0034E0  8ED5               	bsf	213,7,c	;volatile
  1545  0034E2                     
  1546                           ; BSR set to: 1
  1547                           ;main.c: 80:             start_move = centisecond;
  1548  0034E2  C144  F142         	movff	_centisecond,_start_move
  1549  0034E6  C145  F143         	movff	_centisecond+1,_start_move+1
  1550                           
  1551                           ;main.c: 81:             while (stop_signal == 0){
  1552  0034EA  EF92  F01A         	goto	l5453
  1553  0034EE                     l5449:
  1554                           
  1555                           ; BSR set to: 1
  1556                           ;main.c: 82:                 fullSpeedAhead(&motorL, &motorR);
  1557  0034EE  0E98               	movlw	low main@motorL
  1558  0034F0  6E1A               	movwf	fullSpeedAhead@mL^0,c
  1559  0034F2  0E01               	movlw	high main@motorL
  1560  0034F4  6E1B               	movwf	(fullSpeedAhead@mL+1)^0,c
  1561  0034F6  0EA1               	movlw	low main@motorR
  1562  0034F8  6E1C               	movwf	fullSpeedAhead@mR^0,c
  1563  0034FA  0E01               	movlw	high main@motorR
  1564  0034FC  6E1D               	movwf	(fullSpeedAhead@mR+1)^0,c
  1565  0034FE  EC31  F029         	call	_fullSpeedAhead	;wreg free
  1566  003502                     
  1567                           ;main.c: 83:                 stop_signal = distance_measure(&motorL, &motorR, amb_light)
      +                          ;
  1568  003502  0E98               	movlw	low main@motorL
  1569  003504  0100               	movlb	0	; () banked
  1570  003506  6F6A               	movwf	distance_measure@mL& (0+255),b
  1571  003508  0E01               	movlw	high main@motorL
  1572  00350A  6F6B               	movwf	(distance_measure@mL+1)& (0+255),b
  1573  00350C  0EA1               	movlw	low main@motorR
  1574  00350E  6F6C               	movwf	distance_measure@mR& (0+255),b
  1575  003510  0E01               	movlw	high main@motorR
  1576  003512  6F6D               	movwf	(distance_measure@mR+1)& (0+255),b
  1577  003514  C170  F06E         	movff	main@amb_light,distance_measure@amb_light
  1578  003518  C171  F06F         	movff	main@amb_light+1,distance_measure@amb_light+1
  1579  00351C  EC6B  F028         	call	_distance_measure	;wreg free
  1580  003520  0101               	movlb	1	; () banked
  1581  003522  6F73               	movwf	main@stop_signal& (0+255),b
  1582  003524                     l5453:
  1583                           
  1584                           ; BSR set to: 1
  1585                           ;main.c: 81:             while (stop_signal == 0){
  1586  003524  5173               	movf	main@stop_signal& (0+255),w,b
  1587  003526  B4D8               	btfsc	status,2,c
  1588  003528  EF98  F01A         	goto	u5881
  1589  00352C  EF9A  F01A         	goto	u5880
  1590  003530                     u5881:
  1591  003530  EF77  F01A         	goto	l5449
  1592  003534                     u5880:
  1593  003534                     
  1594                           ; BSR set to: 1
  1595                           ;main.c: 85:             T0CON0bits.T0EN=0;
  1596  003534  9ED5               	bcf	213,7,c	;volatile
  1597                           
  1598                           ;main.c: 86:             stop_move = centisecond;
  1599  003536  C144  F140         	movff	_centisecond,_stop_move
  1600  00353A  C145  F141         	movff	_centisecond+1,_stop_move+1
  1601  00353E                     
  1602                           ; BSR set to: 1
  1603                           ;main.c: 87:             if ((stop_move-start_move)>1){
  1604  00353E  5142               	movf	_start_move& (0+255),w,b
  1605  003540  5D40               	subwf	_stop_move& (0+255),w,b
  1606  003542  0100               	movlb	0	; () banked
  1607  003544  6FF6               	movwf	??_main& (0+255),b
  1608  003546  0101               	movlb	1	; () banked
  1609  003548  5143               	movf	(_start_move+1)& (0+255),w,b
  1610  00354A  5941               	subwfb	(_stop_move+1)& (0+255),w,b
  1611  00354C  0100               	movlb	0	; () banked
  1612  00354E  6FF7               	movwf	(??_main+1)& (0+255),b
  1613  003550  51F7               	movf	(??_main+1)& (0+255),w,b
  1614  003552  E109               	bnz	u5890
  1615  003554  0E02               	movlw	2
  1616  003556  5DF6               	subwf	??_main& (0+255),w,b
  1617  003558  A0D8               	btfss	status,0,c
  1618  00355A  EFB1  F01A         	goto	u5891
  1619  00355E  EFB3  F01A         	goto	u5890
  1620  003562                     u5891:
  1621  003562  EFCB  F01A         	goto	l5461
  1622  003566                     u5890:
  1623  003566                     
  1624                           ; BSR set to: 0
  1625                           ;main.c: 88:                 memory[array_index] = (stop_move-start_move);
  1626  003566  0101               	movlb	1	; () banked
  1627  003568  5142               	movf	_start_move& (0+255),w,b
  1628  00356A  5D40               	subwf	_stop_move& (0+255),w,b
  1629  00356C  0100               	movlb	0	; () banked
  1630  00356E  6FF6               	movwf	??_main& (0+255),b
  1631  003570  0101               	movlb	1	; () banked
  1632  003572  5143               	movf	(_start_move+1)& (0+255),w,b
  1633  003574  5941               	subwfb	(_stop_move+1)& (0+255),w,b
  1634  003576  0100               	movlb	0	; () banked
  1635  003578  6FF7               	movwf	(??_main+1)& (0+255),b
  1636  00357A  0101               	movlb	1	; () banked
  1637  00357C  5147               	movf	_array_index& (0+255),w,b
  1638  00357E  0D02               	mullw	2
  1639  003580  0E00               	movlw	low _memory
  1640  003582  24F3               	addwf	243,w,c
  1641  003584  6ED9               	movwf	fsr2l,c
  1642  003586  0E01               	movlw	high _memory
  1643  003588  20F4               	addwfc	prodh,w,c
  1644  00358A  6EDA               	movwf	fsr2h,c
  1645  00358C  C0F6  FFDE         	movff	??_main,postinc2
  1646  003590  C0F7  FFDD         	movff	??_main+1,postdec2
  1647  003594                     
  1648                           ; BSR set to: 1
  1649                           ;main.c: 89:                 array_index++;
  1650  003594  2B47               	incf	_array_index& (0+255),f,b
  1651  003596                     l5461:
  1652                           
  1653                           ;main.c: 91:             stop(&motorL, &motorR);
  1654  003596  0E98               	movlw	low main@motorL
  1655  003598  6E1A               	movwf	stop@mL^0,c
  1656  00359A  0E01               	movlw	high main@motorL
  1657  00359C  6E1B               	movwf	(stop@mL+1)^0,c
  1658  00359E  0EA1               	movlw	low main@motorR
  1659  0035A0  6E1C               	movwf	stop@mR^0,c
  1660  0035A2  0E01               	movlw	high main@motorR
  1661  0035A4  6E1D               	movwf	(stop@mR+1)^0,c
  1662  0035A6  ECF5  F029         	call	_stop	;wreg free
  1663  0035AA                     
  1664                           ;main.c: 92:             _delay((unsigned long)((1000)*(64000000/4000.0)));
  1665  0035AA  0E52               	movlw	82
  1666  0035AC  0100               	movlb	0	; () banked
  1667  0035AE  6FF7               	movwf	(??_main+1)& (0+255),b
  1668  0035B0  0E2B               	movlw	43
  1669  0035B2  6FF6               	movwf	??_main& (0+255),b
  1670  0035B4  0E00               	movlw	0
  1671  0035B6                     u5957:
  1672  0035B6  2EE8               	decfsz	wreg,f,c
  1673  0035B8  D7FE               	bra	u5957
  1674  0035BA  2FF6               	decfsz	??_main& (0+255),f,b
  1675  0035BC  D7FC               	bra	u5957
  1676  0035BE  2FF7               	decfsz	(??_main+1)& (0+255),f,b
  1677  0035C0  D7FA               	bra	u5957
  1678  0035C2  F000               	nop	
  1679  0035C4                     
  1680                           ;main.c: 93:             short_burst(&motorL, &motorR);
  1681  0035C4  0E98               	movlw	low main@motorL
  1682  0035C6  6E20               	movwf	short_burst@mL^0,c
  1683  0035C8  0E01               	movlw	high main@motorL
  1684  0035CA  6E21               	movwf	(short_burst@mL+1)^0,c
  1685  0035CC  0EA1               	movlw	low main@motorR
  1686  0035CE  6E22               	movwf	short_burst@mR^0,c
  1687  0035D0  0E01               	movlw	high main@motorR
  1688  0035D2  6E23               	movwf	(short_burst@mR+1)^0,c
  1689  0035D4  ECF5  F02C         	call	_short_burst	;wreg free
  1690  0035D8                     
  1691                           ;main.c: 94:             color = detect_color(&rgb, &white);
  1692  0035D8  0E74               	movlw	low main@rgb
  1693  0035DA  0100               	movlb	0	; () banked
  1694  0035DC  6F71               	movwf	detect_color@m& (0+255),b
  1695  0035DE  0E01               	movlw	high main@rgb
  1696  0035E0  6F72               	movwf	(detect_color@m+1)& (0+255),b
  1697  0035E2  0E7C               	movlw	low main@white
  1698  0035E4  6F73               	movwf	detect_color@w& (0+255),b
  1699  0035E6  0E01               	movlw	high main@white
  1700  0035E8  6F74               	movwf	(detect_color@w+1)& (0+255),b
  1701  0035EA  EC0A  F007         	call	_detect_color	;wreg free
  1702  0035EE  0101               	movlb	1	; () banked
  1703  0035F0  6F46               	movwf	_color& (0+255),b
  1704  0035F2                     
  1705                           ; BSR set to: 1
  1706                           ;main.c: 95:             color = verify_color(color, &rgb, &white);
  1707  0035F2  0E74               	movlw	low main@rgb
  1708  0035F4  0100               	movlb	0	; () banked
  1709  0035F6  6F92               	movwf	verify_color@m& (0+255),b
  1710  0035F8  0E01               	movlw	high main@rgb
  1711  0035FA  6F93               	movwf	(verify_color@m+1)& (0+255),b
  1712  0035FC  0E7C               	movlw	low main@white
  1713  0035FE  6F94               	movwf	verify_color@w& (0+255),b
  1714  003600  0E01               	movlw	high main@white
  1715  003602  6F95               	movwf	(verify_color@w+1)& (0+255),b
  1716  003604  0101               	movlb	1	; () banked
  1717  003606  5146               	movf	_color& (0+255),w,b
  1718  003608  ECF0  F02A         	call	_verify_color
  1719  00360C  0101               	movlb	1	; () banked
  1720  00360E  6F46               	movwf	_color& (0+255),b
  1721  003610                     
  1722                           ; BSR set to: 1
  1723                           ;main.c: 96:             if (color!= 0){action(color, &motorL, &motorR); color = 0;}
  1724  003610  5146               	movf	_color& (0+255),w,b
  1725  003612  B4D8               	btfsc	status,2,c
  1726  003614  EF0E  F01B         	goto	u5901
  1727  003618  EF10  F01B         	goto	u5900
  1728  00361C                     u5901:
  1729  00361C  EF1E  F01B         	goto	l5477
  1730  003620                     u5900:
  1731  003620                     
  1732                           ; BSR set to: 1
  1733  003620  0E98               	movlw	low main@motorL
  1734  003622  6E3B               	movwf	action@mL^0,c
  1735  003624  0E01               	movlw	high main@motorL
  1736  003626  6E3C               	movwf	(action@mL+1)^0,c
  1737  003628  0EA1               	movlw	low main@motorR
  1738  00362A  6E3D               	movwf	action@mR^0,c
  1739  00362C  0E01               	movlw	high main@motorR
  1740  00362E  6E3E               	movwf	(action@mR+1)^0,c
  1741  003630  5146               	movf	_color& (0+255),w,b
  1742  003632  ECDB  F016         	call	_action
  1743  003636  0E00               	movlw	0
  1744  003638  0101               	movlb	1	; () banked
  1745  00363A  6F46               	movwf	_color& (0+255),b
  1746  00363C                     l5477:
  1747                           
  1748                           ; BSR set to: 1
  1749                           ;main.c: 97:             stop_signal = 0;
  1750  00363C  0E00               	movlw	0
  1751  00363E  6F73               	movwf	main@stop_signal& (0+255),b
  1752  003640  EF70  F01A         	goto	l5445
  1753  003644  EF18  F000         	goto	start
  1754  003648                     __end_of_main:
  1755                           	callstack 0
  1756                           
  1757 ;; *************** function _verify_color *****************
  1758 ;; Defined at:
  1759 ;;		line 365 in file "color.c"
  1760 ;; Parameters:    Size  Location     Type
  1761 ;;  color           1    wreg     unsigned char 
  1762 ;;  m               2   50[BANK0 ] PTR struct color_rgb
  1763 ;;		 -> main@rgb(8), 
  1764 ;;  w               2   52[BANK0 ] PTR struct white_card
  1765 ;;		 -> main@white(28), 
  1766 ;; Auto vars:     Size  Location     Type
  1767 ;;  color           1   58[BANK0 ] unsigned char 
  1768 ;;  color2          2   56[BANK0 ] unsigned int 
  1769 ;;  color3          2    0        unsigned int 
  1770 ;; Return value:  Size  Location     Type
  1771 ;;                  1    wreg      unsigned char 
  1772 ;; Registers used:
  1773 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1774 ;; Tracked objects:
  1775 ;;		On entry : 0/0
  1776 ;;		On exit  : 0/0
  1777 ;;		Unchanged: 0/0
  1778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1779 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1780 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1781 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1782 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1783 ;;Total ram usage:        9 bytes
  1784 ;; Hardware stack levels used: 1
  1785 ;; Hardware stack levels required when called: 6
  1786 ;; This function calls:
  1787 ;;		_detect_color
  1788 ;; This function is called by:
  1789 ;;		_main
  1790 ;; This function uses a non-reentrant model
  1791 ;;
  1792                           
  1793                           	psect	text1
  1794  0055E0                     __ptext1:
  1795                           	callstack 0
  1796  0055E0                     _verify_color:
  1797                           	callstack 24
  1798                           
  1799                           ; BSR set to: 1
  1800                           ;incstack = 0
  1801                           ;verify_color@color stored from wreg
  1802  0055E0  0100               	movlb	0	; () banked
  1803  0055E2  6F9A               	movwf	verify_color@color& (0+255),b
  1804  0055E4                     
  1805                           ;color.c: 365: unsigned char verify_color(unsigned char color,struct color_rgb *m, struc
      +                          t white_card *w);color.c: 366: {;color.c: 367:     _delay((unsigned long)((50)*(64000000
      +                          /4000.0)));
  1806  0055E4  0E05               	movlw	5
  1807  0055E6  0100               	movlb	0	; () banked
  1808  0055E8  6F97               	movwf	(??_verify_color+1)& (0+255),b
  1809  0055EA  0E0F               	movlw	15
  1810  0055EC  6F96               	movwf	??_verify_color& (0+255),b
  1811  0055EE  0EF1               	movlw	241
  1812  0055F0                     u5967:
  1813  0055F0  2EE8               	decfsz	wreg,f,c
  1814  0055F2  D7FE               	bra	u5967
  1815  0055F4  2F96               	decfsz	??_verify_color& (0+255),f,b
  1816  0055F6  D7FC               	bra	u5967
  1817  0055F8  2F97               	decfsz	(??_verify_color+1)& (0+255),f,b
  1818  0055FA  D7FA               	bra	u5967
  1819  0055FC                     
  1820                           ;color.c: 368:     unsigned int color2, color3;;color.c: 369:     color2 = detect_color(
      +                          m,w);
  1821  0055FC  C092  F071         	movff	verify_color@m,detect_color@m
  1822  005600  C093  F072         	movff	verify_color@m+1,detect_color@m+1
  1823  005604  C094  F073         	movff	verify_color@w,detect_color@w
  1824  005608  C095  F074         	movff	verify_color@w+1,detect_color@w+1
  1825  00560C  EC0A  F007         	call	_detect_color	;wreg free
  1826  005610  0100               	movlb	0	; () banked
  1827  005612  6F96               	movwf	??_verify_color& (0+255),b
  1828  005614  5196               	movf	??_verify_color& (0+255),w,b
  1829  005616  6F98               	movwf	verify_color@color2& (0+255),b
  1830  005618  6B99               	clrf	(verify_color@color2+1)& (0+255),b
  1831  00561A                     
  1832                           ; BSR set to: 0
  1833                           ;color.c: 370:     _delay((unsigned long)((50)*(64000000/4000.0)));
  1834  00561A  0E05               	movlw	5
  1835  00561C  0100               	movlb	0	; () banked
  1836  00561E  6F97               	movwf	(??_verify_color+1)& (0+255),b
  1837  005620  0E0F               	movlw	15
  1838  005622  6F96               	movwf	??_verify_color& (0+255),b
  1839  005624  0EF1               	movlw	241
  1840  005626                     u5977:
  1841  005626  2EE8               	decfsz	wreg,f,c
  1842  005628  D7FE               	bra	u5977
  1843  00562A  2F96               	decfsz	??_verify_color& (0+255),f,b
  1844  00562C  D7FC               	bra	u5977
  1845  00562E  2F97               	decfsz	(??_verify_color+1)& (0+255),f,b
  1846  005630  D7FA               	bra	u5977
  1847  005632                     
  1848                           ;color.c: 372:     if (color == color2){return color;}
  1849  005632  0100               	movlb	0	; () banked
  1850  005634  519A               	movf	verify_color@color& (0+255),w,b
  1851  005636  6F96               	movwf	??_verify_color& (0+255),b
  1852  005638  6B97               	clrf	(??_verify_color+1)& (0+255),b
  1853  00563A  5198               	movf	verify_color@color2& (0+255),w,b
  1854  00563C  1996               	xorwf	??_verify_color& (0+255),w,b
  1855  00563E  E107               	bnz	u5561
  1856  005640  5199               	movf	(verify_color@color2+1)& (0+255),w,b
  1857  005642  1997               	xorwf	(??_verify_color+1)& (0+255),w,b
  1858  005644  A4D8               	btfss	status,2,c
  1859  005646  EF27  F02B         	goto	u5561
  1860  00564A  EF29  F02B         	goto	u5560
  1861  00564E                     u5561:
  1862  00564E  EF2C  F02B         	goto	l5183
  1863  005652                     u5560:
  1864  005652                     
  1865                           ; BSR set to: 0
  1866  005652  519A               	movf	verify_color@color& (0+255),w,b
  1867  005654  EF2D  F02B         	goto	l153
  1868  005658                     l5183:
  1869                           
  1870                           ; BSR set to: 0
  1871                           ;color.c: 375:         return color;}
  1872  005658  0E00               	movlw	0
  1873  00565A                     l153:
  1874                           
  1875                           ; BSR set to: 0
  1876  00565A  0012               	return		;funcret
  1877  00565C                     __end_of_verify_color:
  1878                           	callstack 0
  1879                           
  1880 ;; *************** function _test_function *****************
  1881 ;; Defined at:
  1882 ;;		line 39 in file "test_and_calibration.c"
  1883 ;; Parameters:    Size  Location     Type
  1884 ;;  test_code       1    wreg     unsigned char 
  1885 ;;  m               2  134[BANK0 ] PTR struct color_rgb
  1886 ;;		 -> main@rgb(8), 
  1887 ;;  w               2  136[BANK0 ] PTR struct white_card
  1888 ;;		 -> main@white(28), 
  1889 ;;  mL              2  138[BANK0 ] PTR struct DC_motor
  1890 ;;		 -> main@motorL(9), 
  1891 ;;  mR              2  140[BANK0 ] PTR struct DC_motor
  1892 ;;		 -> main@motorR(9), 
  1893 ;; Auto vars:     Size  Location     Type
  1894 ;;  test_code       1  149[BANK0 ] unsigned char 
  1895 ;;  amb_light       2  144[BANK0 ] unsigned int 
  1896 ;;  stop_signal     1  148[BANK0 ] unsigned char 
  1897 ;;  color           1  147[BANK0 ] unsigned char 
  1898 ;;  complete        1  146[BANK0 ] unsigned char 
  1899 ;; Return value:  Size  Location     Type
  1900 ;;                  1    wreg      void 
  1901 ;; Registers used:
  1902 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1903 ;; Tracked objects:
  1904 ;;		On entry : 0/0
  1905 ;;		On exit  : 0/0
  1906 ;;		Unchanged: 0/0
  1907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1908 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1909 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1910 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1911 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1912 ;;Total ram usage:       16 bytes
  1913 ;; Hardware stack levels used: 1
  1914 ;; Hardware stack levels required when called: 11
  1915 ;; This function calls:
  1916 ;;		_LED_C
  1917 ;;		_amb_light_measure
  1918 ;;		_calibrate_white
  1919 ;;		_color_data_collection
  1920 ;;		_color_display
  1921 ;;		_color_predict
  1922 ;;		_detect_color
  1923 ;;		_distance_measure
  1924 ;;		_fullSpeedAhead
  1925 ;;		_read_color
  1926 ;;		_stop
  1927 ;; This function is called by:
  1928 ;;		_main
  1929 ;; This function uses a non-reentrant model
  1930 ;;
  1931                           
  1932                           	psect	text2
  1933  004520                     __ptext2:
  1934                           	callstack 0
  1935  004520                     _test_function:
  1936                           	callstack 19
  1937                           
  1938                           ; BSR set to: 0
  1939                           ;incstack = 0
  1940                           ;test_function@test_code stored from wreg
  1941  004520  0100               	movlb	0	; () banked
  1942  004522  6FF5               	movwf	test_function@test_code& (0+255),b
  1943  004524                     
  1944                           ;test_and_calibration.c: 39: void test_function(unsigned char test_code, struct color_rg
      +                          b *m, struct white_card *w, struct DC_motor *mL, struct DC_motor *mR);test_and_calibrati
      +                          on.c: 40: {;test_and_calibration.c: 41:     unsigned char complete = 0;
  1945  004524  0E00               	movlw	0
  1946  004526  0100               	movlb	0	; () banked
  1947  004528  6FF2               	movwf	test_function@complete& (0+255),b
  1948                           
  1949                           ;test_and_calibration.c: 43:     unsigned char stop_signal = 0;
  1950  00452A  0E00               	movlw	0
  1951  00452C  6FF4               	movwf	test_function@stop_signal& (0+255),b
  1952                           
  1953                           ;test_and_calibration.c: 44:     unsigned int amb_light = 0;
  1954  00452E  0E00               	movlw	0
  1955  004530  6FF1               	movwf	(test_function@amb_light+1)& (0+255),b
  1956  004532  0E00               	movlw	0
  1957  004534  6FF0               	movwf	test_function@amb_light& (0+255),b
  1958  004536                     
  1959                           ; BSR set to: 0
  1960                           ;test_and_calibration.c: 46:     if (test_code == 2){calibrate_white(w);}
  1961  004536  0E02               	movlw	2
  1962  004538  19F5               	xorwf	test_function@test_code& (0+255),w,b
  1963  00453A  A4D8               	btfss	status,2,c
  1964  00453C  EFA2  F022         	goto	u5631
  1965  004540  EFA4  F022         	goto	u5630
  1966  004544                     u5631:
  1967  004544  EFAA  F022         	goto	l5267
  1968  004548                     u5630:
  1969  004548                     
  1970                           ; BSR set to: 0
  1971  004548  C0E8  F00C         	movff	test_function@w,calibrate_white@w
  1972  00454C  C0E9  F00D         	movff	test_function@w+1,calibrate_white@w+1
  1973  004550  EC7A  F01C         	call	_calibrate_white	;wreg free
  1974  004554                     l5267:
  1975                           
  1976                           ;test_and_calibration.c: 47:     if (test_code == 4){amb_light = amb_light_measure(m);}
  1977  004554  0E04               	movlw	4
  1978  004556  0100               	movlb	0	; () banked
  1979  004558  19F5               	xorwf	test_function@test_code& (0+255),w,b
  1980  00455A  A4D8               	btfss	status,2,c
  1981  00455C  EFB2  F022         	goto	u5641
  1982  004560  EFB4  F022         	goto	u5640
  1983  004564                     u5641:
  1984  004564  EFBE  F022         	goto	l5271
  1985  004568                     u5640:
  1986  004568                     
  1987                           ; BSR set to: 0
  1988  004568  C0E6  F06A         	movff	test_function@m,amb_light_measure@amb
  1989  00456C  C0E7  F06B         	movff	test_function@m+1,amb_light_measure@amb+1
  1990  004570  EC90  F025         	call	_amb_light_measure	;wreg free
  1991  004574  C06A  F0F0         	movff	?_amb_light_measure,test_function@amb_light
  1992  004578  C06B  F0F1         	movff	?_amb_light_measure+1,test_function@amb_light+1
  1993  00457C                     l5271:
  1994                           
  1995                           ;test_and_calibration.c: 51:         if (test_code == 1){
  1996  00457C  0100               	movlb	0	; () banked
  1997  00457E  05F5               	decf	test_function@test_code& (0+255),w,b
  1998  004580  A4D8               	btfss	status,2,c
  1999  004582  EFC5  F022         	goto	u5651
  2000  004586  EFC7  F022         	goto	u5650
  2001  00458A                     u5651:
  2002  00458A  EFD5  F022         	goto	l5279
  2003  00458E                     u5650:
  2004  00458E                     
  2005                           ; BSR set to: 0
  2006                           ;test_and_calibration.c: 52:             LED_C();
  2007  00458E  ECCD  F02E         	call	_LED_C	;wreg free
  2008  004592                     
  2009                           ;test_and_calibration.c: 53:             read_color(m);
  2010  004592  C0E6  F00C         	movff	test_function@m,read_color@m
  2011  004596  C0E7  F00D         	movff	test_function@m+1,read_color@m+1
  2012  00459A  EC97  F02B         	call	_read_color	;wreg free
  2013  00459E                     
  2014                           ;test_and_calibration.c: 54:             color_display(m);
  2015  00459E  C0E6  F058         	movff	test_function@m,color_display@m
  2016  0045A2  C0E7  F059         	movff	test_function@m+1,color_display@m+1
  2017  0045A6  EC2E  F02B         	call	_color_display	;wreg free
  2018  0045AA                     l5279:
  2019                           
  2020                           ;test_and_calibration.c: 57:         if (test_code == 2){
  2021  0045AA  0E02               	movlw	2
  2022  0045AC  0100               	movlb	0	; () banked
  2023  0045AE  19F5               	xorwf	test_function@test_code& (0+255),w,b
  2024  0045B0  A4D8               	btfss	status,2,c
  2025  0045B2  EFDD  F022         	goto	u5661
  2026  0045B6  EFDF  F022         	goto	u5660
  2027  0045BA                     u5661:
  2028  0045BA  EFEE  F022         	goto	l5285
  2029  0045BE                     u5660:
  2030  0045BE                     
  2031                           ; BSR set to: 0
  2032                           ;test_and_calibration.c: 58:             color = detect_color(m,w);
  2033  0045BE  C0E6  F071         	movff	test_function@m,detect_color@m
  2034  0045C2  C0E7  F072         	movff	test_function@m+1,detect_color@m+1
  2035  0045C6  C0E8  F073         	movff	test_function@w,detect_color@w
  2036  0045CA  C0E9  F074         	movff	test_function@w+1,detect_color@w+1
  2037  0045CE  EC0A  F007         	call	_detect_color	;wreg free
  2038  0045D2  0100               	movlb	0	; () banked
  2039  0045D4  6FF3               	movwf	test_function@color& (0+255),b
  2040  0045D6                     
  2041                           ; BSR set to: 0
  2042                           ;test_and_calibration.c: 60:             color_predict(color);
  2043  0045D6  51F3               	movf	test_function@color& (0+255),w,b
  2044  0045D8  EC3A  F02E         	call	_color_predict
  2045  0045DC                     l5285:
  2046                           
  2047                           ;test_and_calibration.c: 63:         if (test_code == 3){
  2048  0045DC  0E03               	movlw	3
  2049  0045DE  0100               	movlb	0	; () banked
  2050  0045E0  19F5               	xorwf	test_function@test_code& (0+255),w,b
  2051  0045E2  A4D8               	btfss	status,2,c
  2052  0045E4  EFF6  F022         	goto	u5671
  2053  0045E8  EFF8  F022         	goto	u5670
  2054  0045EC                     u5671:
  2055  0045EC  EF0B  F023         	goto	l5295
  2056  0045F0                     u5670:
  2057  0045F0  EF03  F023         	goto	l5293
  2058  0045F4                     l5289:
  2059                           
  2060                           ; BSR set to: 0
  2061                           ;test_and_calibration.c: 65:                 color_data_collection(m);
  2062  0045F4  C0E6  F05A         	movff	test_function@m,color_data_collection@m
  2063  0045F8  C0E7  F05B         	movff	test_function@m+1,color_data_collection@m+1
  2064  0045FC  ECFA  F020         	call	_color_data_collection	;wreg free
  2065  004600                     
  2066                           ;test_and_calibration.c: 66:                 complete = 1;
  2067  004600  0E01               	movlw	1
  2068  004602  0100               	movlb	0	; () banked
  2069  004604  6FF2               	movwf	test_function@complete& (0+255),b
  2070  004606                     l5293:
  2071                           
  2072                           ; BSR set to: 0
  2073                           ;test_and_calibration.c: 64:             while (complete == 0){
  2074  004606  51F2               	movf	test_function@complete& (0+255),w,b
  2075  004608  B4D8               	btfsc	status,2,c
  2076  00460A  EF09  F023         	goto	u5681
  2077  00460E  EF0B  F023         	goto	u5680
  2078  004612                     u5681:
  2079  004612  EFFA  F022         	goto	l5289
  2080  004616                     u5680:
  2081  004616                     l5295:
  2082                           
  2083                           ; BSR set to: 0
  2084                           ;test_and_calibration.c: 70:         if (test_code == 4){
  2085  004616  0E04               	movlw	4
  2086  004618  19F5               	xorwf	test_function@test_code& (0+255),w,b
  2087  00461A  A4D8               	btfss	status,2,c
  2088  00461C  EF12  F023         	goto	u5691
  2089  004620  EF14  F023         	goto	u5690
  2090  004624                     u5691:
  2091  004624  EFBE  F022         	goto	l5271
  2092  004628                     u5690:
  2093  004628  EF30  F023         	goto	l5303
  2094  00462C                     l5299:
  2095                           
  2096                           ; BSR set to: 0
  2097                           ;test_and_calibration.c: 72:                 fullSpeedAhead(mL, mR);
  2098  00462C  C0EA  F01A         	movff	test_function@mL,fullSpeedAhead@mL
  2099  004630  C0EB  F01B         	movff	test_function@mL+1,fullSpeedAhead@mL+1
  2100  004634  C0EC  F01C         	movff	test_function@mR,fullSpeedAhead@mR
  2101  004638  C0ED  F01D         	movff	test_function@mR+1,fullSpeedAhead@mR+1
  2102  00463C  EC31  F029         	call	_fullSpeedAhead	;wreg free
  2103  004640                     
  2104                           ;test_and_calibration.c: 73:                 stop_signal = distance_measure(mL, mR, amb_
      +                          light);
  2105  004640  C0EA  F06A         	movff	test_function@mL,distance_measure@mL
  2106  004644  C0EB  F06B         	movff	test_function@mL+1,distance_measure@mL+1
  2107  004648  C0EC  F06C         	movff	test_function@mR,distance_measure@mR
  2108  00464C  C0ED  F06D         	movff	test_function@mR+1,distance_measure@mR+1
  2109  004650  C0F0  F06E         	movff	test_function@amb_light,distance_measure@amb_light
  2110  004654  C0F1  F06F         	movff	test_function@amb_light+1,distance_measure@amb_light+1
  2111  004658  EC6B  F028         	call	_distance_measure	;wreg free
  2112  00465C  0100               	movlb	0	; () banked
  2113  00465E  6FF4               	movwf	test_function@stop_signal& (0+255),b
  2114  004660                     l5303:
  2115                           
  2116                           ; BSR set to: 0
  2117                           ;test_and_calibration.c: 71:             while (stop_signal == 0){
  2118  004660  51F4               	movf	test_function@stop_signal& (0+255),w,b
  2119  004662  B4D8               	btfsc	status,2,c
  2120  004664  EF36  F023         	goto	u5701
  2121  004668  EF38  F023         	goto	u5700
  2122  00466C                     u5701:
  2123  00466C  EF16  F023         	goto	l5299
  2124  004670                     u5700:
  2125  004670                     
  2126                           ; BSR set to: 0
  2127                           ;test_and_calibration.c: 75:             stop(mL, mR);
  2128  004670  C0EA  F01A         	movff	test_function@mL,stop@mL
  2129  004674  C0EB  F01B         	movff	test_function@mL+1,stop@mL+1
  2130  004678  C0EC  F01C         	movff	test_function@mR,stop@mR
  2131  00467C  C0ED  F01D         	movff	test_function@mR+1,stop@mR+1
  2132  004680  ECF5  F029         	call	_stop	;wreg free
  2133  004684                     
  2134                           ;test_and_calibration.c: 76:             _delay((unsigned long)((1000)*(64000000/4000.0)
      +                          ));
  2135  004684  0E52               	movlw	82
  2136  004686  0100               	movlb	0	; () banked
  2137  004688  6FEF               	movwf	(??_test_function+1)& (0+255),b
  2138  00468A  0E2B               	movlw	43
  2139  00468C  6FEE               	movwf	??_test_function& (0+255),b
  2140  00468E  0E00               	movlw	0
  2141  004690                     u5987:
  2142  004690  2EE8               	decfsz	wreg,f,c
  2143  004692  D7FE               	bra	u5987
  2144  004694  2FEE               	decfsz	??_test_function& (0+255),f,b
  2145  004696  D7FC               	bra	u5987
  2146  004698  2FEF               	decfsz	(??_test_function+1)& (0+255),f,b
  2147  00469A  D7FA               	bra	u5987
  2148  00469C  F000               	nop	
  2149  00469E                     
  2150                           ;test_and_calibration.c: 77:             stop_signal = 0;
  2151  00469E  0E00               	movlw	0
  2152  0046A0  0100               	movlb	0	; () banked
  2153  0046A2  6FF4               	movwf	test_function@stop_signal& (0+255),b
  2154  0046A4  EFBE  F022         	goto	l5271
  2155  0046A8  0012               	return		;funcret
  2156  0046AA                     __end_of_test_function:
  2157                           	callstack 0
  2158                           
  2159 ;; *************** function _distance_measure *****************
  2160 ;; Defined at:
  2161 ;;		line 401 in file "color.c"
  2162 ;; Parameters:    Size  Location     Type
  2163 ;;  mL              2   10[BANK0 ] PTR struct DC_motor
  2164 ;;		 -> main@motorL(9), 
  2165 ;;  mR              2   12[BANK0 ] PTR struct DC_motor
  2166 ;;		 -> main@motorR(9), 
  2167 ;;  amb_light       2   14[BANK0 ] unsigned int 
  2168 ;; Auto vars:     Size  Location     Type
  2169 ;;  threshold       2   26[BANK0 ] unsigned int 
  2170 ;;  CC_amb          2   24[BANK0 ] unsigned int 
  2171 ;;  CG_amb          2   18[BANK0 ] unsigned int 
  2172 ;;  stop            1   28[BANK0 ] unsigned char 
  2173 ;; Return value:  Size  Location     Type
  2174 ;;                  1    wreg      unsigned char 
  2175 ;; Registers used:
  2176 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2177 ;; Tracked objects:
  2178 ;;		On entry : 0/0
  2179 ;;		On exit  : 0/0
  2180 ;;		Unchanged: 0/0
  2181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2182 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2183 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2184 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2185 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2186 ;;Total ram usage:       19 bytes
  2187 ;; Hardware stack levels used: 1
  2188 ;; Hardware stack levels required when called: 5
  2189 ;; This function calls:
  2190 ;;		_LED_C
  2191 ;;		___flmul
  2192 ;;		___xxtofl
  2193 ;;		_color_read_Clear
  2194 ;;		_color_read_Green
  2195 ;;		_lroundf
  2196 ;; This function is called by:
  2197 ;;		_main
  2198 ;;		_test_function
  2199 ;; This function uses a non-reentrant model
  2200 ;;
  2201                           
  2202                           	psect	text3
  2203  0050D6                     __ptext3:
  2204                           	callstack 0
  2205  0050D6                     _distance_measure:
  2206                           	callstack 24
  2207  0050D6  0E00               	movlw	0
  2208  0050D8  0100               	movlb	0	; () banked
  2209  0050DA  6F73               	movwf	(distance_measure@CG_amb+1)& (0+255),b
  2210  0050DC  0E00               	movlw	0
  2211  0050DE  6F72               	movwf	distance_measure@CG_amb& (0+255),b
  2212                           
  2213                           ;color.c: 404:     unsigned char stop = 0;
  2214  0050E0  0E00               	movlw	0
  2215  0050E2  6F7C               	movwf	distance_measure@stop& (0+255),b
  2216                           
  2217                           ;color.c: 405:     unsigned int threshold = 0;
  2218  0050E4  0E00               	movlw	0
  2219  0050E6  6F7B               	movwf	(distance_measure@threshold+1)& (0+255),b
  2220  0050E8  0E00               	movlw	0
  2221  0050EA  6F7A               	movwf	distance_measure@threshold& (0+255),b
  2222  0050EC                     
  2223                           ; BSR set to: 0
  2224                           ;color.c: 406:     LED_C();
  2225  0050EC  ECCD  F02E         	call	_LED_C	;wreg free
  2226  0050F0                     
  2227                           ;color.c: 407:     _delay((unsigned long)((100)*(64000000/4000.0)));
  2228  0050F0  0E09               	movlw	9
  2229  0050F2  0100               	movlb	0	; () banked
  2230  0050F4  6F71               	movwf	(??_distance_measure+1)& (0+255),b
  2231  0050F6  0E1E               	movlw	30
  2232  0050F8  6F70               	movwf	??_distance_measure& (0+255),b
  2233  0050FA  0EE4               	movlw	228
  2234  0050FC                     u5997:
  2235  0050FC  2EE8               	decfsz	wreg,f,c
  2236  0050FE  D7FE               	bra	u5997
  2237  005100  2F70               	decfsz	??_distance_measure& (0+255),f,b
  2238  005102  D7FC               	bra	u5997
  2239  005104  2F71               	decfsz	(??_distance_measure+1)& (0+255),f,b
  2240  005106  D7FA               	bra	u5997
  2241  005108  F000               	nop	
  2242  00510A                     
  2243                           ;color.c: 408:     CC_amb = color_read_Clear();
  2244  00510A  EC67  F02C         	call	_color_read_Clear	;wreg free
  2245  00510E  C005  F078         	movff	?_color_read_Clear,distance_measure@CC_amb
  2246  005112  C006  F079         	movff	?_color_read_Clear+1,distance_measure@CC_amb+1
  2247  005116  EC17  F02C         	call	_color_read_Green	;wreg free
  2248  00511A                     
  2249                           ;color.c: 410:     threshold = lroundf((float)amb_light * 1.1);
  2250  00511A  C06E  F001         	movff	distance_measure@amb_light,___xxtofl@val
  2251  00511E  C06F  F002         	movff	distance_measure@amb_light+1,___xxtofl@val+1
  2252  005122  6A03               	clrf	(___xxtofl@val+2)^0,c
  2253  005124  6A04               	clrf	(___xxtofl@val+3)^0,c
  2254  005126  0E00               	movlw	0
  2255  005128  EC20  F020         	call	___xxtofl
  2256  00512C  C001  F028         	movff	?___xxtofl,___flmul@b
  2257  005130  C002  F029         	movff	?___xxtofl+1,___flmul@b+1
  2258  005134  C003  F02A         	movff	?___xxtofl+2,___flmul@b+2
  2259  005138  C004  F02B         	movff	?___xxtofl+3,___flmul@b+3
  2260  00513C  0ECD               	movlw	205
  2261  00513E  6E2C               	movwf	___flmul@a^0,c
  2262  005140  0ECC               	movlw	204
  2263  005142  6E2D               	movwf	(___flmul@a+1)^0,c
  2264  005144  0E8C               	movlw	140
  2265  005146  6E2E               	movwf	(___flmul@a+2)^0,c
  2266  005148  0E3F               	movlw	63
  2267  00514A  6E2F               	movwf	(___flmul@a+3)^0,c
  2268  00514C  EC6C  F00F         	call	___flmul	;wreg free
  2269  005150  C028  F074         	movff	?___flmul,_distance_measure$3206
  2270  005154  C029  F075         	movff	?___flmul+1,_distance_measure$3206+1
  2271  005158  C02A  F076         	movff	?___flmul+2,_distance_measure$3206+2
  2272  00515C  C02B  F077         	movff	?___flmul+3,_distance_measure$3206+3
  2273  005160                     
  2274                           ;color.c: 410:     threshold = lroundf((float)amb_light * 1.1);
  2275  005160  C074  F066         	movff	_distance_measure$3206,lroundf@x
  2276  005164  C075  F067         	movff	_distance_measure$3206+1,lroundf@x+1
  2277  005168  C076  F068         	movff	_distance_measure$3206+2,lroundf@x+2
  2278  00516C  C077  F069         	movff	_distance_measure$3206+3,lroundf@x+3
  2279  005170  ECB4  F02D         	call	_lroundf	;wreg free
  2280  005174  C066  F07A         	movff	?_lroundf,distance_measure@threshold
  2281  005178  C067  F07B         	movff	?_lroundf+1,distance_measure@threshold+1
  2282  00517C                     
  2283                           ;color.c: 413:     if (CC_amb >= threshold){stop = 1;}
  2284  00517C  0100               	movlb	0	; () banked
  2285  00517E  517A               	movf	distance_measure@threshold& (0+255),w,b
  2286  005180  5D78               	subwf	distance_measure@CC_amb& (0+255),w,b
  2287  005182  517B               	movf	(distance_measure@threshold+1)& (0+255),w,b
  2288  005184  5979               	subwfb	(distance_measure@CC_amb+1)& (0+255),w,b
  2289  005186  A0D8               	btfss	status,0,c
  2290  005188  EFC8  F028         	goto	u5441
  2291  00518C  EFCA  F028         	goto	u5440
  2292  005190                     u5441:
  2293  005190  EFCC  F028         	goto	l160
  2294  005194                     u5440:
  2295  005194                     
  2296                           ; BSR set to: 0
  2297  005194  0E01               	movlw	1
  2298  005196  6F7C               	movwf	distance_measure@stop& (0+255),b
  2299  005198                     l160:
  2300                           
  2301                           ; BSR set to: 0
  2302                           ;color.c: 414:     return stop;
  2303  005198  517C               	movf	distance_measure@stop& (0+255),w,b
  2304  00519A                     
  2305                           ; BSR set to: 0
  2306  00519A  0012               	return		;funcret
  2307  00519C                     __end_of_distance_measure:
  2308                           	callstack 0
  2309                           
  2310 ;; *************** function _detect_color *****************
  2311 ;; Defined at:
  2312 ;;		line 290 in file "color.c"
  2313 ;; Parameters:    Size  Location     Type
  2314 ;;  m               2   17[BANK0 ] PTR struct color_rgb
  2315 ;;		 -> main@rgb(8), 
  2316 ;;  w               2   19[BANK0 ] PTR struct white_card
  2317 ;;		 -> main@white(28), 
  2318 ;; Auto vars:     Size  Location     Type
  2319 ;;  BG              2   44[BANK0 ] unsigned int 
  2320 ;;  RR              2   42[BANK0 ] unsigned int 
  2321 ;;  GG              2   39[BANK0 ] unsigned int 
  2322 ;;  BR              2   37[BANK0 ] unsigned int 
  2323 ;;  GB              2   35[BANK0 ] unsigned int 
  2324 ;;  RB              2   33[BANK0 ] unsigned int 
  2325 ;;  BB              2   31[BANK0 ] unsigned int 
  2326 ;;  GR              2   29[BANK0 ] unsigned int 
  2327 ;;  BC              2   27[BANK0 ] unsigned int 
  2328 ;;  RG              2   25[BANK0 ] unsigned int 
  2329 ;;  color           1   41[BANK0 ] unsigned char 
  2330 ;; Return value:  Size  Location     Type
  2331 ;;                  1    wreg      unsigned char 
  2332 ;; Registers used:
  2333 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2334 ;; Tracked objects:
  2335 ;;		On entry : 0/0
  2336 ;;		On exit  : 0/0
  2337 ;;		Unchanged: 0/0
  2338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2339 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2340 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2341 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2342 ;;      Totals:         0      33       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2343 ;;Total ram usage:       33 bytes
  2344 ;; Hardware stack levels used: 1
  2345 ;; Hardware stack levels required when called: 5
  2346 ;; This function calls:
  2347 ;;		_LED_B
  2348 ;;		_LED_G
  2349 ;;		_LED_R
  2350 ;;		___fldiv
  2351 ;;		___flmul
  2352 ;;		___xxtofl
  2353 ;;		_compare
  2354 ;;		_lroundf
  2355 ;;		_read_color
  2356 ;;		_toggle_light
  2357 ;; This function is called by:
  2358 ;;		_verify_color
  2359 ;;		_main
  2360 ;;		_test_function
  2361 ;; This function uses a non-reentrant model
  2362 ;;
  2363                           
  2364                           	psect	text4
  2365  000E14                     __ptext4:
  2366                           	callstack 0
  2367  000E14                     _detect_color:
  2368                           	callstack 24
  2369  000E14  0E00               	movlw	0
  2370  000E16  0100               	movlb	0	; () banked
  2371  000E18  6F7A               	movwf	(detect_color@RG+1)& (0+255),b
  2372  000E1A  0E00               	movlw	0
  2373  000E1C  6F79               	movwf	detect_color@RG& (0+255),b
  2374  000E1E  0E00               	movlw	0
  2375  000E20  6F82               	movwf	(detect_color@RB+1)& (0+255),b
  2376  000E22  0E00               	movlw	0
  2377  000E24  6F81               	movwf	detect_color@RB& (0+255),b
  2378  000E26  0E00               	movlw	0
  2379  000E28  6F7E               	movwf	(detect_color@GR+1)& (0+255),b
  2380  000E2A  0E00               	movlw	0
  2381  000E2C  6F7D               	movwf	detect_color@GR& (0+255),b
  2382  000E2E  0E00               	movlw	0
  2383  000E30  6F88               	movwf	(detect_color@GG+1)& (0+255),b
  2384  000E32  0E00               	movlw	0
  2385  000E34  6F87               	movwf	detect_color@GG& (0+255),b
  2386  000E36  0E00               	movlw	0
  2387  000E38  6F84               	movwf	(detect_color@GB+1)& (0+255),b
  2388  000E3A  0E00               	movlw	0
  2389  000E3C  6F83               	movwf	detect_color@GB& (0+255),b
  2390  000E3E  0E00               	movlw	0
  2391  000E40  6F86               	movwf	(detect_color@BR+1)& (0+255),b
  2392  000E42  0E00               	movlw	0
  2393  000E44  6F85               	movwf	detect_color@BR& (0+255),b
  2394  000E46  0E00               	movlw	0
  2395  000E48  6F8D               	movwf	(detect_color@BG+1)& (0+255),b
  2396  000E4A  0E00               	movlw	0
  2397  000E4C  6F8C               	movwf	detect_color@BG& (0+255),b
  2398  000E4E  0E00               	movlw	0
  2399  000E50  6F80               	movwf	(detect_color@BB+1)& (0+255),b
  2400  000E52  0E00               	movlw	0
  2401  000E54  6F7F               	movwf	detect_color@BB& (0+255),b
  2402  000E56  0E00               	movlw	0
  2403  000E58  6F7C               	movwf	(detect_color@BC+1)& (0+255),b
  2404  000E5A  0E00               	movlw	0
  2405  000E5C  6F7B               	movwf	detect_color@BC& (0+255),b
  2406                           
  2407                           ;color.c: 296:     unsigned char color = 0;
  2408  000E5E  0E00               	movlw	0
  2409  000E60  6F89               	movwf	detect_color@color& (0+255),b
  2410  000E62                     
  2411                           ; BSR set to: 0
  2412                           ;color.c: 298:     LED_R();
  2413  000E62  EC8D  F02E         	call	_LED_R	;wreg free
  2414  000E66                     
  2415                           ;color.c: 299:     _delay((unsigned long)((100)*(64000000/4000.0)));
  2416  000E66  0E09               	movlw	9
  2417  000E68  0100               	movlb	0	; () banked
  2418  000E6A  6F76               	movwf	(??_detect_color+1)& (0+255),b
  2419  000E6C  0E1E               	movlw	30
  2420  000E6E  6F75               	movwf	??_detect_color& (0+255),b
  2421  000E70  0EE4               	movlw	228
  2422  000E72                     u6007:
  2423  000E72  2EE8               	decfsz	wreg,f,c
  2424  000E74  D7FE               	bra	u6007
  2425  000E76  2F75               	decfsz	??_detect_color& (0+255),f,b
  2426  000E78  D7FC               	bra	u6007
  2427  000E7A  2F76               	decfsz	(??_detect_color+1)& (0+255),f,b
  2428  000E7C  D7FA               	bra	u6007
  2429  000E7E  F000               	nop	
  2430  000E80                     
  2431                           ;color.c: 300:     read_color(m);
  2432  000E80  C071  F00C         	movff	detect_color@m,read_color@m
  2433  000E84  C072  F00D         	movff	detect_color@m+1,read_color@m+1
  2434  000E88  EC97  F02B         	call	_read_color	;wreg free
  2435  000E8C                     
  2436                           ;color.c: 302:     RR = lroundf((float)(m->R)/(w->RR)*100); RG = lroundf((float)(m->G)/(
      +                          w->RG)*100); RB = lroundf((float)(m->B)/(w->RB)*100);
  2437  000E8C  C073  FFD9         	movff	detect_color@w,fsr2l
  2438  000E90  C074  FFDA         	movff	detect_color@w+1,fsr2h
  2439  000E94  CFDE F075          	movff	postinc2,??_detect_color
  2440  000E98  CFDD F076          	movff	postdec2,??_detect_color+1
  2441  000E9C  C075  F001         	movff	??_detect_color,___xxtofl@val
  2442  000EA0  C076  F002         	movff	??_detect_color+1,___xxtofl@val+1
  2443  000EA4  6A03               	clrf	(___xxtofl@val+2)^0,c
  2444  000EA6  6A04               	clrf	(___xxtofl@val+3)^0,c
  2445  000EA8  0E00               	movlw	0
  2446  000EAA  EC20  F020         	call	___xxtofl
  2447  000EAE  C001  F013         	movff	?___xxtofl,___fldiv@a
  2448  000EB2  C002  F014         	movff	?___xxtofl+1,___fldiv@a+1
  2449  000EB6  C003  F015         	movff	?___xxtofl+2,___fldiv@a+2
  2450  000EBA  C004  F016         	movff	?___xxtofl+3,___fldiv@a+3
  2451  000EBE  C071  FFD9         	movff	detect_color@m,fsr2l
  2452  000EC2  C072  FFDA         	movff	detect_color@m+1,fsr2h
  2453  000EC6  CFDE F077          	movff	postinc2,??_detect_color+2
  2454  000ECA  CFDD F078          	movff	postdec2,??_detect_color+3
  2455  000ECE  C077  F001         	movff	??_detect_color+2,___xxtofl@val
  2456  000ED2  C078  F002         	movff	??_detect_color+3,___xxtofl@val+1
  2457  000ED6  6A03               	clrf	(___xxtofl@val+2)^0,c
  2458  000ED8  6A04               	clrf	(___xxtofl@val+3)^0,c
  2459  000EDA  0E00               	movlw	0
  2460  000EDC  EC20  F020         	call	___xxtofl
  2461  000EE0  C001  F00F         	movff	?___xxtofl,___fldiv@b
  2462  000EE4  C002  F010         	movff	?___xxtofl+1,___fldiv@b+1
  2463  000EE8  C003  F011         	movff	?___xxtofl+2,___fldiv@b+2
  2464  000EEC  C004  F012         	movff	?___xxtofl+3,___fldiv@b+3
  2465  000EF0  EC58  F013         	call	___fldiv	;wreg free
  2466  000EF4  C00F  F028         	movff	?___fldiv,___flmul@b
  2467  000EF8  C010  F029         	movff	?___fldiv+1,___flmul@b+1
  2468  000EFC  C011  F02A         	movff	?___fldiv+2,___flmul@b+2
  2469  000F00  C012  F02B         	movff	?___fldiv+3,___flmul@b+3
  2470  000F04  0E00               	movlw	0
  2471  000F06  6E2C               	movwf	___flmul@a^0,c
  2472  000F08  0E00               	movlw	0
  2473  000F0A  6E2D               	movwf	(___flmul@a+1)^0,c
  2474  000F0C  0EC8               	movlw	200
  2475  000F0E  6E2E               	movwf	(___flmul@a+2)^0,c
  2476  000F10  0E42               	movlw	66
  2477  000F12  6E2F               	movwf	(___flmul@a+3)^0,c
  2478  000F14  EC6C  F00F         	call	___flmul	;wreg free
  2479  000F18  C028  F08E         	movff	?___flmul,_detect_color$3205
  2480  000F1C  C029  F08F         	movff	?___flmul+1,_detect_color$3205+1
  2481  000F20  C02A  F090         	movff	?___flmul+2,_detect_color$3205+2
  2482  000F24  C02B  F091         	movff	?___flmul+3,_detect_color$3205+3
  2483  000F28                     
  2484                           ;color.c: 302:     RR = lroundf((float)(m->R)/(w->RR)*100); RG = lroundf((float)(m->G)/(
      +                          w->RG)*100); RB = lroundf((float)(m->B)/(w->RB)*100);
  2485  000F28  C08E  F066         	movff	_detect_color$3205,lroundf@x
  2486  000F2C  C08F  F067         	movff	_detect_color$3205+1,lroundf@x+1
  2487  000F30  C090  F068         	movff	_detect_color$3205+2,lroundf@x+2
  2488  000F34  C091  F069         	movff	_detect_color$3205+3,lroundf@x+3
  2489  000F38  ECB4  F02D         	call	_lroundf	;wreg free
  2490  000F3C  C066  F08A         	movff	?_lroundf,detect_color@RR
  2491  000F40  C067  F08B         	movff	?_lroundf+1,detect_color@RR+1
  2492  000F44  0100               	movlb	0	; () banked
  2493  000F46  EE20 F002          	lfsr	2,2
  2494  000F4A  5173               	movf	detect_color@w& (0+255),w,b
  2495  000F4C  26D9               	addwf	fsr2l,f,c
  2496  000F4E  5174               	movf	(detect_color@w+1)& (0+255),w,b
  2497  000F50  22DA               	addwfc	fsr2h,f,c
  2498  000F52  CFDE F075          	movff	postinc2,??_detect_color
  2499  000F56  CFDD F076          	movff	postdec2,??_detect_color+1
  2500  000F5A  C075  F001         	movff	??_detect_color,___xxtofl@val
  2501  000F5E  C076  F002         	movff	??_detect_color+1,___xxtofl@val+1
  2502  000F62  6A03               	clrf	(___xxtofl@val+2)^0,c
  2503  000F64  6A04               	clrf	(___xxtofl@val+3)^0,c
  2504  000F66  0E00               	movlw	0
  2505  000F68  EC20  F020         	call	___xxtofl
  2506  000F6C  C001  F013         	movff	?___xxtofl,___fldiv@a
  2507  000F70  C002  F014         	movff	?___xxtofl+1,___fldiv@a+1
  2508  000F74  C003  F015         	movff	?___xxtofl+2,___fldiv@a+2
  2509  000F78  C004  F016         	movff	?___xxtofl+3,___fldiv@a+3
  2510  000F7C  0100               	movlb	0	; () banked
  2511  000F7E  EE20 F002          	lfsr	2,2
  2512  000F82  5171               	movf	detect_color@m& (0+255),w,b
  2513  000F84  26D9               	addwf	fsr2l,f,c
  2514  000F86  5172               	movf	(detect_color@m+1)& (0+255),w,b
  2515  000F88  22DA               	addwfc	fsr2h,f,c
  2516  000F8A  CFDE F077          	movff	postinc2,??_detect_color+2
  2517  000F8E  CFDD F078          	movff	postdec2,??_detect_color+3
  2518  000F92  C077  F001         	movff	??_detect_color+2,___xxtofl@val
  2519  000F96  C078  F002         	movff	??_detect_color+3,___xxtofl@val+1
  2520  000F9A  6A03               	clrf	(___xxtofl@val+2)^0,c
  2521  000F9C  6A04               	clrf	(___xxtofl@val+3)^0,c
  2522  000F9E  0E00               	movlw	0
  2523  000FA0  EC20  F020         	call	___xxtofl
  2524  000FA4  C001  F00F         	movff	?___xxtofl,___fldiv@b
  2525  000FA8  C002  F010         	movff	?___xxtofl+1,___fldiv@b+1
  2526  000FAC  C003  F011         	movff	?___xxtofl+2,___fldiv@b+2
  2527  000FB0  C004  F012         	movff	?___xxtofl+3,___fldiv@b+3
  2528  000FB4  EC58  F013         	call	___fldiv	;wreg free
  2529  000FB8  C00F  F028         	movff	?___fldiv,___flmul@b
  2530  000FBC  C010  F029         	movff	?___fldiv+1,___flmul@b+1
  2531  000FC0  C011  F02A         	movff	?___fldiv+2,___flmul@b+2
  2532  000FC4  C012  F02B         	movff	?___fldiv+3,___flmul@b+3
  2533  000FC8  0E00               	movlw	0
  2534  000FCA  6E2C               	movwf	___flmul@a^0,c
  2535  000FCC  0E00               	movlw	0
  2536  000FCE  6E2D               	movwf	(___flmul@a+1)^0,c
  2537  000FD0  0EC8               	movlw	200
  2538  000FD2  6E2E               	movwf	(___flmul@a+2)^0,c
  2539  000FD4  0E42               	movlw	66
  2540  000FD6  6E2F               	movwf	(___flmul@a+3)^0,c
  2541  000FD8  EC6C  F00F         	call	___flmul	;wreg free
  2542  000FDC  C028  F08E         	movff	?___flmul,_detect_color$3205
  2543  000FE0  C029  F08F         	movff	?___flmul+1,_detect_color$3205+1
  2544  000FE4  C02A  F090         	movff	?___flmul+2,_detect_color$3205+2
  2545  000FE8  C02B  F091         	movff	?___flmul+3,_detect_color$3205+3
  2546  000FEC  C08E  F066         	movff	_detect_color$3205,lroundf@x
  2547  000FF0  C08F  F067         	movff	_detect_color$3205+1,lroundf@x+1
  2548  000FF4  C090  F068         	movff	_detect_color$3205+2,lroundf@x+2
  2549  000FF8  C091  F069         	movff	_detect_color$3205+3,lroundf@x+3
  2550  000FFC  ECB4  F02D         	call	_lroundf	;wreg free
  2551  001000  0100               	movlb	0	; () banked
  2552  001002  EE20 F004          	lfsr	2,4
  2553  001006  5173               	movf	detect_color@w& (0+255),w,b
  2554  001008  26D9               	addwf	fsr2l,f,c
  2555  00100A  5174               	movf	(detect_color@w+1)& (0+255),w,b
  2556  00100C  22DA               	addwfc	fsr2h,f,c
  2557  00100E  CFDE F075          	movff	postinc2,??_detect_color
  2558  001012  CFDD F076          	movff	postdec2,??_detect_color+1
  2559  001016  C075  F001         	movff	??_detect_color,___xxtofl@val
  2560  00101A  C076  F002         	movff	??_detect_color+1,___xxtofl@val+1
  2561  00101E  6A03               	clrf	(___xxtofl@val+2)^0,c
  2562  001020  6A04               	clrf	(___xxtofl@val+3)^0,c
  2563  001022  0E00               	movlw	0
  2564  001024  EC20  F020         	call	___xxtofl
  2565  001028  C001  F013         	movff	?___xxtofl,___fldiv@a
  2566  00102C  C002  F014         	movff	?___xxtofl+1,___fldiv@a+1
  2567  001030  C003  F015         	movff	?___xxtofl+2,___fldiv@a+2
  2568  001034  C004  F016         	movff	?___xxtofl+3,___fldiv@a+3
  2569  001038  0100               	movlb	0	; () banked
  2570  00103A  EE20 F004          	lfsr	2,4
  2571  00103E  5171               	movf	detect_color@m& (0+255),w,b
  2572  001040  26D9               	addwf	fsr2l,f,c
  2573  001042  5172               	movf	(detect_color@m+1)& (0+255),w,b
  2574  001044  22DA               	addwfc	fsr2h,f,c
  2575  001046  CFDE F077          	movff	postinc2,??_detect_color+2
  2576  00104A  CFDD F078          	movff	postdec2,??_detect_color+3
  2577  00104E  C077  F001         	movff	??_detect_color+2,___xxtofl@val
  2578  001052  C078  F002         	movff	??_detect_color+3,___xxtofl@val+1
  2579  001056  6A03               	clrf	(___xxtofl@val+2)^0,c
  2580  001058  6A04               	clrf	(___xxtofl@val+3)^0,c
  2581  00105A  0E00               	movlw	0
  2582  00105C  EC20  F020         	call	___xxtofl
  2583  001060  C001  F00F         	movff	?___xxtofl,___fldiv@b
  2584  001064  C002  F010         	movff	?___xxtofl+1,___fldiv@b+1
  2585  001068  C003  F011         	movff	?___xxtofl+2,___fldiv@b+2
  2586  00106C  C004  F012         	movff	?___xxtofl+3,___fldiv@b+3
  2587  001070  EC58  F013         	call	___fldiv	;wreg free
  2588  001074  C00F  F028         	movff	?___fldiv,___flmul@b
  2589  001078  C010  F029         	movff	?___fldiv+1,___flmul@b+1
  2590  00107C  C011  F02A         	movff	?___fldiv+2,___flmul@b+2
  2591  001080  C012  F02B         	movff	?___fldiv+3,___flmul@b+3
  2592  001084  0E00               	movlw	0
  2593  001086  6E2C               	movwf	___flmul@a^0,c
  2594  001088  0E00               	movlw	0
  2595  00108A  6E2D               	movwf	(___flmul@a+1)^0,c
  2596  00108C  0EC8               	movlw	200
  2597  00108E  6E2E               	movwf	(___flmul@a+2)^0,c
  2598  001090  0E42               	movlw	66
  2599  001092  6E2F               	movwf	(___flmul@a+3)^0,c
  2600  001094  EC6C  F00F         	call	___flmul	;wreg free
  2601  001098  C028  F08E         	movff	?___flmul,_detect_color$3205
  2602  00109C  C029  F08F         	movff	?___flmul+1,_detect_color$3205+1
  2603  0010A0  C02A  F090         	movff	?___flmul+2,_detect_color$3205+2
  2604  0010A4  C02B  F091         	movff	?___flmul+3,_detect_color$3205+3
  2605  0010A8  C08E  F066         	movff	_detect_color$3205,lroundf@x
  2606  0010AC  C08F  F067         	movff	_detect_color$3205+1,lroundf@x+1
  2607  0010B0  C090  F068         	movff	_detect_color$3205+2,lroundf@x+2
  2608  0010B4  C091  F069         	movff	_detect_color$3205+3,lroundf@x+3
  2609  0010B8  ECB4  F02D         	call	_lroundf	;wreg free
  2610  0010BC  C066  F081         	movff	?_lroundf,detect_color@RB
  2611  0010C0  C067  F082         	movff	?_lroundf+1,detect_color@RB+1
  2612  0010C4                     
  2613                           ;color.c: 303:     _delay((unsigned long)((50)*(64000000/4000.0)));
  2614  0010C4  0E05               	movlw	5
  2615  0010C6  0100               	movlb	0	; () banked
  2616  0010C8  6F76               	movwf	(??_detect_color+1)& (0+255),b
  2617  0010CA  0E0F               	movlw	15
  2618  0010CC  6F75               	movwf	??_detect_color& (0+255),b
  2619  0010CE  0EF1               	movlw	241
  2620  0010D0                     u6017:
  2621  0010D0  2EE8               	decfsz	wreg,f,c
  2622  0010D2  D7FE               	bra	u6017
  2623  0010D4  2F75               	decfsz	??_detect_color& (0+255),f,b
  2624  0010D6  D7FC               	bra	u6017
  2625  0010D8  2F76               	decfsz	(??_detect_color+1)& (0+255),f,b
  2626  0010DA  D7FA               	bra	u6017
  2627  0010DC                     
  2628                           ;color.c: 309:     LED_G();
  2629  0010DC  ECAD  F02E         	call	_LED_G	;wreg free
  2630  0010E0                     
  2631                           ;color.c: 310:     _delay((unsigned long)((100)*(64000000/4000.0)));
  2632  0010E0  0E09               	movlw	9
  2633  0010E2  0100               	movlb	0	; () banked
  2634  0010E4  6F76               	movwf	(??_detect_color+1)& (0+255),b
  2635  0010E6  0E1E               	movlw	30
  2636  0010E8  6F75               	movwf	??_detect_color& (0+255),b
  2637  0010EA  0EE4               	movlw	228
  2638  0010EC                     u6027:
  2639  0010EC  2EE8               	decfsz	wreg,f,c
  2640  0010EE  D7FE               	bra	u6027
  2641  0010F0  2F75               	decfsz	??_detect_color& (0+255),f,b
  2642  0010F2  D7FC               	bra	u6027
  2643  0010F4  2F76               	decfsz	(??_detect_color+1)& (0+255),f,b
  2644  0010F6  D7FA               	bra	u6027
  2645  0010F8  F000               	nop	
  2646  0010FA                     
  2647                           ;color.c: 311:     read_color(m);
  2648  0010FA  C071  F00C         	movff	detect_color@m,read_color@m
  2649  0010FE  C072  F00D         	movff	detect_color@m+1,read_color@m+1
  2650  001102  EC97  F02B         	call	_read_color	;wreg free
  2651  001106                     
  2652                           ;color.c: 314:     GR = lroundf((float)(m->R)/(w->GR)*100); GG = lroundf((float)(m->G)/(
      +                          w->GG)*100); GB = lroundf((float)(m->B)/(w->GB)*100);
  2653  001106  0100               	movlb	0	; () banked
  2654  001108  EE20 F006          	lfsr	2,6
  2655  00110C  5173               	movf	detect_color@w& (0+255),w,b
  2656  00110E  26D9               	addwf	fsr2l,f,c
  2657  001110  5174               	movf	(detect_color@w+1)& (0+255),w,b
  2658  001112  22DA               	addwfc	fsr2h,f,c
  2659  001114  CFDE F075          	movff	postinc2,??_detect_color
  2660  001118  CFDD F076          	movff	postdec2,??_detect_color+1
  2661  00111C  C075  F001         	movff	??_detect_color,___xxtofl@val
  2662  001120  C076  F002         	movff	??_detect_color+1,___xxtofl@val+1
  2663  001124  6A03               	clrf	(___xxtofl@val+2)^0,c
  2664  001126  6A04               	clrf	(___xxtofl@val+3)^0,c
  2665  001128  0E00               	movlw	0
  2666  00112A  EC20  F020         	call	___xxtofl
  2667  00112E  C001  F013         	movff	?___xxtofl,___fldiv@a
  2668  001132  C002  F014         	movff	?___xxtofl+1,___fldiv@a+1
  2669  001136  C003  F015         	movff	?___xxtofl+2,___fldiv@a+2
  2670  00113A  C004  F016         	movff	?___xxtofl+3,___fldiv@a+3
  2671  00113E  C071  FFD9         	movff	detect_color@m,fsr2l
  2672  001142  C072  FFDA         	movff	detect_color@m+1,fsr2h
  2673  001146  CFDE F077          	movff	postinc2,??_detect_color+2
  2674  00114A  CFDD F078          	movff	postdec2,??_detect_color+3
  2675  00114E  C077  F001         	movff	??_detect_color+2,___xxtofl@val
  2676  001152  C078  F002         	movff	??_detect_color+3,___xxtofl@val+1
  2677  001156  6A03               	clrf	(___xxtofl@val+2)^0,c
  2678  001158  6A04               	clrf	(___xxtofl@val+3)^0,c
  2679  00115A  0E00               	movlw	0
  2680  00115C  EC20  F020         	call	___xxtofl
  2681  001160  C001  F00F         	movff	?___xxtofl,___fldiv@b
  2682  001164  C002  F010         	movff	?___xxtofl+1,___fldiv@b+1
  2683  001168  C003  F011         	movff	?___xxtofl+2,___fldiv@b+2
  2684  00116C  C004  F012         	movff	?___xxtofl+3,___fldiv@b+3
  2685  001170  EC58  F013         	call	___fldiv	;wreg free
  2686  001174  C00F  F028         	movff	?___fldiv,___flmul@b
  2687  001178  C010  F029         	movff	?___fldiv+1,___flmul@b+1
  2688  00117C  C011  F02A         	movff	?___fldiv+2,___flmul@b+2
  2689  001180  C012  F02B         	movff	?___fldiv+3,___flmul@b+3
  2690  001184  0E00               	movlw	0
  2691  001186  6E2C               	movwf	___flmul@a^0,c
  2692  001188  0E00               	movlw	0
  2693  00118A  6E2D               	movwf	(___flmul@a+1)^0,c
  2694  00118C  0EC8               	movlw	200
  2695  00118E  6E2E               	movwf	(___flmul@a+2)^0,c
  2696  001190  0E42               	movlw	66
  2697  001192  6E2F               	movwf	(___flmul@a+3)^0,c
  2698  001194  EC6C  F00F         	call	___flmul	;wreg free
  2699  001198  C028  F08E         	movff	?___flmul,_detect_color$3205
  2700  00119C  C029  F08F         	movff	?___flmul+1,_detect_color$3205+1
  2701  0011A0  C02A  F090         	movff	?___flmul+2,_detect_color$3205+2
  2702  0011A4  C02B  F091         	movff	?___flmul+3,_detect_color$3205+3
  2703  0011A8                     
  2704                           ;color.c: 314:     GR = lroundf((float)(m->R)/(w->GR)*100); GG = lroundf((float)(m->G)/(
      +                          w->GG)*100); GB = lroundf((float)(m->B)/(w->GB)*100);
  2705  0011A8  C08E  F066         	movff	_detect_color$3205,lroundf@x
  2706  0011AC  C08F  F067         	movff	_detect_color$3205+1,lroundf@x+1
  2707  0011B0  C090  F068         	movff	_detect_color$3205+2,lroundf@x+2
  2708  0011B4  C091  F069         	movff	_detect_color$3205+3,lroundf@x+3
  2709  0011B8  ECB4  F02D         	call	_lroundf	;wreg free
  2710  0011BC  C066  F07D         	movff	?_lroundf,detect_color@GR
  2711  0011C0  C067  F07E         	movff	?_lroundf+1,detect_color@GR+1
  2712  0011C4  0100               	movlb	0	; () banked
  2713  0011C6  EE20 F008          	lfsr	2,8
  2714  0011CA  5173               	movf	detect_color@w& (0+255),w,b
  2715  0011CC  26D9               	addwf	fsr2l,f,c
  2716  0011CE  5174               	movf	(detect_color@w+1)& (0+255),w,b
  2717  0011D0  22DA               	addwfc	fsr2h,f,c
  2718  0011D2  CFDE F075          	movff	postinc2,??_detect_color
  2719  0011D6  CFDD F076          	movff	postdec2,??_detect_color+1
  2720  0011DA  C075  F001         	movff	??_detect_color,___xxtofl@val
  2721  0011DE  C076  F002         	movff	??_detect_color+1,___xxtofl@val+1
  2722  0011E2  6A03               	clrf	(___xxtofl@val+2)^0,c
  2723  0011E4  6A04               	clrf	(___xxtofl@val+3)^0,c
  2724  0011E6  0E00               	movlw	0
  2725  0011E8  EC20  F020         	call	___xxtofl
  2726  0011EC  C001  F013         	movff	?___xxtofl,___fldiv@a
  2727  0011F0  C002  F014         	movff	?___xxtofl+1,___fldiv@a+1
  2728  0011F4  C003  F015         	movff	?___xxtofl+2,___fldiv@a+2
  2729  0011F8  C004  F016         	movff	?___xxtofl+3,___fldiv@a+3
  2730  0011FC  0100               	movlb	0	; () banked
  2731  0011FE  EE20 F002          	lfsr	2,2
  2732  001202  5171               	movf	detect_color@m& (0+255),w,b
  2733  001204  26D9               	addwf	fsr2l,f,c
  2734  001206  5172               	movf	(detect_color@m+1)& (0+255),w,b
  2735  001208  22DA               	addwfc	fsr2h,f,c
  2736  00120A  CFDE F077          	movff	postinc2,??_detect_color+2
  2737  00120E  CFDD F078          	movff	postdec2,??_detect_color+3
  2738  001212  C077  F001         	movff	??_detect_color+2,___xxtofl@val
  2739  001216  C078  F002         	movff	??_detect_color+3,___xxtofl@val+1
  2740  00121A  6A03               	clrf	(___xxtofl@val+2)^0,c
  2741  00121C  6A04               	clrf	(___xxtofl@val+3)^0,c
  2742  00121E  0E00               	movlw	0
  2743  001220  EC20  F020         	call	___xxtofl
  2744  001224  C001  F00F         	movff	?___xxtofl,___fldiv@b
  2745  001228  C002  F010         	movff	?___xxtofl+1,___fldiv@b+1
  2746  00122C  C003  F011         	movff	?___xxtofl+2,___fldiv@b+2
  2747  001230  C004  F012         	movff	?___xxtofl+3,___fldiv@b+3
  2748  001234  EC58  F013         	call	___fldiv	;wreg free
  2749  001238  C00F  F028         	movff	?___fldiv,___flmul@b
  2750  00123C  C010  F029         	movff	?___fldiv+1,___flmul@b+1
  2751  001240  C011  F02A         	movff	?___fldiv+2,___flmul@b+2
  2752  001244  C012  F02B         	movff	?___fldiv+3,___flmul@b+3
  2753  001248  0E00               	movlw	0
  2754  00124A  6E2C               	movwf	___flmul@a^0,c
  2755  00124C  0E00               	movlw	0
  2756  00124E  6E2D               	movwf	(___flmul@a+1)^0,c
  2757  001250  0EC8               	movlw	200
  2758  001252  6E2E               	movwf	(___flmul@a+2)^0,c
  2759  001254  0E42               	movlw	66
  2760  001256  6E2F               	movwf	(___flmul@a+3)^0,c
  2761  001258  EC6C  F00F         	call	___flmul	;wreg free
  2762  00125C  C028  F08E         	movff	?___flmul,_detect_color$3205
  2763  001260  C029  F08F         	movff	?___flmul+1,_detect_color$3205+1
  2764  001264  C02A  F090         	movff	?___flmul+2,_detect_color$3205+2
  2765  001268  C02B  F091         	movff	?___flmul+3,_detect_color$3205+3
  2766  00126C  C08E  F066         	movff	_detect_color$3205,lroundf@x
  2767  001270  C08F  F067         	movff	_detect_color$3205+1,lroundf@x+1
  2768  001274  C090  F068         	movff	_detect_color$3205+2,lroundf@x+2
  2769  001278  C091  F069         	movff	_detect_color$3205+3,lroundf@x+3
  2770  00127C  ECB4  F02D         	call	_lroundf	;wreg free
  2771  001280  C066  F087         	movff	?_lroundf,detect_color@GG
  2772  001284  C067  F088         	movff	?_lroundf+1,detect_color@GG+1
  2773  001288  0100               	movlb	0	; () banked
  2774  00128A  EE20 F00A          	lfsr	2,10
  2775  00128E  5173               	movf	detect_color@w& (0+255),w,b
  2776  001290  26D9               	addwf	fsr2l,f,c
  2777  001292  5174               	movf	(detect_color@w+1)& (0+255),w,b
  2778  001294  22DA               	addwfc	fsr2h,f,c
  2779  001296  CFDE F075          	movff	postinc2,??_detect_color
  2780  00129A  CFDD F076          	movff	postdec2,??_detect_color+1
  2781  00129E  C075  F001         	movff	??_detect_color,___xxtofl@val
  2782  0012A2  C076  F002         	movff	??_detect_color+1,___xxtofl@val+1
  2783  0012A6  6A03               	clrf	(___xxtofl@val+2)^0,c
  2784  0012A8  6A04               	clrf	(___xxtofl@val+3)^0,c
  2785  0012AA  0E00               	movlw	0
  2786  0012AC  EC20  F020         	call	___xxtofl
  2787  0012B0  C001  F013         	movff	?___xxtofl,___fldiv@a
  2788  0012B4  C002  F014         	movff	?___xxtofl+1,___fldiv@a+1
  2789  0012B8  C003  F015         	movff	?___xxtofl+2,___fldiv@a+2
  2790  0012BC  C004  F016         	movff	?___xxtofl+3,___fldiv@a+3
  2791  0012C0  0100               	movlb	0	; () banked
  2792  0012C2  EE20 F004          	lfsr	2,4
  2793  0012C6  5171               	movf	detect_color@m& (0+255),w,b
  2794  0012C8  26D9               	addwf	fsr2l,f,c
  2795  0012CA  5172               	movf	(detect_color@m+1)& (0+255),w,b
  2796  0012CC  22DA               	addwfc	fsr2h,f,c
  2797  0012CE  CFDE F077          	movff	postinc2,??_detect_color+2
  2798  0012D2  CFDD F078          	movff	postdec2,??_detect_color+3
  2799  0012D6  C077  F001         	movff	??_detect_color+2,___xxtofl@val
  2800  0012DA  C078  F002         	movff	??_detect_color+3,___xxtofl@val+1
  2801  0012DE  6A03               	clrf	(___xxtofl@val+2)^0,c
  2802  0012E0  6A04               	clrf	(___xxtofl@val+3)^0,c
  2803  0012E2  0E00               	movlw	0
  2804  0012E4  EC20  F020         	call	___xxtofl
  2805  0012E8  C001  F00F         	movff	?___xxtofl,___fldiv@b
  2806  0012EC  C002  F010         	movff	?___xxtofl+1,___fldiv@b+1
  2807  0012F0  C003  F011         	movff	?___xxtofl+2,___fldiv@b+2
  2808  0012F4  C004  F012         	movff	?___xxtofl+3,___fldiv@b+3
  2809  0012F8  EC58  F013         	call	___fldiv	;wreg free
  2810  0012FC  C00F  F028         	movff	?___fldiv,___flmul@b
  2811  001300  C010  F029         	movff	?___fldiv+1,___flmul@b+1
  2812  001304  C011  F02A         	movff	?___fldiv+2,___flmul@b+2
  2813  001308  C012  F02B         	movff	?___fldiv+3,___flmul@b+3
  2814  00130C  0E00               	movlw	0
  2815  00130E  6E2C               	movwf	___flmul@a^0,c
  2816  001310  0E00               	movlw	0
  2817  001312  6E2D               	movwf	(___flmul@a+1)^0,c
  2818  001314  0EC8               	movlw	200
  2819  001316  6E2E               	movwf	(___flmul@a+2)^0,c
  2820  001318  0E42               	movlw	66
  2821  00131A  6E2F               	movwf	(___flmul@a+3)^0,c
  2822  00131C  EC6C  F00F         	call	___flmul	;wreg free
  2823  001320  C028  F08E         	movff	?___flmul,_detect_color$3205
  2824  001324  C029  F08F         	movff	?___flmul+1,_detect_color$3205+1
  2825  001328  C02A  F090         	movff	?___flmul+2,_detect_color$3205+2
  2826  00132C  C02B  F091         	movff	?___flmul+3,_detect_color$3205+3
  2827  001330  C08E  F066         	movff	_detect_color$3205,lroundf@x
  2828  001334  C08F  F067         	movff	_detect_color$3205+1,lroundf@x+1
  2829  001338  C090  F068         	movff	_detect_color$3205+2,lroundf@x+2
  2830  00133C  C091  F069         	movff	_detect_color$3205+3,lroundf@x+3
  2831  001340  ECB4  F02D         	call	_lroundf	;wreg free
  2832  001344  C066  F083         	movff	?_lroundf,detect_color@GB
  2833  001348  C067  F084         	movff	?_lroundf+1,detect_color@GB+1
  2834  00134C                     
  2835                           ;color.c: 319:     LED_B();
  2836  00134C  ECBD  F02E         	call	_LED_B	;wreg free
  2837  001350                     
  2838                           ;color.c: 320:     _delay((unsigned long)((100)*(64000000/4000.0)));
  2839  001350  0E09               	movlw	9
  2840  001352  0100               	movlb	0	; () banked
  2841  001354  6F76               	movwf	(??_detect_color+1)& (0+255),b
  2842  001356  0E1E               	movlw	30
  2843  001358  6F75               	movwf	??_detect_color& (0+255),b
  2844  00135A  0EE4               	movlw	228
  2845  00135C                     u6037:
  2846  00135C  2EE8               	decfsz	wreg,f,c
  2847  00135E  D7FE               	bra	u6037
  2848  001360  2F75               	decfsz	??_detect_color& (0+255),f,b
  2849  001362  D7FC               	bra	u6037
  2850  001364  2F76               	decfsz	(??_detect_color+1)& (0+255),f,b
  2851  001366  D7FA               	bra	u6037
  2852  001368  F000               	nop	
  2853  00136A                     
  2854                           ;color.c: 321:     read_color(m);
  2855  00136A  C071  F00C         	movff	detect_color@m,read_color@m
  2856  00136E  C072  F00D         	movff	detect_color@m+1,read_color@m+1
  2857  001372  EC97  F02B         	call	_read_color	;wreg free
  2858  001376                     
  2859                           ;color.c: 322:     BR = lroundf((float)(m->R)/(w->BR)*100); BG = lroundf((float)(m->G)/(
      +                          w->BG)*100); BB = lroundf((float)(m->B)/(w->BB)*100);
  2860  001376  0100               	movlb	0	; () banked
  2861  001378  EE20 F00C          	lfsr	2,12
  2862  00137C  5173               	movf	detect_color@w& (0+255),w,b
  2863  00137E  26D9               	addwf	fsr2l,f,c
  2864  001380  5174               	movf	(detect_color@w+1)& (0+255),w,b
  2865  001382  22DA               	addwfc	fsr2h,f,c
  2866  001384  CFDE F075          	movff	postinc2,??_detect_color
  2867  001388  CFDD F076          	movff	postdec2,??_detect_color+1
  2868  00138C  C075  F001         	movff	??_detect_color,___xxtofl@val
  2869  001390  C076  F002         	movff	??_detect_color+1,___xxtofl@val+1
  2870  001394  6A03               	clrf	(___xxtofl@val+2)^0,c
  2871  001396  6A04               	clrf	(___xxtofl@val+3)^0,c
  2872  001398  0E00               	movlw	0
  2873  00139A  EC20  F020         	call	___xxtofl
  2874  00139E  C001  F013         	movff	?___xxtofl,___fldiv@a
  2875  0013A2  C002  F014         	movff	?___xxtofl+1,___fldiv@a+1
  2876  0013A6  C003  F015         	movff	?___xxtofl+2,___fldiv@a+2
  2877  0013AA  C004  F016         	movff	?___xxtofl+3,___fldiv@a+3
  2878  0013AE  C071  FFD9         	movff	detect_color@m,fsr2l
  2879  0013B2  C072  FFDA         	movff	detect_color@m+1,fsr2h
  2880  0013B6  CFDE F077          	movff	postinc2,??_detect_color+2
  2881  0013BA  CFDD F078          	movff	postdec2,??_detect_color+3
  2882  0013BE  C077  F001         	movff	??_detect_color+2,___xxtofl@val
  2883  0013C2  C078  F002         	movff	??_detect_color+3,___xxtofl@val+1
  2884  0013C6  6A03               	clrf	(___xxtofl@val+2)^0,c
  2885  0013C8  6A04               	clrf	(___xxtofl@val+3)^0,c
  2886  0013CA  0E00               	movlw	0
  2887  0013CC  EC20  F020         	call	___xxtofl
  2888  0013D0  C001  F00F         	movff	?___xxtofl,___fldiv@b
  2889  0013D4  C002  F010         	movff	?___xxtofl+1,___fldiv@b+1
  2890  0013D8  C003  F011         	movff	?___xxtofl+2,___fldiv@b+2
  2891  0013DC  C004  F012         	movff	?___xxtofl+3,___fldiv@b+3
  2892  0013E0  EC58  F013         	call	___fldiv	;wreg free
  2893  0013E4  C00F  F028         	movff	?___fldiv,___flmul@b
  2894  0013E8  C010  F029         	movff	?___fldiv+1,___flmul@b+1
  2895  0013EC  C011  F02A         	movff	?___fldiv+2,___flmul@b+2
  2896  0013F0  C012  F02B         	movff	?___fldiv+3,___flmul@b+3
  2897  0013F4  0E00               	movlw	0
  2898  0013F6  6E2C               	movwf	___flmul@a^0,c
  2899  0013F8  0E00               	movlw	0
  2900  0013FA  6E2D               	movwf	(___flmul@a+1)^0,c
  2901  0013FC  0EC8               	movlw	200
  2902  0013FE  6E2E               	movwf	(___flmul@a+2)^0,c
  2903  001400  0E42               	movlw	66
  2904  001402  6E2F               	movwf	(___flmul@a+3)^0,c
  2905  001404  EC6C  F00F         	call	___flmul	;wreg free
  2906  001408  C028  F08E         	movff	?___flmul,_detect_color$3205
  2907  00140C  C029  F08F         	movff	?___flmul+1,_detect_color$3205+1
  2908  001410  C02A  F090         	movff	?___flmul+2,_detect_color$3205+2
  2909  001414  C02B  F091         	movff	?___flmul+3,_detect_color$3205+3
  2910  001418                     
  2911                           ;color.c: 322:     BR = lroundf((float)(m->R)/(w->BR)*100); BG = lroundf((float)(m->G)/(
      +                          w->BG)*100); BB = lroundf((float)(m->B)/(w->BB)*100);
  2912  001418  C08E  F066         	movff	_detect_color$3205,lroundf@x
  2913  00141C  C08F  F067         	movff	_detect_color$3205+1,lroundf@x+1
  2914  001420  C090  F068         	movff	_detect_color$3205+2,lroundf@x+2
  2915  001424  C091  F069         	movff	_detect_color$3205+3,lroundf@x+3
  2916  001428  ECB4  F02D         	call	_lroundf	;wreg free
  2917  00142C  C066  F085         	movff	?_lroundf,detect_color@BR
  2918  001430  C067  F086         	movff	?_lroundf+1,detect_color@BR+1
  2919  001434  0100               	movlb	0	; () banked
  2920  001436  EE20 F00E          	lfsr	2,14
  2921  00143A  5173               	movf	detect_color@w& (0+255),w,b
  2922  00143C  26D9               	addwf	fsr2l,f,c
  2923  00143E  5174               	movf	(detect_color@w+1)& (0+255),w,b
  2924  001440  22DA               	addwfc	fsr2h,f,c
  2925  001442  CFDE F075          	movff	postinc2,??_detect_color
  2926  001446  CFDD F076          	movff	postdec2,??_detect_color+1
  2927  00144A  C075  F001         	movff	??_detect_color,___xxtofl@val
  2928  00144E  C076  F002         	movff	??_detect_color+1,___xxtofl@val+1
  2929  001452  6A03               	clrf	(___xxtofl@val+2)^0,c
  2930  001454  6A04               	clrf	(___xxtofl@val+3)^0,c
  2931  001456  0E00               	movlw	0
  2932  001458  EC20  F020         	call	___xxtofl
  2933  00145C  C001  F013         	movff	?___xxtofl,___fldiv@a
  2934  001460  C002  F014         	movff	?___xxtofl+1,___fldiv@a+1
  2935  001464  C003  F015         	movff	?___xxtofl+2,___fldiv@a+2
  2936  001468  C004  F016         	movff	?___xxtofl+3,___fldiv@a+3
  2937  00146C  0100               	movlb	0	; () banked
  2938  00146E  EE20 F002          	lfsr	2,2
  2939  001472  5171               	movf	detect_color@m& (0+255),w,b
  2940  001474  26D9               	addwf	fsr2l,f,c
  2941  001476  5172               	movf	(detect_color@m+1)& (0+255),w,b
  2942  001478  22DA               	addwfc	fsr2h,f,c
  2943  00147A  CFDE F077          	movff	postinc2,??_detect_color+2
  2944  00147E  CFDD F078          	movff	postdec2,??_detect_color+3
  2945  001482  C077  F001         	movff	??_detect_color+2,___xxtofl@val
  2946  001486  C078  F002         	movff	??_detect_color+3,___xxtofl@val+1
  2947  00148A  6A03               	clrf	(___xxtofl@val+2)^0,c
  2948  00148C  6A04               	clrf	(___xxtofl@val+3)^0,c
  2949  00148E  0E00               	movlw	0
  2950  001490  EC20  F020         	call	___xxtofl
  2951  001494  C001  F00F         	movff	?___xxtofl,___fldiv@b
  2952  001498  C002  F010         	movff	?___xxtofl+1,___fldiv@b+1
  2953  00149C  C003  F011         	movff	?___xxtofl+2,___fldiv@b+2
  2954  0014A0  C004  F012         	movff	?___xxtofl+3,___fldiv@b+3
  2955  0014A4  EC58  F013         	call	___fldiv	;wreg free
  2956  0014A8  C00F  F028         	movff	?___fldiv,___flmul@b
  2957  0014AC  C010  F029         	movff	?___fldiv+1,___flmul@b+1
  2958  0014B0  C011  F02A         	movff	?___fldiv+2,___flmul@b+2
  2959  0014B4  C012  F02B         	movff	?___fldiv+3,___flmul@b+3
  2960  0014B8  0E00               	movlw	0
  2961  0014BA  6E2C               	movwf	___flmul@a^0,c
  2962  0014BC  0E00               	movlw	0
  2963  0014BE  6E2D               	movwf	(___flmul@a+1)^0,c
  2964  0014C0  0EC8               	movlw	200
  2965  0014C2  6E2E               	movwf	(___flmul@a+2)^0,c
  2966  0014C4  0E42               	movlw	66
  2967  0014C6  6E2F               	movwf	(___flmul@a+3)^0,c
  2968  0014C8  EC6C  F00F         	call	___flmul	;wreg free
  2969  0014CC  C028  F08E         	movff	?___flmul,_detect_color$3205
  2970  0014D0  C029  F08F         	movff	?___flmul+1,_detect_color$3205+1
  2971  0014D4  C02A  F090         	movff	?___flmul+2,_detect_color$3205+2
  2972  0014D8  C02B  F091         	movff	?___flmul+3,_detect_color$3205+3
  2973  0014DC  C08E  F066         	movff	_detect_color$3205,lroundf@x
  2974  0014E0  C08F  F067         	movff	_detect_color$3205+1,lroundf@x+1
  2975  0014E4  C090  F068         	movff	_detect_color$3205+2,lroundf@x+2
  2976  0014E8  C091  F069         	movff	_detect_color$3205+3,lroundf@x+3
  2977  0014EC  ECB4  F02D         	call	_lroundf	;wreg free
  2978  0014F0  C066  F08C         	movff	?_lroundf,detect_color@BG
  2979  0014F4  C067  F08D         	movff	?_lroundf+1,detect_color@BG+1
  2980  0014F8  0100               	movlb	0	; () banked
  2981  0014FA  EE20 F010          	lfsr	2,16
  2982  0014FE  5173               	movf	detect_color@w& (0+255),w,b
  2983  001500  26D9               	addwf	fsr2l,f,c
  2984  001502  5174               	movf	(detect_color@w+1)& (0+255),w,b
  2985  001504  22DA               	addwfc	fsr2h,f,c
  2986  001506  CFDE F075          	movff	postinc2,??_detect_color
  2987  00150A  CFDD F076          	movff	postdec2,??_detect_color+1
  2988  00150E  C075  F001         	movff	??_detect_color,___xxtofl@val
  2989  001512  C076  F002         	movff	??_detect_color+1,___xxtofl@val+1
  2990  001516  6A03               	clrf	(___xxtofl@val+2)^0,c
  2991  001518  6A04               	clrf	(___xxtofl@val+3)^0,c
  2992  00151A  0E00               	movlw	0
  2993  00151C  EC20  F020         	call	___xxtofl
  2994  001520  C001  F013         	movff	?___xxtofl,___fldiv@a
  2995  001524  C002  F014         	movff	?___xxtofl+1,___fldiv@a+1
  2996  001528  C003  F015         	movff	?___xxtofl+2,___fldiv@a+2
  2997  00152C  C004  F016         	movff	?___xxtofl+3,___fldiv@a+3
  2998  001530  0100               	movlb	0	; () banked
  2999  001532  EE20 F004          	lfsr	2,4
  3000  001536  5171               	movf	detect_color@m& (0+255),w,b
  3001  001538  26D9               	addwf	fsr2l,f,c
  3002  00153A  5172               	movf	(detect_color@m+1)& (0+255),w,b
  3003  00153C  22DA               	addwfc	fsr2h,f,c
  3004  00153E  CFDE F077          	movff	postinc2,??_detect_color+2
  3005  001542  CFDD F078          	movff	postdec2,??_detect_color+3
  3006  001546  C077  F001         	movff	??_detect_color+2,___xxtofl@val
  3007  00154A  C078  F002         	movff	??_detect_color+3,___xxtofl@val+1
  3008  00154E  6A03               	clrf	(___xxtofl@val+2)^0,c
  3009  001550  6A04               	clrf	(___xxtofl@val+3)^0,c
  3010  001552  0E00               	movlw	0
  3011  001554  EC20  F020         	call	___xxtofl
  3012  001558  C001  F00F         	movff	?___xxtofl,___fldiv@b
  3013  00155C  C002  F010         	movff	?___xxtofl+1,___fldiv@b+1
  3014  001560  C003  F011         	movff	?___xxtofl+2,___fldiv@b+2
  3015  001564  C004  F012         	movff	?___xxtofl+3,___fldiv@b+3
  3016  001568  EC58  F013         	call	___fldiv	;wreg free
  3017  00156C  C00F  F028         	movff	?___fldiv,___flmul@b
  3018  001570  C010  F029         	movff	?___fldiv+1,___flmul@b+1
  3019  001574  C011  F02A         	movff	?___fldiv+2,___flmul@b+2
  3020  001578  C012  F02B         	movff	?___fldiv+3,___flmul@b+3
  3021  00157C  0E00               	movlw	0
  3022  00157E  6E2C               	movwf	___flmul@a^0,c
  3023  001580  0E00               	movlw	0
  3024  001582  6E2D               	movwf	(___flmul@a+1)^0,c
  3025  001584  0EC8               	movlw	200
  3026  001586  6E2E               	movwf	(___flmul@a+2)^0,c
  3027  001588  0E42               	movlw	66
  3028  00158A  6E2F               	movwf	(___flmul@a+3)^0,c
  3029  00158C  EC6C  F00F         	call	___flmul	;wreg free
  3030  001590  C028  F08E         	movff	?___flmul,_detect_color$3205
  3031  001594  C029  F08F         	movff	?___flmul+1,_detect_color$3205+1
  3032  001598  C02A  F090         	movff	?___flmul+2,_detect_color$3205+2
  3033  00159C  C02B  F091         	movff	?___flmul+3,_detect_color$3205+3
  3034  0015A0  C08E  F066         	movff	_detect_color$3205,lroundf@x
  3035  0015A4  C08F  F067         	movff	_detect_color$3205+1,lroundf@x+1
  3036  0015A8  C090  F068         	movff	_detect_color$3205+2,lroundf@x+2
  3037  0015AC  C091  F069         	movff	_detect_color$3205+3,lroundf@x+3
  3038  0015B0  ECB4  F02D         	call	_lroundf	;wreg free
  3039  0015B4  C066  F07F         	movff	?_lroundf,detect_color@BB
  3040  0015B8  C067  F080         	movff	?_lroundf+1,detect_color@BB+1
  3041  0015BC                     
  3042                           ;color.c: 323:     BC = lroundf((float)(m->C)/(w->BC)*100);
  3043  0015BC  0100               	movlb	0	; () banked
  3044  0015BE  EE20 F01A          	lfsr	2,26
  3045  0015C2  5173               	movf	detect_color@w& (0+255),w,b
  3046  0015C4  26D9               	addwf	fsr2l,f,c
  3047  0015C6  5174               	movf	(detect_color@w+1)& (0+255),w,b
  3048  0015C8  22DA               	addwfc	fsr2h,f,c
  3049  0015CA  CFDE F075          	movff	postinc2,??_detect_color
  3050  0015CE  CFDD F076          	movff	postdec2,??_detect_color+1
  3051  0015D2  C075  F001         	movff	??_detect_color,___xxtofl@val
  3052  0015D6  C076  F002         	movff	??_detect_color+1,___xxtofl@val+1
  3053  0015DA  6A03               	clrf	(___xxtofl@val+2)^0,c
  3054  0015DC  6A04               	clrf	(___xxtofl@val+3)^0,c
  3055  0015DE  0E00               	movlw	0
  3056  0015E0  EC20  F020         	call	___xxtofl
  3057  0015E4  C001  F013         	movff	?___xxtofl,___fldiv@a
  3058  0015E8  C002  F014         	movff	?___xxtofl+1,___fldiv@a+1
  3059  0015EC  C003  F015         	movff	?___xxtofl+2,___fldiv@a+2
  3060  0015F0  C004  F016         	movff	?___xxtofl+3,___fldiv@a+3
  3061  0015F4  0100               	movlb	0	; () banked
  3062  0015F6  EE20 F006          	lfsr	2,6
  3063  0015FA  5171               	movf	detect_color@m& (0+255),w,b
  3064  0015FC  26D9               	addwf	fsr2l,f,c
  3065  0015FE  5172               	movf	(detect_color@m+1)& (0+255),w,b
  3066  001600  22DA               	addwfc	fsr2h,f,c
  3067  001602  CFDE F077          	movff	postinc2,??_detect_color+2
  3068  001606  CFDD F078          	movff	postdec2,??_detect_color+3
  3069  00160A  C077  F001         	movff	??_detect_color+2,___xxtofl@val
  3070  00160E  C078  F002         	movff	??_detect_color+3,___xxtofl@val+1
  3071  001612  6A03               	clrf	(___xxtofl@val+2)^0,c
  3072  001614  6A04               	clrf	(___xxtofl@val+3)^0,c
  3073  001616  0E00               	movlw	0
  3074  001618  EC20  F020         	call	___xxtofl
  3075  00161C  C001  F00F         	movff	?___xxtofl,___fldiv@b
  3076  001620  C002  F010         	movff	?___xxtofl+1,___fldiv@b+1
  3077  001624  C003  F011         	movff	?___xxtofl+2,___fldiv@b+2
  3078  001628  C004  F012         	movff	?___xxtofl+3,___fldiv@b+3
  3079  00162C  EC58  F013         	call	___fldiv	;wreg free
  3080  001630  C00F  F028         	movff	?___fldiv,___flmul@b
  3081  001634  C010  F029         	movff	?___fldiv+1,___flmul@b+1
  3082  001638  C011  F02A         	movff	?___fldiv+2,___flmul@b+2
  3083  00163C  C012  F02B         	movff	?___fldiv+3,___flmul@b+3
  3084  001640  0E00               	movlw	0
  3085  001642  6E2C               	movwf	___flmul@a^0,c
  3086  001644  0E00               	movlw	0
  3087  001646  6E2D               	movwf	(___flmul@a+1)^0,c
  3088  001648  0EC8               	movlw	200
  3089  00164A  6E2E               	movwf	(___flmul@a+2)^0,c
  3090  00164C  0E42               	movlw	66
  3091  00164E  6E2F               	movwf	(___flmul@a+3)^0,c
  3092  001650  EC6C  F00F         	call	___flmul	;wreg free
  3093  001654  C028  F08E         	movff	?___flmul,_detect_color$3205
  3094  001658  C029  F08F         	movff	?___flmul+1,_detect_color$3205+1
  3095  00165C  C02A  F090         	movff	?___flmul+2,_detect_color$3205+2
  3096  001660  C02B  F091         	movff	?___flmul+3,_detect_color$3205+3
  3097  001664  C08E  F066         	movff	_detect_color$3205,lroundf@x
  3098  001668  C08F  F067         	movff	_detect_color$3205+1,lroundf@x+1
  3099  00166C  C090  F068         	movff	_detect_color$3205+2,lroundf@x+2
  3100  001670  C091  F069         	movff	_detect_color$3205+3,lroundf@x+3
  3101  001674  ECB4  F02D         	call	_lroundf	;wreg free
  3102  001678                     
  3103                           ;color.c: 329:     if (compare(0, RR, 45)){
  3104  001678  0E00               	movlw	0
  3105  00167A  0100               	movlb	0	; () banked
  3106  00167C  6F6B               	movwf	(compare@lower+1)& (0+255),b
  3107  00167E  0E00               	movlw	0
  3108  001680  6F6A               	movwf	compare@lower& (0+255),b
  3109  001682  C08A  F06C         	movff	detect_color@RR,compare@value2compare
  3110  001686  C08B  F06D         	movff	detect_color@RR+1,compare@value2compare+1
  3111  00168A  0E00               	movlw	0
  3112  00168C  6F6F               	movwf	(compare@upper+1)& (0+255),b
  3113  00168E  0E2D               	movlw	45
  3114  001690  6F6E               	movwf	compare@upper& (0+255),b
  3115  001692  EC97  F02D         	call	_compare	;wreg free
  3116  001696  0900               	iorlw	0
  3117  001698  B4D8               	btfsc	status,2,c
  3118  00169A  EF51  F00B         	goto	u5291
  3119  00169E  EF53  F00B         	goto	u5290
  3120  0016A2                     u5291:
  3121  0016A2  EFC4  F00B         	goto	l4989
  3122  0016A6                     u5290:
  3123  0016A6                     
  3124                           ;color.c: 330:          if (compare(0, lroundf((float)(GG + BG)/BB * 200), 467)){color =
      +                           3;}
  3125  0016A6  C07F  F001         	movff	detect_color@BB,___xxtofl@val
  3126  0016AA  C080  F002         	movff	detect_color@BB+1,___xxtofl@val+1
  3127  0016AE  6A03               	clrf	(___xxtofl@val+2)^0,c
  3128  0016B0  6A04               	clrf	(___xxtofl@val+3)^0,c
  3129  0016B2  0E00               	movlw	0
  3130  0016B4  EC20  F020         	call	___xxtofl
  3131  0016B8  C001  F013         	movff	?___xxtofl,___fldiv@a
  3132  0016BC  C002  F014         	movff	?___xxtofl+1,___fldiv@a+1
  3133  0016C0  C003  F015         	movff	?___xxtofl+2,___fldiv@a+2
  3134  0016C4  C004  F016         	movff	?___xxtofl+3,___fldiv@a+3
  3135  0016C8  0100               	movlb	0	; () banked
  3136  0016CA  518C               	movf	detect_color@BG& (0+255),w,b
  3137  0016CC  2587               	addwf	detect_color@GG& (0+255),w,b
  3138  0016CE  6F75               	movwf	??_detect_color& (0+255),b
  3139  0016D0  518D               	movf	(detect_color@BG+1)& (0+255),w,b
  3140  0016D2  2188               	addwfc	(detect_color@GG+1)& (0+255),w,b
  3141  0016D4  6F76               	movwf	(??_detect_color+1)& (0+255),b
  3142  0016D6  C075  F001         	movff	??_detect_color,___xxtofl@val
  3143  0016DA  C076  F002         	movff	??_detect_color+1,___xxtofl@val+1
  3144  0016DE  6A03               	clrf	(___xxtofl@val+2)^0,c
  3145  0016E0  6A04               	clrf	(___xxtofl@val+3)^0,c
  3146  0016E2  0E00               	movlw	0
  3147  0016E4  EC20  F020         	call	___xxtofl
  3148  0016E8  C001  F00F         	movff	?___xxtofl,___fldiv@b
  3149  0016EC  C002  F010         	movff	?___xxtofl+1,___fldiv@b+1
  3150  0016F0  C003  F011         	movff	?___xxtofl+2,___fldiv@b+2
  3151  0016F4  C004  F012         	movff	?___xxtofl+3,___fldiv@b+3
  3152  0016F8  EC58  F013         	call	___fldiv	;wreg free
  3153  0016FC  C00F  F028         	movff	?___fldiv,___flmul@b
  3154  001700  C010  F029         	movff	?___fldiv+1,___flmul@b+1
  3155  001704  C011  F02A         	movff	?___fldiv+2,___flmul@b+2
  3156  001708  C012  F02B         	movff	?___fldiv+3,___flmul@b+3
  3157  00170C  0E00               	movlw	0
  3158  00170E  6E2C               	movwf	___flmul@a^0,c
  3159  001710  0E00               	movlw	0
  3160  001712  6E2D               	movwf	(___flmul@a+1)^0,c
  3161  001714  0E48               	movlw	72
  3162  001716  6E2E               	movwf	(___flmul@a+2)^0,c
  3163  001718  0E43               	movlw	67
  3164  00171A  6E2F               	movwf	(___flmul@a+3)^0,c
  3165  00171C  EC6C  F00F         	call	___flmul	;wreg free
  3166  001720  C028  F08E         	movff	?___flmul,_detect_color$3205
  3167  001724  C029  F08F         	movff	?___flmul+1,_detect_color$3205+1
  3168  001728  C02A  F090         	movff	?___flmul+2,_detect_color$3205+2
  3169  00172C  C02B  F091         	movff	?___flmul+3,_detect_color$3205+3
  3170                           
  3171                           ;color.c: 330:          if (compare(0, lroundf((float)(GG + BG)/BB * 200), 467)){color =
      +                           3;}
  3172  001730  0E00               	movlw	0
  3173  001732  0100               	movlb	0	; () banked
  3174  001734  6F6B               	movwf	(compare@lower+1)& (0+255),b
  3175  001736  0E00               	movlw	0
  3176  001738  6F6A               	movwf	compare@lower& (0+255),b
  3177  00173A  C08E  F066         	movff	_detect_color$3205,lroundf@x
  3178  00173E  C08F  F067         	movff	_detect_color$3205+1,lroundf@x+1
  3179  001742  C090  F068         	movff	_detect_color$3205+2,lroundf@x+2
  3180  001746  C091  F069         	movff	_detect_color$3205+3,lroundf@x+3
  3181  00174A  ECB4  F02D         	call	_lroundf	;wreg free
  3182  00174E  C066  F06C         	movff	?_lroundf,compare@value2compare
  3183  001752  C067  F06D         	movff	?_lroundf+1,compare@value2compare+1
  3184  001756  0E01               	movlw	1
  3185  001758  0100               	movlb	0	; () banked
  3186  00175A  6F6F               	movwf	(compare@upper+1)& (0+255),b
  3187  00175C  0ED3               	movlw	211
  3188  00175E  6F6E               	movwf	compare@upper& (0+255),b
  3189  001760  EC97  F02D         	call	_compare	;wreg free
  3190  001764  0900               	iorlw	0
  3191  001766  B4D8               	btfsc	status,2,c
  3192  001768  EFB8  F00B         	goto	u5301
  3193  00176C  EFBA  F00B         	goto	u5300
  3194  001770                     u5301:
  3195  001770  EFBF  F00B         	goto	l4987
  3196  001774                     u5300:
  3197  001774  0E03               	movlw	3
  3198  001776  0100               	movlb	0	; () banked
  3199  001778  6F89               	movwf	detect_color@color& (0+255),b
  3200  00177A  EF7F  F00C         	goto	l5015
  3201  00177E                     l4987:
  3202  00177E  0E02               	movlw	2
  3203  001780  0100               	movlb	0	; () banked
  3204  001782  6F89               	movwf	detect_color@color& (0+255),b
  3205  001784  EF7F  F00C         	goto	l5015
  3206  001788                     l4989:
  3207                           
  3208                           ;color.c: 334:         if (GG <= 30 && GB <= 30){
  3209  001788  0100               	movlb	0	; () banked
  3210  00178A  5188               	movf	(detect_color@GG+1)& (0+255),w,b
  3211  00178C  E107               	bnz	u5311
  3212  00178E  0E1F               	movlw	31
  3213  001790  5D87               	subwf	detect_color@GG& (0+255),w,b
  3214  001792  B0D8               	btfsc	status,0,c
  3215  001794  EFCE  F00B         	goto	u5311
  3216  001798  EFD0  F00B         	goto	u5310
  3217  00179C                     u5311:
  3218  00179C  EF45  F00C         	goto	l4999
  3219  0017A0                     u5310:
  3220  0017A0                     
  3221                           ; BSR set to: 0
  3222  0017A0  5184               	movf	(detect_color@GB+1)& (0+255),w,b
  3223  0017A2  E107               	bnz	u5321
  3224  0017A4  0E1F               	movlw	31
  3225  0017A6  5D83               	subwf	detect_color@GB& (0+255),w,b
  3226  0017A8  B0D8               	btfsc	status,0,c
  3227  0017AA  EFD9  F00B         	goto	u5321
  3228  0017AE  EFDB  F00B         	goto	u5320
  3229  0017B2                     u5321:
  3230  0017B2  EF45  F00C         	goto	l4999
  3231  0017B6                     u5320:
  3232  0017B6                     
  3233                           ; BSR set to: 0
  3234                           ;color.c: 336:             if (compare(0, lroundf((float)GR/RR * 500), 150)){color = 1;}
  3235  0017B6  C08A  F001         	movff	detect_color@RR,___xxtofl@val
  3236  0017BA  C08B  F002         	movff	detect_color@RR+1,___xxtofl@val+1
  3237  0017BE  6A03               	clrf	(___xxtofl@val+2)^0,c
  3238  0017C0  6A04               	clrf	(___xxtofl@val+3)^0,c
  3239  0017C2  0E00               	movlw	0
  3240  0017C4  EC20  F020         	call	___xxtofl
  3241  0017C8  C001  F013         	movff	?___xxtofl,___fldiv@a
  3242  0017CC  C002  F014         	movff	?___xxtofl+1,___fldiv@a+1
  3243  0017D0  C003  F015         	movff	?___xxtofl+2,___fldiv@a+2
  3244  0017D4  C004  F016         	movff	?___xxtofl+3,___fldiv@a+3
  3245  0017D8  C07D  F001         	movff	detect_color@GR,___xxtofl@val
  3246  0017DC  C07E  F002         	movff	detect_color@GR+1,___xxtofl@val+1
  3247  0017E0  6A03               	clrf	(___xxtofl@val+2)^0,c
  3248  0017E2  6A04               	clrf	(___xxtofl@val+3)^0,c
  3249  0017E4  0E00               	movlw	0
  3250  0017E6  EC20  F020         	call	___xxtofl
  3251  0017EA  C001  F00F         	movff	?___xxtofl,___fldiv@b
  3252  0017EE  C002  F010         	movff	?___xxtofl+1,___fldiv@b+1
  3253  0017F2  C003  F011         	movff	?___xxtofl+2,___fldiv@b+2
  3254  0017F6  C004  F012         	movff	?___xxtofl+3,___fldiv@b+3
  3255  0017FA  EC58  F013         	call	___fldiv	;wreg free
  3256  0017FE  C00F  F028         	movff	?___fldiv,___flmul@b
  3257  001802  C010  F029         	movff	?___fldiv+1,___flmul@b+1
  3258  001806  C011  F02A         	movff	?___fldiv+2,___flmul@b+2
  3259  00180A  C012  F02B         	movff	?___fldiv+3,___flmul@b+3
  3260  00180E  0E00               	movlw	0
  3261  001810  6E2C               	movwf	___flmul@a^0,c
  3262  001812  0E00               	movlw	0
  3263  001814  6E2D               	movwf	(___flmul@a+1)^0,c
  3264  001816  0EFA               	movlw	250
  3265  001818  6E2E               	movwf	(___flmul@a+2)^0,c
  3266  00181A  0E43               	movlw	67
  3267  00181C  6E2F               	movwf	(___flmul@a+3)^0,c
  3268  00181E  EC6C  F00F         	call	___flmul	;wreg free
  3269  001822  C028  F08E         	movff	?___flmul,_detect_color$3205
  3270  001826  C029  F08F         	movff	?___flmul+1,_detect_color$3205+1
  3271  00182A  C02A  F090         	movff	?___flmul+2,_detect_color$3205+2
  3272  00182E  C02B  F091         	movff	?___flmul+3,_detect_color$3205+3
  3273                           
  3274                           ;color.c: 336:             if (compare(0, lroundf((float)GR/RR * 500), 150)){color = 1;}
  3275  001832  0E00               	movlw	0
  3276  001834  0100               	movlb	0	; () banked
  3277  001836  6F6B               	movwf	(compare@lower+1)& (0+255),b
  3278  001838  0E00               	movlw	0
  3279  00183A  6F6A               	movwf	compare@lower& (0+255),b
  3280  00183C  C08E  F066         	movff	_detect_color$3205,lroundf@x
  3281  001840  C08F  F067         	movff	_detect_color$3205+1,lroundf@x+1
  3282  001844  C090  F068         	movff	_detect_color$3205+2,lroundf@x+2
  3283  001848  C091  F069         	movff	_detect_color$3205+3,lroundf@x+3
  3284  00184C  ECB4  F02D         	call	_lroundf	;wreg free
  3285  001850  C066  F06C         	movff	?_lroundf,compare@value2compare
  3286  001854  C067  F06D         	movff	?_lroundf+1,compare@value2compare+1
  3287  001858  0E00               	movlw	0
  3288  00185A  0100               	movlb	0	; () banked
  3289  00185C  6F6F               	movwf	(compare@upper+1)& (0+255),b
  3290  00185E  0E96               	movlw	150
  3291  001860  6F6E               	movwf	compare@upper& (0+255),b
  3292  001862  EC97  F02D         	call	_compare	;wreg free
  3293  001866  0900               	iorlw	0
  3294  001868  B4D8               	btfsc	status,2,c
  3295  00186A  EF39  F00C         	goto	u5331
  3296  00186E  EF3B  F00C         	goto	u5330
  3297  001872                     u5331:
  3298  001872  EF40  F00C         	goto	l4997
  3299  001876                     u5330:
  3300  001876  0E01               	movlw	1
  3301  001878  0100               	movlb	0	; () banked
  3302  00187A  6F89               	movwf	detect_color@color& (0+255),b
  3303  00187C  EF7F  F00C         	goto	l5015
  3304  001880                     l4997:
  3305  001880  0E06               	movlw	6
  3306  001882  0100               	movlb	0	; () banked
  3307  001884  6F89               	movwf	detect_color@color& (0+255),b
  3308  001886  EF7F  F00C         	goto	l5015
  3309  00188A                     l4999:
  3310                           
  3311                           ; BSR set to: 0
  3312  00188A  5188               	movf	(detect_color@GG+1)& (0+255),w,b
  3313  00188C  E109               	bnz	u5340
  3314  00188E  0E1F               	movlw	31
  3315  001890  5D87               	subwf	detect_color@GG& (0+255),w,b
  3316  001892  A0D8               	btfss	status,0,c
  3317  001894  EF4E  F00C         	goto	u5341
  3318  001898  EF50  F00C         	goto	u5340
  3319  00189C                     u5341:
  3320  00189C  EF7D  F00C         	goto	l5013
  3321  0018A0                     u5340:
  3322  0018A0                     
  3323                           ; BSR set to: 0
  3324  0018A0  5184               	movf	(detect_color@GB+1)& (0+255),w,b
  3325  0018A2  E109               	bnz	u5350
  3326  0018A4  0E1F               	movlw	31
  3327  0018A6  5D83               	subwf	detect_color@GB& (0+255),w,b
  3328  0018A8  A0D8               	btfss	status,0,c
  3329  0018AA  EF59  F00C         	goto	u5351
  3330  0018AE  EF5B  F00C         	goto	u5350
  3331  0018B2                     u5351:
  3332  0018B2  EF7D  F00C         	goto	l5013
  3333  0018B6                     u5350:
  3334  0018B6                     
  3335                           ; BSR set to: 0
  3336                           ;color.c: 341:             if (BG >= BR) {color = 7;}
  3337  0018B6  5185               	movf	detect_color@BR& (0+255),w,b
  3338  0018B8  5D8C               	subwf	detect_color@BG& (0+255),w,b
  3339  0018BA  5186               	movf	(detect_color@BR+1)& (0+255),w,b
  3340  0018BC  598D               	subwfb	(detect_color@BG+1)& (0+255),w,b
  3341  0018BE  A0D8               	btfss	status,0,c
  3342  0018C0  EF64  F00C         	goto	u5361
  3343  0018C4  EF66  F00C         	goto	u5360
  3344  0018C8                     u5361:
  3345  0018C8  EF6A  F00C         	goto	l5007
  3346  0018CC                     u5360:
  3347  0018CC                     
  3348                           ; BSR set to: 0
  3349  0018CC  0E07               	movlw	7
  3350  0018CE  6F89               	movwf	detect_color@color& (0+255),b
  3351  0018D0  EF7F  F00C         	goto	l5015
  3352  0018D4                     l5007:
  3353                           
  3354                           ; BSR set to: 0
  3355                           ;color.c: 343:                 if (BG < 48){color = 4;}
  3356  0018D4  518D               	movf	(detect_color@BG+1)& (0+255),w,b
  3357  0018D6  E107               	bnz	u5371
  3358  0018D8  0E30               	movlw	48
  3359  0018DA  5D8C               	subwf	detect_color@BG& (0+255),w,b
  3360  0018DC  B0D8               	btfsc	status,0,c
  3361  0018DE  EF73  F00C         	goto	u5371
  3362  0018E2  EF75  F00C         	goto	u5370
  3363  0018E6                     u5371:
  3364  0018E6  EF79  F00C         	goto	l5011
  3365  0018EA                     u5370:
  3366  0018EA                     
  3367                           ; BSR set to: 0
  3368  0018EA  0E04               	movlw	4
  3369  0018EC  6F89               	movwf	detect_color@color& (0+255),b
  3370  0018EE  EF7F  F00C         	goto	l5015
  3371  0018F2                     l5011:
  3372                           
  3373                           ; BSR set to: 0
  3374  0018F2  0E05               	movlw	5
  3375  0018F4  6F89               	movwf	detect_color@color& (0+255),b
  3376  0018F6  EF7F  F00C         	goto	l5015
  3377  0018FA                     l5013:
  3378                           
  3379                           ; BSR set to: 0
  3380  0018FA  0E00               	movlw	0
  3381  0018FC  6F89               	movwf	detect_color@color& (0+255),b
  3382  0018FE                     l5015:
  3383                           
  3384                           ; BSR set to: 0
  3385                           ;color.c: 350:     if (compare(90, RR, RR * 2) && compare(90, RB, RB * 2) && compare(90,
      +                           BG, BG * 2)){color = 8;}
  3386  0018FE  0E00               	movlw	0
  3387  001900  6F6B               	movwf	(compare@lower+1)& (0+255),b
  3388  001902  0E5A               	movlw	90
  3389  001904  6F6A               	movwf	compare@lower& (0+255),b
  3390  001906  C08A  F06C         	movff	detect_color@RR,compare@value2compare
  3391  00190A  C08B  F06D         	movff	detect_color@RR+1,compare@value2compare+1
  3392  00190E  90D8               	bcf	status,0,c
  3393  001910  358A               	rlcf	detect_color@RR& (0+255),w,b
  3394  001912  6F6E               	movwf	compare@upper& (0+255),b
  3395  001914  358B               	rlcf	(detect_color@RR+1)& (0+255),w,b
  3396  001916  6F6F               	movwf	(compare@upper+1)& (0+255),b
  3397  001918  EC97  F02D         	call	_compare	;wreg free
  3398  00191C  0900               	iorlw	0
  3399  00191E  B4D8               	btfsc	status,2,c
  3400  001920  EF94  F00C         	goto	u5381
  3401  001924  EF96  F00C         	goto	u5380
  3402  001928                     u5381:
  3403  001928  EFC9  F00C         	goto	l5023
  3404  00192C                     u5380:
  3405  00192C  0E00               	movlw	0
  3406  00192E  0100               	movlb	0	; () banked
  3407  001930  6F6B               	movwf	(compare@lower+1)& (0+255),b
  3408  001932  0E5A               	movlw	90
  3409  001934  6F6A               	movwf	compare@lower& (0+255),b
  3410  001936  C081  F06C         	movff	detect_color@RB,compare@value2compare
  3411  00193A  C082  F06D         	movff	detect_color@RB+1,compare@value2compare+1
  3412  00193E  90D8               	bcf	status,0,c
  3413  001940  3581               	rlcf	detect_color@RB& (0+255),w,b
  3414  001942  6F6E               	movwf	compare@upper& (0+255),b
  3415  001944  3582               	rlcf	(detect_color@RB+1)& (0+255),w,b
  3416  001946  6F6F               	movwf	(compare@upper+1)& (0+255),b
  3417  001948  EC97  F02D         	call	_compare	;wreg free
  3418  00194C  0900               	iorlw	0
  3419  00194E  B4D8               	btfsc	status,2,c
  3420  001950  EFAC  F00C         	goto	u5391
  3421  001954  EFAE  F00C         	goto	u5390
  3422  001958                     u5391:
  3423  001958  EFC9  F00C         	goto	l5023
  3424  00195C                     u5390:
  3425  00195C  0E00               	movlw	0
  3426  00195E  0100               	movlb	0	; () banked
  3427  001960  6F6B               	movwf	(compare@lower+1)& (0+255),b
  3428  001962  0E5A               	movlw	90
  3429  001964  6F6A               	movwf	compare@lower& (0+255),b
  3430  001966  C08C  F06C         	movff	detect_color@BG,compare@value2compare
  3431  00196A  C08D  F06D         	movff	detect_color@BG+1,compare@value2compare+1
  3432  00196E  90D8               	bcf	status,0,c
  3433  001970  358C               	rlcf	detect_color@BG& (0+255),w,b
  3434  001972  6F6E               	movwf	compare@upper& (0+255),b
  3435  001974  358D               	rlcf	(detect_color@BG+1)& (0+255),w,b
  3436  001976  6F6F               	movwf	(compare@upper+1)& (0+255),b
  3437  001978  EC97  F02D         	call	_compare	;wreg free
  3438  00197C  0900               	iorlw	0
  3439  00197E  B4D8               	btfsc	status,2,c
  3440  001980  EFC4  F00C         	goto	u5401
  3441  001984  EFC6  F00C         	goto	u5400
  3442  001988                     u5401:
  3443  001988  EFC9  F00C         	goto	l5023
  3444  00198C                     u5400:
  3445  00198C  0E08               	movlw	8
  3446  00198E  0100               	movlb	0	; () banked
  3447  001990  6F89               	movwf	detect_color@color& (0+255),b
  3448  001992                     l5023:
  3449                           
  3450                           ;color.c: 351:     if (compare(0, BR, 25) && compare(0,RR,30)){color = 0;}
  3451  001992  0E00               	movlw	0
  3452  001994  0100               	movlb	0	; () banked
  3453  001996  6F6B               	movwf	(compare@lower+1)& (0+255),b
  3454  001998  0E00               	movlw	0
  3455  00199A  6F6A               	movwf	compare@lower& (0+255),b
  3456  00199C  C085  F06C         	movff	detect_color@BR,compare@value2compare
  3457  0019A0  C086  F06D         	movff	detect_color@BR+1,compare@value2compare+1
  3458  0019A4  0E00               	movlw	0
  3459  0019A6  6F6F               	movwf	(compare@upper+1)& (0+255),b
  3460  0019A8  0E19               	movlw	25
  3461  0019AA  6F6E               	movwf	compare@upper& (0+255),b
  3462  0019AC  EC97  F02D         	call	_compare	;wreg free
  3463  0019B0  0900               	iorlw	0
  3464  0019B2  B4D8               	btfsc	status,2,c
  3465  0019B4  EFDE  F00C         	goto	u5411
  3466  0019B8  EFE0  F00C         	goto	u5410
  3467  0019BC                     u5411:
  3468  0019BC  EFFA  F00C         	goto	l5029
  3469  0019C0                     u5410:
  3470  0019C0  0E00               	movlw	0
  3471  0019C2  0100               	movlb	0	; () banked
  3472  0019C4  6F6B               	movwf	(compare@lower+1)& (0+255),b
  3473  0019C6  0E00               	movlw	0
  3474  0019C8  6F6A               	movwf	compare@lower& (0+255),b
  3475  0019CA  C08A  F06C         	movff	detect_color@RR,compare@value2compare
  3476  0019CE  C08B  F06D         	movff	detect_color@RR+1,compare@value2compare+1
  3477  0019D2  0E00               	movlw	0
  3478  0019D4  6F6F               	movwf	(compare@upper+1)& (0+255),b
  3479  0019D6  0E1E               	movlw	30
  3480  0019D8  6F6E               	movwf	compare@upper& (0+255),b
  3481  0019DA  EC97  F02D         	call	_compare	;wreg free
  3482  0019DE  0900               	iorlw	0
  3483  0019E0  B4D8               	btfsc	status,2,c
  3484  0019E2  EFF5  F00C         	goto	u5421
  3485  0019E6  EFF7  F00C         	goto	u5420
  3486  0019EA                     u5421:
  3487  0019EA  EFFA  F00C         	goto	l5029
  3488  0019EE                     u5420:
  3489  0019EE  0E00               	movlw	0
  3490  0019F0  0100               	movlb	0	; () banked
  3491  0019F2  6F89               	movwf	detect_color@color& (0+255),b
  3492  0019F4                     l5029:
  3493                           
  3494                           ;color.c: 353:     if (color == 8) {toggle_light(2,1);}
  3495  0019F4  0E08               	movlw	8
  3496  0019F6  0100               	movlb	0	; () banked
  3497  0019F8  1989               	xorwf	detect_color@color& (0+255),w,b
  3498  0019FA  A4D8               	btfss	status,2,c
  3499  0019FC  EF02  F00D         	goto	u5431
  3500  001A00  EF04  F00D         	goto	u5430
  3501  001A04                     u5431:
  3502  001A04  EF09  F00D         	goto	l5033
  3503  001A08                     u5430:
  3504  001A08                     
  3505                           ; BSR set to: 0
  3506  001A08  0E01               	movlw	1
  3507  001A0A  6E01               	movwf	toggle_light@toggletime^0,c
  3508  001A0C  0E02               	movlw	2
  3509  001A0E  EC24  F01B         	call	_toggle_light
  3510  001A12                     l5033:
  3511                           
  3512                           ;color.c: 354:     return color;
  3513  001A12  0100               	movlb	0	; () banked
  3514  001A14  5189               	movf	detect_color@color& (0+255),w,b
  3515  001A16                     
  3516                           ; BSR set to: 0
  3517  001A16  0012               	return		;funcret
  3518  001A18                     __end_of_detect_color:
  3519                           	callstack 0
  3520                           
  3521 ;; *************** function _compare *****************
  3522 ;; Defined at:
  3523 ;;		line 357 in file "color.c"
  3524 ;; Parameters:    Size  Location     Type
  3525 ;;  lower           2   10[BANK0 ] unsigned int 
  3526 ;;  value2compar    2   12[BANK0 ] unsigned int 
  3527 ;;  upper           2   14[BANK0 ] unsigned int 
  3528 ;; Auto vars:     Size  Location     Type
  3529 ;;  result          1   16[BANK0 ] unsigned char 
  3530 ;; Return value:  Size  Location     Type
  3531 ;;                  1    wreg      unsigned char 
  3532 ;; Registers used:
  3533 ;;		wreg, status,2, status,0
  3534 ;; Tracked objects:
  3535 ;;		On entry : 0/0
  3536 ;;		On exit  : 0/0
  3537 ;;		Unchanged: 0/0
  3538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3539 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3540 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3542 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3543 ;;Total ram usage:        7 bytes
  3544 ;; Hardware stack levels used: 1
  3545 ;; Hardware stack levels required when called: 1
  3546 ;; This function calls:
  3547 ;;		Nothing
  3548 ;; This function is called by:
  3549 ;;		_detect_color
  3550 ;; This function uses a non-reentrant model
  3551 ;;
  3552                           
  3553                           	psect	text5
  3554  005B2E                     __ptext5:
  3555                           	callstack 0
  3556  005B2E                     _compare:
  3557                           	callstack 27
  3558  005B2E                     
  3559                           ;color.c: 357: unsigned char compare(unsigned int lower, unsigned int value2compare, uns
      +                          igned int upper);color.c: 358: {;color.c: 359:     unsigned char result = 0;
  3560  005B2E  0E00               	movlw	0
  3561  005B30  0100               	movlb	0	; () banked
  3562  005B32  6F70               	movwf	compare@result& (0+255),b
  3563  005B34                     
  3564                           ; BSR set to: 0
  3565                           ;color.c: 360:     if (lower < value2compare && value2compare <= upper){result = 1;}
  3566  005B34  516C               	movf	compare@value2compare& (0+255),w,b
  3567  005B36  5D6A               	subwf	compare@lower& (0+255),w,b
  3568  005B38  516D               	movf	(compare@value2compare+1)& (0+255),w,b
  3569  005B3A  596B               	subwfb	(compare@lower+1)& (0+255),w,b
  3570  005B3C  B0D8               	btfsc	status,0,c
  3571  005B3E  EFA3  F02D         	goto	u4731
  3572  005B42  EFA5  F02D         	goto	u4730
  3573  005B46                     u4731:
  3574  005B46  EFB2  F02D         	goto	l148
  3575  005B4A                     u4730:
  3576  005B4A                     
  3577                           ; BSR set to: 0
  3578  005B4A  516C               	movf	compare@value2compare& (0+255),w,b
  3579  005B4C  5D6E               	subwf	compare@upper& (0+255),w,b
  3580  005B4E  516D               	movf	(compare@value2compare+1)& (0+255),w,b
  3581  005B50  596F               	subwfb	(compare@upper+1)& (0+255),w,b
  3582  005B52  A0D8               	btfss	status,0,c
  3583  005B54  EFAE  F02D         	goto	u4741
  3584  005B58  EFB0  F02D         	goto	u4740
  3585  005B5C                     u4741:
  3586  005B5C  EFB2  F02D         	goto	l148
  3587  005B60                     u4740:
  3588  005B60                     
  3589                           ; BSR set to: 0
  3590  005B60  0E01               	movlw	1
  3591  005B62  6F70               	movwf	compare@result& (0+255),b
  3592  005B64                     l148:
  3593                           
  3594                           ; BSR set to: 0
  3595                           ;color.c: 361:     return result;
  3596  005B64  5170               	movf	compare@result& (0+255),w,b
  3597  005B66                     
  3598                           ; BSR set to: 0
  3599  005B66  0012               	return		;funcret
  3600  005B68                     __end_of_compare:
  3601                           	callstack 0
  3602                           
  3603 ;; *************** function _color_data_collection *****************
  3604 ;; Defined at:
  3605 ;;		line 200 in file "color.c"
  3606 ;; Parameters:    Size  Location     Type
  3607 ;;  m               2   89[COMRAM] PTR struct color_rgb
  3608 ;;		 -> main@rgb(8), 
  3609 ;; Auto vars:     Size  Location     Type
  3610 ;;  x               2  132[BANK0 ] int 
  3611 ;;  k               2  130[BANK0 ] int 
  3612 ;;  j               2  128[BANK0 ] int 
  3613 ;;  i               2  126[BANK0 ] int 
  3614 ;; Return value:  Size  Location     Type
  3615 ;;                  1    wreg      void 
  3616 ;; Registers used:
  3617 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3618 ;; Tracked objects:
  3619 ;;		On entry : 0/0
  3620 ;;		On exit  : 0/0
  3621 ;;		Unchanged: 0/0
  3622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3623 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3624 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3625 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3626 ;;      Totals:         4       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3627 ;;Total ram usage:       12 bytes
  3628 ;; Hardware stack levels used: 1
  3629 ;; Hardware stack levels required when called: 10
  3630 ;; This function calls:
  3631 ;;		_LED_B
  3632 ;;		_LED_C
  3633 ;;		_LED_G
  3634 ;;		_LED_R
  3635 ;;		_color_display
  3636 ;;		_color_predict
  3637 ;;		_read_color
  3638 ;; This function is called by:
  3639 ;;		_test_function
  3640 ;; This function uses a non-reentrant model
  3641 ;;
  3642                           
  3643                           	psect	text6
  3644  0041F4                     __ptext6:
  3645                           	callstack 0
  3646  0041F4                     _color_data_collection:
  3647                           	callstack 19
  3648  0041F4                     
  3649                           ;color.c: 202:     int i = 0; int j = 0; int k = 0; int x = 0;
  3650  0041F4  0E00               	movlw	0
  3651  0041F6  0100               	movlb	0	; () banked
  3652  0041F8  6FDF               	movwf	(color_data_collection@i+1)& (0+255),b
  3653  0041FA  0E00               	movlw	0
  3654  0041FC  6FDE               	movwf	color_data_collection@i& (0+255),b
  3655  0041FE  0E00               	movlw	0
  3656  004200  6FE3               	movwf	(color_data_collection@k+1)& (0+255),b
  3657  004202  0E00               	movlw	0
  3658  004204  6FE2               	movwf	color_data_collection@k& (0+255),b
  3659  004206  0E00               	movlw	0
  3660  004208  6FE5               	movwf	(color_data_collection@x+1)& (0+255),b
  3661  00420A  0E00               	movlw	0
  3662  00420C  6FE4               	movwf	color_data_collection@x& (0+255),b
  3663                           
  3664                           ;color.c: 203:     for (i = 0; i < 1; ++i){
  3665  00420E  0E00               	movlw	0
  3666  004210  6FDF               	movwf	(color_data_collection@i+1)& (0+255),b
  3667  004212  0E00               	movlw	0
  3668  004214  6FDE               	movwf	color_data_collection@i& (0+255),b
  3669  004216                     l4795:
  3670                           
  3671                           ; BSR set to: 0
  3672                           ;color.c: 204:         LED_C();
  3673  004216  ECCD  F02E         	call	_LED_C	;wreg free
  3674  00421A                     
  3675                           ;color.c: 205:         _delay((unsigned long)((100)*(64000000/4000.0)));
  3676  00421A  0E09               	movlw	9
  3677  00421C  6E5D               	movwf	(??_color_data_collection+1)^0,c
  3678  00421E  0E1E               	movlw	30
  3679  004220  6E5C               	movwf	??_color_data_collection^0,c
  3680  004222  0EE4               	movlw	228
  3681  004224                     u6047:
  3682  004224  2EE8               	decfsz	wreg,f,c
  3683  004226  D7FE               	bra	u6047
  3684  004228  2E5C               	decfsz	??_color_data_collection^0,f,c
  3685  00422A  D7FC               	bra	u6047
  3686  00422C  2E5D               	decfsz	(??_color_data_collection+1)^0,f,c
  3687  00422E  D7FA               	bra	u6047
  3688  004230  D000               	nop2	
  3689  004232                     
  3690                           ;color.c: 206:         read_color(m);
  3691  004232  C05A  F00C         	movff	color_data_collection@m,read_color@m
  3692  004236  C05B  F00D         	movff	color_data_collection@m+1,read_color@m+1
  3693  00423A  EC97  F02B         	call	_read_color	;wreg free
  3694  00423E                     
  3695                           ;color.c: 207:         color_display(m);
  3696  00423E  C05A  F058         	movff	color_data_collection@m,color_display@m
  3697  004242  C05B  F059         	movff	color_data_collection@m+1,color_display@m+1
  3698  004246  EC2E  F02B         	call	_color_display	;wreg free
  3699  00424A                     
  3700                           ;color.c: 208:     }
  3701  00424A  0100               	movlb	0	; () banked
  3702  00424C  4BDE               	infsnz	color_data_collection@i& (0+255),f,b
  3703  00424E  2BDF               	incf	(color_data_collection@i+1)& (0+255),f,b
  3704  004250                     
  3705                           ; BSR set to: 0
  3706  004250  BFDF               	btfsc	(color_data_collection@i+1)& (0+255),7,b
  3707  004252  EF33  F021         	goto	u5251
  3708  004256  51DF               	movf	(color_data_collection@i+1)& (0+255),w,b
  3709  004258  E108               	bnz	u5250
  3710  00425A  05DE               	decf	color_data_collection@i& (0+255),w,b
  3711  00425C  A0D8               	btfss	status,0,c
  3712  00425E  EF33  F021         	goto	u5251
  3713  004262  EF35  F021         	goto	u5250
  3714  004266                     u5251:
  3715  004266  EF0B  F021         	goto	l4795
  3716  00426A                     u5250:
  3717  00426A                     
  3718                           ; BSR set to: 0
  3719                           ;color.c: 210:     for (j = 0; j < 1; ++j){
  3720  00426A  0E00               	movlw	0
  3721  00426C  6FE1               	movwf	(color_data_collection@j+1)& (0+255),b
  3722  00426E  0E00               	movlw	0
  3723  004270  6FE0               	movwf	color_data_collection@j& (0+255),b
  3724  004272                     l4813:
  3725                           
  3726                           ; BSR set to: 0
  3727                           ;color.c: 211:         LED_R();
  3728  004272  EC8D  F02E         	call	_LED_R	;wreg free
  3729  004276                     
  3730                           ;color.c: 212:         _delay((unsigned long)((100)*(64000000/4000.0)));
  3731  004276  0E09               	movlw	9
  3732  004278  6E5D               	movwf	(??_color_data_collection+1)^0,c
  3733  00427A  0E1E               	movlw	30
  3734  00427C  6E5C               	movwf	??_color_data_collection^0,c
  3735  00427E  0EE4               	movlw	228
  3736  004280                     u6057:
  3737  004280  2EE8               	decfsz	wreg,f,c
  3738  004282  D7FE               	bra	u6057
  3739  004284  2E5C               	decfsz	??_color_data_collection^0,f,c
  3740  004286  D7FC               	bra	u6057
  3741  004288  2E5D               	decfsz	(??_color_data_collection+1)^0,f,c
  3742  00428A  D7FA               	bra	u6057
  3743  00428C  D000               	nop2	
  3744  00428E                     
  3745                           ;color.c: 213:         read_color(m);
  3746  00428E  C05A  F00C         	movff	color_data_collection@m,read_color@m
  3747  004292  C05B  F00D         	movff	color_data_collection@m+1,read_color@m+1
  3748  004296  EC97  F02B         	call	_read_color	;wreg free
  3749  00429A                     
  3750                           ;color.c: 214:         color_display(m);
  3751  00429A  C05A  F058         	movff	color_data_collection@m,color_display@m
  3752  00429E  C05B  F059         	movff	color_data_collection@m+1,color_display@m+1
  3753  0042A2  EC2E  F02B         	call	_color_display	;wreg free
  3754  0042A6                     
  3755                           ;color.c: 215:     }
  3756  0042A6  0100               	movlb	0	; () banked
  3757  0042A8  4BE0               	infsnz	color_data_collection@j& (0+255),f,b
  3758  0042AA  2BE1               	incf	(color_data_collection@j+1)& (0+255),f,b
  3759  0042AC                     
  3760                           ; BSR set to: 0
  3761  0042AC  BFE1               	btfsc	(color_data_collection@j+1)& (0+255),7,b
  3762  0042AE  EF61  F021         	goto	u5261
  3763  0042B2  51E1               	movf	(color_data_collection@j+1)& (0+255),w,b
  3764  0042B4  E108               	bnz	u5260
  3765  0042B6  05E0               	decf	color_data_collection@j& (0+255),w,b
  3766  0042B8  A0D8               	btfss	status,0,c
  3767  0042BA  EF61  F021         	goto	u5261
  3768  0042BE  EF63  F021         	goto	u5260
  3769  0042C2                     u5261:
  3770  0042C2  EF39  F021         	goto	l4813
  3771  0042C6                     u5260:
  3772  0042C6                     
  3773                           ; BSR set to: 0
  3774                           ;color.c: 217:     for (k = 0; k < 1; ++k){
  3775  0042C6  0E00               	movlw	0
  3776  0042C8  6FE3               	movwf	(color_data_collection@k+1)& (0+255),b
  3777  0042CA  0E00               	movlw	0
  3778  0042CC  6FE2               	movwf	color_data_collection@k& (0+255),b
  3779  0042CE                     l4831:
  3780                           
  3781                           ; BSR set to: 0
  3782                           ;color.c: 218:         LED_G();
  3783  0042CE  ECAD  F02E         	call	_LED_G	;wreg free
  3784  0042D2                     
  3785                           ;color.c: 219:         _delay((unsigned long)((100)*(64000000/4000.0)));
  3786  0042D2  0E09               	movlw	9
  3787  0042D4  6E5D               	movwf	(??_color_data_collection+1)^0,c
  3788  0042D6  0E1E               	movlw	30
  3789  0042D8  6E5C               	movwf	??_color_data_collection^0,c
  3790  0042DA  0EE4               	movlw	228
  3791  0042DC                     u6067:
  3792  0042DC  2EE8               	decfsz	wreg,f,c
  3793  0042DE  D7FE               	bra	u6067
  3794  0042E0  2E5C               	decfsz	??_color_data_collection^0,f,c
  3795  0042E2  D7FC               	bra	u6067
  3796  0042E4  2E5D               	decfsz	(??_color_data_collection+1)^0,f,c
  3797  0042E6  D7FA               	bra	u6067
  3798  0042E8  D000               	nop2	
  3799  0042EA                     
  3800                           ;color.c: 220:         read_color(m);
  3801  0042EA  C05A  F00C         	movff	color_data_collection@m,read_color@m
  3802  0042EE  C05B  F00D         	movff	color_data_collection@m+1,read_color@m+1
  3803  0042F2  EC97  F02B         	call	_read_color	;wreg free
  3804  0042F6                     
  3805                           ;color.c: 221:         color_display(m);
  3806  0042F6  C05A  F058         	movff	color_data_collection@m,color_display@m
  3807  0042FA  C05B  F059         	movff	color_data_collection@m+1,color_display@m+1
  3808  0042FE  EC2E  F02B         	call	_color_display	;wreg free
  3809  004302                     
  3810                           ;color.c: 222:     }
  3811  004302  0100               	movlb	0	; () banked
  3812  004304  4BE2               	infsnz	color_data_collection@k& (0+255),f,b
  3813  004306  2BE3               	incf	(color_data_collection@k+1)& (0+255),f,b
  3814  004308                     
  3815                           ; BSR set to: 0
  3816  004308  BFE3               	btfsc	(color_data_collection@k+1)& (0+255),7,b
  3817  00430A  EF8F  F021         	goto	u5271
  3818  00430E  51E3               	movf	(color_data_collection@k+1)& (0+255),w,b
  3819  004310  E108               	bnz	u5270
  3820  004312  05E2               	decf	color_data_collection@k& (0+255),w,b
  3821  004314  A0D8               	btfss	status,0,c
  3822  004316  EF8F  F021         	goto	u5271
  3823  00431A  EF91  F021         	goto	u5270
  3824  00431E                     u5271:
  3825  00431E  EF67  F021         	goto	l4831
  3826  004322                     u5270:
  3827  004322                     
  3828                           ; BSR set to: 0
  3829                           ;color.c: 224:     for (x = 0; x < 1; ++x){
  3830  004322  0E00               	movlw	0
  3831  004324  6FE5               	movwf	(color_data_collection@x+1)& (0+255),b
  3832  004326  0E00               	movlw	0
  3833  004328  6FE4               	movwf	color_data_collection@x& (0+255),b
  3834  00432A                     l4849:
  3835                           
  3836                           ; BSR set to: 0
  3837                           ;color.c: 225:         LED_B();
  3838  00432A  ECBD  F02E         	call	_LED_B	;wreg free
  3839  00432E                     
  3840                           ;color.c: 226:         _delay((unsigned long)((100)*(64000000/4000.0)));
  3841  00432E  0E09               	movlw	9
  3842  004330  6E5D               	movwf	(??_color_data_collection+1)^0,c
  3843  004332  0E1E               	movlw	30
  3844  004334  6E5C               	movwf	??_color_data_collection^0,c
  3845  004336  0EE4               	movlw	228
  3846  004338                     u6077:
  3847  004338  2EE8               	decfsz	wreg,f,c
  3848  00433A  D7FE               	bra	u6077
  3849  00433C  2E5C               	decfsz	??_color_data_collection^0,f,c
  3850  00433E  D7FC               	bra	u6077
  3851  004340  2E5D               	decfsz	(??_color_data_collection+1)^0,f,c
  3852  004342  D7FA               	bra	u6077
  3853  004344  D000               	nop2	
  3854  004346                     
  3855                           ;color.c: 227:         read_color(m);
  3856  004346  C05A  F00C         	movff	color_data_collection@m,read_color@m
  3857  00434A  C05B  F00D         	movff	color_data_collection@m+1,read_color@m+1
  3858  00434E  EC97  F02B         	call	_read_color	;wreg free
  3859  004352                     
  3860                           ;color.c: 228:         color_display(m);
  3861  004352  C05A  F058         	movff	color_data_collection@m,color_display@m
  3862  004356  C05B  F059         	movff	color_data_collection@m+1,color_display@m+1
  3863  00435A  EC2E  F02B         	call	_color_display	;wreg free
  3864  00435E                     
  3865                           ;color.c: 229:     }
  3866  00435E  0100               	movlb	0	; () banked
  3867  004360  4BE4               	infsnz	color_data_collection@x& (0+255),f,b
  3868  004362  2BE5               	incf	(color_data_collection@x+1)& (0+255),f,b
  3869  004364                     
  3870                           ; BSR set to: 0
  3871  004364  BFE5               	btfsc	(color_data_collection@x+1)& (0+255),7,b
  3872  004366  EFBD  F021         	goto	u5281
  3873  00436A  51E5               	movf	(color_data_collection@x+1)& (0+255),w,b
  3874  00436C  E108               	bnz	u5280
  3875  00436E  05E4               	decf	color_data_collection@x& (0+255),w,b
  3876  004370  A0D8               	btfss	status,0,c
  3877  004372  EFBD  F021         	goto	u5281
  3878  004376  EFBF  F021         	goto	u5280
  3879  00437A                     u5281:
  3880  00437A  EF95  F021         	goto	l4849
  3881  00437E                     u5280:
  3882  00437E                     
  3883                           ; BSR set to: 0
  3884                           ;color.c: 230:     color_predict(1);
  3885  00437E  0E01               	movlw	1
  3886  004380  EC3A  F02E         	call	_color_predict
  3887  004384                     
  3888                           ;color.c: 231:     LED_C();
  3889  004384  ECCD  F02E         	call	_LED_C	;wreg free
  3890  004388  0012               	return		;funcret
  3891  00438A                     __end_of_color_data_collection:
  3892                           	callstack 0
  3893                           
  3894 ;; *************** function _read_color *****************
  3895 ;; Defined at:
  3896 ;;		line 147 in file "color.c"
  3897 ;; Parameters:    Size  Location     Type
  3898 ;;  m               2   11[COMRAM] PTR struct color_rgb
  3899 ;;		 -> main@rgb(8), 
  3900 ;; Auto vars:     Size  Location     Type
  3901 ;;		None
  3902 ;; Return value:  Size  Location     Type
  3903 ;;                  1    wreg      void 
  3904 ;; Registers used:
  3905 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3906 ;; Tracked objects:
  3907 ;;		On entry : 0/0
  3908 ;;		On exit  : 0/0
  3909 ;;		Unchanged: 0/0
  3910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3911 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3912 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3913 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3914 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3915 ;;Total ram usage:        2 bytes
  3916 ;; Hardware stack levels used: 1
  3917 ;; Hardware stack levels required when called: 4
  3918 ;; This function calls:
  3919 ;;		_color_read_Blue
  3920 ;;		_color_read_Clear
  3921 ;;		_color_read_Green
  3922 ;;		_color_read_Red
  3923 ;; This function is called by:
  3924 ;;		_color_data_collection
  3925 ;;		_detect_color
  3926 ;;		_test_function
  3927 ;; This function uses a non-reentrant model
  3928 ;;
  3929                           
  3930                           	psect	text7
  3931  00572E                     __ptext7:
  3932                           	callstack 0
  3933  00572E                     _read_color:
  3934                           	callstack 24
  3935  00572E                     
  3936                           ;color.c: 147: void read_color (struct color_rgb *m);color.c: 148: {;color.c: 149:     m
      +                          ->R = color_read_Red();
  3937  00572E  ECEF  F02B         	call	_color_read_Red	;wreg free
  3938  005732  C00C  FFD9         	movff	read_color@m,fsr2l
  3939  005736  C00D  FFDA         	movff	read_color@m+1,fsr2h
  3940  00573A  C005  FFDE         	movff	?_color_read_Red,postinc2
  3941  00573E  C006  FFDD         	movff	?_color_read_Red+1,postdec2
  3942                           
  3943                           ;color.c: 150:     m->B = color_read_Blue();
  3944  005742  EC3F  F02C         	call	_color_read_Blue	;wreg free
  3945  005746  EE20 F004          	lfsr	2,4
  3946  00574A  500C               	movf	read_color@m^0,w,c
  3947  00574C  26D9               	addwf	fsr2l,f,c
  3948  00574E  500D               	movf	(read_color@m+1)^0,w,c
  3949  005750  22DA               	addwfc	fsr2h,f,c
  3950  005752  C005  FFDE         	movff	?_color_read_Blue,postinc2
  3951  005756  C006  FFDD         	movff	?_color_read_Blue+1,postdec2
  3952                           
  3953                           ;color.c: 151:     m->G = color_read_Green();
  3954  00575A  EC17  F02C         	call	_color_read_Green	;wreg free
  3955  00575E  EE20 F002          	lfsr	2,2
  3956  005762  500C               	movf	read_color@m^0,w,c
  3957  005764  26D9               	addwf	fsr2l,f,c
  3958  005766  500D               	movf	(read_color@m+1)^0,w,c
  3959  005768  22DA               	addwfc	fsr2h,f,c
  3960  00576A  C005  FFDE         	movff	?_color_read_Green,postinc2
  3961  00576E  C006  FFDD         	movff	?_color_read_Green+1,postdec2
  3962                           
  3963                           ;color.c: 152:     m->C = color_read_Clear();
  3964  005772  EC67  F02C         	call	_color_read_Clear	;wreg free
  3965  005776  EE20 F006          	lfsr	2,6
  3966  00577A  500C               	movf	read_color@m^0,w,c
  3967  00577C  26D9               	addwf	fsr2l,f,c
  3968  00577E  500D               	movf	(read_color@m+1)^0,w,c
  3969  005780  22DA               	addwfc	fsr2h,f,c
  3970  005782  C005  FFDE         	movff	?_color_read_Clear,postinc2
  3971  005786  C006  FFDD         	movff	?_color_read_Clear+1,postdec2
  3972  00578A  0012               	return		;funcret
  3973  00578C                     __end_of_read_color:
  3974                           	callstack 0
  3975                           
  3976 ;; *************** function _color_predict *****************
  3977 ;; Defined at:
  3978 ;;		line 250 in file "color.c"
  3979 ;; Parameters:    Size  Location     Type
  3980 ;;  color           1    wreg     unsigned char 
  3981 ;; Auto vars:     Size  Location     Type
  3982 ;;  color           1  125[BANK0 ] unsigned char 
  3983 ;;  buf           100   25[BANK0 ] unsigned char [100]
  3984 ;; Return value:  Size  Location     Type
  3985 ;;                  1    wreg      void 
  3986 ;; Registers used:
  3987 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3988 ;; Tracked objects:
  3989 ;;		On entry : 0/0
  3990 ;;		On exit  : 0/0
  3991 ;;		Unchanged: 0/0
  3992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3993 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3994 ;;      Locals:         0     101       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3995 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3996 ;;      Totals:         0     101       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3997 ;;Total ram usage:      101 bytes
  3998 ;; Hardware stack levels used: 1
  3999 ;; Hardware stack levels required when called: 9
  4000 ;; This function calls:
  4001 ;;		_sendStringSerial4
  4002 ;;		_sprintf
  4003 ;; This function is called by:
  4004 ;;		_color_data_collection
  4005 ;;		_test_function
  4006 ;; This function uses a non-reentrant model
  4007 ;;
  4008                           
  4009                           	psect	text8
  4010  005C74                     __ptext8:
  4011                           	callstack 0
  4012  005C74                     _color_predict:
  4013                           	callstack 20
  4014                           
  4015                           ;incstack = 0
  4016                           ;color_predict@color stored from wreg
  4017  005C74  0100               	movlb	0	; () banked
  4018  005C76  6FDD               	movwf	color_predict@color& (0+255),b
  4019  005C78                     
  4020                           ;color.c: 250: void color_predict(unsigned char color);color.c: 251: {;color.c: 252:    
      +                           char buf[100];;color.c: 253:     sprintf(buf,"\t%d\r\n", color);
  4021  005C78  0E79               	movlw	low color_predict@buf
  4022  005C7A  0100               	movlb	0	; () banked
  4023  005C7C  6F60               	movwf	sprintf@s& (0+255),b
  4024  005C7E  0E00               	movlw	high color_predict@buf
  4025  005C80  6F61               	movwf	(sprintf@s+1)& (0+255),b
  4026  005C82  0E0D               	movlw	low (STR_1+8)
  4027  005C84  6F62               	movwf	sprintf@fmt& (0+255),b
  4028  005C86  0E0E               	movlw	high (STR_1+8)
  4029  005C88  6F63               	movwf	(sprintf@fmt+1)& (0+255),b
  4030  005C8A  C0DD  F064         	movff	color_predict@color,?_sprintf+4
  4031  005C8E  6B65               	clrf	(?_sprintf+5)& (0+255),b
  4032  005C90  ECC6  F02B         	call	_sprintf	;wreg free
  4033  005C94                     
  4034                           ;color.c: 254:     sendStringSerial4(buf);
  4035  005C94  0E79               	movlw	low color_predict@buf
  4036  005C96  6E02               	movwf	sendStringSerial4@string^0,c
  4037  005C98  0E00               	movlw	high color_predict@buf
  4038  005C9A  6E03               	movwf	(sendStringSerial4@string+1)^0,c
  4039  005C9C  EC22  F02E         	call	_sendStringSerial4	;wreg free
  4040  005CA0  0012               	return		;funcret
  4041  005CA2                     __end_of_color_predict:
  4042                           	callstack 0
  4043                           
  4044 ;; *************** function _color_display *****************
  4045 ;; Defined at:
  4046 ;;		line 234 in file "color.c"
  4047 ;; Parameters:    Size  Location     Type
  4048 ;;  m               2   87[COMRAM] PTR struct color_rgb
  4049 ;;		 -> main@rgb(8), 
  4050 ;; Auto vars:     Size  Location     Type
  4051 ;;  buf           100   25[BANK0 ] unsigned char [100]
  4052 ;; Return value:  Size  Location     Type
  4053 ;;                  1    wreg      void 
  4054 ;; Registers used:
  4055 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4056 ;; Tracked objects:
  4057 ;;		On entry : 0/0
  4058 ;;		On exit  : 0/0
  4059 ;;		Unchanged: 0/0
  4060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4061 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4062 ;;      Locals:         0     100       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4063 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4064 ;;      Totals:         2     100       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4065 ;;Total ram usage:      102 bytes
  4066 ;; Hardware stack levels used: 1
  4067 ;; Hardware stack levels required when called: 9
  4068 ;; This function calls:
  4069 ;;		_sendStringSerial4
  4070 ;;		_sprintf
  4071 ;; This function is called by:
  4072 ;;		_color_data_collection
  4073 ;;		_test_function
  4074 ;; This function uses a non-reentrant model
  4075 ;;
  4076                           
  4077                           	psect	text9
  4078  00565C                     __ptext9:
  4079                           	callstack 0
  4080  00565C                     _color_display:
  4081                           	callstack 20
  4082  00565C                     
  4083                           ;color.c: 234: void color_display(struct color_rgb *m);color.c: 235: {;color.c: 236:    
      +                           char buf[100];;color.c: 237:     sprintf(buf,"%d\t%d\t%d\t%d\r\n", m->R, m->G, m->B, m-
      +                          >C);
  4084  00565C  0E79               	movlw	low color_display@buf
  4085  00565E  0100               	movlb	0	; () banked
  4086  005660  6F60               	movwf	sprintf@s& (0+255),b
  4087  005662  0E00               	movlw	high color_display@buf
  4088  005664  6F61               	movwf	(sprintf@s+1)& (0+255),b
  4089  005666  0E05               	movlw	low STR_1
  4090  005668  6F62               	movwf	sprintf@fmt& (0+255),b
  4091  00566A  0E0E               	movlw	high STR_1
  4092  00566C  6F63               	movwf	(sprintf@fmt+1)& (0+255),b
  4093  00566E  C058  FFD9         	movff	color_display@m,fsr2l
  4094  005672  C059  FFDA         	movff	color_display@m+1,fsr2h
  4095  005676  CFDE F064          	movff	postinc2,?_sprintf+4
  4096  00567A  CFDD F065          	movff	postdec2,?_sprintf+5
  4097  00567E  EE20 F002          	lfsr	2,2
  4098  005682  5058               	movf	color_display@m^0,w,c
  4099  005684  26D9               	addwf	fsr2l,f,c
  4100  005686  5059               	movf	(color_display@m+1)^0,w,c
  4101  005688  22DA               	addwfc	fsr2h,f,c
  4102  00568A  CFDE F066          	movff	postinc2,?_sprintf+6
  4103  00568E  CFDD F067          	movff	postdec2,?_sprintf+7
  4104  005692  EE20 F004          	lfsr	2,4
  4105  005696  5058               	movf	color_display@m^0,w,c
  4106  005698  26D9               	addwf	fsr2l,f,c
  4107  00569A  5059               	movf	(color_display@m+1)^0,w,c
  4108  00569C  22DA               	addwfc	fsr2h,f,c
  4109  00569E  CFDE F068          	movff	postinc2,?_sprintf+8
  4110  0056A2  CFDD F069          	movff	postdec2,?_sprintf+9
  4111  0056A6  EE20 F006          	lfsr	2,6
  4112  0056AA  5058               	movf	color_display@m^0,w,c
  4113  0056AC  26D9               	addwf	fsr2l,f,c
  4114  0056AE  5059               	movf	(color_display@m+1)^0,w,c
  4115  0056B0  22DA               	addwfc	fsr2h,f,c
  4116  0056B2  CFDE F06A          	movff	postinc2,?_sprintf+10
  4117  0056B6  CFDD F06B          	movff	postdec2,?_sprintf+11
  4118  0056BA  ECC6  F02B         	call	_sprintf	;wreg free
  4119  0056BE                     
  4120                           ;color.c: 238:     sendStringSerial4(buf);
  4121  0056BE  0E79               	movlw	low color_display@buf
  4122  0056C0  6E02               	movwf	sendStringSerial4@string^0,c
  4123  0056C2  0E00               	movlw	high color_display@buf
  4124  0056C4  6E03               	movwf	(sendStringSerial4@string+1)^0,c
  4125  0056C6  EC22  F02E         	call	_sendStringSerial4	;wreg free
  4126  0056CA  0012               	return		;funcret
  4127  0056CC                     __end_of_color_display:
  4128                           	callstack 0
  4129                           
  4130 ;; *************** function _sprintf *****************
  4131 ;; Defined at:
  4132 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\nf_sprintf.c"
  4133 ;; Parameters:    Size  Location     Type
  4134 ;;  s               2    0[BANK0 ] PTR unsigned char 
  4135 ;;		 -> color_predict@buf(100), color_display@buf(100), 
  4136 ;;  fmt             2    2[BANK0 ] PTR const unsigned char 
  4137 ;;		 -> STR_2(6), STR_1(14), 
  4138 ;; Auto vars:     Size  Location     Type
  4139 ;;  f              11   14[BANK0 ] struct _IO_FILE
  4140 ;;  ap              2   12[BANK0 ] PTR void [1]
  4141 ;;		 -> ?_sprintf(2), 
  4142 ;;  ret             2    0        int 
  4143 ;; Return value:  Size  Location     Type
  4144 ;;                  2    0[BANK0 ] int 
  4145 ;; Registers used:
  4146 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4147 ;; Tracked objects:
  4148 ;;		On entry : 0/0
  4149 ;;		On exit  : 0/0
  4150 ;;		Unchanged: 0/0
  4151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4152 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4153 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4154 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4155 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4156 ;;Total ram usage:       25 bytes
  4157 ;; Hardware stack levels used: 1
  4158 ;; Hardware stack levels required when called: 8
  4159 ;; This function calls:
  4160 ;;		_vfprintf
  4161 ;; This function is called by:
  4162 ;;		_color_display
  4163 ;;		_color_predict
  4164 ;; This function uses a non-reentrant model
  4165 ;;
  4166                           
  4167                           	psect	text10
  4168  00578C                     __ptext10:
  4169                           	callstack 0
  4170  00578C                     _sprintf:
  4171                           	callstack 20
  4172  00578C  0E64               	movlw	low (?_sprintf+4)
  4173  00578E  0100               	movlb	0	; () banked
  4174  005790  6F6C               	movwf	sprintf@ap& (0+255),b
  4175  005792  0E00               	movlw	high (?_sprintf+4)
  4176  005794  6F6D               	movwf	(sprintf@ap+1)& (0+255),b
  4177  005796  C060  F06E         	movff	sprintf@s,sprintf@f
  4178  00579A  C061  F06F         	movff	sprintf@s+1,sprintf@f+1
  4179  00579E                     
  4180                           ; BSR set to: 0
  4181  00579E  0E00               	movlw	0
  4182  0057A0  6F72               	movwf	(sprintf@f+4)& (0+255),b
  4183  0057A2  0E00               	movlw	0
  4184  0057A4  6F71               	movwf	(sprintf@f+3)& (0+255),b
  4185  0057A6                     
  4186                           ; BSR set to: 0
  4187  0057A6  0E00               	movlw	0
  4188  0057A8  6F78               	movwf	(sprintf@f+10)& (0+255),b
  4189  0057AA  0E00               	movlw	0
  4190  0057AC  6F77               	movwf	(sprintf@f+9)& (0+255),b
  4191  0057AE                     
  4192                           ; BSR set to: 0
  4193  0057AE  0E6E               	movlw	low sprintf@f
  4194  0057B0  6E50               	movwf	vfprintf@fp^0,c
  4195  0057B2  0E00               	movlw	high sprintf@f
  4196  0057B4  6E51               	movwf	(vfprintf@fp+1)^0,c
  4197  0057B6  C062  F052         	movff	sprintf@fmt,vfprintf@fmt
  4198  0057BA  C063  F053         	movff	sprintf@fmt+1,vfprintf@fmt+1
  4199  0057BE  0E6C               	movlw	low sprintf@ap
  4200  0057C0  6E54               	movwf	vfprintf@ap^0,c
  4201  0057C2  0E00               	movlw	high sprintf@ap
  4202  0057C4  6E55               	movwf	(vfprintf@ap+1)^0,c
  4203  0057C6  EC66  F02B         	call	_vfprintf	;wreg free
  4204  0057CA  0100               	movlb	0	; () banked
  4205  0057CC  5171               	movf	(sprintf@f+3)& (0+255),w,b
  4206  0057CE  2560               	addwf	sprintf@s& (0+255),w,b
  4207  0057D0  6ED9               	movwf	fsr2l,c
  4208  0057D2  5172               	movf	(sprintf@f+4)& (0+255),w,b
  4209  0057D4  2161               	addwfc	(sprintf@s+1)& (0+255),w,b
  4210  0057D6  6EDA               	movwf	fsr2h,c
  4211  0057D8  0E00               	movlw	0
  4212  0057DA  6EDF               	movwf	indf2,c
  4213  0057DC                     
  4214                           ; BSR set to: 0
  4215  0057DC  0012               	return		;funcret
  4216  0057DE                     __end_of_sprintf:
  4217                           	callstack 0
  4218                           
  4219 ;; *************** function _vfprintf *****************
  4220 ;; Defined at:
  4221 ;;		line 1390 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c"
  4222 ;; Parameters:    Size  Location     Type
  4223 ;;  fp              2   79[COMRAM] PTR struct _IO_FILE
  4224 ;;		 -> sprintf@f(11), 
  4225 ;;  fmt             2   81[COMRAM] PTR const unsigned char 
  4226 ;;		 -> STR_2(6), STR_1(14), 
  4227 ;;  ap              2   83[COMRAM] PTR PTR void 
  4228 ;;		 -> sprintf@ap(2), 
  4229 ;; Auto vars:     Size  Location     Type
  4230 ;;  cfmt            2   85[COMRAM] PTR unsigned char 
  4231 ;;		 -> STR_2(6), STR_1(14), 
  4232 ;; Return value:  Size  Location     Type
  4233 ;;                  2   79[COMRAM] int 
  4234 ;; Registers used:
  4235 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4236 ;; Tracked objects:
  4237 ;;		On entry : 0/0
  4238 ;;		On exit  : 0/0
  4239 ;;		Unchanged: 0/0
  4240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4241 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4242 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4243 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4244 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4245 ;;Total ram usage:        8 bytes
  4246 ;; Hardware stack levels used: 1
  4247 ;; Hardware stack levels required when called: 7
  4248 ;; This function calls:
  4249 ;;		_vfpfcnvrt
  4250 ;; This function is called by:
  4251 ;;		_sprintf
  4252 ;; This function uses a non-reentrant model
  4253 ;;
  4254                           
  4255                           	psect	text11
  4256  0056CC                     __ptext11:
  4257                           	callstack 0
  4258  0056CC                     _vfprintf:
  4259                           	callstack 20
  4260  0056CC                     
  4261                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 1390: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.35\pic\source
      +                          s\c99\common\doprnt.c: 1391: {;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\comm
      +                          on\doprnt.c: 1393:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\
      +                          common\doprnt.c: 1395:     cfmt = (char *)fmt;
  4262  0056CC  C052  F056         	movff	vfprintf@fmt,vfprintf@cfmt
  4263  0056D0  C053  F057         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  4264  0056D4                     
  4265                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 1396:     nout = 
      +                          0;
  4266  0056D4  0E00               	movlw	0
  4267  0056D6  0101               	movlb	1	; () banked
  4268  0056D8  6F3F               	movwf	(_nout+1)& (0+255),b
  4269  0056DA  0E00               	movlw	0
  4270  0056DC  6F3E               	movwf	_nout& (0+255),b
  4271                           
  4272                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 1397:     while (
      +                          *cfmt) {
  4273  0056DE  EF84  F02B         	goto	l4213
  4274  0056E2                     l4211:
  4275                           
  4276                           ; BSR set to: 1
  4277                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 1398:         nou
      +                          t += vfpfcnvrt(fp, &cfmt, ap);
  4278  0056E2  C050  F040         	movff	vfprintf@fp,vfpfcnvrt@fp
  4279  0056E6  C051  F041         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  4280  0056EA  0E56               	movlw	low vfprintf@cfmt
  4281  0056EC  6E42               	movwf	vfpfcnvrt@fmt^0,c
  4282  0056EE  0E00               	movlw	high vfprintf@cfmt
  4283  0056F0  6E43               	movwf	(vfpfcnvrt@fmt+1)^0,c
  4284  0056F2  C054  F044         	movff	vfprintf@ap,vfpfcnvrt@ap
  4285  0056F6  C055  F045         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  4286  0056FA  EC46  F01F         	call	_vfpfcnvrt	;wreg free
  4287  0056FE  5040               	movf	?_vfpfcnvrt^0,w,c
  4288  005700  0101               	movlb	1	; () banked
  4289  005702  273E               	addwf	_nout& (0+255),f,b
  4290  005704  5041               	movf	(?_vfpfcnvrt+1)^0,w,c
  4291  005706  233F               	addwfc	(_nout+1)& (0+255),f,b
  4292  005708                     l4213:
  4293                           
  4294                           ; BSR set to: 1
  4295                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 1397:     while (
      +                          *cfmt) {
  4296  005708  C056  FFF6         	movff	vfprintf@cfmt,tblptrl
  4297  00570C  C057  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  4298  005710                     	if	0	;tblptru may be non-zero
  4299  005710                     	endif
  4300  005710                     	if	0	;tblptru may be non-zero
  4301  005710                     	endif
  4302  005710  0008               	tblrd		*
  4303  005712  50F5               	movf	tablat,w,c
  4304  005714  0900               	iorlw	0
  4305  005716  A4D8               	btfss	status,2,c
  4306  005718  EF90  F02B         	goto	u4191
  4307  00571C  EF92  F02B         	goto	u4190
  4308  005720                     u4191:
  4309  005720  EF71  F02B         	goto	l4211
  4310  005724                     u4190:
  4311  005724                     
  4312                           ; BSR set to: 1
  4313                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 1400:     return 
      +                          nout;
  4314  005724  C13E  F050         	movff	_nout,?_vfprintf
  4315  005728  C13F  F051         	movff	_nout+1,?_vfprintf+1
  4316  00572C                     
  4317                           ; BSR set to: 1
  4318  00572C  0012               	return		;funcret
  4319  00572E                     __end_of_vfprintf:
  4320                           	callstack 0
  4321                           
  4322 ;; *************** function _vfpfcnvrt *****************
  4323 ;; Defined at:
  4324 ;;		line 692 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c"
  4325 ;; Parameters:    Size  Location     Type
  4326 ;;  fp              2   63[COMRAM] PTR struct _IO_FILE
  4327 ;;		 -> sprintf@f(11), 
  4328 ;;  fmt             2   65[COMRAM] PTR PTR unsigned char 
  4329 ;;		 -> vfprintf@cfmt(2), 
  4330 ;;  ap              2   67[COMRAM] PTR PTR void 
  4331 ;;		 -> sprintf@ap(2), 
  4332 ;; Auto vars:     Size  Location     Type
  4333 ;;  ll              8   71[COMRAM] long long 
  4334 ;;  llu             8    0        unsigned long long 
  4335 ;;  f               4    0        unsigned long long 
  4336 ;;  vp              3    0        PTR void 
  4337 ;;  ct              3    0        unsigned char [3]
  4338 ;;  cp              3    0        PTR unsigned char 
  4339 ;;  i               2    0        int 
  4340 ;;  done            2    0        int 
  4341 ;;  c               1    0        unsigned char 
  4342 ;; Return value:  Size  Location     Type
  4343 ;;                  2   63[COMRAM] int 
  4344 ;; Registers used:
  4345 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4346 ;; Tracked objects:
  4347 ;;		On entry : 0/0
  4348 ;;		On exit  : 0/0
  4349 ;;		Unchanged: 0/0
  4350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4351 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4352 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4353 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4354 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4355 ;;Total ram usage:       16 bytes
  4356 ;; Hardware stack levels used: 1
  4357 ;; Hardware stack levels required when called: 6
  4358 ;; This function calls:
  4359 ;;		_dtoa
  4360 ;;		_fputc
  4361 ;; This function is called by:
  4362 ;;		_vfprintf
  4363 ;; This function uses a non-reentrant model
  4364 ;;
  4365                           
  4366                           	psect	text12
  4367  003E8C                     __ptext12:
  4368                           	callstack 0
  4369  003E8C                     _vfpfcnvrt:
  4370                           	callstack 20
  4371  003E8C                     
  4372                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 692: static int v
      +                          fpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.35\pic\sou
      +                          rces\c99\common\doprnt.c: 693: {;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\co
      +                          mmon\doprnt.c: 694:     char c, *cp, ct[3];;C:\Program Files\Microchip\xc8\v2.35\pic\sou
      +                          rces\c99\common\doprnt.c: 695:     int done, i;;C:\Program Files\Microchip\xc8\v2.35\pic
      +                          \sources\c99\common\doprnt.c: 696:     long long ll;;C:\Program Files\Microchip\xc8\v2.3
      +                          5\pic\sources\c99\common\doprnt.c: 697:     unsigned long long llu;
  4373  003E8C  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4374  003E90  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4375  003E94  CFDE FFF6          	movff	postinc2,tblptrl
  4376  003E98  CFDD FFF7          	movff	postdec2,tblptrh
  4377  003E9C                     	if	0	;tblptru may be non-zero
  4378  003E9C                     	endif
  4379  003E9C                     	if	0	;tblptru may be non-zero
  4380  003E9C                     	endif
  4381  003E9C  0008               	tblrd		*
  4382  003E9E  50F5               	movf	tablat,w,c
  4383  003EA0  0A25               	xorlw	37
  4384  003EA2  A4D8               	btfss	status,2,c
  4385  003EA4  EF56  F01F         	goto	u3831
  4386  003EA8  EF58  F01F         	goto	u3830
  4387  003EAC                     u3831:
  4388  003EAC  EF04  F020         	goto	l3985
  4389  003EB0                     u3830:
  4390  003EB0                     
  4391                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 703:         ++*f
      +                          mt;
  4392  003EB0  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4393  003EB4  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4394  003EB8  2ADE               	incf	postinc2,f,c
  4395  003EBA  0E00               	movlw	0
  4396  003EBC  22DD               	addwfc	postdec2,f,c
  4397  003EBE                     
  4398                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 705:         flag
      +                          s = width = 0;
  4399  003EBE  0E00               	movlw	0
  4400  003EC0  0100               	movlb	0	; () banked
  4401  003EC2  6FF9               	movwf	(_width+1)& (0+255),b
  4402  003EC4  0E00               	movlw	0
  4403  003EC6  6FF8               	movwf	_width& (0+255),b
  4404  003EC8  C0F8  F0FC         	movff	_width,_flags
  4405  003ECC  C0F9  F0FD         	movff	_width+1,_flags+1
  4406  003ED0                     
  4407                           ; BSR set to: 0
  4408                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 706:         prec
      +                           = -1;
  4409  003ED0  69FA               	setf	_prec& (0+255),b
  4410  003ED2  69FB               	setf	(_prec+1)& (0+255),b
  4411  003ED4                     
  4412                           ; BSR set to: 0
  4413                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 847:         if (
      +                          (*fmt[0] == 'd') || (*fmt[0] == 'i')) {
  4414  003ED4  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4415  003ED8  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4416  003EDC  CFDE FFF6          	movff	postinc2,tblptrl
  4417  003EE0  CFDD FFF7          	movff	postdec2,tblptrh
  4418  003EE4                     	if	0	;tblptru may be non-zero
  4419  003EE4                     	endif
  4420  003EE4                     	if	0	;tblptru may be non-zero
  4421  003EE4                     	endif
  4422  003EE4  0008               	tblrd		*
  4423  003EE6  50F5               	movf	tablat,w,c
  4424  003EE8  0A64               	xorlw	100
  4425  003EEA  B4D8               	btfsc	status,2,c
  4426  003EEC  EF7A  F01F         	goto	u3841
  4427  003EF0  EF7C  F01F         	goto	u3840
  4428  003EF4                     u3841:
  4429  003EF4  EF8E  F01F         	goto	l3963
  4430  003EF8                     u3840:
  4431  003EF8                     
  4432                           ; BSR set to: 0
  4433  003EF8  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4434  003EFC  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4435  003F00  CFDE FFF6          	movff	postinc2,tblptrl
  4436  003F04  CFDD FFF7          	movff	postdec2,tblptrh
  4437  003F08                     	if	0	;tblptru may be non-zero
  4438  003F08                     	endif
  4439  003F08                     	if	0	;tblptru may be non-zero
  4440  003F08                     	endif
  4441  003F08  0008               	tblrd		*
  4442  003F0A  50F5               	movf	tablat,w,c
  4443  003F0C  0A69               	xorlw	105
  4444  003F0E  A4D8               	btfss	status,2,c
  4445  003F10  EF8C  F01F         	goto	u3851
  4446  003F14  EF8E  F01F         	goto	u3850
  4447  003F18                     u3851:
  4448  003F18  EFCE  F01F         	goto	l3969
  4449  003F1C                     u3850:
  4450  003F1C                     l3963:
  4451                           
  4452                           ; BSR set to: 0
  4453                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 849:             
      +                          ++*fmt;
  4454  003F1C  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4455  003F20  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4456  003F24  2ADE               	incf	postinc2,f,c
  4457  003F26  0E00               	movlw	0
  4458  003F28  22DD               	addwfc	postdec2,f,c
  4459                           
  4460                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 850:             
      +                          ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
  4461  003F2A  C044  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  4462  003F2E  C045  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  4463  003F32  CFDF F046          	movff	indf2,??_vfpfcnvrt
  4464  003F36  0E02               	movlw	2
  4465  003F38  26DE               	addwf	postinc2,f,c
  4466  003F3A  CFDF F047          	movff	indf2,??_vfpfcnvrt+1
  4467  003F3E  0E00               	movlw	0
  4468  003F40  22DD               	addwfc	postdec2,f,c
  4469  003F42  C046  FFD9         	movff	??_vfpfcnvrt,fsr2l
  4470  003F46  C047  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  4471  003F4A  CFDE F048          	movff	postinc2,vfpfcnvrt@ll
  4472  003F4E  CFDD F049          	movff	postdec2,vfpfcnvrt@ll+1
  4473  003F52  0E00               	movlw	0
  4474  003F54  BE49               	btfsc	(vfpfcnvrt@ll+1)^0,7,c
  4475  003F56  0EFF               	movlw	-1
  4476  003F58  6E4A               	movwf	(vfpfcnvrt@ll+2)^0,c
  4477  003F5A  6E4B               	movwf	(vfpfcnvrt@ll+3)^0,c
  4478  003F5C  6E4C               	movwf	(vfpfcnvrt@ll+4)^0,c
  4479  003F5E  6E4D               	movwf	(vfpfcnvrt@ll+5)^0,c
  4480  003F60  6E4E               	movwf	(vfpfcnvrt@ll+6)^0,c
  4481  003F62  6E4F               	movwf	(vfpfcnvrt@ll+7)^0,c
  4482  003F64                     
  4483                           ; BSR set to: 0
  4484                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 852:             
      +                          return dtoa(fp, ll);
  4485  003F64  C040  F01C         	movff	vfpfcnvrt@fp,dtoa@fp
  4486  003F68  C041  F01D         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  4487  003F6C  C048  F01E         	movff	vfpfcnvrt@ll,dtoa@d
  4488  003F70  C049  F01F         	movff	vfpfcnvrt@ll+1,dtoa@d+1
  4489  003F74  C04A  F020         	movff	vfpfcnvrt@ll+2,dtoa@d+2
  4490  003F78  C04B  F021         	movff	vfpfcnvrt@ll+3,dtoa@d+3
  4491  003F7C  C04C  F022         	movff	vfpfcnvrt@ll+4,dtoa@d+4
  4492  003F80  C04D  F023         	movff	vfpfcnvrt@ll+5,dtoa@d+5
  4493  003F84  C04E  F024         	movff	vfpfcnvrt@ll+6,dtoa@d+6
  4494  003F88  C04F  F025         	movff	vfpfcnvrt@ll+7,dtoa@d+7
  4495  003F8C  EC51  F018         	call	_dtoa	;wreg free
  4496  003F90  C01C  F040         	movff	?_dtoa,?_vfpfcnvrt
  4497  003F94  C01D  F041         	movff	?_dtoa+1,?_vfpfcnvrt+1
  4498  003F98  EF1F  F020         	goto	l1437
  4499  003F9C                     l3969:
  4500                           
  4501                           ; BSR set to: 0
  4502                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 1372:         if 
      +                          ((*fmt)[0] == '%') {
  4503  003F9C  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4504  003FA0  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4505  003FA4  CFDE FFF6          	movff	postinc2,tblptrl
  4506  003FA8  CFDD FFF7          	movff	postdec2,tblptrh
  4507  003FAC                     	if	0	;tblptru may be non-zero
  4508  003FAC                     	endif
  4509  003FAC                     	if	0	;tblptru may be non-zero
  4510  003FAC                     	endif
  4511  003FAC  0008               	tblrd		*
  4512  003FAE  50F5               	movf	tablat,w,c
  4513  003FB0  0A25               	xorlw	37
  4514  003FB2  A4D8               	btfss	status,2,c
  4515  003FB4  EFDE  F01F         	goto	u3861
  4516  003FB8  EFE0  F01F         	goto	u3860
  4517  003FBC                     u3861:
  4518  003FBC  EFF7  F01F         	goto	l3979
  4519  003FC0                     u3860:
  4520  003FC0                     
  4521                           ; BSR set to: 0
  4522                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 1373:            
      +                           ++*fmt;
  4523  003FC0  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4524  003FC4  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4525  003FC8  2ADE               	incf	postinc2,f,c
  4526  003FCA  0E00               	movlw	0
  4527  003FCC  22DD               	addwfc	postdec2,f,c
  4528  003FCE                     
  4529                           ; BSR set to: 0
  4530                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 1374:            
      +                           fputc((int)'%', fp);
  4531  003FCE  0E00               	movlw	0
  4532  003FD0  6E02               	movwf	(fputc@c+1)^0,c
  4533  003FD2  0E25               	movlw	37
  4534  003FD4  6E01               	movwf	fputc@c^0,c
  4535  003FD6  C040  F003         	movff	vfpfcnvrt@fp,fputc@fp
  4536  003FDA  C041  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  4537  003FDE  EC06  F028         	call	_fputc	;wreg free
  4538  003FE2                     l3975:
  4539                           
  4540                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 1375:            
      +                           return 1;
  4541  003FE2  0E00               	movlw	0
  4542  003FE4  6E41               	movwf	(?_vfpfcnvrt+1)^0,c
  4543  003FE6  0E01               	movlw	1
  4544  003FE8  6E40               	movwf	?_vfpfcnvrt^0,c
  4545  003FEA  EF1F  F020         	goto	l1437
  4546  003FEE                     l3979:
  4547                           
  4548                           ; BSR set to: 0
  4549                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 1379:         ++*
      +                          fmt;
  4550  003FEE  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4551  003FF2  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4552  003FF6  2ADE               	incf	postinc2,f,c
  4553  003FF8  0E00               	movlw	0
  4554  003FFA  22DD               	addwfc	postdec2,f,c
  4555  003FFC                     
  4556                           ; BSR set to: 0
  4557                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 1380:         ret
      +                          urn 0;
  4558  003FFC  0E00               	movlw	0
  4559  003FFE  6E41               	movwf	(?_vfpfcnvrt+1)^0,c
  4560  004000  0E00               	movlw	0
  4561  004002  6E40               	movwf	?_vfpfcnvrt^0,c
  4562  004004  EF1F  F020         	goto	l1437
  4563  004008                     l3985:
  4564                           
  4565                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 1384:     fputc((
      +                          int)(*fmt)[0], fp);
  4566  004008  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4567  00400C  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4568  004010  CFDE FFF6          	movff	postinc2,tblptrl
  4569  004014  CFDD FFF7          	movff	postdec2,tblptrh
  4570  004018                     	if	0	;tblptru may be non-zero
  4571  004018                     	endif
  4572  004018                     	if	0	;tblptru may be non-zero
  4573  004018                     	endif
  4574  004018  0008               	tblrd		*
  4575  00401A  50F5               	movf	tablat,w,c
  4576  00401C  6E01               	movwf	fputc@c^0,c
  4577  00401E  6A02               	clrf	(fputc@c+1)^0,c
  4578  004020  C040  F003         	movff	vfpfcnvrt@fp,fputc@fp
  4579  004024  C041  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  4580  004028  EC06  F028         	call	_fputc	;wreg free
  4581  00402C                     
  4582                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 1385:     ++*fmt;
  4583  00402C  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  4584  004030  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  4585  004034  2ADE               	incf	postinc2,f,c
  4586  004036  0E00               	movlw	0
  4587  004038  22DD               	addwfc	postdec2,f,c
  4588  00403A  EFF1  F01F         	goto	l3975
  4589  00403E                     l1437:
  4590  00403E  0012               	return		;funcret
  4591  004040                     __end_of_vfpfcnvrt:
  4592                           	callstack 0
  4593                           
  4594 ;; *************** function _dtoa *****************
  4595 ;; Defined at:
  4596 ;;		line 287 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c"
  4597 ;; Parameters:    Size  Location     Type
  4598 ;;  fp              2   27[COMRAM] PTR struct _IO_FILE
  4599 ;;		 -> sprintf@f(11), 
  4600 ;;  d               8   29[COMRAM] long long 
  4601 ;; Auto vars:     Size  Location     Type
  4602 ;;  n               8   53[COMRAM] long long 
  4603 ;;  i               2   61[COMRAM] int 
  4604 ;;  s               2   51[COMRAM] int 
  4605 ;;  w               2   49[COMRAM] int 
  4606 ;;  p               2   47[COMRAM] int 
  4607 ;; Return value:  Size  Location     Type
  4608 ;;                  2   27[COMRAM] int 
  4609 ;; Registers used:
  4610 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4611 ;; Tracked objects:
  4612 ;;		On entry : 0/0
  4613 ;;		On exit  : 0/0
  4614 ;;		Unchanged: 0/0
  4615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4616 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4617 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4618 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4619 ;;      Totals:        36       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4620 ;;Total ram usage:       36 bytes
  4621 ;; Hardware stack levels used: 1
  4622 ;; Hardware stack levels required when called: 5
  4623 ;; This function calls:
  4624 ;;		___aodiv
  4625 ;;		___aomod
  4626 ;;		_abs
  4627 ;;		_pad
  4628 ;; This function is called by:
  4629 ;;		_vfpfcnvrt
  4630 ;; This function uses a non-reentrant model
  4631 ;;
  4632                           
  4633                           	psect	text13
  4634  0030A2                     __ptext13:
  4635                           	callstack 0
  4636  0030A2                     _dtoa:
  4637                           	callstack 20
  4638  0030A2                     
  4639                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 287: static int d
      +                          toa(FILE *fp, long long d);C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\d
      +                          oprnt.c: 288: {;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 28
      +                          9:     int i, p, s, w;;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprn
      +                          t.c: 290:     long long n;;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\d
      +                          oprnt.c: 293:     n = d;
  4640  0030A2  C01E  F036         	movff	dtoa@d,dtoa@n
  4641  0030A6  C01F  F037         	movff	dtoa@d+1,dtoa@n+1
  4642  0030AA  C020  F038         	movff	dtoa@d+2,dtoa@n+2
  4643  0030AE  C021  F039         	movff	dtoa@d+3,dtoa@n+3
  4644  0030B2  C022  F03A         	movff	dtoa@d+4,dtoa@n+4
  4645  0030B6  C023  F03B         	movff	dtoa@d+5,dtoa@n+5
  4646  0030BA  C024  F03C         	movff	dtoa@d+6,dtoa@n+6
  4647  0030BE  C025  F03D         	movff	dtoa@d+7,dtoa@n+7
  4648  0030C2                     
  4649                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 294:     s = n < 
      +                          0 ? 1 : 0;
  4650  0030C2  BE3D               	btfsc	(dtoa@n+7)^0,7,c
  4651  0030C4  EF66  F018         	goto	u3211
  4652  0030C8  EF69  F018         	goto	u3210
  4653  0030CC                     u3211:
  4654  0030CC  0E01               	movlw	1
  4655  0030CE  EF6A  F018         	goto	u3220
  4656  0030D2                     u3210:
  4657  0030D2  0E00               	movlw	0
  4658  0030D4                     u3220:
  4659  0030D4  6E34               	movwf	dtoa@s^0,c
  4660  0030D6  6A35               	clrf	(dtoa@s+1)^0,c
  4661                           
  4662                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 295:     if (s) {
  4663  0030D8  5034               	movf	dtoa@s^0,w,c
  4664  0030DA  1035               	iorwf	(dtoa@s+1)^0,w,c
  4665  0030DC  B4D8               	btfsc	status,2,c
  4666  0030DE  EF73  F018         	goto	u3231
  4667  0030E2  EF75  F018         	goto	u3230
  4668  0030E6                     u3231:
  4669  0030E6  EF85  F018         	goto	l3639
  4670  0030EA                     u3230:
  4671  0030EA                     
  4672                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 296:         n = 
      +                          -n;
  4673  0030EA  1E3D               	comf	(dtoa@n+7)^0,f,c
  4674  0030EC  1E3C               	comf	(dtoa@n+6)^0,f,c
  4675  0030EE  1E3B               	comf	(dtoa@n+5)^0,f,c
  4676  0030F0  1E3A               	comf	(dtoa@n+4)^0,f,c
  4677  0030F2  1E39               	comf	(dtoa@n+3)^0,f,c
  4678  0030F4  1E38               	comf	(dtoa@n+2)^0,f,c
  4679  0030F6  1E37               	comf	(dtoa@n+1)^0,f,c
  4680  0030F8  6C36               	negf	dtoa@n^0,c
  4681  0030FA  0E00               	movlw	0
  4682  0030FC  2237               	addwfc	(dtoa@n+1)^0,f,c
  4683  0030FE  2238               	addwfc	(dtoa@n+2)^0,f,c
  4684  003100  2239               	addwfc	(dtoa@n+3)^0,f,c
  4685  003102  223A               	addwfc	(dtoa@n+4)^0,f,c
  4686  003104  223B               	addwfc	(dtoa@n+5)^0,f,c
  4687  003106  223C               	addwfc	(dtoa@n+6)^0,f,c
  4688  003108  223D               	addwfc	(dtoa@n+7)^0,f,c
  4689  00310A                     l3639:
  4690                           
  4691                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 300:     if (!(pr
      +                          ec < 0)) {
  4692  00310A  0100               	movlb	0	; () banked
  4693  00310C  BFFB               	btfsc	(_prec+1)& (0+255),7,b
  4694  00310E  EF8B  F018         	goto	u3241
  4695  003112  EF8D  F018         	goto	u3240
  4696  003116                     u3241:
  4697  003116  EF8E  F018         	goto	l3643
  4698  00311A                     u3240:
  4699  00311A                     
  4700                           ; BSR set to: 0
  4701                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 301:         flag
      +                          s &= ~(1 << 1);
  4702  00311A  93FC               	bcf	_flags& (0+255),1,b
  4703  00311C                     l3643:
  4704                           
  4705                           ; BSR set to: 0
  4706                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 303:     p = (0 <
      +                           prec) ? prec : 1;
  4707  00311C  BFFB               	btfsc	(_prec+1)& (0+255),7,b
  4708  00311E  EF9B  F018         	goto	u3250
  4709  003122  51FB               	movf	(_prec+1)& (0+255),w,b
  4710  003124  E106               	bnz	u3251
  4711  003126  05FA               	decf	_prec& (0+255),w,b
  4712  003128  B0D8               	btfsc	status,0,c
  4713  00312A  EF99  F018         	goto	u3251
  4714  00312E  EF9B  F018         	goto	u3250
  4715  003132                     u3251:
  4716  003132  EFA1  F018         	goto	l1410
  4717  003136                     u3250:
  4718  003136                     
  4719                           ; BSR set to: 0
  4720  003136  0E00               	movlw	0
  4721  003138  6E31               	movwf	(dtoa@p+1)^0,c
  4722  00313A  0E01               	movlw	1
  4723  00313C  6E30               	movwf	dtoa@p^0,c
  4724  00313E  EFA5  F018         	goto	l1412
  4725  003142                     l1410:
  4726                           
  4727                           ; BSR set to: 0
  4728  003142  C0FA  F030         	movff	_prec,dtoa@p
  4729  003146  C0FB  F031         	movff	_prec+1,dtoa@p+1
  4730  00314A                     l1412:
  4731                           
  4732                           ; BSR set to: 0
  4733                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 304:     w = widt
      +                          h;
  4734  00314A  C0F8  F032         	movff	_width,dtoa@w
  4735  00314E  C0F9  F033         	movff	_width+1,dtoa@w+1
  4736  003152                     
  4737                           ; BSR set to: 0
  4738                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 305:     if (s ||
      +                           (flags & (1 << 2))) {
  4739  003152  5034               	movf	dtoa@s^0,w,c
  4740  003154  1035               	iorwf	(dtoa@s+1)^0,w,c
  4741  003156  A4D8               	btfss	status,2,c
  4742  003158  EFB0  F018         	goto	u3261
  4743  00315C  EFB2  F018         	goto	u3260
  4744  003160                     u3261:
  4745  003160  EFB9  F018         	goto	l3651
  4746  003164                     u3260:
  4747  003164                     
  4748                           ; BSR set to: 0
  4749  003164  A5FC               	btfss	_flags& (0+255),2,b
  4750  003166  EFB7  F018         	goto	u3271
  4751  00316A  EFB9  F018         	goto	u3270
  4752  00316E                     u3271:
  4753  00316E  EFBC  F018         	goto	l3653
  4754  003172                     u3270:
  4755  003172                     l3651:
  4756                           
  4757                           ; BSR set to: 0
  4758                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 306:         --w;
  4759  003172  0632               	decf	dtoa@w^0,f,c
  4760  003174  A0D8               	btfss	status,0,c
  4761  003176  0633               	decf	(dtoa@w+1)^0,f,c
  4762  003178                     l3653:
  4763                           
  4764                           ; BSR set to: 0
  4765                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 310:     i = size
      +                          of(dbuf) - 1;
  4766  003178  0E00               	movlw	0
  4767  00317A  6E3F               	movwf	(dtoa@i+1)^0,c
  4768  00317C  0E1F               	movlw	31
  4769  00317E  6E3E               	movwf	dtoa@i^0,c
  4770  003180                     
  4771                           ; BSR set to: 0
  4772                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 311:     dbuf[i] 
      +                          = '\0';
  4773  003180  0E00               	movlw	0
  4774  003182  0101               	movlb	1	; () banked
  4775  003184  6F67               	movwf	(_dbuf+31)& (0+255),b
  4776                           
  4777                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 312:     while (!
      +                          (i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  4778  003186  EF41  F019         	goto	l3667
  4779  00318A                     l3657:
  4780                           
  4781                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 313:         --i;
  4782  00318A  063E               	decf	dtoa@i^0,f,c
  4783  00318C  A0D8               	btfss	status,0,c
  4784  00318E  063F               	decf	(dtoa@i+1)^0,f,c
  4785  003190                     
  4786                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 314:         dbuf
      +                          [i] = (char)((int)'0' + abs(n % 10));
  4787  003190  0E48               	movlw	low _dbuf
  4788  003192  243E               	addwf	dtoa@i^0,w,c
  4789  003194  6ED9               	movwf	fsr2l,c
  4790  003196  0E01               	movlw	high _dbuf
  4791  003198  203F               	addwfc	(dtoa@i+1)^0,w,c
  4792  00319A  6EDA               	movwf	fsr2h,c
  4793  00319C  C036  F001         	movff	dtoa@n,___aomod@dividend
  4794  0031A0  C037  F002         	movff	dtoa@n+1,___aomod@dividend+1
  4795  0031A4  C038  F003         	movff	dtoa@n+2,___aomod@dividend+2
  4796  0031A8  C039  F004         	movff	dtoa@n+3,___aomod@dividend+3
  4797  0031AC  C03A  F005         	movff	dtoa@n+4,___aomod@dividend+4
  4798  0031B0  C03B  F006         	movff	dtoa@n+5,___aomod@dividend+5
  4799  0031B4  C03C  F007         	movff	dtoa@n+6,___aomod@dividend+6
  4800  0031B8  C03D  F008         	movff	dtoa@n+7,___aomod@dividend+7
  4801  0031BC  0E0A               	movlw	10
  4802  0031BE  6E09               	movwf	___aomod@divisor^0,c
  4803  0031C0  0E00               	movlw	0
  4804  0031C2  6E0A               	movwf	(___aomod@divisor+1)^0,c
  4805  0031C4  0E00               	movlw	0
  4806  0031C6  6E0B               	movwf	(___aomod@divisor+2)^0,c
  4807  0031C8  0E00               	movlw	0
  4808  0031CA  6E0C               	movwf	(___aomod@divisor+3)^0,c
  4809  0031CC  0E00               	movlw	0
  4810  0031CE  6E0D               	movwf	(___aomod@divisor+4)^0,c
  4811  0031D0  0E00               	movlw	0
  4812  0031D2  6E0E               	movwf	(___aomod@divisor+5)^0,c
  4813  0031D4  0E00               	movlw	0
  4814  0031D6  6E0F               	movwf	(___aomod@divisor+6)^0,c
  4815  0031D8  0E00               	movlw	0
  4816  0031DA  6E10               	movwf	(___aomod@divisor+7)^0,c
  4817  0031DC  ECDE  F024         	call	___aomod	;wreg free
  4818  0031E0  C001  F026         	movff	?___aomod,??_dtoa
  4819  0031E4  C002  F027         	movff	?___aomod+1,??_dtoa+1
  4820  0031E8  C003  F028         	movff	?___aomod+2,??_dtoa+2
  4821  0031EC  C004  F029         	movff	?___aomod+3,??_dtoa+3
  4822  0031F0  C005  F02A         	movff	?___aomod+4,??_dtoa+4
  4823  0031F4  C006  F02B         	movff	?___aomod+5,??_dtoa+5
  4824  0031F8  C007  F02C         	movff	?___aomod+6,??_dtoa+6
  4825  0031FC  C008  F02D         	movff	?___aomod+7,??_dtoa+7
  4826  003200  C026  F013         	movff	??_dtoa,abs@a
  4827  003204  C028  F014         	movff	??_dtoa+2,abs@a+1
  4828  003208  EC58  F02D         	call	_abs	;wreg free
  4829  00320C  5013               	movf	?_abs^0,w,c
  4830  00320E  0F30               	addlw	48
  4831  003210  6EDF               	movwf	indf2,c
  4832  003212                     
  4833                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 315:         --p;
  4834  003212  0630               	decf	dtoa@p^0,f,c
  4835  003214  A0D8               	btfss	status,0,c
  4836  003216  0631               	decf	(dtoa@p+1)^0,f,c
  4837  003218                     
  4838                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 316:         --w;
  4839  003218  0632               	decf	dtoa@w^0,f,c
  4840  00321A  A0D8               	btfss	status,0,c
  4841  00321C  0633               	decf	(dtoa@w+1)^0,f,c
  4842  00321E                     
  4843                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 317:         n = 
      +                          n / 10;
  4844  00321E  C036  F001         	movff	dtoa@n,___aodiv@dividend
  4845  003222  C037  F002         	movff	dtoa@n+1,___aodiv@dividend+1
  4846  003226  C038  F003         	movff	dtoa@n+2,___aodiv@dividend+2
  4847  00322A  C039  F004         	movff	dtoa@n+3,___aodiv@dividend+3
  4848  00322E  C03A  F005         	movff	dtoa@n+4,___aodiv@dividend+4
  4849  003232  C03B  F006         	movff	dtoa@n+5,___aodiv@dividend+5
  4850  003236  C03C  F007         	movff	dtoa@n+6,___aodiv@dividend+6
  4851  00323A  C03D  F008         	movff	dtoa@n+7,___aodiv@dividend+7
  4852  00323E  0E0A               	movlw	10
  4853  003240  6E09               	movwf	___aodiv@divisor^0,c
  4854  003242  0E00               	movlw	0
  4855  003244  6E0A               	movwf	(___aodiv@divisor+1)^0,c
  4856  003246  0E00               	movlw	0
  4857  003248  6E0B               	movwf	(___aodiv@divisor+2)^0,c
  4858  00324A  0E00               	movlw	0
  4859  00324C  6E0C               	movwf	(___aodiv@divisor+3)^0,c
  4860  00324E  0E00               	movlw	0
  4861  003250  6E0D               	movwf	(___aodiv@divisor+4)^0,c
  4862  003252  0E00               	movlw	0
  4863  003254  6E0E               	movwf	(___aodiv@divisor+5)^0,c
  4864  003256  0E00               	movlw	0
  4865  003258  6E0F               	movwf	(___aodiv@divisor+6)^0,c
  4866  00325A  0E00               	movlw	0
  4867  00325C  6E10               	movwf	(___aodiv@divisor+7)^0,c
  4868  00325E  EC1A  F024         	call	___aodiv	;wreg free
  4869  003262  C001  F036         	movff	?___aodiv,dtoa@n
  4870  003266  C002  F037         	movff	?___aodiv+1,dtoa@n+1
  4871  00326A  C003  F038         	movff	?___aodiv+2,dtoa@n+2
  4872  00326E  C004  F039         	movff	?___aodiv+3,dtoa@n+3
  4873  003272  C005  F03A         	movff	?___aodiv+4,dtoa@n+4
  4874  003276  C006  F03B         	movff	?___aodiv+5,dtoa@n+5
  4875  00327A  C007  F03C         	movff	?___aodiv+6,dtoa@n+6
  4876  00327E  C008  F03D         	movff	?___aodiv+7,dtoa@n+7
  4877  003282                     l3667:
  4878                           
  4879                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 312:     while (!
      +                          (i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  4880  003282  BE3F               	btfsc	(dtoa@i+1)^0,7,c
  4881  003284  EF4C  F019         	goto	u3281
  4882  003288  503F               	movf	(dtoa@i+1)^0,w,c
  4883  00328A  E108               	bnz	u3280
  4884  00328C  043E               	decf	dtoa@i^0,w,c
  4885  00328E  A0D8               	btfss	status,0,c
  4886  003290  EF4C  F019         	goto	u3281
  4887  003294  EF4E  F019         	goto	u3280
  4888  003298                     u3281:
  4889  003298  EF7F  F019         	goto	l3677
  4890  00329C                     u3280:
  4891  00329C  5036               	movf	dtoa@n^0,w,c
  4892  00329E  1037               	iorwf	(dtoa@n+1)^0,w,c
  4893  0032A0  1038               	iorwf	(dtoa@n+2)^0,w,c
  4894  0032A2  1039               	iorwf	(dtoa@n+3)^0,w,c
  4895  0032A4  103A               	iorwf	(dtoa@n+4)^0,w,c
  4896  0032A6  103B               	iorwf	(dtoa@n+5)^0,w,c
  4897  0032A8  103C               	iorwf	(dtoa@n+6)^0,w,c
  4898  0032AA  103D               	iorwf	(dtoa@n+7)^0,w,c
  4899  0032AC  A4D8               	btfss	status,2,c
  4900  0032AE  EF5B  F019         	goto	u3291
  4901  0032B2  EF5D  F019         	goto	u3290
  4902  0032B6                     u3291:
  4903  0032B6  EFC5  F018         	goto	l3657
  4904  0032BA                     u3290:
  4905  0032BA  BE31               	btfsc	(dtoa@p+1)^0,7,c
  4906  0032BC  EF6A  F019         	goto	u3300
  4907  0032C0  5031               	movf	(dtoa@p+1)^0,w,c
  4908  0032C2  E106               	bnz	u3301
  4909  0032C4  0430               	decf	dtoa@p^0,w,c
  4910  0032C6  B0D8               	btfsc	status,0,c
  4911  0032C8  EF68  F019         	goto	u3301
  4912  0032CC  EF6A  F019         	goto	u3300
  4913  0032D0                     u3301:
  4914  0032D0  EFC5  F018         	goto	l3657
  4915  0032D4                     u3300:
  4916  0032D4  BE33               	btfsc	(dtoa@w+1)^0,7,c
  4917  0032D6  EF75  F019         	goto	u3311
  4918  0032DA  5033               	movf	(dtoa@w+1)^0,w,c
  4919  0032DC  E108               	bnz	u3310
  4920  0032DE  0432               	decf	dtoa@w^0,w,c
  4921  0032E0  A0D8               	btfss	status,0,c
  4922  0032E2  EF75  F019         	goto	u3311
  4923  0032E6  EF77  F019         	goto	u3310
  4924  0032EA                     u3311:
  4925  0032EA  EF7F  F019         	goto	l3677
  4926  0032EE                     u3310:
  4927  0032EE  0100               	movlb	0	; () banked
  4928  0032F0  B3FC               	btfsc	_flags& (0+255),1,b
  4929  0032F2  EF7D  F019         	goto	u3321
  4930  0032F6  EF7F  F019         	goto	u3320
  4931  0032FA                     u3321:
  4932  0032FA  EFC5  F018         	goto	l3657
  4933  0032FE                     u3320:
  4934  0032FE                     l3677:
  4935                           
  4936                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 321:     if (s ||
      +                           (flags & (1 << 2))) {
  4937  0032FE  5034               	movf	dtoa@s^0,w,c
  4938  003300  1035               	iorwf	(dtoa@s+1)^0,w,c
  4939  003302  A4D8               	btfss	status,2,c
  4940  003304  EF86  F019         	goto	u3331
  4941  003308  EF88  F019         	goto	u3330
  4942  00330C                     u3331:
  4943  00330C  EF90  F019         	goto	l3681
  4944  003310                     u3330:
  4945  003310  0100               	movlb	0	; () banked
  4946  003312  A5FC               	btfss	_flags& (0+255),2,b
  4947  003314  EF8E  F019         	goto	u3341
  4948  003318  EF90  F019         	goto	u3340
  4949  00331C                     u3341:
  4950  00331C  EFAE  F019         	goto	l3691
  4951  003320                     u3340:
  4952  003320                     l3681:
  4953                           
  4954                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 322:         --i;
  4955  003320  063E               	decf	dtoa@i^0,f,c
  4956  003322  A0D8               	btfss	status,0,c
  4957  003324  063F               	decf	(dtoa@i+1)^0,f,c
  4958  003326                     
  4959                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 323:         dbuf
      +                          [i] = s ? '-' : '+';
  4960  003326  5034               	movf	dtoa@s^0,w,c
  4961  003328  1035               	iorwf	(dtoa@s+1)^0,w,c
  4962  00332A  A4D8               	btfss	status,2,c
  4963  00332C  EF9A  F019         	goto	u3351
  4964  003330  EF9C  F019         	goto	u3350
  4965  003334                     u3351:
  4966  003334  EFA2  F019         	goto	l3687
  4967  003338                     u3350:
  4968  003338  0E00               	movlw	0
  4969  00333A  6E2F               	movwf	(_dtoa$2871+1)^0,c
  4970  00333C  0E2B               	movlw	43
  4971  00333E  6E2E               	movwf	_dtoa$2871^0,c
  4972  003340  EFA6  F019         	goto	l3689
  4973  003344                     l3687:
  4974  003344  0E00               	movlw	0
  4975  003346  6E2F               	movwf	(_dtoa$2871+1)^0,c
  4976  003348  0E2D               	movlw	45
  4977  00334A  6E2E               	movwf	_dtoa$2871^0,c
  4978  00334C                     l3689:
  4979  00334C  0E48               	movlw	low _dbuf
  4980  00334E  243E               	addwf	dtoa@i^0,w,c
  4981  003350  6ED9               	movwf	fsr2l,c
  4982  003352  0E01               	movlw	high _dbuf
  4983  003354  203F               	addwfc	(dtoa@i+1)^0,w,c
  4984  003356  6EDA               	movwf	fsr2h,c
  4985  003358  C02E  FFDF         	movff	_dtoa$2871,indf2
  4986  00335C                     l3691:
  4987                           
  4988                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 327:     return p
      +                          ad(fp, &dbuf[i], w);
  4989  00335C  C01C  F011         	movff	dtoa@fp,pad@fp
  4990  003360  C01D  F012         	movff	dtoa@fp+1,pad@fp+1
  4991  003364  0E48               	movlw	low _dbuf
  4992  003366  243E               	addwf	dtoa@i^0,w,c
  4993  003368  6E13               	movwf	pad@buf^0,c
  4994  00336A  0E01               	movlw	high _dbuf
  4995  00336C  203F               	addwfc	(dtoa@i+1)^0,w,c
  4996  00336E  6E14               	movwf	(pad@buf+1)^0,c
  4997  003370  C032  F015         	movff	dtoa@w,pad@p
  4998  003374  C033  F016         	movff	dtoa@w+1,pad@p+1
  4999  003378  ECCE  F028         	call	_pad	;wreg free
  5000  00337C  C011  F01C         	movff	?_pad,?_dtoa
  5001  003380  C012  F01D         	movff	?_pad+1,?_dtoa+1
  5002  003384  0012               	return		;funcret
  5003  003386                     __end_of_dtoa:
  5004                           	callstack 0
  5005                           
  5006 ;; *************** function _pad *****************
  5007 ;; Defined at:
  5008 ;;		line 72 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c"
  5009 ;; Parameters:    Size  Location     Type
  5010 ;;  fp              2   16[COMRAM] PTR struct _IO_FILE
  5011 ;;		 -> sprintf@f(11), 
  5012 ;;  buf             2   18[COMRAM] PTR unsigned char 
  5013 ;;		 -> dbuf(32), 
  5014 ;;  p               2   20[COMRAM] int 
  5015 ;; Auto vars:     Size  Location     Type
  5016 ;;  w               2   25[COMRAM] int 
  5017 ;;  i               2   23[COMRAM] int 
  5018 ;; Return value:  Size  Location     Type
  5019 ;;                  2   16[COMRAM] int 
  5020 ;; Registers used:
  5021 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  5022 ;; Tracked objects:
  5023 ;;		On entry : 0/0
  5024 ;;		On exit  : 0/0
  5025 ;;		Unchanged: 0/0
  5026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5027 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5028 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5029 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5030 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5031 ;;Total ram usage:       11 bytes
  5032 ;; Hardware stack levels used: 1
  5033 ;; Hardware stack levels required when called: 4
  5034 ;; This function calls:
  5035 ;;		_fputc
  5036 ;;		_fputs
  5037 ;;		_strlen
  5038 ;; This function is called by:
  5039 ;;		_dtoa
  5040 ;; This function uses a non-reentrant model
  5041 ;;
  5042                           
  5043                           	psect	text14
  5044  00519C                     __ptext14:
  5045                           	callstack 0
  5046  00519C                     _pad:
  5047                           	callstack 20
  5048  00519C                     
  5049                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 72: static int pa
      +                          d(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\commo
      +                          n\doprnt.c: 73: {;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 
      +                          74:     int i, w;;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 
      +                          77:     if (flags & (1 << 0)) {
  5050  00519C  0100               	movlb	0	; () banked
  5051  00519E  A1FC               	btfss	_flags& (0+255),0,b
  5052  0051A0  EFD4  F028         	goto	u3161
  5053  0051A4  EFD6  F028         	goto	u3160
  5054  0051A8                     u3161:
  5055  0051A8  EFE0  F028         	goto	l3611
  5056  0051AC                     u3160:
  5057  0051AC                     
  5058                           ; BSR set to: 0
  5059                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 78:         fputs
      +                          ((const char *)buf, fp);
  5060  0051AC  C013  F00A         	movff	pad@buf,fputs@s
  5061  0051B0  C014  F00B         	movff	pad@buf+1,fputs@s+1
  5062  0051B4  C011  F00C         	movff	pad@fp,fputs@fp
  5063  0051B8  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  5064  0051BC  ECB2  F02C         	call	_fputs	;wreg free
  5065  0051C0                     l3611:
  5066                           
  5067                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 82:     w = (p < 
      +                          0) ? 0 : p;
  5068  0051C0  BE16               	btfsc	(pad@p+1)^0,7,c
  5069  0051C2  EFE5  F028         	goto	u3171
  5070  0051C6  EFE7  F028         	goto	u3170
  5071  0051CA                     u3171:
  5072  0051CA  EFED  F028         	goto	l3615
  5073  0051CE                     u3170:
  5074  0051CE  C015  F01A         	movff	pad@p,pad@w
  5075  0051D2  C016  F01B         	movff	pad@p+1,pad@w+1
  5076  0051D6  EFF1  F028         	goto	l1399
  5077  0051DA                     l3615:
  5078  0051DA  0E00               	movlw	0
  5079  0051DC  6E1B               	movwf	(pad@w+1)^0,c
  5080  0051DE  0E00               	movlw	0
  5081  0051E0  6E1A               	movwf	pad@w^0,c
  5082  0051E2                     l1399:
  5083                           
  5084                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 83:     i = 0;
  5085  0051E2  0E00               	movlw	0
  5086  0051E4  6E19               	movwf	(pad@i+1)^0,c
  5087  0051E6  0E00               	movlw	0
  5088  0051E8  6E18               	movwf	pad@i^0,c
  5089                           
  5090                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 84:     while (i 
      +                          < w) {
  5091  0051EA  EF03  F029         	goto	l3621
  5092  0051EE                     l3617:
  5093                           
  5094                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 85:         fputc
      +                          (' ', fp);
  5095  0051EE  0E00               	movlw	0
  5096  0051F0  6E02               	movwf	(fputc@c+1)^0,c
  5097  0051F2  0E20               	movlw	32
  5098  0051F4  6E01               	movwf	fputc@c^0,c
  5099  0051F6  C011  F003         	movff	pad@fp,fputc@fp
  5100  0051FA  C012  F004         	movff	pad@fp+1,fputc@fp+1
  5101  0051FE  EC06  F028         	call	_fputc	;wreg free
  5102  005202                     
  5103                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 86:         ++i;
  5104  005202  4A18               	infsnz	pad@i^0,f,c
  5105  005204  2A19               	incf	(pad@i+1)^0,f,c
  5106  005206                     l3621:
  5107                           
  5108                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 84:     while (i 
      +                          < w) {
  5109  005206  501A               	movf	pad@w^0,w,c
  5110  005208  5C18               	subwf	pad@i^0,w,c
  5111  00520A  5019               	movf	(pad@i+1)^0,w,c
  5112  00520C  0A80               	xorlw	128
  5113  00520E  6E17               	movwf	??_pad^0,c
  5114  005210  501B               	movf	(pad@w+1)^0,w,c
  5115  005212  0A80               	xorlw	128
  5116  005214  5817               	subwfb	??_pad^0,w,c
  5117  005216  A0D8               	btfss	status,0,c
  5118  005218  EF10  F029         	goto	u3181
  5119  00521C  EF12  F029         	goto	u3180
  5120  005220                     u3181:
  5121  005220  EFF7  F028         	goto	l3617
  5122  005224                     u3180:
  5123  005224                     
  5124                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 90:     if (!(fla
      +                          gs & (1 << 0))) {
  5125  005224  0100               	movlb	0	; () banked
  5126  005226  B1FC               	btfsc	_flags& (0+255),0,b
  5127  005228  EF18  F029         	goto	u3191
  5128  00522C  EF1A  F029         	goto	u3190
  5129  005230                     u3191:
  5130  005230  EF24  F029         	goto	l3625
  5131  005234                     u3190:
  5132  005234                     
  5133                           ; BSR set to: 0
  5134                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 91:         fputs
      +                          ((const char *)buf, fp);
  5135  005234  C013  F00A         	movff	pad@buf,fputs@s
  5136  005238  C014  F00B         	movff	pad@buf+1,fputs@s+1
  5137  00523C  C011  F00C         	movff	pad@fp,fputs@fp
  5138  005240  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  5139  005244  ECB2  F02C         	call	_fputs	;wreg free
  5140  005248                     l3625:
  5141                           
  5142                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 94:     return (i
      +                          nt)(strlen(buf) + (size_t)w);
  5143  005248  C013  F001         	movff	pad@buf,strlen@s
  5144  00524C  C014  F002         	movff	pad@buf+1,strlen@s+1
  5145  005250  ECED  F02D         	call	_strlen	;wreg free
  5146  005254  501A               	movf	pad@w^0,w,c
  5147  005256  2401               	addwf	?_strlen^0,w,c
  5148  005258  6E11               	movwf	?_pad^0,c
  5149  00525A  501B               	movf	(pad@w+1)^0,w,c
  5150  00525C  2002               	addwfc	(?_strlen+1)^0,w,c
  5151  00525E  6E12               	movwf	(?_pad+1)^0,c
  5152  005260  0012               	return		;funcret
  5153  005262                     __end_of_pad:
  5154                           	callstack 0
  5155                           
  5156 ;; *************** function _strlen *****************
  5157 ;; Defined at:
  5158 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\strlen.c"
  5159 ;; Parameters:    Size  Location     Type
  5160 ;;  s               2    0[COMRAM] PTR const unsigned char 
  5161 ;;		 -> dbuf(32), 
  5162 ;; Auto vars:     Size  Location     Type
  5163 ;;  a               2    2[COMRAM] PTR const unsigned char 
  5164 ;;		 -> dbuf(32), 
  5165 ;; Return value:  Size  Location     Type
  5166 ;;                  2    0[COMRAM] unsigned int 
  5167 ;; Registers used:
  5168 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5169 ;; Tracked objects:
  5170 ;;		On entry : 0/0
  5171 ;;		On exit  : 0/0
  5172 ;;		Unchanged: 0/0
  5173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5174 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5175 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5176 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5177 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5178 ;;Total ram usage:        4 bytes
  5179 ;; Hardware stack levels used: 1
  5180 ;; Hardware stack levels required when called: 1
  5181 ;; This function calls:
  5182 ;;		Nothing
  5183 ;; This function is called by:
  5184 ;;		_pad
  5185 ;; This function uses a non-reentrant model
  5186 ;;
  5187                           
  5188                           	psect	text15
  5189  005BDA                     __ptext15:
  5190                           	callstack 0
  5191  005BDA                     _strlen:
  5192                           	callstack 22
  5193  005BDA  C001  F003         	movff	strlen@s,strlen@a
  5194  005BDE  C002  F004         	movff	strlen@s+1,strlen@a+1
  5195  005BE2  EFF5  F02D         	goto	l3521
  5196  005BE6                     l3519:
  5197  005BE6  4A01               	infsnz	strlen@s^0,f,c
  5198  005BE8  2A02               	incf	(strlen@s+1)^0,f,c
  5199  005BEA                     l3521:
  5200  005BEA  C001  FFD9         	movff	strlen@s,fsr2l
  5201  005BEE  C002  FFDA         	movff	strlen@s+1,fsr2h
  5202  005BF2  50DF               	movf	indf2,w,c
  5203  005BF4  A4D8               	btfss	status,2,c
  5204  005BF6  EFFF  F02D         	goto	u3021
  5205  005BFA  EF01  F02E         	goto	u3020
  5206  005BFE                     u3021:
  5207  005BFE  EFF3  F02D         	goto	l3519
  5208  005C02                     u3020:
  5209  005C02  5003               	movf	strlen@a^0,w,c
  5210  005C04  5C01               	subwf	strlen@s^0,w,c
  5211  005C06  6E01               	movwf	?_strlen^0,c
  5212  005C08  5004               	movf	(strlen@a+1)^0,w,c
  5213  005C0A  5802               	subwfb	(strlen@s+1)^0,w,c
  5214  005C0C  6E02               	movwf	(?_strlen+1)^0,c
  5215  005C0E  0012               	return		;funcret
  5216  005C10                     __end_of_strlen:
  5217                           	callstack 0
  5218                           
  5219 ;; *************** function _fputs *****************
  5220 ;; Defined at:
  5221 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\nf_fputs.c"
  5222 ;; Parameters:    Size  Location     Type
  5223 ;;  s               2    9[COMRAM] PTR const unsigned char 
  5224 ;;		 -> dbuf(32), 
  5225 ;;  fp              2   11[COMRAM] PTR struct _IO_FILE
  5226 ;;		 -> sprintf@f(11), 
  5227 ;; Auto vars:     Size  Location     Type
  5228 ;;  i               2   14[COMRAM] int 
  5229 ;;  c               1   13[COMRAM] unsigned char 
  5230 ;; Return value:  Size  Location     Type
  5231 ;;                  2    9[COMRAM] int 
  5232 ;; Registers used:
  5233 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  5234 ;; Tracked objects:
  5235 ;;		On entry : 0/0
  5236 ;;		On exit  : 0/0
  5237 ;;		Unchanged: 0/0
  5238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5239 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5240 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5241 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5242 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5243 ;;Total ram usage:        7 bytes
  5244 ;; Hardware stack levels used: 1
  5245 ;; Hardware stack levels required when called: 3
  5246 ;; This function calls:
  5247 ;;		_fputc
  5248 ;; This function is called by:
  5249 ;;		_pad
  5250 ;; This function uses a non-reentrant model
  5251 ;;
  5252                           
  5253                           	psect	text16
  5254  005964                     __ptext16:
  5255                           	callstack 0
  5256  005964                     _fputs:
  5257                           	callstack 20
  5258  005964  0E00               	movlw	0
  5259  005966  6E10               	movwf	(fputs@i+1)^0,c
  5260  005968  0E00               	movlw	0
  5261  00596A  6E0F               	movwf	fputs@i^0,c
  5262  00596C  EFC3  F02C         	goto	l3515
  5263  005970                     l3511:
  5264  005970  C00E  F001         	movff	fputs@c,fputc@c
  5265  005974  6A02               	clrf	(fputc@c+1)^0,c
  5266  005976  C00C  F003         	movff	fputs@fp,fputc@fp
  5267  00597A  C00D  F004         	movff	fputs@fp+1,fputc@fp+1
  5268  00597E  EC06  F028         	call	_fputc	;wreg free
  5269  005982  4A0F               	infsnz	fputs@i^0,f,c
  5270  005984  2A10               	incf	(fputs@i+1)^0,f,c
  5271  005986                     l3515:
  5272  005986  500F               	movf	fputs@i^0,w,c
  5273  005988  240A               	addwf	fputs@s^0,w,c
  5274  00598A  6ED9               	movwf	fsr2l,c
  5275  00598C  5010               	movf	(fputs@i+1)^0,w,c
  5276  00598E  200B               	addwfc	(fputs@s+1)^0,w,c
  5277  005990  6EDA               	movwf	fsr2h,c
  5278  005992  50DF               	movf	indf2,w,c
  5279  005994  6E0E               	movwf	fputs@c^0,c
  5280  005996  500E               	movf	fputs@c^0,w,c
  5281  005998  A4D8               	btfss	status,2,c
  5282  00599A  EFD1  F02C         	goto	u3011
  5283  00599E  EFD3  F02C         	goto	u3010
  5284  0059A2                     u3011:
  5285  0059A2  EFB8  F02C         	goto	l3511
  5286  0059A6                     u3010:
  5287  0059A6  0012               	return		;funcret
  5288  0059A8                     __end_of_fputs:
  5289                           	callstack 0
  5290                           
  5291 ;; *************** function _fputc *****************
  5292 ;; Defined at:
  5293 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\nf_fputc.c"
  5294 ;; Parameters:    Size  Location     Type
  5295 ;;  c               2    0[COMRAM] int 
  5296 ;;  fp              2    2[COMRAM] PTR struct _IO_FILE
  5297 ;;		 -> sprintf@f(11), 
  5298 ;; Auto vars:     Size  Location     Type
  5299 ;;		None
  5300 ;; Return value:  Size  Location     Type
  5301 ;;                  2    0[COMRAM] int 
  5302 ;; Registers used:
  5303 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  5304 ;; Tracked objects:
  5305 ;;		On entry : 0/0
  5306 ;;		On exit  : 0/0
  5307 ;;		Unchanged: 0/0
  5308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5309 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5310 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5311 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5312 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5313 ;;Total ram usage:        9 bytes
  5314 ;; Hardware stack levels used: 1
  5315 ;; Hardware stack levels required when called: 2
  5316 ;; This function calls:
  5317 ;;		_putch
  5318 ;; This function is called by:
  5319 ;;		_pad
  5320 ;;		_vfpfcnvrt
  5321 ;;		_fputs
  5322 ;; This function uses a non-reentrant model
  5323 ;;
  5324                           
  5325                           	psect	text17
  5326  00500C                     __ptext17:
  5327                           	callstack 0
  5328  00500C                     _fputc:
  5329                           	callstack 23
  5330  00500C  5003               	movf	fputc@fp^0,w,c
  5331  00500E  1004               	iorwf	(fputc@fp+1)^0,w,c
  5332  005010  B4D8               	btfsc	status,2,c
  5333  005012  EF0D  F028         	goto	u2971
  5334  005016  EF0F  F028         	goto	u2970
  5335  00501A                     u2971:
  5336  00501A  EF18  F028         	goto	l3499
  5337  00501E                     u2970:
  5338  00501E  5003               	movf	fputc@fp^0,w,c
  5339  005020  1004               	iorwf	(fputc@fp+1)^0,w,c
  5340  005022  A4D8               	btfss	status,2,c
  5341  005024  EF16  F028         	goto	u2981
  5342  005028  EF18  F028         	goto	u2980
  5343  00502C                     u2981:
  5344  00502C  EF1D  F028         	goto	l3501
  5345  005030                     u2980:
  5346  005030                     l3499:
  5347  005030  5001               	movf	fputc@c^0,w,c
  5348  005032  EC4D  F02F         	call	_putch
  5349  005036  EF6A  F028         	goto	l1463
  5350  00503A                     l3501:
  5351  00503A  EE20 F009          	lfsr	2,9
  5352  00503E  5003               	movf	fputc@fp^0,w,c
  5353  005040  26D9               	addwf	fsr2l,f,c
  5354  005042  5004               	movf	(fputc@fp+1)^0,w,c
  5355  005044  22DA               	addwfc	fsr2h,f,c
  5356  005046  50DE               	movf	postinc2,w,c
  5357  005048  10DE               	iorwf	postinc2,w,c
  5358  00504A  B4D8               	btfsc	status,2,c
  5359  00504C  EF2A  F028         	goto	u2991
  5360  005050  EF2C  F028         	goto	u2990
  5361  005054                     u2991:
  5362  005054  EF47  F028         	goto	l3505
  5363  005058                     u2990:
  5364  005058  EE20 F009          	lfsr	2,9
  5365  00505C  5003               	movf	fputc@fp^0,w,c
  5366  00505E  26D9               	addwf	fsr2l,f,c
  5367  005060  5004               	movf	(fputc@fp+1)^0,w,c
  5368  005062  22DA               	addwfc	fsr2h,f,c
  5369  005064  EE10 F003          	lfsr	1,3
  5370  005068  5003               	movf	fputc@fp^0,w,c
  5371  00506A  26E1               	addwf	fsr1l,f,c
  5372  00506C  5004               	movf	(fputc@fp+1)^0,w,c
  5373  00506E  22E2               	addwfc	fsr1h,f,c
  5374  005070  50DE               	movf	postinc2,w,c
  5375  005072  5CE6               	subwf	postinc1,w,c
  5376  005074  50E6               	movf	postinc1,w,c
  5377  005076  0A80               	xorlw	128
  5378  005078  6E09               	movwf	(??_fputc+4)^0,c
  5379  00507A  50DE               	movf	postinc2,w,c
  5380  00507C  0A80               	xorlw	128
  5381  00507E  5809               	subwfb	(??_fputc+4)^0,w,c
  5382  005080  B0D8               	btfsc	status,0,c
  5383  005082  EF45  F028         	goto	u3001
  5384  005086  EF47  F028         	goto	u3000
  5385  00508A                     u3001:
  5386  00508A  EF6A  F028         	goto	l1463
  5387  00508E                     u3000:
  5388  00508E                     l3505:
  5389  00508E  EE20 F003          	lfsr	2,3
  5390  005092  5003               	movf	fputc@fp^0,w,c
  5391  005094  26D9               	addwf	fsr2l,f,c
  5392  005096  5004               	movf	(fputc@fp+1)^0,w,c
  5393  005098  22DA               	addwfc	fsr2h,f,c
  5394  00509A  CFDE F005          	movff	postinc2,??_fputc
  5395  00509E  CFDD F006          	movff	postdec2,??_fputc+1
  5396  0050A2  C003  FFD9         	movff	fputc@fp,fsr2l
  5397  0050A6  C004  FFDA         	movff	fputc@fp+1,fsr2h
  5398  0050AA  CFDE F007          	movff	postinc2,??_fputc+2
  5399  0050AE  CFDD F008          	movff	postdec2,??_fputc+3
  5400  0050B2  5005               	movf	??_fputc^0,w,c
  5401  0050B4  2407               	addwf	(??_fputc+2)^0,w,c
  5402  0050B6  6ED9               	movwf	fsr2l,c
  5403  0050B8  5006               	movf	(??_fputc+1)^0,w,c
  5404  0050BA  2008               	addwfc	(??_fputc+3)^0,w,c
  5405  0050BC  6EDA               	movwf	fsr2h,c
  5406  0050BE  C001  FFDF         	movff	fputc@c,indf2
  5407  0050C2  EE20 F003          	lfsr	2,3
  5408  0050C6  5003               	movf	fputc@fp^0,w,c
  5409  0050C8  26D9               	addwf	fsr2l,f,c
  5410  0050CA  5004               	movf	(fputc@fp+1)^0,w,c
  5411  0050CC  22DA               	addwfc	fsr2h,f,c
  5412  0050CE  2ADE               	incf	postinc2,f,c
  5413  0050D0  0E00               	movlw	0
  5414  0050D2  22DD               	addwfc	postdec2,f,c
  5415  0050D4                     l1463:
  5416  0050D4  0012               	return		;funcret
  5417  0050D6                     __end_of_fputc:
  5418                           	callstack 0
  5419                           
  5420 ;; *************** function _putch *****************
  5421 ;; Defined at:
  5422 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\putch.c"
  5423 ;; Parameters:    Size  Location     Type
  5424 ;;  c               1    wreg     unsigned char 
  5425 ;; Auto vars:     Size  Location     Type
  5426 ;;  c               1    0[COMRAM] unsigned char 
  5427 ;; Return value:  Size  Location     Type
  5428 ;;                  1    wreg      void 
  5429 ;; Registers used:
  5430 ;;		wreg
  5431 ;; Tracked objects:
  5432 ;;		On entry : 0/0
  5433 ;;		On exit  : 0/0
  5434 ;;		Unchanged: 0/0
  5435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5437 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5439 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5440 ;;Total ram usage:        0 bytes
  5441 ;; Hardware stack levels used: 1
  5442 ;; Hardware stack levels required when called: 1
  5443 ;; This function calls:
  5444 ;;		Nothing
  5445 ;; This function is called by:
  5446 ;;		_fputc
  5447 ;; This function uses a non-reentrant model
  5448 ;;
  5449                           
  5450                           	psect	text18
  5451  005E9A                     __ptext18:
  5452                           	callstack 0
  5453  005E9A                     _putch:
  5454                           	callstack 23
  5455  005E9A  0012               	return		;funcret
  5456  005E9C                     __end_of_putch:
  5457                           	callstack 0
  5458                           
  5459 ;; *************** function _abs *****************
  5460 ;; Defined at:
  5461 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\abs.c"
  5462 ;; Parameters:    Size  Location     Type
  5463 ;;  a               2   18[COMRAM] int 
  5464 ;; Auto vars:     Size  Location     Type
  5465 ;;		None
  5466 ;; Return value:  Size  Location     Type
  5467 ;;                  2   18[COMRAM] int 
  5468 ;; Registers used:
  5469 ;;		wreg, status,2, status,0
  5470 ;; Tracked objects:
  5471 ;;		On entry : 0/0
  5472 ;;		On exit  : 0/0
  5473 ;;		Unchanged: 0/0
  5474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5475 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5476 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5477 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5478 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5479 ;;Total ram usage:        4 bytes
  5480 ;; Hardware stack levels used: 1
  5481 ;; Hardware stack levels required when called: 1
  5482 ;; This function calls:
  5483 ;;		Nothing
  5484 ;; This function is called by:
  5485 ;;		_dtoa
  5486 ;; This function uses a non-reentrant model
  5487 ;;
  5488                           
  5489                           	psect	text19
  5490  005AB0                     __ptext19:
  5491                           	callstack 0
  5492  005AB0                     _abs:
  5493                           	callstack 23
  5494  005AB0  BE14               	btfsc	(abs@a+1)^0,7,c
  5495  005AB2  EF65  F02D         	goto	u3200
  5496  005AB6  5014               	movf	(abs@a+1)^0,w,c
  5497  005AB8  E106               	bnz	u3201
  5498  005ABA  0413               	decf	abs@a^0,w,c
  5499  005ABC  B0D8               	btfsc	status,0,c
  5500  005ABE  EF63  F02D         	goto	u3201
  5501  005AC2  EF65  F02D         	goto	u3200
  5502  005AC6                     u3201:
  5503  005AC6  EF73  F02D         	goto	l1448
  5504  005ACA                     u3200:
  5505  005ACA  C013  F015         	movff	abs@a,??_abs
  5506  005ACE  C014  F016         	movff	abs@a+1,??_abs+1
  5507  005AD2  1E15               	comf	??_abs^0,f,c
  5508  005AD4  1E16               	comf	(??_abs+1)^0,f,c
  5509  005AD6  4A15               	infsnz	??_abs^0,f,c
  5510  005AD8  2A16               	incf	(??_abs+1)^0,f,c
  5511  005ADA  C015  F013         	movff	??_abs,?_abs
  5512  005ADE  C016  F014         	movff	??_abs+1,?_abs+1
  5513  005AE2  EF77  F02D         	goto	l1451
  5514  005AE6                     l1448:
  5515  005AE6  C013  F013         	movff	abs@a,?_abs
  5516  005AEA  C014  F014         	movff	abs@a+1,?_abs+1
  5517  005AEE                     l1451:
  5518  005AEE  0012               	return		;funcret
  5519  005AF0                     __end_of_abs:
  5520                           	callstack 0
  5521                           
  5522 ;; *************** function ___aomod *****************
  5523 ;; Defined at:
  5524 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\aomod.c"
  5525 ;; Parameters:    Size  Location     Type
  5526 ;;  dividend        8    0[COMRAM] long long 
  5527 ;;  divisor         8    8[COMRAM] long long 
  5528 ;; Auto vars:     Size  Location     Type
  5529 ;;  sign            1   17[COMRAM] unsigned char 
  5530 ;;  counter         1   16[COMRAM] unsigned char 
  5531 ;; Return value:  Size  Location     Type
  5532 ;;                  8    0[COMRAM] long long 
  5533 ;; Registers used:
  5534 ;;		wreg, status,2, status,0
  5535 ;; Tracked objects:
  5536 ;;		On entry : 0/0
  5537 ;;		On exit  : 0/0
  5538 ;;		Unchanged: 0/0
  5539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5540 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5541 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5542 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5543 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5544 ;;Total ram usage:       18 bytes
  5545 ;; Hardware stack levels used: 1
  5546 ;; Hardware stack levels required when called: 1
  5547 ;; This function calls:
  5548 ;;		Nothing
  5549 ;; This function is called by:
  5550 ;;		_dtoa
  5551 ;; This function uses a non-reentrant model
  5552 ;;
  5553                           
  5554                           	psect	text20
  5555  0049BC                     __ptext20:
  5556                           	callstack 0
  5557  0049BC                     ___aomod:
  5558                           	callstack 23
  5559  0049BC  0E00               	movlw	0
  5560  0049BE  6E12               	movwf	___aomod@sign^0,c
  5561  0049C0  BE08               	btfsc	(___aomod@dividend+7)^0,7,c
  5562  0049C2  EFE7  F024         	goto	u3100
  5563  0049C6  EFE5  F024         	goto	u3101
  5564  0049CA                     u3101:
  5565  0049CA  EFF9  F024         	goto	l3579
  5566  0049CE                     u3100:
  5567  0049CE  1E08               	comf	(___aomod@dividend+7)^0,f,c
  5568  0049D0  1E07               	comf	(___aomod@dividend+6)^0,f,c
  5569  0049D2  1E06               	comf	(___aomod@dividend+5)^0,f,c
  5570  0049D4  1E05               	comf	(___aomod@dividend+4)^0,f,c
  5571  0049D6  1E04               	comf	(___aomod@dividend+3)^0,f,c
  5572  0049D8  1E03               	comf	(___aomod@dividend+2)^0,f,c
  5573  0049DA  1E02               	comf	(___aomod@dividend+1)^0,f,c
  5574  0049DC  6C01               	negf	___aomod@dividend^0,c
  5575  0049DE  0E00               	movlw	0
  5576  0049E0  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  5577  0049E2  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  5578  0049E4  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  5579  0049E6  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  5580  0049E8  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  5581  0049EA  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  5582  0049EC  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  5583  0049EE  0E01               	movlw	1
  5584  0049F0  6E12               	movwf	___aomod@sign^0,c
  5585  0049F2                     l3579:
  5586  0049F2  BE10               	btfsc	(___aomod@divisor+7)^0,7,c
  5587  0049F4  EF00  F025         	goto	u3110
  5588  0049F8  EFFE  F024         	goto	u3111
  5589  0049FC                     u3111:
  5590  0049FC  EF10  F025         	goto	l3583
  5591  004A00                     u3110:
  5592  004A00  1E10               	comf	(___aomod@divisor+7)^0,f,c
  5593  004A02  1E0F               	comf	(___aomod@divisor+6)^0,f,c
  5594  004A04  1E0E               	comf	(___aomod@divisor+5)^0,f,c
  5595  004A06  1E0D               	comf	(___aomod@divisor+4)^0,f,c
  5596  004A08  1E0C               	comf	(___aomod@divisor+3)^0,f,c
  5597  004A0A  1E0B               	comf	(___aomod@divisor+2)^0,f,c
  5598  004A0C  1E0A               	comf	(___aomod@divisor+1)^0,f,c
  5599  004A0E  6C09               	negf	___aomod@divisor^0,c
  5600  004A10  0E00               	movlw	0
  5601  004A12  220A               	addwfc	(___aomod@divisor+1)^0,f,c
  5602  004A14  220B               	addwfc	(___aomod@divisor+2)^0,f,c
  5603  004A16  220C               	addwfc	(___aomod@divisor+3)^0,f,c
  5604  004A18  220D               	addwfc	(___aomod@divisor+4)^0,f,c
  5605  004A1A  220E               	addwfc	(___aomod@divisor+5)^0,f,c
  5606  004A1C  220F               	addwfc	(___aomod@divisor+6)^0,f,c
  5607  004A1E  2210               	addwfc	(___aomod@divisor+7)^0,f,c
  5608  004A20                     l3583:
  5609  004A20  5009               	movf	___aomod@divisor^0,w,c
  5610  004A22  100A               	iorwf	(___aomod@divisor+1)^0,w,c
  5611  004A24  100B               	iorwf	(___aomod@divisor+2)^0,w,c
  5612  004A26  100C               	iorwf	(___aomod@divisor+3)^0,w,c
  5613  004A28  100D               	iorwf	(___aomod@divisor+4)^0,w,c
  5614  004A2A  100E               	iorwf	(___aomod@divisor+5)^0,w,c
  5615  004A2C  100F               	iorwf	(___aomod@divisor+6)^0,w,c
  5616  004A2E  1010               	iorwf	(___aomod@divisor+7)^0,w,c
  5617  004A30  B4D8               	btfsc	status,2,c
  5618  004A32  EF1D  F025         	goto	u3121
  5619  004A36  EF1F  F025         	goto	u3120
  5620  004A3A                     u3121:
  5621  004A3A  EF67  F025         	goto	l3599
  5622  004A3E                     u3120:
  5623  004A3E  0E01               	movlw	1
  5624  004A40  6E11               	movwf	___aomod@counter^0,c
  5625  004A42  EF2D  F025         	goto	l3589
  5626  004A46                     l3587:
  5627  004A46  90D8               	bcf	status,0,c
  5628  004A48  3609               	rlcf	___aomod@divisor^0,f,c
  5629  004A4A  360A               	rlcf	(___aomod@divisor+1)^0,f,c
  5630  004A4C  360B               	rlcf	(___aomod@divisor+2)^0,f,c
  5631  004A4E  360C               	rlcf	(___aomod@divisor+3)^0,f,c
  5632  004A50  360D               	rlcf	(___aomod@divisor+4)^0,f,c
  5633  004A52  360E               	rlcf	(___aomod@divisor+5)^0,f,c
  5634  004A54  360F               	rlcf	(___aomod@divisor+6)^0,f,c
  5635  004A56  3610               	rlcf	(___aomod@divisor+7)^0,f,c
  5636  004A58  2A11               	incf	___aomod@counter^0,f,c
  5637  004A5A                     l3589:
  5638  004A5A  AE10               	btfss	(___aomod@divisor+7)^0,7,c
  5639  004A5C  EF32  F025         	goto	u3131
  5640  004A60  EF34  F025         	goto	u3130
  5641  004A64                     u3131:
  5642  004A64  EF23  F025         	goto	l3587
  5643  004A68                     u3130:
  5644  004A68                     l3591:
  5645  004A68  5009               	movf	___aomod@divisor^0,w,c
  5646  004A6A  5C01               	subwf	___aomod@dividend^0,w,c
  5647  004A6C  500A               	movf	(___aomod@divisor+1)^0,w,c
  5648  004A6E  5802               	subwfb	(___aomod@dividend+1)^0,w,c
  5649  004A70  500B               	movf	(___aomod@divisor+2)^0,w,c
  5650  004A72  5803               	subwfb	(___aomod@dividend+2)^0,w,c
  5651  004A74  500C               	movf	(___aomod@divisor+3)^0,w,c
  5652  004A76  5804               	subwfb	(___aomod@dividend+3)^0,w,c
  5653  004A78  500D               	movf	(___aomod@divisor+4)^0,w,c
  5654  004A7A  5805               	subwfb	(___aomod@dividend+4)^0,w,c
  5655  004A7C  500E               	movf	(___aomod@divisor+5)^0,w,c
  5656  004A7E  5806               	subwfb	(___aomod@dividend+5)^0,w,c
  5657  004A80  500F               	movf	(___aomod@divisor+6)^0,w,c
  5658  004A82  5807               	subwfb	(___aomod@dividend+6)^0,w,c
  5659  004A84  5010               	movf	(___aomod@divisor+7)^0,w,c
  5660  004A86  5808               	subwfb	(___aomod@dividend+7)^0,w,c
  5661  004A88  A0D8               	btfss	status,0,c
  5662  004A8A  EF49  F025         	goto	u3141
  5663  004A8E  EF4B  F025         	goto	u3140
  5664  004A92                     u3141:
  5665  004A92  EF5B  F025         	goto	l3595
  5666  004A96                     u3140:
  5667  004A96  5009               	movf	___aomod@divisor^0,w,c
  5668  004A98  5E01               	subwf	___aomod@dividend^0,f,c
  5669  004A9A  500A               	movf	(___aomod@divisor+1)^0,w,c
  5670  004A9C  5A02               	subwfb	(___aomod@dividend+1)^0,f,c
  5671  004A9E  500B               	movf	(___aomod@divisor+2)^0,w,c
  5672  004AA0  5A03               	subwfb	(___aomod@dividend+2)^0,f,c
  5673  004AA2  500C               	movf	(___aomod@divisor+3)^0,w,c
  5674  004AA4  5A04               	subwfb	(___aomod@dividend+3)^0,f,c
  5675  004AA6  500D               	movf	(___aomod@divisor+4)^0,w,c
  5676  004AA8  5A05               	subwfb	(___aomod@dividend+4)^0,f,c
  5677  004AAA  500E               	movf	(___aomod@divisor+5)^0,w,c
  5678  004AAC  5A06               	subwfb	(___aomod@dividend+5)^0,f,c
  5679  004AAE  500F               	movf	(___aomod@divisor+6)^0,w,c
  5680  004AB0  5A07               	subwfb	(___aomod@dividend+6)^0,f,c
  5681  004AB2  5010               	movf	(___aomod@divisor+7)^0,w,c
  5682  004AB4  5A08               	subwfb	(___aomod@dividend+7)^0,f,c
  5683  004AB6                     l3595:
  5684  004AB6  90D8               	bcf	status,0,c
  5685  004AB8  3210               	rrcf	(___aomod@divisor+7)^0,f,c
  5686  004ABA  320F               	rrcf	(___aomod@divisor+6)^0,f,c
  5687  004ABC  320E               	rrcf	(___aomod@divisor+5)^0,f,c
  5688  004ABE  320D               	rrcf	(___aomod@divisor+4)^0,f,c
  5689  004AC0  320C               	rrcf	(___aomod@divisor+3)^0,f,c
  5690  004AC2  320B               	rrcf	(___aomod@divisor+2)^0,f,c
  5691  004AC4  320A               	rrcf	(___aomod@divisor+1)^0,f,c
  5692  004AC6  3209               	rrcf	___aomod@divisor^0,f,c
  5693  004AC8  2E11               	decfsz	___aomod@counter^0,f,c
  5694  004ACA  EF34  F025         	goto	l3591
  5695  004ACE                     l3599:
  5696  004ACE  5012               	movf	___aomod@sign^0,w,c
  5697  004AD0  B4D8               	btfsc	status,2,c
  5698  004AD2  EF6D  F025         	goto	u3151
  5699  004AD6  EF6F  F025         	goto	u3150
  5700  004ADA                     u3151:
  5701  004ADA  EF7F  F025         	goto	l3603
  5702  004ADE                     u3150:
  5703  004ADE  1E08               	comf	(___aomod@dividend+7)^0,f,c
  5704  004AE0  1E07               	comf	(___aomod@dividend+6)^0,f,c
  5705  004AE2  1E06               	comf	(___aomod@dividend+5)^0,f,c
  5706  004AE4  1E05               	comf	(___aomod@dividend+4)^0,f,c
  5707  004AE6  1E04               	comf	(___aomod@dividend+3)^0,f,c
  5708  004AE8  1E03               	comf	(___aomod@dividend+2)^0,f,c
  5709  004AEA  1E02               	comf	(___aomod@dividend+1)^0,f,c
  5710  004AEC  6C01               	negf	___aomod@dividend^0,c
  5711  004AEE  0E00               	movlw	0
  5712  004AF0  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  5713  004AF2  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  5714  004AF4  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  5715  004AF6  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  5716  004AF8  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  5717  004AFA  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  5718  004AFC  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  5719  004AFE                     l3603:
  5720  004AFE  C001  F001         	movff	___aomod@dividend,?___aomod
  5721  004B02  C002  F002         	movff	___aomod@dividend+1,?___aomod+1
  5722  004B06  C003  F003         	movff	___aomod@dividend+2,?___aomod+2
  5723  004B0A  C004  F004         	movff	___aomod@dividend+3,?___aomod+3
  5724  004B0E  C005  F005         	movff	___aomod@dividend+4,?___aomod+4
  5725  004B12  C006  F006         	movff	___aomod@dividend+5,?___aomod+5
  5726  004B16  C007  F007         	movff	___aomod@dividend+6,?___aomod+6
  5727  004B1A  C008  F008         	movff	___aomod@dividend+7,?___aomod+7
  5728  004B1E  0012               	return		;funcret
  5729  004B20                     __end_of___aomod:
  5730                           	callstack 0
  5731                           
  5732 ;; *************** function ___aodiv *****************
  5733 ;; Defined at:
  5734 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\aodiv.c"
  5735 ;; Parameters:    Size  Location     Type
  5736 ;;  dividend        8    0[COMRAM] long long 
  5737 ;;  divisor         8    8[COMRAM] long long 
  5738 ;; Auto vars:     Size  Location     Type
  5739 ;;  quotient        8   18[COMRAM] long long 
  5740 ;;  sign            1   17[COMRAM] unsigned char 
  5741 ;;  counter         1   16[COMRAM] unsigned char 
  5742 ;; Return value:  Size  Location     Type
  5743 ;;                  8    0[COMRAM] long long 
  5744 ;; Registers used:
  5745 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5746 ;; Tracked objects:
  5747 ;;		On entry : 0/0
  5748 ;;		On exit  : 0/0
  5749 ;;		Unchanged: 0/0
  5750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5751 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5752 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5753 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5754 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5755 ;;Total ram usage:       26 bytes
  5756 ;; Hardware stack levels used: 1
  5757 ;; Hardware stack levels required when called: 1
  5758 ;; This function calls:
  5759 ;;		Nothing
  5760 ;; This function is called by:
  5761 ;;		_dtoa
  5762 ;; This function uses a non-reentrant model
  5763 ;;
  5764                           
  5765                           	psect	text21
  5766  004834                     __ptext21:
  5767                           	callstack 0
  5768  004834                     ___aodiv:
  5769                           	callstack 23
  5770  004834  0E00               	movlw	0
  5771  004836  6E12               	movwf	___aodiv@sign^0,c
  5772  004838  BE10               	btfsc	(___aodiv@divisor+7)^0,7,c
  5773  00483A  EF23  F024         	goto	u3030
  5774  00483E  EF21  F024         	goto	u3031
  5775  004842                     u3031:
  5776  004842  EF35  F024         	goto	l3535
  5777  004846                     u3030:
  5778  004846  1E10               	comf	(___aodiv@divisor+7)^0,f,c
  5779  004848  1E0F               	comf	(___aodiv@divisor+6)^0,f,c
  5780  00484A  1E0E               	comf	(___aodiv@divisor+5)^0,f,c
  5781  00484C  1E0D               	comf	(___aodiv@divisor+4)^0,f,c
  5782  00484E  1E0C               	comf	(___aodiv@divisor+3)^0,f,c
  5783  004850  1E0B               	comf	(___aodiv@divisor+2)^0,f,c
  5784  004852  1E0A               	comf	(___aodiv@divisor+1)^0,f,c
  5785  004854  6C09               	negf	___aodiv@divisor^0,c
  5786  004856  0E00               	movlw	0
  5787  004858  220A               	addwfc	(___aodiv@divisor+1)^0,f,c
  5788  00485A  220B               	addwfc	(___aodiv@divisor+2)^0,f,c
  5789  00485C  220C               	addwfc	(___aodiv@divisor+3)^0,f,c
  5790  00485E  220D               	addwfc	(___aodiv@divisor+4)^0,f,c
  5791  004860  220E               	addwfc	(___aodiv@divisor+5)^0,f,c
  5792  004862  220F               	addwfc	(___aodiv@divisor+6)^0,f,c
  5793  004864  2210               	addwfc	(___aodiv@divisor+7)^0,f,c
  5794  004866  0E01               	movlw	1
  5795  004868  6E12               	movwf	___aodiv@sign^0,c
  5796  00486A                     l3535:
  5797  00486A  BE08               	btfsc	(___aodiv@dividend+7)^0,7,c
  5798  00486C  EF3C  F024         	goto	u3040
  5799  004870  EF3A  F024         	goto	u3041
  5800  004874                     u3041:
  5801  004874  EF4E  F024         	goto	l3541
  5802  004878                     u3040:
  5803  004878  1E08               	comf	(___aodiv@dividend+7)^0,f,c
  5804  00487A  1E07               	comf	(___aodiv@dividend+6)^0,f,c
  5805  00487C  1E06               	comf	(___aodiv@dividend+5)^0,f,c
  5806  00487E  1E05               	comf	(___aodiv@dividend+4)^0,f,c
  5807  004880  1E04               	comf	(___aodiv@dividend+3)^0,f,c
  5808  004882  1E03               	comf	(___aodiv@dividend+2)^0,f,c
  5809  004884  1E02               	comf	(___aodiv@dividend+1)^0,f,c
  5810  004886  6C01               	negf	___aodiv@dividend^0,c
  5811  004888  0E00               	movlw	0
  5812  00488A  2202               	addwfc	(___aodiv@dividend+1)^0,f,c
  5813  00488C  2203               	addwfc	(___aodiv@dividend+2)^0,f,c
  5814  00488E  2204               	addwfc	(___aodiv@dividend+3)^0,f,c
  5815  004890  2205               	addwfc	(___aodiv@dividend+4)^0,f,c
  5816  004892  2206               	addwfc	(___aodiv@dividend+5)^0,f,c
  5817  004894  2207               	addwfc	(___aodiv@dividend+6)^0,f,c
  5818  004896  2208               	addwfc	(___aodiv@dividend+7)^0,f,c
  5819  004898  0E01               	movlw	1
  5820  00489A  1A12               	xorwf	___aodiv@sign^0,f,c
  5821  00489C                     l3541:
  5822  00489C  EE20  F013         	lfsr	2,___aodiv@quotient
  5823  0048A0  0E07               	movlw	7
  5824  0048A2                     u3051:
  5825  0048A2  6ADE               	clrf	postinc2,c
  5826  0048A4  06E8               	decf	wreg,f,c
  5827  0048A6  E2FD               	bc	u3051
  5828  0048A8  5009               	movf	___aodiv@divisor^0,w,c
  5829  0048AA  100A               	iorwf	(___aodiv@divisor+1)^0,w,c
  5830  0048AC  100B               	iorwf	(___aodiv@divisor+2)^0,w,c
  5831  0048AE  100C               	iorwf	(___aodiv@divisor+3)^0,w,c
  5832  0048B0  100D               	iorwf	(___aodiv@divisor+4)^0,w,c
  5833  0048B2  100E               	iorwf	(___aodiv@divisor+5)^0,w,c
  5834  0048B4  100F               	iorwf	(___aodiv@divisor+6)^0,w,c
  5835  0048B6  1010               	iorwf	(___aodiv@divisor+7)^0,w,c
  5836  0048B8  B4D8               	btfsc	status,2,c
  5837  0048BA  EF61  F024         	goto	u3061
  5838  0048BE  EF63  F024         	goto	u3060
  5839  0048C2                     u3061:
  5840  0048C2  EFB5  F024         	goto	l3563
  5841  0048C6                     u3060:
  5842  0048C6  0E01               	movlw	1
  5843  0048C8  6E11               	movwf	___aodiv@counter^0,c
  5844  0048CA  EF71  F024         	goto	l3549
  5845  0048CE                     l3547:
  5846  0048CE  90D8               	bcf	status,0,c
  5847  0048D0  3609               	rlcf	___aodiv@divisor^0,f,c
  5848  0048D2  360A               	rlcf	(___aodiv@divisor+1)^0,f,c
  5849  0048D4  360B               	rlcf	(___aodiv@divisor+2)^0,f,c
  5850  0048D6  360C               	rlcf	(___aodiv@divisor+3)^0,f,c
  5851  0048D8  360D               	rlcf	(___aodiv@divisor+4)^0,f,c
  5852  0048DA  360E               	rlcf	(___aodiv@divisor+5)^0,f,c
  5853  0048DC  360F               	rlcf	(___aodiv@divisor+6)^0,f,c
  5854  0048DE  3610               	rlcf	(___aodiv@divisor+7)^0,f,c
  5855  0048E0  2A11               	incf	___aodiv@counter^0,f,c
  5856  0048E2                     l3549:
  5857  0048E2  AE10               	btfss	(___aodiv@divisor+7)^0,7,c
  5858  0048E4  EF76  F024         	goto	u3071
  5859  0048E8  EF78  F024         	goto	u3070
  5860  0048EC                     u3071:
  5861  0048EC  EF67  F024         	goto	l3547
  5862  0048F0                     u3070:
  5863  0048F0                     l3551:
  5864  0048F0  90D8               	bcf	status,0,c
  5865  0048F2  3613               	rlcf	___aodiv@quotient^0,f,c
  5866  0048F4  3614               	rlcf	(___aodiv@quotient+1)^0,f,c
  5867  0048F6  3615               	rlcf	(___aodiv@quotient+2)^0,f,c
  5868  0048F8  3616               	rlcf	(___aodiv@quotient+3)^0,f,c
  5869  0048FA  3617               	rlcf	(___aodiv@quotient+4)^0,f,c
  5870  0048FC  3618               	rlcf	(___aodiv@quotient+5)^0,f,c
  5871  0048FE  3619               	rlcf	(___aodiv@quotient+6)^0,f,c
  5872  004900  361A               	rlcf	(___aodiv@quotient+7)^0,f,c
  5873  004902  5009               	movf	___aodiv@divisor^0,w,c
  5874  004904  5C01               	subwf	___aodiv@dividend^0,w,c
  5875  004906  500A               	movf	(___aodiv@divisor+1)^0,w,c
  5876  004908  5802               	subwfb	(___aodiv@dividend+1)^0,w,c
  5877  00490A  500B               	movf	(___aodiv@divisor+2)^0,w,c
  5878  00490C  5803               	subwfb	(___aodiv@dividend+2)^0,w,c
  5879  00490E  500C               	movf	(___aodiv@divisor+3)^0,w,c
  5880  004910  5804               	subwfb	(___aodiv@dividend+3)^0,w,c
  5881  004912  500D               	movf	(___aodiv@divisor+4)^0,w,c
  5882  004914  5805               	subwfb	(___aodiv@dividend+4)^0,w,c
  5883  004916  500E               	movf	(___aodiv@divisor+5)^0,w,c
  5884  004918  5806               	subwfb	(___aodiv@dividend+5)^0,w,c
  5885  00491A  500F               	movf	(___aodiv@divisor+6)^0,w,c
  5886  00491C  5807               	subwfb	(___aodiv@dividend+6)^0,w,c
  5887  00491E  5010               	movf	(___aodiv@divisor+7)^0,w,c
  5888  004920  5808               	subwfb	(___aodiv@dividend+7)^0,w,c
  5889  004922  A0D8               	btfss	status,0,c
  5890  004924  EF96  F024         	goto	u3081
  5891  004928  EF98  F024         	goto	u3080
  5892  00492C                     u3081:
  5893  00492C  EFA9  F024         	goto	l3559
  5894  004930                     u3080:
  5895  004930  5009               	movf	___aodiv@divisor^0,w,c
  5896  004932  5E01               	subwf	___aodiv@dividend^0,f,c
  5897  004934  500A               	movf	(___aodiv@divisor+1)^0,w,c
  5898  004936  5A02               	subwfb	(___aodiv@dividend+1)^0,f,c
  5899  004938  500B               	movf	(___aodiv@divisor+2)^0,w,c
  5900  00493A  5A03               	subwfb	(___aodiv@dividend+2)^0,f,c
  5901  00493C  500C               	movf	(___aodiv@divisor+3)^0,w,c
  5902  00493E  5A04               	subwfb	(___aodiv@dividend+3)^0,f,c
  5903  004940  500D               	movf	(___aodiv@divisor+4)^0,w,c
  5904  004942  5A05               	subwfb	(___aodiv@dividend+4)^0,f,c
  5905  004944  500E               	movf	(___aodiv@divisor+5)^0,w,c
  5906  004946  5A06               	subwfb	(___aodiv@dividend+5)^0,f,c
  5907  004948  500F               	movf	(___aodiv@divisor+6)^0,w,c
  5908  00494A  5A07               	subwfb	(___aodiv@dividend+6)^0,f,c
  5909  00494C  5010               	movf	(___aodiv@divisor+7)^0,w,c
  5910  00494E  5A08               	subwfb	(___aodiv@dividend+7)^0,f,c
  5911  004950  8013               	bsf	___aodiv@quotient^0,0,c
  5912  004952                     l3559:
  5913  004952  90D8               	bcf	status,0,c
  5914  004954  3210               	rrcf	(___aodiv@divisor+7)^0,f,c
  5915  004956  320F               	rrcf	(___aodiv@divisor+6)^0,f,c
  5916  004958  320E               	rrcf	(___aodiv@divisor+5)^0,f,c
  5917  00495A  320D               	rrcf	(___aodiv@divisor+4)^0,f,c
  5918  00495C  320C               	rrcf	(___aodiv@divisor+3)^0,f,c
  5919  00495E  320B               	rrcf	(___aodiv@divisor+2)^0,f,c
  5920  004960  320A               	rrcf	(___aodiv@divisor+1)^0,f,c
  5921  004962  3209               	rrcf	___aodiv@divisor^0,f,c
  5922  004964  2E11               	decfsz	___aodiv@counter^0,f,c
  5923  004966  EF78  F024         	goto	l3551
  5924  00496A                     l3563:
  5925  00496A  5012               	movf	___aodiv@sign^0,w,c
  5926  00496C  B4D8               	btfsc	status,2,c
  5927  00496E  EFBB  F024         	goto	u3091
  5928  004972  EFBD  F024         	goto	u3090
  5929  004976                     u3091:
  5930  004976  EFCD  F024         	goto	l3567
  5931  00497A                     u3090:
  5932  00497A  1E1A               	comf	(___aodiv@quotient+7)^0,f,c
  5933  00497C  1E19               	comf	(___aodiv@quotient+6)^0,f,c
  5934  00497E  1E18               	comf	(___aodiv@quotient+5)^0,f,c
  5935  004980  1E17               	comf	(___aodiv@quotient+4)^0,f,c
  5936  004982  1E16               	comf	(___aodiv@quotient+3)^0,f,c
  5937  004984  1E15               	comf	(___aodiv@quotient+2)^0,f,c
  5938  004986  1E14               	comf	(___aodiv@quotient+1)^0,f,c
  5939  004988  6C13               	negf	___aodiv@quotient^0,c
  5940  00498A  0E00               	movlw	0
  5941  00498C  2214               	addwfc	(___aodiv@quotient+1)^0,f,c
  5942  00498E  2215               	addwfc	(___aodiv@quotient+2)^0,f,c
  5943  004990  2216               	addwfc	(___aodiv@quotient+3)^0,f,c
  5944  004992  2217               	addwfc	(___aodiv@quotient+4)^0,f,c
  5945  004994  2218               	addwfc	(___aodiv@quotient+5)^0,f,c
  5946  004996  2219               	addwfc	(___aodiv@quotient+6)^0,f,c
  5947  004998  221A               	addwfc	(___aodiv@quotient+7)^0,f,c
  5948  00499A                     l3567:
  5949  00499A  C013  F001         	movff	___aodiv@quotient,?___aodiv
  5950  00499E  C014  F002         	movff	___aodiv@quotient+1,?___aodiv+1
  5951  0049A2  C015  F003         	movff	___aodiv@quotient+2,?___aodiv+2
  5952  0049A6  C016  F004         	movff	___aodiv@quotient+3,?___aodiv+3
  5953  0049AA  C017  F005         	movff	___aodiv@quotient+4,?___aodiv+4
  5954  0049AE  C018  F006         	movff	___aodiv@quotient+5,?___aodiv+5
  5955  0049B2  C019  F007         	movff	___aodiv@quotient+6,?___aodiv+6
  5956  0049B6  C01A  F008         	movff	___aodiv@quotient+7,?___aodiv+7
  5957  0049BA  0012               	return		;funcret
  5958  0049BC                     __end_of___aodiv:
  5959                           	callstack 0
  5960                           
  5961 ;; *************** function _sendStringSerial4 *****************
  5962 ;; Defined at:
  5963 ;;		line 35 in file "serial.c"
  5964 ;; Parameters:    Size  Location     Type
  5965 ;;  string          2    1[COMRAM] PTR unsigned char 
  5966 ;;		 -> color_predict@buf(100), color_display@buf(100), 
  5967 ;; Auto vars:     Size  Location     Type
  5968 ;;		None
  5969 ;; Return value:  Size  Location     Type
  5970 ;;                  1    wreg      void 
  5971 ;; Registers used:
  5972 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5973 ;; Tracked objects:
  5974 ;;		On entry : 0/0
  5975 ;;		On exit  : 0/0
  5976 ;;		Unchanged: 0/0
  5977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5978 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5979 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5981 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5982 ;;Total ram usage:        2 bytes
  5983 ;; Hardware stack levels used: 1
  5984 ;; Hardware stack levels required when called: 2
  5985 ;; This function calls:
  5986 ;;		_sendCharSerial4
  5987 ;; This function is called by:
  5988 ;;		_color_display
  5989 ;;		_color_predict
  5990 ;; This function uses a non-reentrant model
  5991 ;;
  5992                           
  5993                           	psect	text22
  5994  005C44                     __ptext22:
  5995                           	callstack 0
  5996  005C44                     _sendStringSerial4:
  5997                           	callstack 26
  5998  005C44                     
  5999                           ;serial.c: 37:     while(*string != 0){
  6000  005C44  EF2D  F02E         	goto	l4257
  6001  005C48                     l4253:
  6002                           
  6003                           ;serial.c: 38:   sendCharSerial4(*string++);}
  6004  005C48  C002  FFD9         	movff	sendStringSerial4@string,fsr2l
  6005  005C4C  C003  FFDA         	movff	sendStringSerial4@string+1,fsr2h
  6006  005C50  50DF               	movf	indf2,w,c
  6007  005C52  EC1B  F02F         	call	_sendCharSerial4
  6008  005C56  4A02               	infsnz	sendStringSerial4@string^0,f,c
  6009  005C58  2A03               	incf	(sendStringSerial4@string+1)^0,f,c
  6010  005C5A                     l4257:
  6011                           
  6012                           ;serial.c: 37:     while(*string != 0){
  6013  005C5A  C002  FFD9         	movff	sendStringSerial4@string,fsr2l
  6014  005C5E  C003  FFDA         	movff	sendStringSerial4@string+1,fsr2h
  6015  005C62  50DF               	movf	indf2,w,c
  6016  005C64  A4D8               	btfss	status,2,c
  6017  005C66  EF37  F02E         	goto	u4201
  6018  005C6A  EF39  F02E         	goto	u4200
  6019  005C6E                     u4201:
  6020  005C6E  EF24  F02E         	goto	l4253
  6021  005C72                     u4200:
  6022  005C72  0012               	return		;funcret
  6023  005C74                     __end_of_sendStringSerial4:
  6024                           	callstack 0
  6025                           
  6026 ;; *************** function _sendCharSerial4 *****************
  6027 ;; Defined at:
  6028 ;;		line 29 in file "serial.c"
  6029 ;; Parameters:    Size  Location     Type
  6030 ;;  charToSend      1    wreg     unsigned char 
  6031 ;; Auto vars:     Size  Location     Type
  6032 ;;  charToSend      1    0[COMRAM] unsigned char 
  6033 ;; Return value:  Size  Location     Type
  6034 ;;                  1    wreg      void 
  6035 ;; Registers used:
  6036 ;;		wreg
  6037 ;; Tracked objects:
  6038 ;;		On entry : 0/0
  6039 ;;		On exit  : 0/0
  6040 ;;		Unchanged: 0/0
  6041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6043 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6044 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6045 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6046 ;;Total ram usage:        1 bytes
  6047 ;; Hardware stack levels used: 1
  6048 ;; Hardware stack levels required when called: 1
  6049 ;; This function calls:
  6050 ;;		Nothing
  6051 ;; This function is called by:
  6052 ;;		_sendStringSerial4
  6053 ;; This function uses a non-reentrant model
  6054 ;;
  6055                           
  6056                           	psect	text23
  6057  005E36                     __ptext23:
  6058                           	callstack 0
  6059  005E36                     _sendCharSerial4:
  6060                           	callstack 26
  6061                           
  6062                           ;incstack = 0
  6063                           ;sendCharSerial4@charToSend stored from wreg
  6064  005E36  6E01               	movwf	sendCharSerial4@charToSend^0,c
  6065  005E38                     l373:
  6066  005E38  010E               	movlb	14	; () banked
  6067  005E3A  A537               	btfss	55,2,b	;volatile
  6068  005E3C  EF22  F02F         	goto	u3931
  6069  005E40  EF24  F02F         	goto	u3930
  6070  005E44                     u3931:
  6071  005E44  EF1C  F02F         	goto	l373
  6072  005E48                     u3930:
  6073  005E48                     
  6074                           ; BSR set to: 14
  6075                           ;serial.c: 31:     TX4REG = charToSend;
  6076  005E48  C001  FEE4         	movff	sendCharSerial4@charToSend,3812	;volatile
  6077  005E4C                     
  6078                           ; BSR set to: 14
  6079  005E4C  0012               	return		;funcret
  6080  005E4E                     __end_of_sendCharSerial4:
  6081                           	callstack 0
  6082                           
  6083 ;; *************** function _calibrate_white *****************
  6084 ;; Defined at:
  6085 ;;		line 258 in file "color.c"
  6086 ;; Parameters:    Size  Location     Type
  6087 ;;  w               2   11[COMRAM] PTR struct white_card
  6088 ;;		 -> main@white(28), 
  6089 ;; Auto vars:     Size  Location     Type
  6090 ;;		None
  6091 ;; Return value:  Size  Location     Type
  6092 ;;                  1    wreg      void 
  6093 ;; Registers used:
  6094 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6095 ;; Tracked objects:
  6096 ;;		On entry : 0/0
  6097 ;;		On exit  : 0/0
  6098 ;;		Unchanged: 0/0
  6099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6100 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6101 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6102 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6103 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6104 ;;Total ram usage:        4 bytes
  6105 ;; Hardware stack levels used: 1
  6106 ;; Hardware stack levels required when called: 4
  6107 ;; This function calls:
  6108 ;;		_LED_B
  6109 ;;		_LED_C
  6110 ;;		_LED_G
  6111 ;;		_LED_OFF
  6112 ;;		_LED_R
  6113 ;;		_color_read_Blue
  6114 ;;		_color_read_Clear
  6115 ;;		_color_read_Green
  6116 ;;		_color_read_Red
  6117 ;;		_toggle_light
  6118 ;; This function is called by:
  6119 ;;		_main
  6120 ;;		_test_function
  6121 ;; This function uses a non-reentrant model
  6122 ;;
  6123                           
  6124                           	psect	text24
  6125  0038F4                     __ptext24:
  6126                           	callstack 0
  6127  0038F4                     _calibrate_white:
  6128                           	callstack 25
  6129  0038F4                     
  6130                           ;color.c: 258: void calibrate_white(struct white_card *w);color.c: 259: {;color.c: 260: 
      +                              LED_OFF();
  6131  0038F4  EC9D  F02E         	call	_LED_OFF	;wreg free
  6132  0038F8                     
  6133                           ;color.c: 261:     toggle_light(1,2);
  6134  0038F8  0E02               	movlw	2
  6135  0038FA  6E01               	movwf	toggle_light@toggletime^0,c
  6136  0038FC  0E01               	movlw	1
  6137  0038FE  EC24  F01B         	call	_toggle_light
  6138  003902                     
  6139                           ;color.c: 262:     _delay((unsigned long)((500)*(64000000/4000.0)));
  6140  003902  0E29               	movlw	41
  6141  003904  6E0F               	movwf	(??_calibrate_white+1)^0,c
  6142  003906  0E96               	movlw	150
  6143  003908  6E0E               	movwf	??_calibrate_white^0,c
  6144  00390A  0E7F               	movlw	127
  6145  00390C                     u6087:
  6146  00390C  2EE8               	decfsz	wreg,f,c
  6147  00390E  D7FE               	bra	u6087
  6148  003910  2E0E               	decfsz	??_calibrate_white^0,f,c
  6149  003912  D7FC               	bra	u6087
  6150  003914  2E0F               	decfsz	(??_calibrate_white+1)^0,f,c
  6151  003916  D7FA               	bra	u6087
  6152  003918  F000               	nop	
  6153  00391A                     
  6154                           ;color.c: 264:     LED_R();
  6155  00391A  EC8D  F02E         	call	_LED_R	;wreg free
  6156  00391E                     
  6157                           ;color.c: 265:     _delay((unsigned long)((100)*(64000000/4000.0)));
  6158  00391E  0E09               	movlw	9
  6159  003920  6E0F               	movwf	(??_calibrate_white+1)^0,c
  6160  003922  0E1E               	movlw	30
  6161  003924  6E0E               	movwf	??_calibrate_white^0,c
  6162  003926  0EE4               	movlw	228
  6163  003928                     u6097:
  6164  003928  2EE8               	decfsz	wreg,f,c
  6165  00392A  D7FE               	bra	u6097
  6166  00392C  2E0E               	decfsz	??_calibrate_white^0,f,c
  6167  00392E  D7FC               	bra	u6097
  6168  003930  2E0F               	decfsz	(??_calibrate_white+1)^0,f,c
  6169  003932  D7FA               	bra	u6097
  6170  003934  D000               	nop2	
  6171  003936                     
  6172                           ;color.c: 266:     w->RR = color_read_Red(); w->RG = color_read_Green(); w->RB = color_r
      +                          ead_Blue();
  6173  003936  ECEF  F02B         	call	_color_read_Red	;wreg free
  6174  00393A  C00C  FFD9         	movff	calibrate_white@w,fsr2l
  6175  00393E  C00D  FFDA         	movff	calibrate_white@w+1,fsr2h
  6176  003942  C005  FFDE         	movff	?_color_read_Red,postinc2
  6177  003946  C006  FFDD         	movff	?_color_read_Red+1,postdec2
  6178  00394A  EC17  F02C         	call	_color_read_Green	;wreg free
  6179  00394E  EE20 F002          	lfsr	2,2
  6180  003952  500C               	movf	calibrate_white@w^0,w,c
  6181  003954  26D9               	addwf	fsr2l,f,c
  6182  003956  500D               	movf	(calibrate_white@w+1)^0,w,c
  6183  003958  22DA               	addwfc	fsr2h,f,c
  6184  00395A  C005  FFDE         	movff	?_color_read_Green,postinc2
  6185  00395E  C006  FFDD         	movff	?_color_read_Green+1,postdec2
  6186  003962  EC3F  F02C         	call	_color_read_Blue	;wreg free
  6187  003966  EE20 F004          	lfsr	2,4
  6188  00396A  500C               	movf	calibrate_white@w^0,w,c
  6189  00396C  26D9               	addwf	fsr2l,f,c
  6190  00396E  500D               	movf	(calibrate_white@w+1)^0,w,c
  6191  003970  22DA               	addwfc	fsr2h,f,c
  6192  003972  C005  FFDE         	movff	?_color_read_Blue,postinc2
  6193  003976  C006  FFDD         	movff	?_color_read_Blue+1,postdec2
  6194  00397A                     
  6195                           ;color.c: 269:     LED_G();
  6196  00397A  ECAD  F02E         	call	_LED_G	;wreg free
  6197  00397E                     
  6198                           ;color.c: 270:     _delay((unsigned long)((100)*(64000000/4000.0)));
  6199  00397E  0E09               	movlw	9
  6200  003980  6E0F               	movwf	(??_calibrate_white+1)^0,c
  6201  003982  0E1E               	movlw	30
  6202  003984  6E0E               	movwf	??_calibrate_white^0,c
  6203  003986  0EE4               	movlw	228
  6204  003988                     u6107:
  6205  003988  2EE8               	decfsz	wreg,f,c
  6206  00398A  D7FE               	bra	u6107
  6207  00398C  2E0E               	decfsz	??_calibrate_white^0,f,c
  6208  00398E  D7FC               	bra	u6107
  6209  003990  2E0F               	decfsz	(??_calibrate_white+1)^0,f,c
  6210  003992  D7FA               	bra	u6107
  6211  003994  D000               	nop2	
  6212  003996                     
  6213                           ;color.c: 271:     w->GR = color_read_Red(); w->GG = color_read_Green(); w->GB = color_r
      +                          ead_Blue();
  6214  003996  ECEF  F02B         	call	_color_read_Red	;wreg free
  6215  00399A  EE20 F006          	lfsr	2,6
  6216  00399E  500C               	movf	calibrate_white@w^0,w,c
  6217  0039A0  26D9               	addwf	fsr2l,f,c
  6218  0039A2  500D               	movf	(calibrate_white@w+1)^0,w,c
  6219  0039A4  22DA               	addwfc	fsr2h,f,c
  6220  0039A6  C005  FFDE         	movff	?_color_read_Red,postinc2
  6221  0039AA  C006  FFDD         	movff	?_color_read_Red+1,postdec2
  6222  0039AE  EC17  F02C         	call	_color_read_Green	;wreg free
  6223  0039B2  EE20 F008          	lfsr	2,8
  6224  0039B6  500C               	movf	calibrate_white@w^0,w,c
  6225  0039B8  26D9               	addwf	fsr2l,f,c
  6226  0039BA  500D               	movf	(calibrate_white@w+1)^0,w,c
  6227  0039BC  22DA               	addwfc	fsr2h,f,c
  6228  0039BE  C005  FFDE         	movff	?_color_read_Green,postinc2
  6229  0039C2  C006  FFDD         	movff	?_color_read_Green+1,postdec2
  6230  0039C6  EC3F  F02C         	call	_color_read_Blue	;wreg free
  6231  0039CA  EE20 F00A          	lfsr	2,10
  6232  0039CE  500C               	movf	calibrate_white@w^0,w,c
  6233  0039D0  26D9               	addwf	fsr2l,f,c
  6234  0039D2  500D               	movf	(calibrate_white@w+1)^0,w,c
  6235  0039D4  22DA               	addwfc	fsr2h,f,c
  6236  0039D6  C005  FFDE         	movff	?_color_read_Blue,postinc2
  6237  0039DA  C006  FFDD         	movff	?_color_read_Blue+1,postdec2
  6238  0039DE                     
  6239                           ;color.c: 275:     LED_B();
  6240  0039DE  ECBD  F02E         	call	_LED_B	;wreg free
  6241  0039E2                     
  6242                           ;color.c: 276:     _delay((unsigned long)((100)*(64000000/4000.0)));
  6243  0039E2  0E09               	movlw	9
  6244  0039E4  6E0F               	movwf	(??_calibrate_white+1)^0,c
  6245  0039E6  0E1E               	movlw	30
  6246  0039E8  6E0E               	movwf	??_calibrate_white^0,c
  6247  0039EA  0EE4               	movlw	228
  6248  0039EC                     u6117:
  6249  0039EC  2EE8               	decfsz	wreg,f,c
  6250  0039EE  D7FE               	bra	u6117
  6251  0039F0  2E0E               	decfsz	??_calibrate_white^0,f,c
  6252  0039F2  D7FC               	bra	u6117
  6253  0039F4  2E0F               	decfsz	(??_calibrate_white+1)^0,f,c
  6254  0039F6  D7FA               	bra	u6117
  6255  0039F8  D000               	nop2	
  6256  0039FA                     
  6257                           ;color.c: 277:     w->BR = color_read_Red(); w->BG = color_read_Green(); w->BB = color_r
      +                          ead_Blue(); w->BC = color_read_Clear();
  6258  0039FA  ECEF  F02B         	call	_color_read_Red	;wreg free
  6259  0039FE  EE20 F00C          	lfsr	2,12
  6260  003A02  500C               	movf	calibrate_white@w^0,w,c
  6261  003A04  26D9               	addwf	fsr2l,f,c
  6262  003A06  500D               	movf	(calibrate_white@w+1)^0,w,c
  6263  003A08  22DA               	addwfc	fsr2h,f,c
  6264  003A0A  C005  FFDE         	movff	?_color_read_Red,postinc2
  6265  003A0E  C006  FFDD         	movff	?_color_read_Red+1,postdec2
  6266  003A12  EC17  F02C         	call	_color_read_Green	;wreg free
  6267  003A16  EE20 F00E          	lfsr	2,14
  6268  003A1A  500C               	movf	calibrate_white@w^0,w,c
  6269  003A1C  26D9               	addwf	fsr2l,f,c
  6270  003A1E  500D               	movf	(calibrate_white@w+1)^0,w,c
  6271  003A20  22DA               	addwfc	fsr2h,f,c
  6272  003A22  C005  FFDE         	movff	?_color_read_Green,postinc2
  6273  003A26  C006  FFDD         	movff	?_color_read_Green+1,postdec2
  6274  003A2A  EC3F  F02C         	call	_color_read_Blue	;wreg free
  6275  003A2E  EE20 F010          	lfsr	2,16
  6276  003A32  500C               	movf	calibrate_white@w^0,w,c
  6277  003A34  26D9               	addwf	fsr2l,f,c
  6278  003A36  500D               	movf	(calibrate_white@w+1)^0,w,c
  6279  003A38  22DA               	addwfc	fsr2h,f,c
  6280  003A3A  C005  FFDE         	movff	?_color_read_Blue,postinc2
  6281  003A3E  C006  FFDD         	movff	?_color_read_Blue+1,postdec2
  6282  003A42  EC67  F02C         	call	_color_read_Clear	;wreg free
  6283  003A46  EE20 F01A          	lfsr	2,26
  6284  003A4A  500C               	movf	calibrate_white@w^0,w,c
  6285  003A4C  26D9               	addwf	fsr2l,f,c
  6286  003A4E  500D               	movf	(calibrate_white@w+1)^0,w,c
  6287  003A50  22DA               	addwfc	fsr2h,f,c
  6288  003A52  C005  FFDE         	movff	?_color_read_Clear,postinc2
  6289  003A56  C006  FFDD         	movff	?_color_read_Clear+1,postdec2
  6290  003A5A                     
  6291                           ;color.c: 280:     LED_C();
  6292  003A5A  ECCD  F02E         	call	_LED_C	;wreg free
  6293  003A5E                     
  6294                           ;color.c: 281:     _delay((unsigned long)((100)*(64000000/4000.0)));
  6295  003A5E  0E09               	movlw	9
  6296  003A60  6E0F               	movwf	(??_calibrate_white+1)^0,c
  6297  003A62  0E1E               	movlw	30
  6298  003A64  6E0E               	movwf	??_calibrate_white^0,c
  6299  003A66  0EE4               	movlw	228
  6300  003A68                     u6127:
  6301  003A68  2EE8               	decfsz	wreg,f,c
  6302  003A6A  D7FE               	bra	u6127
  6303  003A6C  2E0E               	decfsz	??_calibrate_white^0,f,c
  6304  003A6E  D7FC               	bra	u6127
  6305  003A70  2E0F               	decfsz	(??_calibrate_white+1)^0,f,c
  6306  003A72  D7FA               	bra	u6127
  6307  003A74  D000               	nop2	
  6308  003A76                     
  6309                           ;color.c: 282:     w->CR = color_read_Red(); w->CG = color_read_Green(); w->CB = color_r
      +                          ead_Blue(); w->CC = color_read_Clear();
  6310  003A76  ECEF  F02B         	call	_color_read_Red	;wreg free
  6311  003A7A  EE20 F012          	lfsr	2,18
  6312  003A7E  500C               	movf	calibrate_white@w^0,w,c
  6313  003A80  26D9               	addwf	fsr2l,f,c
  6314  003A82  500D               	movf	(calibrate_white@w+1)^0,w,c
  6315  003A84  22DA               	addwfc	fsr2h,f,c
  6316  003A86  C005  FFDE         	movff	?_color_read_Red,postinc2
  6317  003A8A  C006  FFDD         	movff	?_color_read_Red+1,postdec2
  6318  003A8E  EC17  F02C         	call	_color_read_Green	;wreg free
  6319  003A92  EE20 F014          	lfsr	2,20
  6320  003A96  500C               	movf	calibrate_white@w^0,w,c
  6321  003A98  26D9               	addwf	fsr2l,f,c
  6322  003A9A  500D               	movf	(calibrate_white@w+1)^0,w,c
  6323  003A9C  22DA               	addwfc	fsr2h,f,c
  6324  003A9E  C005  FFDE         	movff	?_color_read_Green,postinc2
  6325  003AA2  C006  FFDD         	movff	?_color_read_Green+1,postdec2
  6326  003AA6  EC3F  F02C         	call	_color_read_Blue	;wreg free
  6327  003AAA  EE20 F016          	lfsr	2,22
  6328  003AAE  500C               	movf	calibrate_white@w^0,w,c
  6329  003AB0  26D9               	addwf	fsr2l,f,c
  6330  003AB2  500D               	movf	(calibrate_white@w+1)^0,w,c
  6331  003AB4  22DA               	addwfc	fsr2h,f,c
  6332  003AB6  C005  FFDE         	movff	?_color_read_Blue,postinc2
  6333  003ABA  C006  FFDD         	movff	?_color_read_Blue+1,postdec2
  6334  003ABE  EC67  F02C         	call	_color_read_Clear	;wreg free
  6335  003AC2  EE20 F018          	lfsr	2,24
  6336  003AC6  500C               	movf	calibrate_white@w^0,w,c
  6337  003AC8  26D9               	addwf	fsr2l,f,c
  6338  003ACA  500D               	movf	(calibrate_white@w+1)^0,w,c
  6339  003ACC  22DA               	addwfc	fsr2h,f,c
  6340  003ACE  C005  FFDE         	movff	?_color_read_Clear,postinc2
  6341  003AD2  C006  FFDD         	movff	?_color_read_Clear+1,postdec2
  6342  003AD6                     
  6343                           ;color.c: 284:     LED_OFF();
  6344  003AD6  EC9D  F02E         	call	_LED_OFF	;wreg free
  6345  003ADA                     
  6346                           ;color.c: 285:     _delay((unsigned long)((500)*(64000000/4000.0)));
  6347  003ADA  0E29               	movlw	41
  6348  003ADC  6E0F               	movwf	(??_calibrate_white+1)^0,c
  6349  003ADE  0E96               	movlw	150
  6350  003AE0  6E0E               	movwf	??_calibrate_white^0,c
  6351  003AE2  0E7F               	movlw	127
  6352  003AE4                     u6137:
  6353  003AE4  2EE8               	decfsz	wreg,f,c
  6354  003AE6  D7FE               	bra	u6137
  6355  003AE8  2E0E               	decfsz	??_calibrate_white^0,f,c
  6356  003AEA  D7FC               	bra	u6137
  6357  003AEC  2E0F               	decfsz	(??_calibrate_white+1)^0,f,c
  6358  003AEE  D7FA               	bra	u6137
  6359  003AF0  F000               	nop	
  6360                           
  6361                           ;color.c: 286:     toggle_light(1,2);
  6362  003AF2  0E02               	movlw	2
  6363  003AF4  6E01               	movwf	toggle_light@toggletime^0,c
  6364  003AF6  0E01               	movlw	1
  6365  003AF8  EC24  F01B         	call	_toggle_light
  6366  003AFC  0012               	return		;funcret
  6367  003AFE                     __end_of_calibrate_white:
  6368                           	callstack 0
  6369                           
  6370 ;; *************** function _color_read_Red *****************
  6371 ;; Defined at:
  6372 ;;		line 91 in file "color.c"
  6373 ;; Parameters:    Size  Location     Type
  6374 ;;		None
  6375 ;; Auto vars:     Size  Location     Type
  6376 ;;  tmp             2    9[COMRAM] unsigned int 
  6377 ;; Return value:  Size  Location     Type
  6378 ;;                  2    4[COMRAM] unsigned int 
  6379 ;; Registers used:
  6380 ;;		wreg, status,2, status,0, cstack
  6381 ;; Tracked objects:
  6382 ;;		On entry : 0/0
  6383 ;;		On exit  : 0/0
  6384 ;;		Unchanged: 0/0
  6385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6386 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6387 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6388 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6389 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6390 ;;Total ram usage:        7 bytes
  6391 ;; Hardware stack levels used: 1
  6392 ;; Hardware stack levels required when called: 3
  6393 ;; This function calls:
  6394 ;;		_I2C_2_Master_Read
  6395 ;;		_I2C_2_Master_RepStart
  6396 ;;		_I2C_2_Master_Start
  6397 ;;		_I2C_2_Master_Stop
  6398 ;;		_I2C_2_Master_Write
  6399 ;; This function is called by:
  6400 ;;		_read_color
  6401 ;;		_calibrate_white
  6402 ;; This function uses a non-reentrant model
  6403 ;;
  6404                           
  6405                           	psect	text25
  6406  0057DE                     __ptext25:
  6407                           	callstack 0
  6408  0057DE                     _color_read_Red:
  6409                           	callstack 24
  6410  0057DE                     
  6411                           ;color.c: 93:  unsigned int tmp;;color.c: 94:  I2C_2_Master_Start();
  6412  0057DE  EC48  F02F         	call	_I2C_2_Master_Start	;wreg free
  6413                           
  6414                           ;color.c: 95:  I2C_2_Master_Write(0x52 | 0x00);
  6415  0057E2  0E52               	movlw	82
  6416  0057E4  EC32  F02F         	call	_I2C_2_Master_Write
  6417                           
  6418                           ;color.c: 96:  I2C_2_Master_Write(0xA0 | 0x16);
  6419  0057E8  0EB6               	movlw	182
  6420  0057EA  EC32  F02F         	call	_I2C_2_Master_Write
  6421                           
  6422                           ;color.c: 97:  I2C_2_Master_RepStart();
  6423  0057EE  EC3E  F02F         	call	_I2C_2_Master_RepStart	;wreg free
  6424                           
  6425                           ;color.c: 98:  I2C_2_Master_Write(0x52 | 0x01);
  6426  0057F2  0E53               	movlw	83
  6427  0057F4  EC32  F02F         	call	_I2C_2_Master_Write
  6428                           
  6429                           ;color.c: 99:  tmp=I2C_2_Master_Read(1);
  6430  0057F8  0E01               	movlw	1
  6431  0057FA  ECD4  F02C         	call	_I2C_2_Master_Read
  6432  0057FE  6E07               	movwf	??_color_read_Red^0,c
  6433  005800  5007               	movf	??_color_read_Red^0,w,c
  6434  005802  6E0A               	movwf	color_read_Red@tmp^0,c
  6435  005804  6A0B               	clrf	(color_read_Red@tmp+1)^0,c
  6436                           
  6437                           ;color.c: 100:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  6438  005806  0E00               	movlw	0
  6439  005808  ECD4  F02C         	call	_I2C_2_Master_Read
  6440  00580C  6E07               	movwf	??_color_read_Red^0,c
  6441  00580E  5007               	movf	??_color_read_Red^0,w,c
  6442  005810  6E09               	movwf	(??_color_read_Red+2)^0,c
  6443  005812  6A08               	clrf	(??_color_read_Red+1)^0,c
  6444  005814  500A               	movf	color_read_Red@tmp^0,w,c
  6445  005816  1008               	iorwf	(??_color_read_Red+1)^0,w,c
  6446  005818  6E0A               	movwf	color_read_Red@tmp^0,c
  6447  00581A  500B               	movf	(color_read_Red@tmp+1)^0,w,c
  6448  00581C  1009               	iorwf	(??_color_read_Red+2)^0,w,c
  6449  00581E  6E0B               	movwf	(color_read_Red@tmp+1)^0,c
  6450                           
  6451                           ;color.c: 101:  I2C_2_Master_Stop();
  6452  005820  EC43  F02F         	call	_I2C_2_Master_Stop	;wreg free
  6453  005824                     
  6454                           ;color.c: 102:  return tmp;
  6455  005824  C00A  F005         	movff	color_read_Red@tmp,?_color_read_Red
  6456  005828  C00B  F006         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  6457  00582C  0012               	return		;funcret
  6458  00582E                     __end_of_color_read_Red:
  6459                           	callstack 0
  6460                           
  6461 ;; *************** function _color_read_Green *****************
  6462 ;; Defined at:
  6463 ;;		line 119 in file "color.c"
  6464 ;; Parameters:    Size  Location     Type
  6465 ;;		None
  6466 ;; Auto vars:     Size  Location     Type
  6467 ;;  tmp             2    9[COMRAM] unsigned int 
  6468 ;; Return value:  Size  Location     Type
  6469 ;;                  2    4[COMRAM] unsigned int 
  6470 ;; Registers used:
  6471 ;;		wreg, status,2, status,0, cstack
  6472 ;; Tracked objects:
  6473 ;;		On entry : 0/0
  6474 ;;		On exit  : 0/0
  6475 ;;		Unchanged: 0/0
  6476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6477 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6478 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6479 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6480 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6481 ;;Total ram usage:        7 bytes
  6482 ;; Hardware stack levels used: 1
  6483 ;; Hardware stack levels required when called: 3
  6484 ;; This function calls:
  6485 ;;		_I2C_2_Master_Read
  6486 ;;		_I2C_2_Master_RepStart
  6487 ;;		_I2C_2_Master_Start
  6488 ;;		_I2C_2_Master_Stop
  6489 ;;		_I2C_2_Master_Write
  6490 ;; This function is called by:
  6491 ;;		_read_color
  6492 ;;		_calibrate_white
  6493 ;;		_distance_measure
  6494 ;; This function uses a non-reentrant model
  6495 ;;
  6496                           
  6497                           	psect	text26
  6498  00582E                     __ptext26:
  6499                           	callstack 0
  6500  00582E                     _color_read_Green:
  6501                           	callstack 24
  6502  00582E                     
  6503                           ;color.c: 121:  unsigned int tmp;;color.c: 122:  I2C_2_Master_Start();
  6504  00582E  EC48  F02F         	call	_I2C_2_Master_Start	;wreg free
  6505                           
  6506                           ;color.c: 123:  I2C_2_Master_Write(0x52 | 0x00);
  6507  005832  0E52               	movlw	82
  6508  005834  EC32  F02F         	call	_I2C_2_Master_Write
  6509                           
  6510                           ;color.c: 124:  I2C_2_Master_Write(0xA0 | 0x18);
  6511  005838  0EB8               	movlw	184
  6512  00583A  EC32  F02F         	call	_I2C_2_Master_Write
  6513                           
  6514                           ;color.c: 125:  I2C_2_Master_RepStart();
  6515  00583E  EC3E  F02F         	call	_I2C_2_Master_RepStart	;wreg free
  6516                           
  6517                           ;color.c: 126:  I2C_2_Master_Write(0x52 | 0x01);
  6518  005842  0E53               	movlw	83
  6519  005844  EC32  F02F         	call	_I2C_2_Master_Write
  6520                           
  6521                           ;color.c: 127:  tmp=I2C_2_Master_Read(1);
  6522  005848  0E01               	movlw	1
  6523  00584A  ECD4  F02C         	call	_I2C_2_Master_Read
  6524  00584E  6E07               	movwf	??_color_read_Green^0,c
  6525  005850  5007               	movf	??_color_read_Green^0,w,c
  6526  005852  6E0A               	movwf	color_read_Green@tmp^0,c
  6527  005854  6A0B               	clrf	(color_read_Green@tmp+1)^0,c
  6528                           
  6529                           ;color.c: 128:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  6530  005856  0E00               	movlw	0
  6531  005858  ECD4  F02C         	call	_I2C_2_Master_Read
  6532  00585C  6E07               	movwf	??_color_read_Green^0,c
  6533  00585E  5007               	movf	??_color_read_Green^0,w,c
  6534  005860  6E09               	movwf	(??_color_read_Green+2)^0,c
  6535  005862  6A08               	clrf	(??_color_read_Green+1)^0,c
  6536  005864  500A               	movf	color_read_Green@tmp^0,w,c
  6537  005866  1008               	iorwf	(??_color_read_Green+1)^0,w,c
  6538  005868  6E0A               	movwf	color_read_Green@tmp^0,c
  6539  00586A  500B               	movf	(color_read_Green@tmp+1)^0,w,c
  6540  00586C  1009               	iorwf	(??_color_read_Green+2)^0,w,c
  6541  00586E  6E0B               	movwf	(color_read_Green@tmp+1)^0,c
  6542                           
  6543                           ;color.c: 129:  I2C_2_Master_Stop();
  6544  005870  EC43  F02F         	call	_I2C_2_Master_Stop	;wreg free
  6545  005874                     
  6546                           ;color.c: 130:  return tmp;
  6547  005874  C00A  F005         	movff	color_read_Green@tmp,?_color_read_Green
  6548  005878  C00B  F006         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  6549  00587C  0012               	return		;funcret
  6550  00587E                     __end_of_color_read_Green:
  6551                           	callstack 0
  6552                           
  6553 ;; *************** function _color_read_Blue *****************
  6554 ;; Defined at:
  6555 ;;		line 105 in file "color.c"
  6556 ;; Parameters:    Size  Location     Type
  6557 ;;		None
  6558 ;; Auto vars:     Size  Location     Type
  6559 ;;  tmp             2    9[COMRAM] unsigned int 
  6560 ;; Return value:  Size  Location     Type
  6561 ;;                  2    4[COMRAM] unsigned int 
  6562 ;; Registers used:
  6563 ;;		wreg, status,2, status,0, cstack
  6564 ;; Tracked objects:
  6565 ;;		On entry : 0/0
  6566 ;;		On exit  : 0/0
  6567 ;;		Unchanged: 0/0
  6568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6569 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6570 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6571 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6572 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6573 ;;Total ram usage:        7 bytes
  6574 ;; Hardware stack levels used: 1
  6575 ;; Hardware stack levels required when called: 3
  6576 ;; This function calls:
  6577 ;;		_I2C_2_Master_Read
  6578 ;;		_I2C_2_Master_RepStart
  6579 ;;		_I2C_2_Master_Start
  6580 ;;		_I2C_2_Master_Stop
  6581 ;;		_I2C_2_Master_Write
  6582 ;; This function is called by:
  6583 ;;		_read_color
  6584 ;;		_calibrate_white
  6585 ;; This function uses a non-reentrant model
  6586 ;;
  6587                           
  6588                           	psect	text27
  6589  00587E                     __ptext27:
  6590                           	callstack 0
  6591  00587E                     _color_read_Blue:
  6592                           	callstack 24
  6593  00587E                     
  6594                           ;color.c: 107:  unsigned int tmp;;color.c: 108:  I2C_2_Master_Start();
  6595  00587E  EC48  F02F         	call	_I2C_2_Master_Start	;wreg free
  6596                           
  6597                           ;color.c: 109:  I2C_2_Master_Write(0x52 | 0x00);
  6598  005882  0E52               	movlw	82
  6599  005884  EC32  F02F         	call	_I2C_2_Master_Write
  6600                           
  6601                           ;color.c: 110:  I2C_2_Master_Write(0xA0 | 0x1A);
  6602  005888  0EBA               	movlw	186
  6603  00588A  EC32  F02F         	call	_I2C_2_Master_Write
  6604                           
  6605                           ;color.c: 111:  I2C_2_Master_RepStart();
  6606  00588E  EC3E  F02F         	call	_I2C_2_Master_RepStart	;wreg free
  6607                           
  6608                           ;color.c: 112:  I2C_2_Master_Write(0x52 | 0x01);
  6609  005892  0E53               	movlw	83
  6610  005894  EC32  F02F         	call	_I2C_2_Master_Write
  6611                           
  6612                           ;color.c: 113:  tmp=I2C_2_Master_Read(1);
  6613  005898  0E01               	movlw	1
  6614  00589A  ECD4  F02C         	call	_I2C_2_Master_Read
  6615  00589E  6E07               	movwf	??_color_read_Blue^0,c
  6616  0058A0  5007               	movf	??_color_read_Blue^0,w,c
  6617  0058A2  6E0A               	movwf	color_read_Blue@tmp^0,c
  6618  0058A4  6A0B               	clrf	(color_read_Blue@tmp+1)^0,c
  6619                           
  6620                           ;color.c: 114:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  6621  0058A6  0E00               	movlw	0
  6622  0058A8  ECD4  F02C         	call	_I2C_2_Master_Read
  6623  0058AC  6E07               	movwf	??_color_read_Blue^0,c
  6624  0058AE  5007               	movf	??_color_read_Blue^0,w,c
  6625  0058B0  6E09               	movwf	(??_color_read_Blue+2)^0,c
  6626  0058B2  6A08               	clrf	(??_color_read_Blue+1)^0,c
  6627  0058B4  500A               	movf	color_read_Blue@tmp^0,w,c
  6628  0058B6  1008               	iorwf	(??_color_read_Blue+1)^0,w,c
  6629  0058B8  6E0A               	movwf	color_read_Blue@tmp^0,c
  6630  0058BA  500B               	movf	(color_read_Blue@tmp+1)^0,w,c
  6631  0058BC  1009               	iorwf	(??_color_read_Blue+2)^0,w,c
  6632  0058BE  6E0B               	movwf	(color_read_Blue@tmp+1)^0,c
  6633                           
  6634                           ;color.c: 115:  I2C_2_Master_Stop();
  6635  0058C0  EC43  F02F         	call	_I2C_2_Master_Stop	;wreg free
  6636  0058C4                     
  6637                           ;color.c: 116:  return tmp;
  6638  0058C4  C00A  F005         	movff	color_read_Blue@tmp,?_color_read_Blue
  6639  0058C8  C00B  F006         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  6640  0058CC  0012               	return		;funcret
  6641  0058CE                     __end_of_color_read_Blue:
  6642                           	callstack 0
  6643                           
  6644 ;; *************** function _LED_R *****************
  6645 ;; Defined at:
  6646 ;;		line 164 in file "color.c"
  6647 ;; Parameters:    Size  Location     Type
  6648 ;;		None
  6649 ;; Auto vars:     Size  Location     Type
  6650 ;;		None
  6651 ;; Return value:  Size  Location     Type
  6652 ;;                  1    wreg      void 
  6653 ;; Registers used:
  6654 ;;		wreg
  6655 ;; Tracked objects:
  6656 ;;		On entry : 0/0
  6657 ;;		On exit  : 0/0
  6658 ;;		Unchanged: 0/0
  6659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6660 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6661 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6662 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6663 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6664 ;;Total ram usage:        2 bytes
  6665 ;; Hardware stack levels used: 1
  6666 ;; Hardware stack levels required when called: 1
  6667 ;; This function calls:
  6668 ;;		Nothing
  6669 ;; This function is called by:
  6670 ;;		_color_data_collection
  6671 ;;		_calibrate_white
  6672 ;;		_detect_color
  6673 ;; This function uses a non-reentrant model
  6674 ;;
  6675                           
  6676                           	psect	text28
  6677  005D1A                     __ptext28:
  6678                           	callstack 0
  6679  005D1A                     _LED_R:
  6680                           	callstack 27
  6681  005D1A                     
  6682                           ;color.c: 166:     LATGbits.LATG1 = 1;
  6683  005D1A  827F               	bsf	127,1,c	;volatile
  6684                           
  6685                           ;color.c: 167:     LATFbits.LATF7 = 0;
  6686  005D1C  9E7E               	bcf	126,7,c	;volatile
  6687                           
  6688                           ;color.c: 168:     LATAbits.LATA4 = 0;
  6689  005D1E  9879               	bcf	121,4,c	;volatile
  6690  005D20                     
  6691                           ;color.c: 169:     _delay((unsigned long)((200)*(64000000/4000.0)));
  6692  005D20  0E11               	movlw	17
  6693  005D22  6E02               	movwf	(??_LED_R+1)^0,c
  6694  005D24  0E3C               	movlw	60
  6695  005D26  6E01               	movwf	??_LED_R^0,c
  6696  005D28  0ECB               	movlw	203
  6697  005D2A                     u6147:
  6698  005D2A  2EE8               	decfsz	wreg,f,c
  6699  005D2C  D7FE               	bra	u6147
  6700  005D2E  2E01               	decfsz	??_LED_R^0,f,c
  6701  005D30  D7FC               	bra	u6147
  6702  005D32  2E02               	decfsz	(??_LED_R+1)^0,f,c
  6703  005D34  D7FA               	bra	u6147
  6704  005D36  F000               	nop	
  6705  005D38  0012               	return		;funcret
  6706  005D3A                     __end_of_LED_R:
  6707                           	callstack 0
  6708                           
  6709 ;; *************** function _LED_OFF *****************
  6710 ;; Defined at:
  6711 ;;		line 155 in file "color.c"
  6712 ;; Parameters:    Size  Location     Type
  6713 ;;		None
  6714 ;; Auto vars:     Size  Location     Type
  6715 ;;		None
  6716 ;; Return value:  Size  Location     Type
  6717 ;;                  1    wreg      void 
  6718 ;; Registers used:
  6719 ;;		wreg
  6720 ;; Tracked objects:
  6721 ;;		On entry : 0/0
  6722 ;;		On exit  : 0/0
  6723 ;;		Unchanged: 0/0
  6724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6725 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6726 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6727 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6728 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6729 ;;Total ram usage:        2 bytes
  6730 ;; Hardware stack levels used: 1
  6731 ;; Hardware stack levels required when called: 1
  6732 ;; This function calls:
  6733 ;;		Nothing
  6734 ;; This function is called by:
  6735 ;;		_calibrate_white
  6736 ;;		_main
  6737 ;; This function uses a non-reentrant model
  6738 ;;
  6739                           
  6740                           	psect	text29
  6741  005D3A                     __ptext29:
  6742                           	callstack 0
  6743  005D3A                     _LED_OFF:
  6744                           	callstack 27
  6745  005D3A                     
  6746                           ;color.c: 157:     LATGbits.LATG1 = 0;
  6747  005D3A  927F               	bcf	127,1,c	;volatile
  6748                           
  6749                           ;color.c: 158:     LATFbits.LATF7 = 0;
  6750  005D3C  9E7E               	bcf	126,7,c	;volatile
  6751                           
  6752                           ;color.c: 159:     LATAbits.LATA4 = 0;
  6753  005D3E  9879               	bcf	121,4,c	;volatile
  6754  005D40                     
  6755                           ;color.c: 160:     _delay((unsigned long)((200)*(64000000/4000.0)));
  6756  005D40  0E11               	movlw	17
  6757  005D42  6E02               	movwf	(??_LED_OFF+1)^0,c
  6758  005D44  0E3C               	movlw	60
  6759  005D46  6E01               	movwf	??_LED_OFF^0,c
  6760  005D48  0ECB               	movlw	203
  6761  005D4A                     u6157:
  6762  005D4A  2EE8               	decfsz	wreg,f,c
  6763  005D4C  D7FE               	bra	u6157
  6764  005D4E  2E01               	decfsz	??_LED_OFF^0,f,c
  6765  005D50  D7FC               	bra	u6157
  6766  005D52  2E02               	decfsz	(??_LED_OFF+1)^0,f,c
  6767  005D54  D7FA               	bra	u6157
  6768  005D56  F000               	nop	
  6769  005D58  0012               	return		;funcret
  6770  005D5A                     __end_of_LED_OFF:
  6771                           	callstack 0
  6772                           
  6773 ;; *************** function _LED_G *****************
  6774 ;; Defined at:
  6775 ;;		line 191 in file "color.c"
  6776 ;; Parameters:    Size  Location     Type
  6777 ;;		None
  6778 ;; Auto vars:     Size  Location     Type
  6779 ;;		None
  6780 ;; Return value:  Size  Location     Type
  6781 ;;                  1    wreg      void 
  6782 ;; Registers used:
  6783 ;;		wreg
  6784 ;; Tracked objects:
  6785 ;;		On entry : 0/0
  6786 ;;		On exit  : 0/0
  6787 ;;		Unchanged: 0/0
  6788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6790 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6791 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6792 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6793 ;;Total ram usage:        2 bytes
  6794 ;; Hardware stack levels used: 1
  6795 ;; Hardware stack levels required when called: 1
  6796 ;; This function calls:
  6797 ;;		Nothing
  6798 ;; This function is called by:
  6799 ;;		_color_data_collection
  6800 ;;		_calibrate_white
  6801 ;;		_detect_color
  6802 ;; This function uses a non-reentrant model
  6803 ;;
  6804                           
  6805                           	psect	text30
  6806  005D5A                     __ptext30:
  6807                           	callstack 0
  6808  005D5A                     _LED_G:
  6809                           	callstack 27
  6810  005D5A                     
  6811                           ;color.c: 193:     LATGbits.LATG1 = 0;
  6812  005D5A  927F               	bcf	127,1,c	;volatile
  6813                           
  6814                           ;color.c: 194:     LATFbits.LATF7 = 0;
  6815  005D5C  9E7E               	bcf	126,7,c	;volatile
  6816                           
  6817                           ;color.c: 195:     LATAbits.LATA4 = 1;
  6818  005D5E  8879               	bsf	121,4,c	;volatile
  6819  005D60                     
  6820                           ;color.c: 196:     _delay((unsigned long)((200)*(64000000/4000.0)));
  6821  005D60  0E11               	movlw	17
  6822  005D62  6E02               	movwf	(??_LED_G+1)^0,c
  6823  005D64  0E3C               	movlw	60
  6824  005D66  6E01               	movwf	??_LED_G^0,c
  6825  005D68  0ECB               	movlw	203
  6826  005D6A                     u6167:
  6827  005D6A  2EE8               	decfsz	wreg,f,c
  6828  005D6C  D7FE               	bra	u6167
  6829  005D6E  2E01               	decfsz	??_LED_G^0,f,c
  6830  005D70  D7FC               	bra	u6167
  6831  005D72  2E02               	decfsz	(??_LED_G+1)^0,f,c
  6832  005D74  D7FA               	bra	u6167
  6833  005D76  F000               	nop	
  6834  005D78  0012               	return		;funcret
  6835  005D7A                     __end_of_LED_G:
  6836                           	callstack 0
  6837                           
  6838 ;; *************** function _LED_B *****************
  6839 ;; Defined at:
  6840 ;;		line 182 in file "color.c"
  6841 ;; Parameters:    Size  Location     Type
  6842 ;;		None
  6843 ;; Auto vars:     Size  Location     Type
  6844 ;;		None
  6845 ;; Return value:  Size  Location     Type
  6846 ;;                  1    wreg      void 
  6847 ;; Registers used:
  6848 ;;		wreg
  6849 ;; Tracked objects:
  6850 ;;		On entry : 0/0
  6851 ;;		On exit  : 0/0
  6852 ;;		Unchanged: 0/0
  6853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6854 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6855 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6856 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6857 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6858 ;;Total ram usage:        2 bytes
  6859 ;; Hardware stack levels used: 1
  6860 ;; Hardware stack levels required when called: 1
  6861 ;; This function calls:
  6862 ;;		Nothing
  6863 ;; This function is called by:
  6864 ;;		_color_data_collection
  6865 ;;		_calibrate_white
  6866 ;;		_detect_color
  6867 ;; This function uses a non-reentrant model
  6868 ;;
  6869                           
  6870                           	psect	text31
  6871  005D7A                     __ptext31:
  6872                           	callstack 0
  6873  005D7A                     _LED_B:
  6874                           	callstack 27
  6875  005D7A                     
  6876                           ;color.c: 184:     LATGbits.LATG1 = 0;
  6877  005D7A  927F               	bcf	127,1,c	;volatile
  6878                           
  6879                           ;color.c: 185:     LATFbits.LATF7 = 1;
  6880  005D7C  8E7E               	bsf	126,7,c	;volatile
  6881                           
  6882                           ;color.c: 186:     LATAbits.LATA4 = 0;
  6883  005D7E  9879               	bcf	121,4,c	;volatile
  6884  005D80                     
  6885                           ;color.c: 187:     _delay((unsigned long)((200)*(64000000/4000.0)));
  6886  005D80  0E11               	movlw	17
  6887  005D82  6E02               	movwf	(??_LED_B+1)^0,c
  6888  005D84  0E3C               	movlw	60
  6889  005D86  6E01               	movwf	??_LED_B^0,c
  6890  005D88  0ECB               	movlw	203
  6891  005D8A                     u6177:
  6892  005D8A  2EE8               	decfsz	wreg,f,c
  6893  005D8C  D7FE               	bra	u6177
  6894  005D8E  2E01               	decfsz	??_LED_B^0,f,c
  6895  005D90  D7FC               	bra	u6177
  6896  005D92  2E02               	decfsz	(??_LED_B+1)^0,f,c
  6897  005D94  D7FA               	bra	u6177
  6898  005D96  F000               	nop	
  6899  005D98  0012               	return		;funcret
  6900  005D9A                     __end_of_LED_B:
  6901                           	callstack 0
  6902                           
  6903 ;; *************** function _amb_light_measure *****************
  6904 ;; Defined at:
  6905 ;;		line 378 in file "color.c"
  6906 ;; Parameters:    Size  Location     Type
  6907 ;;  amb             2   10[BANK0 ] PTR struct color_rgb
  6908 ;;		 -> main@rgb(8), main@amb(8), 
  6909 ;; Auto vars:     Size  Location     Type
  6910 ;;  CC_amb_3        2   22[BANK0 ] unsigned int 
  6911 ;;  CC_amb_2        2   20[BANK0 ] unsigned int 
  6912 ;;  CC_amb_1        2   18[BANK0 ] unsigned int 
  6913 ;;  CC_amb_ave      2   16[BANK0 ] unsigned int 
  6914 ;;  upper_bound     2   14[BANK0 ] unsigned int 
  6915 ;; Return value:  Size  Location     Type
  6916 ;;                  2   10[BANK0 ] unsigned int 
  6917 ;; Registers used:
  6918 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6919 ;; Tracked objects:
  6920 ;;		On entry : 0/0
  6921 ;;		On exit  : 0/0
  6922 ;;		Unchanged: 0/0
  6923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6924 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6925 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6926 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6927 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6928 ;;Total ram usage:       14 bytes
  6929 ;; Hardware stack levels used: 1
  6930 ;; Hardware stack levels required when called: 5
  6931 ;; This function calls:
  6932 ;;		_LED_C
  6933 ;;		___fldiv
  6934 ;;		___xxtofl
  6935 ;;		_color_read_Clear
  6936 ;;		_lroundf
  6937 ;;		_toggle_light
  6938 ;; This function is called by:
  6939 ;;		_main
  6940 ;;		_test_function
  6941 ;; This function uses a non-reentrant model
  6942 ;;
  6943                           
  6944                           	psect	text32
  6945  004B20                     __ptext32:
  6946                           	callstack 0
  6947  004B20                     _amb_light_measure:
  6948                           	callstack 24
  6949  004B20  0E00               	movlw	0
  6950  004B22  0100               	movlb	0	; () banked
  6951  004B24  6F75               	movwf	(amb_light_measure@CC_amb_2+1)& (0+255),b
  6952  004B26  0E00               	movlw	0
  6953  004B28  6F74               	movwf	amb_light_measure@CC_amb_2& (0+255),b
  6954  004B2A  0E00               	movlw	0
  6955  004B2C  6F77               	movwf	(amb_light_measure@CC_amb_3+1)& (0+255),b
  6956  004B2E  0E00               	movlw	0
  6957  004B30  6F76               	movwf	amb_light_measure@CC_amb_3& (0+255),b
  6958  004B32  0E00               	movlw	0
  6959  004B34  6F6F               	movwf	(amb_light_measure@upper_bound+1)& (0+255),b
  6960  004B36  0E00               	movlw	0
  6961  004B38  6F6E               	movwf	amb_light_measure@upper_bound& (0+255),b
  6962  004B3A                     
  6963                           ; BSR set to: 0
  6964                           ;color.c: 381:     toggle_light(2,2);
  6965  004B3A  0E02               	movlw	2
  6966  004B3C  6E01               	movwf	toggle_light@toggletime^0,c
  6967  004B3E  0E02               	movlw	2
  6968  004B40  EC24  F01B         	call	_toggle_light
  6969  004B44                     
  6970                           ;color.c: 382:     LED_C();
  6971  004B44  ECCD  F02E         	call	_LED_C	;wreg free
  6972  004B48                     
  6973                           ;color.c: 383:     _delay((unsigned long)((500)*(64000000/4000.0)));
  6974  004B48  0E29               	movlw	41
  6975  004B4A  0100               	movlb	0	; () banked
  6976  004B4C  6F6D               	movwf	(??_amb_light_measure+1)& (0+255),b
  6977  004B4E  0E96               	movlw	150
  6978  004B50  6F6C               	movwf	??_amb_light_measure& (0+255),b
  6979  004B52  0E7F               	movlw	127
  6980  004B54                     u6187:
  6981  004B54  2EE8               	decfsz	wreg,f,c
  6982  004B56  D7FE               	bra	u6187
  6983  004B58  2F6C               	decfsz	??_amb_light_measure& (0+255),f,b
  6984  004B5A  D7FC               	bra	u6187
  6985  004B5C  2F6D               	decfsz	(??_amb_light_measure+1)& (0+255),f,b
  6986  004B5E  D7FA               	bra	u6187
  6987  004B60                     
  6988                           ;color.c: 385:     CC_amb_1 = color_read_Clear();
  6989  004B60  EC67  F02C         	call	_color_read_Clear	;wreg free
  6990  004B64  C005  F072         	movff	?_color_read_Clear,amb_light_measure@CC_amb_1
  6991  004B68  C006  F073         	movff	?_color_read_Clear+1,amb_light_measure@CC_amb_1+1
  6992  004B6C                     
  6993                           ;color.c: 386:     _delay((unsigned long)((200)*(64000000/4000.0)));
  6994  004B6C  0E11               	movlw	17
  6995  004B6E  0100               	movlb	0	; () banked
  6996  004B70  6F6D               	movwf	(??_amb_light_measure+1)& (0+255),b
  6997  004B72  0E3C               	movlw	60
  6998  004B74  6F6C               	movwf	??_amb_light_measure& (0+255),b
  6999  004B76  0ECB               	movlw	203
  7000  004B78                     u6197:
  7001  004B78  2EE8               	decfsz	wreg,f,c
  7002  004B7A  D7FE               	bra	u6197
  7003  004B7C  2F6C               	decfsz	??_amb_light_measure& (0+255),f,b
  7004  004B7E  D7FC               	bra	u6197
  7005  004B80  2F6D               	decfsz	(??_amb_light_measure+1)& (0+255),f,b
  7006  004B82  D7FA               	bra	u6197
  7007  004B84                     
  7008                           ;color.c: 388:     CC_amb_2 = color_read_Clear();
  7009  004B84  EC67  F02C         	call	_color_read_Clear	;wreg free
  7010  004B88  C005  F074         	movff	?_color_read_Clear,amb_light_measure@CC_amb_2
  7011  004B8C  C006  F075         	movff	?_color_read_Clear+1,amb_light_measure@CC_amb_2+1
  7012  004B90                     
  7013                           ;color.c: 389:     _delay((unsigned long)((200)*(64000000/4000.0)));
  7014  004B90  0E11               	movlw	17
  7015  004B92  0100               	movlb	0	; () banked
  7016  004B94  6F6D               	movwf	(??_amb_light_measure+1)& (0+255),b
  7017  004B96  0E3C               	movlw	60
  7018  004B98  6F6C               	movwf	??_amb_light_measure& (0+255),b
  7019  004B9A  0ECB               	movlw	203
  7020  004B9C                     u6207:
  7021  004B9C  2EE8               	decfsz	wreg,f,c
  7022  004B9E  D7FE               	bra	u6207
  7023  004BA0  2F6C               	decfsz	??_amb_light_measure& (0+255),f,b
  7024  004BA2  D7FC               	bra	u6207
  7025  004BA4  2F6D               	decfsz	(??_amb_light_measure+1)& (0+255),f,b
  7026  004BA6  D7FA               	bra	u6207
  7027  004BA8                     
  7028                           ;color.c: 391:     CC_amb_3 = color_read_Clear();
  7029  004BA8  EC67  F02C         	call	_color_read_Clear	;wreg free
  7030  004BAC  C005  F076         	movff	?_color_read_Clear,amb_light_measure@CC_amb_3
  7031  004BB0  C006  F077         	movff	?_color_read_Clear+1,amb_light_measure@CC_amb_3+1
  7032  004BB4                     
  7033                           ;color.c: 392:     _delay((unsigned long)((200)*(64000000/4000.0)));
  7034  004BB4  0E11               	movlw	17
  7035  004BB6  0100               	movlb	0	; () banked
  7036  004BB8  6F6D               	movwf	(??_amb_light_measure+1)& (0+255),b
  7037  004BBA  0E3C               	movlw	60
  7038  004BBC  6F6C               	movwf	??_amb_light_measure& (0+255),b
  7039  004BBE  0ECB               	movlw	203
  7040  004BC0                     u6217:
  7041  004BC0  2EE8               	decfsz	wreg,f,c
  7042  004BC2  D7FE               	bra	u6217
  7043  004BC4  2F6C               	decfsz	??_amb_light_measure& (0+255),f,b
  7044  004BC6  D7FC               	bra	u6217
  7045  004BC8  2F6D               	decfsz	(??_amb_light_measure+1)& (0+255),f,b
  7046  004BCA  D7FA               	bra	u6217
  7047  004BCC                     
  7048                           ;color.c: 394:     CC_amb_ave = lroundf((float)(CC_amb_1 + CC_amb_2 + CC_amb_3)/3);
  7049  004BCC  0100               	movlb	0	; () banked
  7050  004BCE  5174               	movf	amb_light_measure@CC_amb_2& (0+255),w,b
  7051  004BD0  2572               	addwf	amb_light_measure@CC_amb_1& (0+255),w,b
  7052  004BD2  6F6C               	movwf	??_amb_light_measure& (0+255),b
  7053  004BD4  5175               	movf	(amb_light_measure@CC_amb_2+1)& (0+255),w,b
  7054  004BD6  2173               	addwfc	(amb_light_measure@CC_amb_1+1)& (0+255),w,b
  7055  004BD8  6F6D               	movwf	(??_amb_light_measure+1)& (0+255),b
  7056  004BDA  5176               	movf	amb_light_measure@CC_amb_3& (0+255),w,b
  7057  004BDC  276C               	addwf	??_amb_light_measure& (0+255),f,b
  7058  004BDE  5177               	movf	(amb_light_measure@CC_amb_3+1)& (0+255),w,b
  7059  004BE0  236D               	addwfc	(??_amb_light_measure+1)& (0+255),f,b
  7060  004BE2  C06C  F001         	movff	??_amb_light_measure,___xxtofl@val
  7061  004BE6  C06D  F002         	movff	??_amb_light_measure+1,___xxtofl@val+1
  7062  004BEA  6A03               	clrf	(___xxtofl@val+2)^0,c
  7063  004BEC  6A04               	clrf	(___xxtofl@val+3)^0,c
  7064  004BEE  0E00               	movlw	0
  7065  004BF0  EC20  F020         	call	___xxtofl
  7066  004BF4  C001  F00F         	movff	?___xxtofl,___fldiv@b
  7067  004BF8  C002  F010         	movff	?___xxtofl+1,___fldiv@b+1
  7068  004BFC  C003  F011         	movff	?___xxtofl+2,___fldiv@b+2
  7069  004C00  C004  F012         	movff	?___xxtofl+3,___fldiv@b+3
  7070  004C04  0E00               	movlw	0
  7071  004C06  6E13               	movwf	___fldiv@a^0,c
  7072  004C08  0E00               	movlw	0
  7073  004C0A  6E14               	movwf	(___fldiv@a+1)^0,c
  7074  004C0C  0E40               	movlw	64
  7075  004C0E  6E15               	movwf	(___fldiv@a+2)^0,c
  7076  004C10  0E40               	movlw	64
  7077  004C12  6E16               	movwf	(___fldiv@a+3)^0,c
  7078  004C14  EC58  F013         	call	___fldiv	;wreg free
  7079  004C18  C00F  F066         	movff	?___fldiv,lroundf@x
  7080  004C1C  C010  F067         	movff	?___fldiv+1,lroundf@x+1
  7081  004C20  C011  F068         	movff	?___fldiv+2,lroundf@x+2
  7082  004C24  C012  F069         	movff	?___fldiv+3,lroundf@x+3
  7083  004C28  ECB4  F02D         	call	_lroundf	;wreg free
  7084  004C2C  C066  F070         	movff	?_lroundf,amb_light_measure@CC_amb_ave
  7085  004C30  C067  F071         	movff	?_lroundf+1,amb_light_measure@CC_amb_ave+1
  7086  004C34                     
  7087                           ;color.c: 396:     toggle_light(2,2);
  7088  004C34  0E02               	movlw	2
  7089  004C36  6E01               	movwf	toggle_light@toggletime^0,c
  7090  004C38  0E02               	movlw	2
  7091  004C3A  EC24  F01B         	call	_toggle_light
  7092  004C3E                     
  7093                           ;color.c: 398:     return CC_amb_ave;
  7094  004C3E  C070  F06A         	movff	amb_light_measure@CC_amb_ave,?_amb_light_measure
  7095  004C42  C071  F06B         	movff	amb_light_measure@CC_amb_ave+1,?_amb_light_measure+1
  7096  004C46  0012               	return		;funcret
  7097  004C48                     __end_of_amb_light_measure:
  7098                           	callstack 0
  7099                           
  7100 ;; *************** function _lroundf *****************
  7101 ;; Defined at:
  7102 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\lroundf.c"
  7103 ;; Parameters:    Size  Location     Type
  7104 ;;  x               4    6[BANK0 ] float 
  7105 ;; Auto vars:     Size  Location     Type
  7106 ;;		None
  7107 ;; Return value:  Size  Location     Type
  7108 ;;                  4    6[BANK0 ] long 
  7109 ;; Registers used:
  7110 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7111 ;; Tracked objects:
  7112 ;;		On entry : 0/0
  7113 ;;		On exit  : 0/0
  7114 ;;		Unchanged: 0/0
  7115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7116 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7117 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7118 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7119 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7120 ;;Total ram usage:        4 bytes
  7121 ;; Hardware stack levels used: 1
  7122 ;; Hardware stack levels required when called: 4
  7123 ;; This function calls:
  7124 ;;		___fltol
  7125 ;;		_roundf
  7126 ;; This function is called by:
  7127 ;;		_detect_color
  7128 ;;		_amb_light_measure
  7129 ;;		_distance_measure
  7130 ;;		_check_color_reading
  7131 ;; This function uses a non-reentrant model
  7132 ;;
  7133                           
  7134                           	psect	text33
  7135  005B68                     __ptext33:
  7136                           	callstack 0
  7137  005B68                     _lroundf:
  7138                           	callstack 24
  7139  005B68  C066  F041         	movff	lroundf@x,roundf@x
  7140  005B6C  C067  F042         	movff	lroundf@x+1,roundf@x+1
  7141  005B70  C068  F043         	movff	lroundf@x+2,roundf@x+2
  7142  005B74  C069  F044         	movff	lroundf@x+3,roundf@x+3
  7143  005B78  EC81  F011         	call	_roundf	;wreg free
  7144  005B7C  C041  F05B         	movff	?_roundf,___fltol@f1
  7145  005B80  C042  F05C         	movff	?_roundf+1,___fltol@f1+1
  7146  005B84  C043  F05D         	movff	?_roundf+2,___fltol@f1+2
  7147  005B88  C044  F05E         	movff	?_roundf+3,___fltol@f1+3
  7148  005B8C  EC24  F026         	call	___fltol	;wreg free
  7149  005B90  C05B  F066         	movff	?___fltol,?_lroundf
  7150  005B94  C05C  F067         	movff	?___fltol+1,?_lroundf+1
  7151  005B98  C05D  F068         	movff	?___fltol+2,?_lroundf+2
  7152  005B9C  C05E  F069         	movff	?___fltol+3,?_lroundf+3
  7153  005BA0  0012               	return		;funcret
  7154  005BA2                     __end_of_lroundf:
  7155                           	callstack 0
  7156                           
  7157 ;; *************** function _roundf *****************
  7158 ;; Defined at:
  7159 ;;		line 12 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\roundf.c"
  7160 ;; Parameters:    Size  Location     Type
  7161 ;;  x               4   64[COMRAM] float 
  7162 ;; Auto vars:     Size  Location     Type
  7163 ;;  y               4   86[COMRAM] float 
  7164 ;;  u               4   82[COMRAM] struct .
  7165 ;;  e               2   76[COMRAM] int 
  7166 ;; Return value:  Size  Location     Type
  7167 ;;                  4   64[COMRAM] float 
  7168 ;; Registers used:
  7169 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7170 ;; Tracked objects:
  7171 ;;		On entry : 0/0
  7172 ;;		On exit  : 0/0
  7173 ;;		Unchanged: 0/0
  7174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7175 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7176 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7177 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7178 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7179 ;;Total ram usage:       26 bytes
  7180 ;; Hardware stack levels used: 1
  7181 ;; Hardware stack levels required when called: 3
  7182 ;; This function calls:
  7183 ;;		___fladd
  7184 ;;		___flge
  7185 ;;		___flmul
  7186 ;;		___flneg
  7187 ;;		___flsub
  7188 ;; This function is called by:
  7189 ;;		_lroundf
  7190 ;; This function uses a non-reentrant model
  7191 ;;
  7192                           
  7193                           	psect	text34
  7194  002302                     __ptext34:
  7195                           	callstack 0
  7196  002302                     _roundf:
  7197                           	callstack 24
  7198  002302  C13A  F053         	movff	roundf@F527,roundf@u
  7199  002306  C13B  F054         	movff	roundf@F527+1,roundf@u+1
  7200  00230A  C13C  F055         	movff	roundf@F527+2,roundf@u+2
  7201  00230E  C13D  F056         	movff	roundf@F527+3,roundf@u+3
  7202  002312  C041  F053         	movff	roundf@x,roundf@u
  7203  002316  C042  F054         	movff	roundf@x+1,roundf@u+1
  7204  00231A  C043  F055         	movff	roundf@x+2,roundf@u+2
  7205  00231E  C044  F056         	movff	roundf@x+3,roundf@u+3
  7206  002322  C053  F045         	movff	roundf@u,??_roundf
  7207  002326  C054  F046         	movff	roundf@u+1,??_roundf+1
  7208  00232A  C055  F047         	movff	roundf@u+2,??_roundf+2
  7209  00232E  C056  F048         	movff	roundf@u+3,??_roundf+3
  7210  002332  0E18               	movlw	24
  7211  002334  EFA1  F011         	goto	u4380
  7212  002338                     u4385:
  7213  002338  90D8               	bcf	status,0,c
  7214  00233A  3248               	rrcf	(??_roundf+3)^0,f,c
  7215  00233C  3247               	rrcf	(??_roundf+2)^0,f,c
  7216  00233E  3246               	rrcf	(??_roundf+1)^0,f,c
  7217  002340  3245               	rrcf	??_roundf^0,f,c
  7218  002342                     u4380:
  7219  002342  2EE8               	decfsz	wreg,f,c
  7220  002344  EF9C  F011         	goto	u4385
  7221  002348  5045               	movf	??_roundf^0,w,c
  7222  00234A  6E4D               	movwf	roundf@e^0,c
  7223  00234C  6A4E               	clrf	(roundf@e+1)^0,c
  7224  00234E  BE4E               	btfsc	(roundf@e+1)^0,7,c
  7225  002350  EFB3  F011         	goto	u4391
  7226  002354  504E               	movf	(roundf@e+1)^0,w,c
  7227  002356  E109               	bnz	u4390
  7228  002358  0E96               	movlw	150
  7229  00235A  5C4D               	subwf	roundf@e^0,w,c
  7230  00235C  A0D8               	btfss	status,0,c
  7231  00235E  EFB3  F011         	goto	u4391
  7232  002362  EFB5  F011         	goto	u4390
  7233  002366                     u4391:
  7234  002366  EFBF  F011         	goto	l4365
  7235  00236A                     u4390:
  7236  00236A  C041  F041         	movff	roundf@x,?_roundf
  7237  00236E  C042  F042         	movff	roundf@x+1,?_roundf+1
  7238  002372  C043  F043         	movff	roundf@x+2,?_roundf+2
  7239  002376  C044  F044         	movff	roundf@x+3,?_roundf+3
  7240  00237A  EF57  F013         	goto	l1482
  7241  00237E                     l4365:
  7242  00237E  C053  F045         	movff	roundf@u,??_roundf
  7243  002382  C054  F046         	movff	roundf@u+1,??_roundf+1
  7244  002386  C055  F047         	movff	roundf@u+2,??_roundf+2
  7245  00238A  C056  F048         	movff	roundf@u+3,??_roundf+3
  7246  00238E  0E20               	movlw	32
  7247  002390  EFCF  F011         	goto	u4400
  7248  002394                     u4405:
  7249  002394  90D8               	bcf	status,0,c
  7250  002396  3248               	rrcf	(??_roundf+3)^0,f,c
  7251  002398  3247               	rrcf	(??_roundf+2)^0,f,c
  7252  00239A  3246               	rrcf	(??_roundf+1)^0,f,c
  7253  00239C  3245               	rrcf	??_roundf^0,f,c
  7254  00239E                     u4400:
  7255  00239E  2EE8               	decfsz	wreg,f,c
  7256  0023A0  EFCA  F011         	goto	u4405
  7257  0023A4  5045               	movf	??_roundf^0,w,c
  7258  0023A6  1046               	iorwf	(??_roundf+1)^0,w,c
  7259  0023A8  1047               	iorwf	(??_roundf+2)^0,w,c
  7260  0023AA  1048               	iorwf	(??_roundf+3)^0,w,c
  7261  0023AC  B4D8               	btfsc	status,2,c
  7262  0023AE  EFDB  F011         	goto	u4411
  7263  0023B2  EFDD  F011         	goto	u4410
  7264  0023B6                     u4411:
  7265  0023B6  EFEF  F011         	goto	l4369
  7266  0023BA                     u4410:
  7267  0023BA  C041  F001         	movff	roundf@x,___flneg@f1
  7268  0023BE  C042  F002         	movff	roundf@x+1,___flneg@f1+1
  7269  0023C2  C043  F003         	movff	roundf@x+2,___flneg@f1+2
  7270  0023C6  C044  F004         	movff	roundf@x+3,___flneg@f1+3
  7271  0023CA  ECD1  F02D         	call	___flneg	;wreg free
  7272  0023CE  C001  F041         	movff	?___flneg,roundf@x
  7273  0023D2  C002  F042         	movff	?___flneg+1,roundf@x+1
  7274  0023D6  C003  F043         	movff	?___flneg+2,roundf@x+2
  7275  0023DA  C004  F044         	movff	?___flneg+3,roundf@x+3
  7276  0023DE                     l4369:
  7277  0023DE  BE4E               	btfsc	(roundf@e+1)^0,7,c
  7278  0023E0  EFFD  F011         	goto	u4420
  7279  0023E4  504E               	movf	(roundf@e+1)^0,w,c
  7280  0023E6  E107               	bnz	u4421
  7281  0023E8  0E7E               	movlw	126
  7282  0023EA  5C4D               	subwf	roundf@e^0,w,c
  7283  0023EC  B0D8               	btfsc	status,0,c
  7284  0023EE  EFFB  F011         	goto	u4421
  7285  0023F2  EFFD  F011         	goto	u4420
  7286  0023F6                     u4421:
  7287  0023F6  EF19  F012         	goto	l4375
  7288  0023FA                     u4420:
  7289  0023FA  C053  F028         	movff	roundf@u,___flmul@b
  7290  0023FE  C054  F029         	movff	roundf@u+1,___flmul@b+1
  7291  002402  C055  F02A         	movff	roundf@u+2,___flmul@b+2
  7292  002406  C056  F02B         	movff	roundf@u+3,___flmul@b+3
  7293  00240A  0E00               	movlw	0
  7294  00240C  6E2C               	movwf	___flmul@a^0,c
  7295  00240E  0E00               	movlw	0
  7296  002410  6E2D               	movwf	(___flmul@a+1)^0,c
  7297  002412  0E00               	movlw	0
  7298  002414  6E2E               	movwf	(___flmul@a+2)^0,c
  7299  002416  0E00               	movlw	0
  7300  002418  6E2F               	movwf	(___flmul@a+3)^0,c
  7301  00241A  EC6C  F00F         	call	___flmul	;wreg free
  7302  00241E  C028  F041         	movff	?___flmul,?_roundf
  7303  002422  C029  F042         	movff	?___flmul+1,?_roundf+1
  7304  002426  C02A  F043         	movff	?___flmul+2,?_roundf+2
  7305  00242A  C02B  F044         	movff	?___flmul+3,?_roundf+3
  7306  00242E  EF57  F013         	goto	l1482
  7307  002432                     l4375:
  7308  002432  0E00               	movlw	0
  7309  002434  6E05               	movwf	___fladd@a^0,c
  7310  002436  0E00               	movlw	0
  7311  002438  6E06               	movwf	(___fladd@a+1)^0,c
  7312  00243A  0E00               	movlw	0
  7313  00243C  6E07               	movwf	(___fladd@a+2)^0,c
  7314  00243E  0E4B               	movlw	75
  7315  002440  6E08               	movwf	(___fladd@a+3)^0,c
  7316  002442  C041  F001         	movff	roundf@x,___fladd@b
  7317  002446  C042  F002         	movff	roundf@x+1,___fladd@b+1
  7318  00244A  C043  F003         	movff	roundf@x+2,___fladd@b+2
  7319  00244E  C044  F004         	movff	roundf@x+3,___fladd@b+3
  7320  002452  EC0C  F00D         	call	___fladd	;wreg free
  7321  002456  C001  F04F         	movff	?___fladd,_roundf$3207
  7322  00245A  C002  F050         	movff	?___fladd+1,_roundf$3207+1
  7323  00245E  C003  F051         	movff	?___fladd+2,_roundf$3207+2
  7324  002462  C004  F052         	movff	?___fladd+3,_roundf$3207+3
  7325  002466  0E00               	movlw	0
  7326  002468  6E05               	movwf	___fladd@a^0,c
  7327  00246A  0E00               	movlw	0
  7328  00246C  6E06               	movwf	(___fladd@a+1)^0,c
  7329  00246E  0E00               	movlw	0
  7330  002470  6E07               	movwf	(___fladd@a+2)^0,c
  7331  002472  0ECB               	movlw	203
  7332  002474  6E08               	movwf	(___fladd@a+3)^0,c
  7333  002476  C04F  F001         	movff	_roundf$3207,___fladd@b
  7334  00247A  C050  F002         	movff	_roundf$3207+1,___fladd@b+1
  7335  00247E  C051  F003         	movff	_roundf$3207+2,___fladd@b+2
  7336  002482  C052  F004         	movff	_roundf$3207+3,___fladd@b+3
  7337  002486  EC0C  F00D         	call	___fladd	;wreg free
  7338  00248A  C001  F049         	movff	?___fladd,_roundf$3208
  7339  00248E  C002  F04A         	movff	?___fladd+1,_roundf$3208+1
  7340  002492  C003  F04B         	movff	?___fladd+2,_roundf$3208+2
  7341  002496  C004  F04C         	movff	?___fladd+3,_roundf$3208+3
  7342  00249A  C049  F011         	movff	_roundf$3208,___flsub@b
  7343  00249E  C04A  F012         	movff	_roundf$3208+1,___flsub@b+1
  7344  0024A2  C04B  F013         	movff	_roundf$3208+2,___flsub@b+2
  7345  0024A6  C04C  F014         	movff	_roundf$3208+3,___flsub@b+3
  7346  0024AA  C041  F015         	movff	roundf@x,___flsub@a
  7347  0024AE  C042  F016         	movff	roundf@x+1,___flsub@a+1
  7348  0024B2  C043  F017         	movff	roundf@x+2,___flsub@a+2
  7349  0024B6  C044  F018         	movff	roundf@x+3,___flsub@a+3
  7350  0024BA  EC8F  F02C         	call	___flsub	;wreg free
  7351  0024BE  C011  F057         	movff	?___flsub,roundf@y
  7352  0024C2  C012  F058         	movff	?___flsub+1,roundf@y+1
  7353  0024C6  C013  F059         	movff	?___flsub+2,roundf@y+2
  7354  0024CA  C014  F05A         	movff	?___flsub+3,roundf@y+3
  7355  0024CE  0E00               	movlw	0
  7356  0024D0  6E01               	movwf	___flge@ff1^0,c
  7357  0024D2  0E00               	movlw	0
  7358  0024D4  6E02               	movwf	(___flge@ff1+1)^0,c
  7359  0024D6  0E00               	movlw	0
  7360  0024D8  6E03               	movwf	(___flge@ff1+2)^0,c
  7361  0024DA  0E3F               	movlw	63
  7362  0024DC  6E04               	movwf	(___flge@ff1+3)^0,c
  7363  0024DE  C057  F005         	movff	roundf@y,___flge@ff2
  7364  0024E2  C058  F006         	movff	roundf@y+1,___flge@ff2+1
  7365  0024E6  C059  F007         	movff	roundf@y+2,___flge@ff2+2
  7366  0024EA  C05A  F008         	movff	roundf@y+3,___flge@ff2+3
  7367  0024EE  ECA8  F026         	call	___flge	;wreg free
  7368  0024F2  B0D8               	btfsc	status,0,c
  7369  0024F4  EF7E  F012         	goto	u4431
  7370  0024F8  EF80  F012         	goto	u4430
  7371  0024FC                     u4431:
  7372  0024FC  EFB6  F012         	goto	l4379
  7373  002500                     u4430:
  7374  002500  C041  F005         	movff	roundf@x,___fladd@a
  7375  002504  C042  F006         	movff	roundf@x+1,___fladd@a+1
  7376  002508  C043  F007         	movff	roundf@x+2,___fladd@a+2
  7377  00250C  C044  F008         	movff	roundf@x+3,___fladd@a+3
  7378  002510  C057  F001         	movff	roundf@y,___fladd@b
  7379  002514  C058  F002         	movff	roundf@y+1,___fladd@b+1
  7380  002518  C059  F003         	movff	roundf@y+2,___fladd@b+2
  7381  00251C  C05A  F004         	movff	roundf@y+3,___fladd@b+3
  7382  002520  EC0C  F00D         	call	___fladd	;wreg free
  7383  002524  C001  F04F         	movff	?___fladd,_roundf$3207
  7384  002528  C002  F050         	movff	?___fladd+1,_roundf$3207+1
  7385  00252C  C003  F051         	movff	?___fladd+2,_roundf$3207+2
  7386  002530  C004  F052         	movff	?___fladd+3,_roundf$3207+3
  7387  002534  C04F  F001         	movff	_roundf$3207,___fladd@b
  7388  002538  C050  F002         	movff	_roundf$3207+1,___fladd@b+1
  7389  00253C  C051  F003         	movff	_roundf$3207+2,___fladd@b+2
  7390  002540  C052  F004         	movff	_roundf$3207+3,___fladd@b+3
  7391  002544  0E00               	movlw	0
  7392  002546  6E05               	movwf	___fladd@a^0,c
  7393  002548  0E00               	movlw	0
  7394  00254A  6E06               	movwf	(___fladd@a+1)^0,c
  7395  00254C  0E80               	movlw	128
  7396  00254E  6E07               	movwf	(___fladd@a+2)^0,c
  7397  002550  0EBF               	movlw	191
  7398  002552  6E08               	movwf	(___fladd@a+3)^0,c
  7399  002554  EC0C  F00D         	call	___fladd	;wreg free
  7400  002558  C001  F057         	movff	?___fladd,roundf@y
  7401  00255C  C002  F058         	movff	?___fladd+1,roundf@y+1
  7402  002560  C003  F059         	movff	?___fladd+2,roundf@y+2
  7403  002564  C004  F05A         	movff	?___fladd+3,roundf@y+3
  7404  002568  EF1F  F013         	goto	l4385
  7405  00256C                     l4379:
  7406  00256C  0E00               	movlw	0
  7407  00256E  6E01               	movwf	___flge@ff1^0,c
  7408  002570  0E00               	movlw	0
  7409  002572  6E02               	movwf	(___flge@ff1+1)^0,c
  7410  002574  0E00               	movlw	0
  7411  002576  6E03               	movwf	(___flge@ff1+2)^0,c
  7412  002578  0EBF               	movlw	191
  7413  00257A  6E04               	movwf	(___flge@ff1+3)^0,c
  7414  00257C  C057  F005         	movff	roundf@y,___flge@ff2
  7415  002580  C058  F006         	movff	roundf@y+1,___flge@ff2+1
  7416  002584  C059  F007         	movff	roundf@y+2,___flge@ff2+2
  7417  002588  C05A  F008         	movff	roundf@y+3,___flge@ff2+3
  7418  00258C  ECA8  F026         	call	___flge	;wreg free
  7419  002590  A0D8               	btfss	status,0,c
  7420  002592  EFCD  F012         	goto	u4441
  7421  002596  EFCF  F012         	goto	u4440
  7422  00259A                     u4441:
  7423  00259A  EF05  F013         	goto	l4383
  7424  00259E                     u4440:
  7425  00259E  C041  F005         	movff	roundf@x,___fladd@a
  7426  0025A2  C042  F006         	movff	roundf@x+1,___fladd@a+1
  7427  0025A6  C043  F007         	movff	roundf@x+2,___fladd@a+2
  7428  0025AA  C044  F008         	movff	roundf@x+3,___fladd@a+3
  7429  0025AE  C057  F001         	movff	roundf@y,___fladd@b
  7430  0025B2  C058  F002         	movff	roundf@y+1,___fladd@b+1
  7431  0025B6  C059  F003         	movff	roundf@y+2,___fladd@b+2
  7432  0025BA  C05A  F004         	movff	roundf@y+3,___fladd@b+3
  7433  0025BE  EC0C  F00D         	call	___fladd	;wreg free
  7434  0025C2  C001  F04F         	movff	?___fladd,_roundf$3207
  7435  0025C6  C002  F050         	movff	?___fladd+1,_roundf$3207+1
  7436  0025CA  C003  F051         	movff	?___fladd+2,_roundf$3207+2
  7437  0025CE  C004  F052         	movff	?___fladd+3,_roundf$3207+3
  7438  0025D2  C04F  F001         	movff	_roundf$3207,___fladd@b
  7439  0025D6  C050  F002         	movff	_roundf$3207+1,___fladd@b+1
  7440  0025DA  C051  F003         	movff	_roundf$3207+2,___fladd@b+2
  7441  0025DE  C052  F004         	movff	_roundf$3207+3,___fladd@b+3
  7442  0025E2  0E00               	movlw	0
  7443  0025E4  6E05               	movwf	___fladd@a^0,c
  7444  0025E6  0E00               	movlw	0
  7445  0025E8  6E06               	movwf	(___fladd@a+1)^0,c
  7446  0025EA  0E80               	movlw	128
  7447  0025EC  6E07               	movwf	(___fladd@a+2)^0,c
  7448  0025EE  0E3F               	movlw	63
  7449  0025F0  6E08               	movwf	(___fladd@a+3)^0,c
  7450  0025F2  EC0C  F00D         	call	___fladd	;wreg free
  7451  0025F6  C001  F057         	movff	?___fladd,roundf@y
  7452  0025FA  C002  F058         	movff	?___fladd+1,roundf@y+1
  7453  0025FE  C003  F059         	movff	?___fladd+2,roundf@y+2
  7454  002602  C004  F05A         	movff	?___fladd+3,roundf@y+3
  7455  002606  EF1F  F013         	goto	l4385
  7456  00260A                     l4383:
  7457  00260A  C057  F001         	movff	roundf@y,___fladd@b
  7458  00260E  C058  F002         	movff	roundf@y+1,___fladd@b+1
  7459  002612  C059  F003         	movff	roundf@y+2,___fladd@b+2
  7460  002616  C05A  F004         	movff	roundf@y+3,___fladd@b+3
  7461  00261A  C041  F005         	movff	roundf@x,___fladd@a
  7462  00261E  C042  F006         	movff	roundf@x+1,___fladd@a+1
  7463  002622  C043  F007         	movff	roundf@x+2,___fladd@a+2
  7464  002626  C044  F008         	movff	roundf@x+3,___fladd@a+3
  7465  00262A  EC0C  F00D         	call	___fladd	;wreg free
  7466  00262E  C001  F057         	movff	?___fladd,roundf@y
  7467  002632  C002  F058         	movff	?___fladd+1,roundf@y+1
  7468  002636  C003  F059         	movff	?___fladd+2,roundf@y+2
  7469  00263A  C004  F05A         	movff	?___fladd+3,roundf@y+3
  7470  00263E                     l4385:
  7471  00263E  C053  F045         	movff	roundf@u,??_roundf
  7472  002642  C054  F046         	movff	roundf@u+1,??_roundf+1
  7473  002646  C055  F047         	movff	roundf@u+2,??_roundf+2
  7474  00264A  C056  F048         	movff	roundf@u+3,??_roundf+3
  7475  00264E  0E20               	movlw	32
  7476  002650  EF2F  F013         	goto	u4450
  7477  002654                     u4455:
  7478  002654  90D8               	bcf	status,0,c
  7479  002656  3248               	rrcf	(??_roundf+3)^0,f,c
  7480  002658  3247               	rrcf	(??_roundf+2)^0,f,c
  7481  00265A  3246               	rrcf	(??_roundf+1)^0,f,c
  7482  00265C  3245               	rrcf	??_roundf^0,f,c
  7483  00265E                     u4450:
  7484  00265E  2EE8               	decfsz	wreg,f,c
  7485  002660  EF2A  F013         	goto	u4455
  7486  002664  5045               	movf	??_roundf^0,w,c
  7487  002666  1046               	iorwf	(??_roundf+1)^0,w,c
  7488  002668  1047               	iorwf	(??_roundf+2)^0,w,c
  7489  00266A  1048               	iorwf	(??_roundf+3)^0,w,c
  7490  00266C  B4D8               	btfsc	status,2,c
  7491  00266E  EF3B  F013         	goto	u4461
  7492  002672  EF3D  F013         	goto	u4460
  7493  002676                     u4461:
  7494  002676  EF4F  F013         	goto	l4389
  7495  00267A                     u4460:
  7496  00267A  C057  F001         	movff	roundf@y,___flneg@f1
  7497  00267E  C058  F002         	movff	roundf@y+1,___flneg@f1+1
  7498  002682  C059  F003         	movff	roundf@y+2,___flneg@f1+2
  7499  002686  C05A  F004         	movff	roundf@y+3,___flneg@f1+3
  7500  00268A  ECD1  F02D         	call	___flneg	;wreg free
  7501  00268E  C001  F057         	movff	?___flneg,roundf@y
  7502  002692  C002  F058         	movff	?___flneg+1,roundf@y+1
  7503  002696  C003  F059         	movff	?___flneg+2,roundf@y+2
  7504  00269A  C004  F05A         	movff	?___flneg+3,roundf@y+3
  7505  00269E                     l4389:
  7506  00269E  C057  F041         	movff	roundf@y,?_roundf
  7507  0026A2  C058  F042         	movff	roundf@y+1,?_roundf+1
  7508  0026A6  C059  F043         	movff	roundf@y+2,?_roundf+2
  7509  0026AA  C05A  F044         	movff	roundf@y+3,?_roundf+3
  7510  0026AE                     l1482:
  7511  0026AE  0012               	return		;funcret
  7512  0026B0                     __end_of_roundf:
  7513                           	callstack 0
  7514                           
  7515 ;; *************** function ___flsub *****************
  7516 ;; Defined at:
  7517 ;;		line 245 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\sprcadd.c"
  7518 ;; Parameters:    Size  Location     Type
  7519 ;;  b               4   16[COMRAM] float 
  7520 ;;  a               4   20[COMRAM] float 
  7521 ;; Auto vars:     Size  Location     Type
  7522 ;;		None
  7523 ;; Return value:  Size  Location     Type
  7524 ;;                  4   16[COMRAM] float 
  7525 ;; Registers used:
  7526 ;;		wreg, status,2, status,0, cstack
  7527 ;; Tracked objects:
  7528 ;;		On entry : 0/0
  7529 ;;		On exit  : 0/0
  7530 ;;		Unchanged: 0/0
  7531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7532 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7533 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7534 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7535 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7536 ;;Total ram usage:        8 bytes
  7537 ;; Hardware stack levels used: 1
  7538 ;; Hardware stack levels required when called: 2
  7539 ;; This function calls:
  7540 ;;		___fladd
  7541 ;; This function is called by:
  7542 ;;		_roundf
  7543 ;; This function uses a non-reentrant model
  7544 ;;
  7545                           
  7546                           	psect	text35
  7547  00591E                     __ptext35:
  7548                           	callstack 0
  7549  00591E                     ___flsub:
  7550                           	callstack 24
  7551  00591E  0E00               	movlw	0
  7552  005920  1A15               	xorwf	___flsub@a^0,f,c
  7553  005922  0E00               	movlw	0
  7554  005924  1A16               	xorwf	(___flsub@a+1)^0,f,c
  7555  005926  0E00               	movlw	0
  7556  005928  1A17               	xorwf	(___flsub@a+2)^0,f,c
  7557  00592A  0E80               	movlw	128
  7558  00592C  1A18               	xorwf	(___flsub@a+3)^0,f,c
  7559  00592E  C011  F001         	movff	___flsub@b,___fladd@b
  7560  005932  C012  F002         	movff	___flsub@b+1,___fladd@b+1
  7561  005936  C013  F003         	movff	___flsub@b+2,___fladd@b+2
  7562  00593A  C014  F004         	movff	___flsub@b+3,___fladd@b+3
  7563  00593E  C015  F005         	movff	___flsub@a,___fladd@a
  7564  005942  C016  F006         	movff	___flsub@a+1,___fladd@a+1
  7565  005946  C017  F007         	movff	___flsub@a+2,___fladd@a+2
  7566  00594A  C018  F008         	movff	___flsub@a+3,___fladd@a+3
  7567  00594E  EC0C  F00D         	call	___fladd	;wreg free
  7568  005952  C001  F011         	movff	?___fladd,?___flsub
  7569  005956  C002  F012         	movff	?___fladd+1,?___flsub+1
  7570  00595A  C003  F013         	movff	?___fladd+2,?___flsub+2
  7571  00595E  C004  F014         	movff	?___fladd+3,?___flsub+3
  7572  005962  0012               	return		;funcret
  7573  005964                     __end_of___flsub:
  7574                           	callstack 0
  7575                           
  7576 ;; *************** function ___fladd *****************
  7577 ;; Defined at:
  7578 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\sprcadd.c"
  7579 ;; Parameters:    Size  Location     Type
  7580 ;;  b               4    0[COMRAM] float 
  7581 ;;  a               4    4[COMRAM] float 
  7582 ;; Auto vars:     Size  Location     Type
  7583 ;;  grs             1   15[COMRAM] unsigned char 
  7584 ;;  bexp            1   14[COMRAM] unsigned char 
  7585 ;;  aexp            1   13[COMRAM] unsigned char 
  7586 ;;  signs           1   12[COMRAM] unsigned char 
  7587 ;; Return value:  Size  Location     Type
  7588 ;;                  4    0[COMRAM] unsigned char 
  7589 ;; Registers used:
  7590 ;;		wreg, status,2, status,0
  7591 ;; Tracked objects:
  7592 ;;		On entry : 0/0
  7593 ;;		On exit  : 0/0
  7594 ;;		Unchanged: 0/0
  7595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7596 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7597 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7598 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7599 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7600 ;;Total ram usage:       16 bytes
  7601 ;; Hardware stack levels used: 1
  7602 ;; Hardware stack levels required when called: 1
  7603 ;; This function calls:
  7604 ;;		Nothing
  7605 ;; This function is called by:
  7606 ;;		___flsub
  7607 ;;		_roundf
  7608 ;; This function uses a non-reentrant model
  7609 ;;
  7610                           
  7611                           	psect	text36
  7612  001A18                     __ptext36:
  7613                           	callstack 0
  7614  001A18                     ___fladd:
  7615                           	callstack 24
  7616  001A18  5004               	movf	(___fladd@b+3)^0,w,c
  7617  001A1A  0B80               	andlw	128
  7618  001A1C  6E0D               	movwf	___fladd@signs^0,c
  7619  001A1E  5004               	movf	(___fladd@b+3)^0,w,c
  7620  001A20  2404               	addwf	(___fladd@b+3)^0,w,c
  7621  001A22  6E0F               	movwf	___fladd@bexp^0,c
  7622  001A24  AE03               	btfss	(___fladd@b+2)^0,7,c
  7623  001A26  EF17  F00D         	goto	u3381
  7624  001A2A  EF19  F00D         	goto	u3380
  7625  001A2E                     u3381:
  7626  001A2E  EF1A  F00D         	goto	l3711
  7627  001A32                     u3380:
  7628  001A32  800F               	bsf	___fladd@bexp^0,0,c
  7629  001A34                     l3711:
  7630  001A34  500F               	movf	___fladd@bexp^0,w,c
  7631  001A36  B4D8               	btfsc	status,2,c
  7632  001A38  EF20  F00D         	goto	u3391
  7633  001A3C  EF22  F00D         	goto	u3390
  7634  001A40                     u3391:
  7635  001A40  EF37  F00D         	goto	l3721
  7636  001A44                     u3390:
  7637  001A44  280F               	incf	___fladd@bexp^0,w,c
  7638  001A46  A4D8               	btfss	status,2,c
  7639  001A48  EF28  F00D         	goto	u3401
  7640  001A4C  EF2A  F00D         	goto	u3400
  7641  001A50                     u3401:
  7642  001A50  EF32  F00D         	goto	l3717
  7643  001A54                     u3400:
  7644  001A54  0E00               	movlw	0
  7645  001A56  6E01               	movwf	___fladd@b^0,c
  7646  001A58  0E00               	movlw	0
  7647  001A5A  6E02               	movwf	(___fladd@b+1)^0,c
  7648  001A5C  0E00               	movlw	0
  7649  001A5E  6E03               	movwf	(___fladd@b+2)^0,c
  7650  001A60  0E00               	movlw	0
  7651  001A62  6E04               	movwf	(___fladd@b+3)^0,c
  7652  001A64                     l3717:
  7653  001A64  8E03               	bsf	(___fladd@b+2)^0,7,c
  7654  001A66  0E00               	movlw	0
  7655  001A68  6E04               	movwf	(___fladd@b+3)^0,c
  7656  001A6A  EF3F  F00D         	goto	l3723
  7657  001A6E                     l3721:
  7658  001A6E  0E00               	movlw	0
  7659  001A70  6E01               	movwf	___fladd@b^0,c
  7660  001A72  0E00               	movlw	0
  7661  001A74  6E02               	movwf	(___fladd@b+1)^0,c
  7662  001A76  0E00               	movlw	0
  7663  001A78  6E03               	movwf	(___fladd@b+2)^0,c
  7664  001A7A  0E00               	movlw	0
  7665  001A7C  6E04               	movwf	(___fladd@b+3)^0,c
  7666  001A7E                     l3723:
  7667  001A7E  5008               	movf	(___fladd@a+3)^0,w,c
  7668  001A80  0B80               	andlw	128
  7669  001A82  6E0E               	movwf	___fladd@aexp^0,c
  7670  001A84  500D               	movf	___fladd@signs^0,w,c
  7671  001A86  180E               	xorwf	___fladd@aexp^0,w,c
  7672  001A88  B4D8               	btfsc	status,2,c
  7673  001A8A  EF49  F00D         	goto	u3411
  7674  001A8E  EF4B  F00D         	goto	u3410
  7675  001A92                     u3411:
  7676  001A92  EF4C  F00D         	goto	l3729
  7677  001A96                     u3410:
  7678  001A96  8C0D               	bsf	___fladd@signs^0,6,c
  7679  001A98                     l3729:
  7680  001A98  5008               	movf	(___fladd@a+3)^0,w,c
  7681  001A9A  2408               	addwf	(___fladd@a+3)^0,w,c
  7682  001A9C  6E0E               	movwf	___fladd@aexp^0,c
  7683  001A9E  AE07               	btfss	(___fladd@a+2)^0,7,c
  7684  001AA0  EF54  F00D         	goto	u3421
  7685  001AA4  EF56  F00D         	goto	u3420
  7686  001AA8                     u3421:
  7687  001AA8  EF57  F00D         	goto	l3735
  7688  001AAC                     u3420:
  7689  001AAC  800E               	bsf	___fladd@aexp^0,0,c
  7690  001AAE                     l3735:
  7691  001AAE  500E               	movf	___fladd@aexp^0,w,c
  7692  001AB0  B4D8               	btfsc	status,2,c
  7693  001AB2  EF5D  F00D         	goto	u3431
  7694  001AB6  EF5F  F00D         	goto	u3430
  7695  001ABA                     u3431:
  7696  001ABA  EF74  F00D         	goto	l3745
  7697  001ABE                     u3430:
  7698  001ABE  280E               	incf	___fladd@aexp^0,w,c
  7699  001AC0  A4D8               	btfss	status,2,c
  7700  001AC2  EF65  F00D         	goto	u3441
  7701  001AC6  EF67  F00D         	goto	u3440
  7702  001ACA                     u3441:
  7703  001ACA  EF6F  F00D         	goto	l3741
  7704  001ACE                     u3440:
  7705  001ACE  0E00               	movlw	0
  7706  001AD0  6E05               	movwf	___fladd@a^0,c
  7707  001AD2  0E00               	movlw	0
  7708  001AD4  6E06               	movwf	(___fladd@a+1)^0,c
  7709  001AD6  0E00               	movlw	0
  7710  001AD8  6E07               	movwf	(___fladd@a+2)^0,c
  7711  001ADA  0E00               	movlw	0
  7712  001ADC  6E08               	movwf	(___fladd@a+3)^0,c
  7713  001ADE                     l3741:
  7714  001ADE  8E07               	bsf	(___fladd@a+2)^0,7,c
  7715  001AE0  0E00               	movlw	0
  7716  001AE2  6E08               	movwf	(___fladd@a+3)^0,c
  7717  001AE4  EF7C  F00D         	goto	l3747
  7718  001AE8                     l3745:
  7719  001AE8  0E00               	movlw	0
  7720  001AEA  6E05               	movwf	___fladd@a^0,c
  7721  001AEC  0E00               	movlw	0
  7722  001AEE  6E06               	movwf	(___fladd@a+1)^0,c
  7723  001AF0  0E00               	movlw	0
  7724  001AF2  6E07               	movwf	(___fladd@a+2)^0,c
  7725  001AF4  0E00               	movlw	0
  7726  001AF6  6E08               	movwf	(___fladd@a+3)^0,c
  7727  001AF8                     l3747:
  7728  001AF8  500F               	movf	___fladd@bexp^0,w,c
  7729  001AFA  5C0E               	subwf	___fladd@aexp^0,w,c
  7730  001AFC  B0D8               	btfsc	status,0,c
  7731  001AFE  EF83  F00D         	goto	u3451
  7732  001B02  EF85  F00D         	goto	u3450
  7733  001B06                     u3451:
  7734  001B06  EFAC  F00D         	goto	l3783
  7735  001B0A                     u3450:
  7736  001B0A  AC0D               	btfss	___fladd@signs^0,6,c
  7737  001B0C  EF8A  F00D         	goto	u3461
  7738  001B10  EF8C  F00D         	goto	u3460
  7739  001B14                     u3461:
  7740  001B14  EF8E  F00D         	goto	l3753
  7741  001B18                     u3460:
  7742  001B18  0E80               	movlw	128
  7743  001B1A  1A0D               	xorwf	___fladd@signs^0,f,c
  7744  001B1C                     l3753:
  7745  001B1C  C00F  F010         	movff	___fladd@bexp,___fladd@grs
  7746  001B20  C00E  F00F         	movff	___fladd@aexp,___fladd@bexp
  7747  001B24  C010  F00E         	movff	___fladd@grs,___fladd@aexp
  7748  001B28  C001  F010         	movff	___fladd@b,___fladd@grs
  7749  001B2C  C005  F001         	movff	___fladd@a,___fladd@b
  7750  001B30  C010  F005         	movff	___fladd@grs,___fladd@a
  7751  001B34  C002  F010         	movff	___fladd@b+1,___fladd@grs
  7752  001B38  C006  F002         	movff	___fladd@a+1,___fladd@b+1
  7753  001B3C  C010  F006         	movff	___fladd@grs,___fladd@a+1
  7754  001B40  C003  F010         	movff	___fladd@b+2,___fladd@grs
  7755  001B44  C007  F003         	movff	___fladd@a+2,___fladd@b+2
  7756  001B48  C010  F007         	movff	___fladd@grs,___fladd@a+2
  7757  001B4C  C004  F010         	movff	___fladd@b+3,___fladd@grs
  7758  001B50  C008  F004         	movff	___fladd@a+3,___fladd@b+3
  7759  001B54  C010  F008         	movff	___fladd@grs,___fladd@a+3
  7760  001B58                     l3783:
  7761  001B58  0E00               	movlw	0
  7762  001B5A  6E10               	movwf	___fladd@grs^0,c
  7763  001B5C  500F               	movf	___fladd@bexp^0,w,c
  7764  001B5E  C00E  F009         	movff	___fladd@aexp,??___fladd
  7765  001B62  6A0A               	clrf	(??___fladd+1)^0,c
  7766  001B64  5E09               	subwf	??___fladd^0,f,c
  7767  001B66  0E00               	movlw	0
  7768  001B68  5A0A               	subwfb	(??___fladd+1)^0,f,c
  7769  001B6A  BE0A               	btfsc	(??___fladd+1)^0,7,c
  7770  001B6C  EFC1  F00D         	goto	u3471
  7771  001B70  500A               	movf	(??___fladd+1)^0,w,c
  7772  001B72  E109               	bnz	u3470
  7773  001B74  0E1A               	movlw	26
  7774  001B76  5C09               	subwf	??___fladd^0,w,c
  7775  001B78  A0D8               	btfss	status,0,c
  7776  001B7A  EFC1  F00D         	goto	u3471
  7777  001B7E  EFC3  F00D         	goto	u3470
  7778  001B82                     u3471:
  7779  001B82  EFFA  F00D         	goto	l1218
  7780  001B86                     u3470:
  7781  001B86  5001               	movf	___fladd@b^0,w,c
  7782  001B88  1002               	iorwf	(___fladd@b+1)^0,w,c
  7783  001B8A  1003               	iorwf	(___fladd@b+2)^0,w,c
  7784  001B8C  1004               	iorwf	(___fladd@b+3)^0,w,c
  7785  001B8E  A4D8               	btfss	status,2,c
  7786  001B90  EFCC  F00D         	goto	u3481
  7787  001B94  EFCF  F00D         	goto	u3480
  7788  001B98                     u3481:
  7789  001B98  0E01               	movlw	1
  7790  001B9A  EFD0  F00D         	goto	u3490
  7791  001B9E                     u3480:
  7792  001B9E  0E00               	movlw	0
  7793  001BA0                     u3490:
  7794  001BA0  6E10               	movwf	___fladd@grs^0,c
  7795  001BA2  0E00               	movlw	0
  7796  001BA4  6E01               	movwf	___fladd@b^0,c
  7797  001BA6  0E00               	movlw	0
  7798  001BA8  6E02               	movwf	(___fladd@b+1)^0,c
  7799  001BAA  0E00               	movlw	0
  7800  001BAC  6E03               	movwf	(___fladd@b+2)^0,c
  7801  001BAE  0E00               	movlw	0
  7802  001BB0  6E04               	movwf	(___fladd@b+3)^0,c
  7803  001BB2  C00E  F00F         	movff	___fladd@aexp,___fladd@bexp
  7804  001BB6  EF03  F00E         	goto	l1217
  7805  001BBA                     l1219:
  7806  001BBA  A010               	btfss	___fladd@grs^0,0,c
  7807  001BBC  EFE2  F00D         	goto	u3501
  7808  001BC0  EFE4  F00D         	goto	u3500
  7809  001BC4                     u3501:
  7810  001BC4  EFEA  F00D         	goto	l3795
  7811  001BC8                     u3500:
  7812  001BC8  90D8               	bcf	status,0,c
  7813  001BCA  3010               	rrcf	___fladd@grs^0,w,c
  7814  001BCC  0901               	iorlw	1
  7815  001BCE  6E10               	movwf	___fladd@grs^0,c
  7816  001BD0  EFEC  F00D         	goto	l3797
  7817  001BD4                     l3795:
  7818  001BD4  90D8               	bcf	status,0,c
  7819  001BD6  3210               	rrcf	___fladd@grs^0,f,c
  7820  001BD8                     l3797:
  7821  001BD8  A001               	btfss	___fladd@b^0,0,c
  7822  001BDA  EFF1  F00D         	goto	u3511
  7823  001BDE  EFF3  F00D         	goto	u3510
  7824  001BE2                     u3511:
  7825  001BE2  EFF4  F00D         	goto	l3801
  7826  001BE6                     u3510:
  7827  001BE6  8E10               	bsf	___fladd@grs^0,7,c
  7828  001BE8                     l3801:
  7829  001BE8  3404               	rlcf	(___fladd@b+3)^0,w,c
  7830  001BEA  3204               	rrcf	(___fladd@b+3)^0,f,c
  7831  001BEC  3203               	rrcf	(___fladd@b+2)^0,f,c
  7832  001BEE  3202               	rrcf	(___fladd@b+1)^0,f,c
  7833  001BF0  3201               	rrcf	___fladd@b^0,f,c
  7834  001BF2  2A0F               	incf	___fladd@bexp^0,f,c
  7835  001BF4                     l1218:
  7836  001BF4  500E               	movf	___fladd@aexp^0,w,c
  7837  001BF6  5C0F               	subwf	___fladd@bexp^0,w,c
  7838  001BF8  A0D8               	btfss	status,0,c
  7839  001BFA  EF01  F00E         	goto	u3521
  7840  001BFE  EF03  F00E         	goto	u3520
  7841  001C02                     u3521:
  7842  001C02  EFDD  F00D         	goto	l1219
  7843  001C06                     u3520:
  7844  001C06                     l1217:
  7845  001C06  BC0D               	btfsc	___fladd@signs^0,6,c
  7846  001C08  EF08  F00E         	goto	u3531
  7847  001C0C  EF0A  F00E         	goto	u3530
  7848  001C10                     u3531:
  7849  001C10  EF4A  F00E         	goto	l3829
  7850  001C14                     u3530:
  7851  001C14  500F               	movf	___fladd@bexp^0,w,c
  7852  001C16  A4D8               	btfss	status,2,c
  7853  001C18  EF10  F00E         	goto	u3541
  7854  001C1C  EF12  F00E         	goto	u3540
  7855  001C20                     u3541:
  7856  001C20  EF1C  F00E         	goto	l3811
  7857  001C24                     u3540:
  7858  001C24  0E00               	movlw	0
  7859  001C26  6E01               	movwf	?___fladd^0,c
  7860  001C28  0E00               	movlw	0
  7861  001C2A  6E02               	movwf	(?___fladd+1)^0,c
  7862  001C2C  0E00               	movlw	0
  7863  001C2E  6E03               	movwf	(?___fladd+2)^0,c
  7864  001C30  0E00               	movlw	0
  7865  001C32  6E04               	movwf	(?___fladd+3)^0,c
  7866  001C34  EF6B  F00F         	goto	l1226
  7867  001C38                     l3811:
  7868  001C38  5005               	movf	___fladd@a^0,w,c
  7869  001C3A  2601               	addwf	___fladd@b^0,f,c
  7870  001C3C  5006               	movf	(___fladd@a+1)^0,w,c
  7871  001C3E  2202               	addwfc	(___fladd@b+1)^0,f,c
  7872  001C40  5007               	movf	(___fladd@a+2)^0,w,c
  7873  001C42  2203               	addwfc	(___fladd@b+2)^0,f,c
  7874  001C44  5008               	movf	(___fladd@a+3)^0,w,c
  7875  001C46  2204               	addwfc	(___fladd@b+3)^0,f,c
  7876  001C48  A004               	btfss	(___fladd@b+3)^0,0,c
  7877  001C4A  EF29  F00E         	goto	u3551
  7878  001C4E  EF2B  F00E         	goto	u3550
  7879  001C52                     u3551:
  7880  001C52  EFD7  F00E         	goto	l3865
  7881  001C56                     u3550:
  7882  001C56  A010               	btfss	___fladd@grs^0,0,c
  7883  001C58  EF30  F00E         	goto	u3561
  7884  001C5C  EF32  F00E         	goto	u3560
  7885  001C60                     u3561:
  7886  001C60  EF38  F00E         	goto	l3819
  7887  001C64                     u3560:
  7888  001C64  90D8               	bcf	status,0,c
  7889  001C66  3010               	rrcf	___fladd@grs^0,w,c
  7890  001C68  0901               	iorlw	1
  7891  001C6A  6E10               	movwf	___fladd@grs^0,c
  7892  001C6C  EF3A  F00E         	goto	l3821
  7893  001C70                     l3819:
  7894  001C70  90D8               	bcf	status,0,c
  7895  001C72  3210               	rrcf	___fladd@grs^0,f,c
  7896  001C74                     l3821:
  7897  001C74  A001               	btfss	___fladd@b^0,0,c
  7898  001C76  EF3F  F00E         	goto	u3571
  7899  001C7A  EF41  F00E         	goto	u3570
  7900  001C7E                     u3571:
  7901  001C7E  EF42  F00E         	goto	l3825
  7902  001C82                     u3570:
  7903  001C82  8E10               	bsf	___fladd@grs^0,7,c
  7904  001C84                     l3825:
  7905  001C84  3404               	rlcf	(___fladd@b+3)^0,w,c
  7906  001C86  3204               	rrcf	(___fladd@b+3)^0,f,c
  7907  001C88  3203               	rrcf	(___fladd@b+2)^0,f,c
  7908  001C8A  3202               	rrcf	(___fladd@b+1)^0,f,c
  7909  001C8C  3201               	rrcf	___fladd@b^0,f,c
  7910  001C8E  2A0F               	incf	___fladd@bexp^0,f,c
  7911  001C90  EFD7  F00E         	goto	l3865
  7912  001C94                     l3829:
  7913  001C94  5005               	movf	___fladd@a^0,w,c
  7914  001C96  5C01               	subwf	___fladd@b^0,w,c
  7915  001C98  5006               	movf	(___fladd@a+1)^0,w,c
  7916  001C9A  5802               	subwfb	(___fladd@b+1)^0,w,c
  7917  001C9C  5007               	movf	(___fladd@a+2)^0,w,c
  7918  001C9E  5803               	subwfb	(___fladd@b+2)^0,w,c
  7919  001CA0  5004               	movf	(___fladd@b+3)^0,w,c
  7920  001CA2  0A80               	xorlw	128
  7921  001CA4  6E09               	movwf	??___fladd^0,c
  7922  001CA6  5008               	movf	(___fladd@a+3)^0,w,c
  7923  001CA8  0A80               	xorlw	128
  7924  001CAA  5809               	subwfb	??___fladd^0,w,c
  7925  001CAC  B0D8               	btfsc	status,0,c
  7926  001CAE  EF5B  F00E         	goto	u3581
  7927  001CB2  EF5D  F00E         	goto	u3580
  7928  001CB6                     u3581:
  7929  001CB6  EF88  F00E         	goto	l3839
  7930  001CBA                     u3580:
  7931  001CBA  5001               	movf	___fladd@b^0,w,c
  7932  001CBC  5C05               	subwf	___fladd@a^0,w,c
  7933  001CBE  6E09               	movwf	??___fladd^0,c
  7934  001CC0  5002               	movf	(___fladd@b+1)^0,w,c
  7935  001CC2  5806               	subwfb	(___fladd@a+1)^0,w,c
  7936  001CC4  6E0A               	movwf	(??___fladd+1)^0,c
  7937  001CC6  5003               	movf	(___fladd@b+2)^0,w,c
  7938  001CC8  5807               	subwfb	(___fladd@a+2)^0,w,c
  7939  001CCA  6E0B               	movwf	(??___fladd+2)^0,c
  7940  001CCC  5004               	movf	(___fladd@b+3)^0,w,c
  7941  001CCE  5808               	subwfb	(___fladd@a+3)^0,w,c
  7942  001CD0  6E0C               	movwf	(??___fladd+3)^0,c
  7943  001CD2  0EFF               	movlw	255
  7944  001CD4  2409               	addwf	??___fladd^0,w,c
  7945  001CD6  6E01               	movwf	___fladd@b^0,c
  7946  001CD8  0EFF               	movlw	255
  7947  001CDA  200A               	addwfc	(??___fladd+1)^0,w,c
  7948  001CDC  6E02               	movwf	(___fladd@b+1)^0,c
  7949  001CDE  0EFF               	movlw	255
  7950  001CE0  200B               	addwfc	(??___fladd+2)^0,w,c
  7951  001CE2  6E03               	movwf	(___fladd@b+2)^0,c
  7952  001CE4  0EFF               	movlw	255
  7953  001CE6  200C               	addwfc	(??___fladd+3)^0,w,c
  7954  001CE8  6E04               	movwf	(___fladd@b+3)^0,c
  7955  001CEA  0E80               	movlw	128
  7956  001CEC  1A0D               	xorwf	___fladd@signs^0,f,c
  7957  001CEE  6C10               	negf	___fladd@grs^0,c
  7958  001CF0  5010               	movf	___fladd@grs^0,w,c
  7959  001CF2  A4D8               	btfss	status,2,c
  7960  001CF4  EF7E  F00E         	goto	u3591
  7961  001CF8  EF80  F00E         	goto	u3590
  7962  001CFC                     u3591:
  7963  001CFC  EF90  F00E         	goto	l1234
  7964  001D00                     u3590:
  7965  001D00  0E01               	movlw	1
  7966  001D02  2601               	addwf	___fladd@b^0,f,c
  7967  001D04  0E00               	movlw	0
  7968  001D06  2202               	addwfc	(___fladd@b+1)^0,f,c
  7969  001D08  2203               	addwfc	(___fladd@b+2)^0,f,c
  7970  001D0A  2204               	addwfc	(___fladd@b+3)^0,f,c
  7971  001D0C  EF90  F00E         	goto	l1234
  7972  001D10                     l3839:
  7973  001D10  5005               	movf	___fladd@a^0,w,c
  7974  001D12  5E01               	subwf	___fladd@b^0,f,c
  7975  001D14  5006               	movf	(___fladd@a+1)^0,w,c
  7976  001D16  5A02               	subwfb	(___fladd@b+1)^0,f,c
  7977  001D18  5007               	movf	(___fladd@a+2)^0,w,c
  7978  001D1A  5A03               	subwfb	(___fladd@b+2)^0,f,c
  7979  001D1C  5008               	movf	(___fladd@a+3)^0,w,c
  7980  001D1E  5A04               	subwfb	(___fladd@b+3)^0,f,c
  7981  001D20                     l1234:
  7982  001D20  5001               	movf	___fladd@b^0,w,c
  7983  001D22  1002               	iorwf	(___fladd@b+1)^0,w,c
  7984  001D24  1003               	iorwf	(___fladd@b+2)^0,w,c
  7985  001D26  1004               	iorwf	(___fladd@b+3)^0,w,c
  7986  001D28  A4D8               	btfss	status,2,c
  7987  001D2A  EF99  F00E         	goto	u3601
  7988  001D2E  EF9B  F00E         	goto	u3600
  7989  001D32                     u3601:
  7990  001D32  EFD0  F00E         	goto	l3863
  7991  001D36                     u3600:
  7992  001D36  5010               	movf	___fladd@grs^0,w,c
  7993  001D38  A4D8               	btfss	status,2,c
  7994  001D3A  EFA1  F00E         	goto	u3611
  7995  001D3E  EFA3  F00E         	goto	u3610
  7996  001D42                     u3611:
  7997  001D42  EFD0  F00E         	goto	l3863
  7998  001D46                     u3610:
  7999  001D46  0E00               	movlw	0
  8000  001D48  6E01               	movwf	?___fladd^0,c
  8001  001D4A  0E00               	movlw	0
  8002  001D4C  6E02               	movwf	(?___fladd+1)^0,c
  8003  001D4E  0E00               	movlw	0
  8004  001D50  6E03               	movwf	(?___fladd+2)^0,c
  8005  001D52  0E00               	movlw	0
  8006  001D54  6E04               	movwf	(?___fladd+3)^0,c
  8007  001D56  EF6B  F00F         	goto	l1226
  8008  001D5A                     l3847:
  8009  001D5A  90D8               	bcf	status,0,c
  8010  001D5C  3601               	rlcf	___fladd@b^0,f,c
  8011  001D5E  3602               	rlcf	(___fladd@b+1)^0,f,c
  8012  001D60  3603               	rlcf	(___fladd@b+2)^0,f,c
  8013  001D62  3604               	rlcf	(___fladd@b+3)^0,f,c
  8014  001D64  AE10               	btfss	___fladd@grs^0,7,c
  8015  001D66  EFB7  F00E         	goto	u3621
  8016  001D6A  EFB9  F00E         	goto	u3620
  8017  001D6E                     u3621:
  8018  001D6E  EFBA  F00E         	goto	l3853
  8019  001D72                     u3620:
  8020  001D72  8001               	bsf	___fladd@b^0,0,c
  8021  001D74                     l3853:
  8022  001D74  A010               	btfss	___fladd@grs^0,0,c
  8023  001D76  EFBF  F00E         	goto	u3631
  8024  001D7A  EFC1  F00E         	goto	u3630
  8025  001D7E                     u3631:
  8026  001D7E  EFC5  F00E         	goto	l3857
  8027  001D82                     u3630:
  8028  001D82  80D8               	bsf	status,0,c
  8029  001D84  3610               	rlcf	___fladd@grs^0,f,c
  8030  001D86  EFC7  F00E         	goto	l3859
  8031  001D8A                     l3857:
  8032  001D8A  90D8               	bcf	status,0,c
  8033  001D8C  3610               	rlcf	___fladd@grs^0,f,c
  8034  001D8E                     l3859:
  8035  001D8E  500F               	movf	___fladd@bexp^0,w,c
  8036  001D90  B4D8               	btfsc	status,2,c
  8037  001D92  EFCD  F00E         	goto	u3641
  8038  001D96  EFCF  F00E         	goto	u3640
  8039  001D9A                     u3641:
  8040  001D9A  EFD0  F00E         	goto	l3863
  8041  001D9E                     u3640:
  8042  001D9E  060F               	decf	___fladd@bexp^0,f,c
  8043  001DA0                     l3863:
  8044  001DA0  AE03               	btfss	(___fladd@b+2)^0,7,c
  8045  001DA2  EFD5  F00E         	goto	u3651
  8046  001DA6  EFD7  F00E         	goto	u3650
  8047  001DAA                     u3651:
  8048  001DAA  EFAD  F00E         	goto	l3847
  8049  001DAE                     u3650:
  8050  001DAE                     l3865:
  8051  001DAE  0E00               	movlw	0
  8052  001DB0  6E0E               	movwf	___fladd@aexp^0,c
  8053  001DB2  AE10               	btfss	___fladd@grs^0,7,c
  8054  001DB4  EFDE  F00E         	goto	u3661
  8055  001DB8  EFE0  F00E         	goto	u3660
  8056  001DBC                     u3661:
  8057  001DBC  EFF8  F00E         	goto	l1243
  8058  001DC0                     u3660:
  8059  001DC0  C010  F009         	movff	___fladd@grs,??___fladd
  8060  001DC4  0E7F               	movlw	127
  8061  001DC6  1609               	andwf	??___fladd^0,f,c
  8062  001DC8  B4D8               	btfsc	status,2,c
  8063  001DCA  EFE9  F00E         	goto	u3671
  8064  001DCE  EFEB  F00E         	goto	u3670
  8065  001DD2                     u3671:
  8066  001DD2  EFEF  F00E         	goto	l1244
  8067  001DD6                     u3670:
  8068  001DD6                     l3871:
  8069  001DD6  0E01               	movlw	1
  8070  001DD8  6E0E               	movwf	___fladd@aexp^0,c
  8071  001DDA  EFF8  F00E         	goto	l1243
  8072  001DDE                     l1244:
  8073  001DDE  A001               	btfss	___fladd@b^0,0,c
  8074  001DE0  EFF4  F00E         	goto	u3681
  8075  001DE4  EFF6  F00E         	goto	u3680
  8076  001DE8                     u3681:
  8077  001DE8  EFF8  F00E         	goto	l1243
  8078  001DEC                     u3680:
  8079  001DEC  EFEB  F00E         	goto	l3871
  8080  001DF0                     l1243:
  8081  001DF0  500E               	movf	___fladd@aexp^0,w,c
  8082  001DF2  B4D8               	btfsc	status,2,c
  8083  001DF4  EFFE  F00E         	goto	u3691
  8084  001DF8  EF00  F00F         	goto	u3690
  8085  001DFC                     u3691:
  8086  001DFC  EF2B  F00F         	goto	l3883
  8087  001E00                     u3690:
  8088  001E00  0E01               	movlw	1
  8089  001E02  2601               	addwf	___fladd@b^0,f,c
  8090  001E04  0E00               	movlw	0
  8091  001E06  2202               	addwfc	(___fladd@b+1)^0,f,c
  8092  001E08  2203               	addwfc	(___fladd@b+2)^0,f,c
  8093  001E0A  2204               	addwfc	(___fladd@b+3)^0,f,c
  8094  001E0C  A004               	btfss	(___fladd@b+3)^0,0,c
  8095  001E0E  EF0B  F00F         	goto	u3701
  8096  001E12  EF0D  F00F         	goto	u3700
  8097  001E16                     u3701:
  8098  001E16  EF2B  F00F         	goto	l3883
  8099  001E1A                     u3700:
  8100  001E1A  C001  F009         	movff	___fladd@b,??___fladd
  8101  001E1E  C002  F00A         	movff	___fladd@b+1,??___fladd+1
  8102  001E22  C003  F00B         	movff	___fladd@b+2,??___fladd+2
  8103  001E26  C004  F00C         	movff	___fladd@b+3,??___fladd+3
  8104  001E2A  340C               	rlcf	(??___fladd+3)^0,w,c
  8105  001E2C  320C               	rrcf	(??___fladd+3)^0,f,c
  8106  001E2E  320B               	rrcf	(??___fladd+2)^0,f,c
  8107  001E30  320A               	rrcf	(??___fladd+1)^0,f,c
  8108  001E32  3209               	rrcf	??___fladd^0,f,c
  8109  001E34  C009  F001         	movff	??___fladd,___fladd@b
  8110  001E38  C00A  F002         	movff	??___fladd+1,___fladd@b+1
  8111  001E3C  C00B  F003         	movff	??___fladd+2,___fladd@b+2
  8112  001E40  C00C  F004         	movff	??___fladd+3,___fladd@b+3
  8113  001E44  280F               	incf	___fladd@bexp^0,w,c
  8114  001E46  B4D8               	btfsc	status,2,c
  8115  001E48  EF28  F00F         	goto	u3711
  8116  001E4C  EF2A  F00F         	goto	u3710
  8117  001E50                     u3711:
  8118  001E50  EF2B  F00F         	goto	l3883
  8119  001E54                     u3710:
  8120  001E54  2A0F               	incf	___fladd@bexp^0,f,c
  8121  001E56                     l3883:
  8122  001E56  280F               	incf	___fladd@bexp^0,w,c
  8123  001E58  B4D8               	btfsc	status,2,c
  8124  001E5A  EF31  F00F         	goto	u3721
  8125  001E5E  EF33  F00F         	goto	u3720
  8126  001E62                     u3721:
  8127  001E62  EF3B  F00F         	goto	l3887
  8128  001E66                     u3720:
  8129  001E66  500F               	movf	___fladd@bexp^0,w,c
  8130  001E68  A4D8               	btfss	status,2,c
  8131  001E6A  EF39  F00F         	goto	u3731
  8132  001E6E  EF3B  F00F         	goto	u3730
  8133  001E72                     u3731:
  8134  001E72  EF4D  F00F         	goto	l3891
  8135  001E76                     u3730:
  8136  001E76                     l3887:
  8137  001E76  0E00               	movlw	0
  8138  001E78  6E01               	movwf	___fladd@b^0,c
  8139  001E7A  0E00               	movlw	0
  8140  001E7C  6E02               	movwf	(___fladd@b+1)^0,c
  8141  001E7E  0E00               	movlw	0
  8142  001E80  6E03               	movwf	(___fladd@b+2)^0,c
  8143  001E82  0E00               	movlw	0
  8144  001E84  6E04               	movwf	(___fladd@b+3)^0,c
  8145  001E86  500F               	movf	___fladd@bexp^0,w,c
  8146  001E88  A4D8               	btfss	status,2,c
  8147  001E8A  EF49  F00F         	goto	u3741
  8148  001E8E  EF4B  F00F         	goto	u3740
  8149  001E92                     u3741:
  8150  001E92  EF4D  F00F         	goto	l3891
  8151  001E96                     u3740:
  8152  001E96  0E00               	movlw	0
  8153  001E98  6E0D               	movwf	___fladd@signs^0,c
  8154  001E9A                     l3891:
  8155  001E9A  A00F               	btfss	___fladd@bexp^0,0,c
  8156  001E9C  EF52  F00F         	goto	u3751
  8157  001EA0  EF54  F00F         	goto	u3750
  8158  001EA4                     u3751:
  8159  001EA4  EF57  F00F         	goto	l3895
  8160  001EA8                     u3750:
  8161  001EA8  8E03               	bsf	(___fladd@b+2)^0,7,c
  8162  001EAA  EF58  F00F         	goto	l3897
  8163  001EAE                     l3895:
  8164  001EAE  9E03               	bcf	(___fladd@b+2)^0,7,c
  8165  001EB0                     l3897:
  8166  001EB0  90D8               	bcf	status,0,c
  8167  001EB2  300F               	rrcf	___fladd@bexp^0,w,c
  8168  001EB4  6E04               	movwf	(___fladd@b+3)^0,c
  8169  001EB6  AE0D               	btfss	___fladd@signs^0,7,c
  8170  001EB8  EF60  F00F         	goto	u3761
  8171  001EBC  EF62  F00F         	goto	u3760
  8172  001EC0                     u3761:
  8173  001EC0  EF63  F00F         	goto	l3903
  8174  001EC4                     u3760:
  8175  001EC4  8E04               	bsf	(___fladd@b+3)^0,7,c
  8176  001EC6                     l3903:
  8177  001EC6  C001  F001         	movff	___fladd@b,?___fladd
  8178  001ECA  C002  F002         	movff	___fladd@b+1,?___fladd+1
  8179  001ECE  C003  F003         	movff	___fladd@b+2,?___fladd+2
  8180  001ED2  C004  F004         	movff	___fladd@b+3,?___fladd+3
  8181  001ED6                     l1226:
  8182  001ED6  0012               	return		;funcret
  8183  001ED8                     __end_of___fladd:
  8184                           	callstack 0
  8185                           
  8186 ;; *************** function ___flneg *****************
  8187 ;; Defined at:
  8188 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\flneg.c"
  8189 ;; Parameters:    Size  Location     Type
  8190 ;;  f1              4    0[COMRAM] unsigned char 
  8191 ;; Auto vars:     Size  Location     Type
  8192 ;;		None
  8193 ;; Return value:  Size  Location     Type
  8194 ;;                  4    0[COMRAM] unsigned char 
  8195 ;; Registers used:
  8196 ;;		wreg, status,2, status,0
  8197 ;; Tracked objects:
  8198 ;;		On entry : 0/0
  8199 ;;		On exit  : 0/0
  8200 ;;		Unchanged: 0/0
  8201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8202 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8203 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8204 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8205 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8206 ;;Total ram usage:        4 bytes
  8207 ;; Hardware stack levels used: 1
  8208 ;; Hardware stack levels required when called: 1
  8209 ;; This function calls:
  8210 ;;		Nothing
  8211 ;; This function is called by:
  8212 ;;		_roundf
  8213 ;; This function uses a non-reentrant model
  8214 ;;
  8215                           
  8216                           	psect	text37
  8217  005BA2                     __ptext37:
  8218                           	callstack 0
  8219  005BA2                     ___flneg:
  8220                           	callstack 25
  8221  005BA2  5001               	movf	___flneg@f1^0,w,c
  8222  005BA4  1002               	iorwf	(___flneg@f1+1)^0,w,c
  8223  005BA6  1003               	iorwf	(___flneg@f1+2)^0,w,c
  8224  005BA8  1004               	iorwf	(___flneg@f1+3)^0,w,c
  8225  005BAA  B4D8               	btfsc	status,2,c
  8226  005BAC  EFDA  F02D         	goto	u4181
  8227  005BB0  EFDC  F02D         	goto	u4180
  8228  005BB4                     u4181:
  8229  005BB4  EFE4  F02D         	goto	l4203
  8230  005BB8                     u4180:
  8231  005BB8  0E00               	movlw	0
  8232  005BBA  1A01               	xorwf	___flneg@f1^0,f,c
  8233  005BBC  0E00               	movlw	0
  8234  005BBE  1A02               	xorwf	(___flneg@f1+1)^0,f,c
  8235  005BC0  0E00               	movlw	0
  8236  005BC2  1A03               	xorwf	(___flneg@f1+2)^0,f,c
  8237  005BC4  0E80               	movlw	128
  8238  005BC6  1A04               	xorwf	(___flneg@f1+3)^0,f,c
  8239  005BC8                     l4203:
  8240  005BC8  C001  F001         	movff	___flneg@f1,?___flneg
  8241  005BCC  C002  F002         	movff	___flneg@f1+1,?___flneg+1
  8242  005BD0  C003  F003         	movff	___flneg@f1+2,?___flneg+2
  8243  005BD4  C004  F004         	movff	___flneg@f1+3,?___flneg+3
  8244  005BD8  0012               	return		;funcret
  8245  005BDA                     __end_of___flneg:
  8246                           	callstack 0
  8247                           
  8248 ;; *************** function ___flmul *****************
  8249 ;; Defined at:
  8250 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\sprcmul.c"
  8251 ;; Parameters:    Size  Location     Type
  8252 ;;  b               4   39[COMRAM] unsigned char 
  8253 ;;  a               4   43[COMRAM] unsigned char 
  8254 ;; Auto vars:     Size  Location     Type
  8255 ;;  prod            4   58[COMRAM] struct .
  8256 ;;  grs             4   52[COMRAM] unsigned long 
  8257 ;;  temp            2   62[COMRAM] struct .
  8258 ;;  bexp            1   57[COMRAM] unsigned char 
  8259 ;;  aexp            1   56[COMRAM] unsigned char 
  8260 ;;  sign            1   51[COMRAM] unsigned char 
  8261 ;; Return value:  Size  Location     Type
  8262 ;;                  4   39[COMRAM] unsigned char 
  8263 ;; Registers used:
  8264 ;;		wreg, status,2, status,0, prodl, prodh
  8265 ;; Tracked objects:
  8266 ;;		On entry : 0/0
  8267 ;;		On exit  : 0/0
  8268 ;;		Unchanged: 0/0
  8269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8270 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8271 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8272 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8273 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8274 ;;Total ram usage:       25 bytes
  8275 ;; Hardware stack levels used: 1
  8276 ;; Hardware stack levels required when called: 1
  8277 ;; This function calls:
  8278 ;;		Nothing
  8279 ;; This function is called by:
  8280 ;;		_detect_color
  8281 ;;		_distance_measure
  8282 ;;		_roundf
  8283 ;;		_check_color_reading
  8284 ;; This function uses a non-reentrant model
  8285 ;;
  8286                           
  8287                           	psect	text38
  8288  001ED8                     __ptext38:
  8289                           	callstack 0
  8290  001ED8                     ___flmul:
  8291                           	callstack 25
  8292  001ED8  502B               	movf	(___flmul@b+3)^0,w,c
  8293  001EDA  0B80               	andlw	128
  8294  001EDC  6E34               	movwf	___flmul@sign^0,c
  8295  001EDE  502B               	movf	(___flmul@b+3)^0,w,c
  8296  001EE0  242B               	addwf	(___flmul@b+3)^0,w,c
  8297  001EE2  6E3A               	movwf	___flmul@bexp^0,c
  8298  001EE4  AE2A               	btfss	(___flmul@b+2)^0,7,c
  8299  001EE6  EF77  F00F         	goto	u3941
  8300  001EEA  EF79  F00F         	goto	u3940
  8301  001EEE                     u3941:
  8302  001EEE  EF7A  F00F         	goto	l4047
  8303  001EF2                     u3940:
  8304  001EF2  803A               	bsf	___flmul@bexp^0,0,c
  8305  001EF4                     l4047:
  8306  001EF4  503A               	movf	___flmul@bexp^0,w,c
  8307  001EF6  B4D8               	btfsc	status,2,c
  8308  001EF8  EF80  F00F         	goto	u3951
  8309  001EFC  EF82  F00F         	goto	u3950
  8310  001F00                     u3951:
  8311  001F00  EF95  F00F         	goto	l4055
  8312  001F04                     u3950:
  8313  001F04  283A               	incf	___flmul@bexp^0,w,c
  8314  001F06  A4D8               	btfss	status,2,c
  8315  001F08  EF88  F00F         	goto	u3961
  8316  001F0C  EF8A  F00F         	goto	u3960
  8317  001F10                     u3961:
  8318  001F10  EF92  F00F         	goto	l4053
  8319  001F14                     u3960:
  8320  001F14  0E00               	movlw	0
  8321  001F16  6E28               	movwf	___flmul@b^0,c
  8322  001F18  0E00               	movlw	0
  8323  001F1A  6E29               	movwf	(___flmul@b+1)^0,c
  8324  001F1C  0E00               	movlw	0
  8325  001F1E  6E2A               	movwf	(___flmul@b+2)^0,c
  8326  001F20  0E00               	movlw	0
  8327  001F22  6E2B               	movwf	(___flmul@b+3)^0,c
  8328  001F24                     l4053:
  8329  001F24  8E2A               	bsf	(___flmul@b+2)^0,7,c
  8330  001F26  EF9D  F00F         	goto	l4057
  8331  001F2A                     l4055:
  8332  001F2A  0E00               	movlw	0
  8333  001F2C  6E28               	movwf	___flmul@b^0,c
  8334  001F2E  0E00               	movlw	0
  8335  001F30  6E29               	movwf	(___flmul@b+1)^0,c
  8336  001F32  0E00               	movlw	0
  8337  001F34  6E2A               	movwf	(___flmul@b+2)^0,c
  8338  001F36  0E00               	movlw	0
  8339  001F38  6E2B               	movwf	(___flmul@b+3)^0,c
  8340  001F3A                     l4057:
  8341  001F3A  502F               	movf	(___flmul@a+3)^0,w,c
  8342  001F3C  0B80               	andlw	128
  8343  001F3E  1A34               	xorwf	___flmul@sign^0,f,c
  8344  001F40  502F               	movf	(___flmul@a+3)^0,w,c
  8345  001F42  242F               	addwf	(___flmul@a+3)^0,w,c
  8346  001F44  6E39               	movwf	___flmul@aexp^0,c
  8347  001F46  AE2E               	btfss	(___flmul@a+2)^0,7,c
  8348  001F48  EFA8  F00F         	goto	u3971
  8349  001F4C  EFAA  F00F         	goto	u3970
  8350  001F50                     u3971:
  8351  001F50  EFAB  F00F         	goto	l4065
  8352  001F54                     u3970:
  8353  001F54  8039               	bsf	___flmul@aexp^0,0,c
  8354  001F56                     l4065:
  8355  001F56  5039               	movf	___flmul@aexp^0,w,c
  8356  001F58  B4D8               	btfsc	status,2,c
  8357  001F5A  EFB1  F00F         	goto	u3981
  8358  001F5E  EFB3  F00F         	goto	u3980
  8359  001F62                     u3981:
  8360  001F62  EFC6  F00F         	goto	l4073
  8361  001F66                     u3980:
  8362  001F66  2839               	incf	___flmul@aexp^0,w,c
  8363  001F68  A4D8               	btfss	status,2,c
  8364  001F6A  EFB9  F00F         	goto	u3991
  8365  001F6E  EFBB  F00F         	goto	u3990
  8366  001F72                     u3991:
  8367  001F72  EFC3  F00F         	goto	l4071
  8368  001F76                     u3990:
  8369  001F76  0E00               	movlw	0
  8370  001F78  6E2C               	movwf	___flmul@a^0,c
  8371  001F7A  0E00               	movlw	0
  8372  001F7C  6E2D               	movwf	(___flmul@a+1)^0,c
  8373  001F7E  0E00               	movlw	0
  8374  001F80  6E2E               	movwf	(___flmul@a+2)^0,c
  8375  001F82  0E00               	movlw	0
  8376  001F84  6E2F               	movwf	(___flmul@a+3)^0,c
  8377  001F86                     l4071:
  8378  001F86  8E2E               	bsf	(___flmul@a+2)^0,7,c
  8379  001F88  EFCE  F00F         	goto	l1303
  8380  001F8C                     l4073:
  8381  001F8C  0E00               	movlw	0
  8382  001F8E  6E2C               	movwf	___flmul@a^0,c
  8383  001F90  0E00               	movlw	0
  8384  001F92  6E2D               	movwf	(___flmul@a+1)^0,c
  8385  001F94  0E00               	movlw	0
  8386  001F96  6E2E               	movwf	(___flmul@a+2)^0,c
  8387  001F98  0E00               	movlw	0
  8388  001F9A  6E2F               	movwf	(___flmul@a+3)^0,c
  8389  001F9C                     l1303:
  8390  001F9C  5039               	movf	___flmul@aexp^0,w,c
  8391  001F9E  B4D8               	btfsc	status,2,c
  8392  001FA0  EFD4  F00F         	goto	u4001
  8393  001FA4  EFD6  F00F         	goto	u4000
  8394  001FA8                     u4001:
  8395  001FA8  EFDE  F00F         	goto	l4077
  8396  001FAC                     u4000:
  8397  001FAC  503A               	movf	___flmul@bexp^0,w,c
  8398  001FAE  A4D8               	btfss	status,2,c
  8399  001FB0  EFDC  F00F         	goto	u4011
  8400  001FB4  EFDE  F00F         	goto	u4010
  8401  001FB8                     u4011:
  8402  001FB8  EFE8  F00F         	goto	l4081
  8403  001FBC                     u4010:
  8404  001FBC                     l4077:
  8405  001FBC  0E00               	movlw	0
  8406  001FBE  6E28               	movwf	?___flmul^0,c
  8407  001FC0  0E00               	movlw	0
  8408  001FC2  6E29               	movwf	(?___flmul+1)^0,c
  8409  001FC4  0E00               	movlw	0
  8410  001FC6  6E2A               	movwf	(?___flmul+2)^0,c
  8411  001FC8  0E00               	movlw	0
  8412  001FCA  6E2B               	movwf	(?___flmul+3)^0,c
  8413  001FCC  EF80  F011         	goto	l1307
  8414  001FD0                     l4081:
  8415  001FD0  502E               	movf	(___flmul@a+2)^0,w,c
  8416  001FD2  0228               	mulwf	___flmul@b^0,c
  8417  001FD4  CFF3 F03F          	movff	prodl,___flmul@temp
  8418  001FD8  CFF4 F040          	movff	prodh,___flmul@temp+1
  8419  001FDC  503F               	movf	___flmul@temp^0,w,c
  8420  001FDE  6E35               	movwf	___flmul@grs^0,c
  8421  001FE0  6A36               	clrf	(___flmul@grs+1)^0,c
  8422  001FE2  6A37               	clrf	(___flmul@grs+2)^0,c
  8423  001FE4  6A38               	clrf	(___flmul@grs+3)^0,c
  8424  001FE6  5040               	movf	(___flmul@temp+1)^0,w,c
  8425  001FE8  6E3B               	movwf	___flmul@prod^0,c
  8426  001FEA  6A3C               	clrf	(___flmul@prod+1)^0,c
  8427  001FEC  6A3D               	clrf	(___flmul@prod+2)^0,c
  8428  001FEE  6A3E               	clrf	(___flmul@prod+3)^0,c
  8429  001FF0  502D               	movf	(___flmul@a+1)^0,w,c
  8430  001FF2  0229               	mulwf	(___flmul@b+1)^0,c
  8431  001FF4  CFF3 F03F          	movff	prodl,___flmul@temp
  8432  001FF8  CFF4 F040          	movff	prodh,___flmul@temp+1
  8433  001FFC  503F               	movf	___flmul@temp^0,w,c
  8434  001FFE  2635               	addwf	___flmul@grs^0,f,c
  8435  002000  0E00               	movlw	0
  8436  002002  2236               	addwfc	(___flmul@grs+1)^0,f,c
  8437  002004  2237               	addwfc	(___flmul@grs+2)^0,f,c
  8438  002006  2238               	addwfc	(___flmul@grs+3)^0,f,c
  8439  002008  5040               	movf	(___flmul@temp+1)^0,w,c
  8440  00200A  263B               	addwf	___flmul@prod^0,f,c
  8441  00200C  0E00               	movlw	0
  8442  00200E  223C               	addwfc	(___flmul@prod+1)^0,f,c
  8443  002010  223D               	addwfc	(___flmul@prod+2)^0,f,c
  8444  002012  223E               	addwfc	(___flmul@prod+3)^0,f,c
  8445  002014  502C               	movf	___flmul@a^0,w,c
  8446  002016  022A               	mulwf	(___flmul@b+2)^0,c
  8447  002018  CFF3 F03F          	movff	prodl,___flmul@temp
  8448  00201C  CFF4 F040          	movff	prodh,___flmul@temp+1
  8449  002020  503F               	movf	___flmul@temp^0,w,c
  8450  002022  2635               	addwf	___flmul@grs^0,f,c
  8451  002024  0E00               	movlw	0
  8452  002026  2236               	addwfc	(___flmul@grs+1)^0,f,c
  8453  002028  2237               	addwfc	(___flmul@grs+2)^0,f,c
  8454  00202A  2238               	addwfc	(___flmul@grs+3)^0,f,c
  8455  00202C  5040               	movf	(___flmul@temp+1)^0,w,c
  8456  00202E  263B               	addwf	___flmul@prod^0,f,c
  8457  002030  0E00               	movlw	0
  8458  002032  223C               	addwfc	(___flmul@prod+1)^0,f,c
  8459  002034  223D               	addwfc	(___flmul@prod+2)^0,f,c
  8460  002036  223E               	addwfc	(___flmul@prod+3)^0,f,c
  8461  002038  C037  F038         	movff	___flmul@grs+2,___flmul@grs+3
  8462  00203C  C036  F037         	movff	___flmul@grs+1,___flmul@grs+2
  8463  002040  C035  F036         	movff	___flmul@grs,___flmul@grs+1
  8464  002044  6A35               	clrf	___flmul@grs^0,c
  8465  002046  502C               	movf	___flmul@a^0,w,c
  8466  002048  0229               	mulwf	(___flmul@b+1)^0,c
  8467  00204A  CFF3 F03F          	movff	prodl,___flmul@temp
  8468  00204E  CFF4 F040          	movff	prodh,___flmul@temp+1
  8469  002052  503F               	movf	___flmul@temp^0,w,c
  8470  002054  2635               	addwf	___flmul@grs^0,f,c
  8471  002056  5040               	movf	(___flmul@temp+1)^0,w,c
  8472  002058  2236               	addwfc	(___flmul@grs+1)^0,f,c
  8473  00205A  0E00               	movlw	0
  8474  00205C  2237               	addwfc	(___flmul@grs+2)^0,f,c
  8475  00205E  0E00               	movlw	0
  8476  002060  2238               	addwfc	(___flmul@grs+3)^0,f,c
  8477  002062  502D               	movf	(___flmul@a+1)^0,w,c
  8478  002064  0228               	mulwf	___flmul@b^0,c
  8479  002066  CFF3 F03F          	movff	prodl,___flmul@temp
  8480  00206A  CFF4 F040          	movff	prodh,___flmul@temp+1
  8481  00206E  503F               	movf	___flmul@temp^0,w,c
  8482  002070  2635               	addwf	___flmul@grs^0,f,c
  8483  002072  5040               	movf	(___flmul@temp+1)^0,w,c
  8484  002074  2236               	addwfc	(___flmul@grs+1)^0,f,c
  8485  002076  0E00               	movlw	0
  8486  002078  2237               	addwfc	(___flmul@grs+2)^0,f,c
  8487  00207A  0E00               	movlw	0
  8488  00207C  2238               	addwfc	(___flmul@grs+3)^0,f,c
  8489  00207E  C037  F038         	movff	___flmul@grs+2,___flmul@grs+3
  8490  002082  C036  F037         	movff	___flmul@grs+1,___flmul@grs+2
  8491  002086  C035  F036         	movff	___flmul@grs,___flmul@grs+1
  8492  00208A  6A35               	clrf	___flmul@grs^0,c
  8493  00208C  502C               	movf	___flmul@a^0,w,c
  8494  00208E  0228               	mulwf	___flmul@b^0,c
  8495  002090  CFF3 F03F          	movff	prodl,___flmul@temp
  8496  002094  CFF4 F040          	movff	prodh,___flmul@temp+1
  8497  002098  503F               	movf	___flmul@temp^0,w,c
  8498  00209A  2635               	addwf	___flmul@grs^0,f,c
  8499  00209C  5040               	movf	(___flmul@temp+1)^0,w,c
  8500  00209E  2236               	addwfc	(___flmul@grs+1)^0,f,c
  8501  0020A0  0E00               	movlw	0
  8502  0020A2  2237               	addwfc	(___flmul@grs+2)^0,f,c
  8503  0020A4  0E00               	movlw	0
  8504  0020A6  2238               	addwfc	(___flmul@grs+3)^0,f,c
  8505  0020A8  502E               	movf	(___flmul@a+2)^0,w,c
  8506  0020AA  0229               	mulwf	(___flmul@b+1)^0,c
  8507  0020AC  CFF3 F03F          	movff	prodl,___flmul@temp
  8508  0020B0  CFF4 F040          	movff	prodh,___flmul@temp+1
  8509  0020B4  503F               	movf	___flmul@temp^0,w,c
  8510  0020B6  263B               	addwf	___flmul@prod^0,f,c
  8511  0020B8  5040               	movf	(___flmul@temp+1)^0,w,c
  8512  0020BA  223C               	addwfc	(___flmul@prod+1)^0,f,c
  8513  0020BC  0E00               	movlw	0
  8514  0020BE  223D               	addwfc	(___flmul@prod+2)^0,f,c
  8515  0020C0  0E00               	movlw	0
  8516  0020C2  223E               	addwfc	(___flmul@prod+3)^0,f,c
  8517  0020C4  502D               	movf	(___flmul@a+1)^0,w,c
  8518  0020C6  022A               	mulwf	(___flmul@b+2)^0,c
  8519  0020C8  CFF3 F03F          	movff	prodl,___flmul@temp
  8520  0020CC  CFF4 F040          	movff	prodh,___flmul@temp+1
  8521  0020D0  503F               	movf	___flmul@temp^0,w,c
  8522  0020D2  263B               	addwf	___flmul@prod^0,f,c
  8523  0020D4  5040               	movf	(___flmul@temp+1)^0,w,c
  8524  0020D6  223C               	addwfc	(___flmul@prod+1)^0,f,c
  8525  0020D8  0E00               	movlw	0
  8526  0020DA  223D               	addwfc	(___flmul@prod+2)^0,f,c
  8527  0020DC  0E00               	movlw	0
  8528  0020DE  223E               	addwfc	(___flmul@prod+3)^0,f,c
  8529  0020E0  502E               	movf	(___flmul@a+2)^0,w,c
  8530  0020E2  022A               	mulwf	(___flmul@b+2)^0,c
  8531  0020E4  CFF3 F03F          	movff	prodl,___flmul@temp
  8532  0020E8  CFF4 F040          	movff	prodh,___flmul@temp+1
  8533  0020EC  503F               	movf	___flmul@temp^0,w,c
  8534  0020EE  6E30               	movwf	??___flmul^0,c
  8535  0020F0  5040               	movf	(___flmul@temp+1)^0,w,c
  8536  0020F2  6E31               	movwf	(??___flmul+1)^0,c
  8537  0020F4  6A32               	clrf	(??___flmul+2)^0,c
  8538  0020F6  6A33               	clrf	(??___flmul+3)^0,c
  8539  0020F8  C032  F033         	movff	??___flmul+2,??___flmul+3
  8540  0020FC  C031  F032         	movff	??___flmul+1,??___flmul+2
  8541  002100  C030  F031         	movff	??___flmul,??___flmul+1
  8542  002104  6A30               	clrf	??___flmul^0,c
  8543  002106  5030               	movf	??___flmul^0,w,c
  8544  002108  263B               	addwf	___flmul@prod^0,f,c
  8545  00210A  5031               	movf	(??___flmul+1)^0,w,c
  8546  00210C  223C               	addwfc	(___flmul@prod+1)^0,f,c
  8547  00210E  5032               	movf	(??___flmul+2)^0,w,c
  8548  002110  223D               	addwfc	(___flmul@prod+2)^0,f,c
  8549  002112  5033               	movf	(??___flmul+3)^0,w,c
  8550  002114  223E               	addwfc	(___flmul@prod+3)^0,f,c
  8551  002116  C035  F030         	movff	___flmul@grs,??___flmul
  8552  00211A  C036  F031         	movff	___flmul@grs+1,??___flmul+1
  8553  00211E  C037  F032         	movff	___flmul@grs+2,??___flmul+2
  8554  002122  C038  F033         	movff	___flmul@grs+3,??___flmul+3
  8555  002126  0E19               	movlw	25
  8556  002128  EF9B  F010         	goto	u4020
  8557  00212C                     u4025:
  8558  00212C  90D8               	bcf	status,0,c
  8559  00212E  3233               	rrcf	(??___flmul+3)^0,f,c
  8560  002130  3232               	rrcf	(??___flmul+2)^0,f,c
  8561  002132  3231               	rrcf	(??___flmul+1)^0,f,c
  8562  002134  3230               	rrcf	??___flmul^0,f,c
  8563  002136                     u4020:
  8564  002136  2EE8               	decfsz	wreg,f,c
  8565  002138  EF96  F010         	goto	u4025
  8566  00213C  5030               	movf	??___flmul^0,w,c
  8567  00213E  263B               	addwf	___flmul@prod^0,f,c
  8568  002140  5031               	movf	(??___flmul+1)^0,w,c
  8569  002142  223C               	addwfc	(___flmul@prod+1)^0,f,c
  8570  002144  5032               	movf	(??___flmul+2)^0,w,c
  8571  002146  223D               	addwfc	(___flmul@prod+2)^0,f,c
  8572  002148  5033               	movf	(??___flmul+3)^0,w,c
  8573  00214A  223E               	addwfc	(___flmul@prod+3)^0,f,c
  8574  00214C  C037  F038         	movff	___flmul@grs+2,___flmul@grs+3
  8575  002150  C036  F037         	movff	___flmul@grs+1,___flmul@grs+2
  8576  002154  C035  F036         	movff	___flmul@grs,___flmul@grs+1
  8577  002158  6A35               	clrf	___flmul@grs^0,c
  8578  00215A  5039               	movf	___flmul@aexp^0,w,c
  8579  00215C  C03A  F030         	movff	___flmul@bexp,??___flmul
  8580  002160  6A31               	clrf	(??___flmul+1)^0,c
  8581  002162  2630               	addwf	??___flmul^0,f,c
  8582  002164  0E00               	movlw	0
  8583  002166  2231               	addwfc	(??___flmul+1)^0,f,c
  8584  002168  0E82               	movlw	130
  8585  00216A  2430               	addwf	??___flmul^0,w,c
  8586  00216C  6E3F               	movwf	___flmul@temp^0,c
  8587  00216E  0EFF               	movlw	255
  8588  002170  2031               	addwfc	(??___flmul+1)^0,w,c
  8589  002172  6E40               	movwf	(___flmul@temp+1)^0,c
  8590  002174  EFD1  F010         	goto	l4129
  8591  002178                     l4123:
  8592  002178  90D8               	bcf	status,0,c
  8593  00217A  363B               	rlcf	___flmul@prod^0,f,c
  8594  00217C  363C               	rlcf	(___flmul@prod+1)^0,f,c
  8595  00217E  363D               	rlcf	(___flmul@prod+2)^0,f,c
  8596  002180  363E               	rlcf	(___flmul@prod+3)^0,f,c
  8597  002182  AE38               	btfss	(___flmul@grs+3)^0,7,c
  8598  002184  EFC6  F010         	goto	u4031
  8599  002188  EFC8  F010         	goto	u4030
  8600  00218C                     u4031:
  8601  00218C  EFC9  F010         	goto	l1310
  8602  002190                     u4030:
  8603  002190  803B               	bsf	___flmul@prod^0,0,c
  8604  002192                     l1310:
  8605  002192  90D8               	bcf	status,0,c
  8606  002194  3635               	rlcf	___flmul@grs^0,f,c
  8607  002196  3636               	rlcf	(___flmul@grs+1)^0,f,c
  8608  002198  3637               	rlcf	(___flmul@grs+2)^0,f,c
  8609  00219A  3638               	rlcf	(___flmul@grs+3)^0,f,c
  8610  00219C  063F               	decf	___flmul@temp^0,f,c
  8611  00219E  A0D8               	btfss	status,0,c
  8612  0021A0  0640               	decf	(___flmul@temp+1)^0,f,c
  8613  0021A2                     l4129:
  8614  0021A2  AE3D               	btfss	(___flmul@prod+2)^0,7,c
  8615  0021A4  EFD6  F010         	goto	u4041
  8616  0021A8  EFD8  F010         	goto	u4040
  8617  0021AC                     u4041:
  8618  0021AC  EFBC  F010         	goto	l4123
  8619  0021B0                     u4040:
  8620  0021B0  0E00               	movlw	0
  8621  0021B2  6E39               	movwf	___flmul@aexp^0,c
  8622  0021B4  AE38               	btfss	(___flmul@grs+3)^0,7,c
  8623  0021B6  EFDF  F010         	goto	u4051
  8624  0021BA  EFE1  F010         	goto	u4050
  8625  0021BE                     u4051:
  8626  0021BE  EF05  F011         	goto	l1312
  8627  0021C2                     u4050:
  8628  0021C2  0EFF               	movlw	255
  8629  0021C4  1435               	andwf	___flmul@grs^0,w,c
  8630  0021C6  6E30               	movwf	??___flmul^0,c
  8631  0021C8  0EFF               	movlw	255
  8632  0021CA  1436               	andwf	(___flmul@grs+1)^0,w,c
  8633  0021CC  6E31               	movwf	(??___flmul+1)^0,c
  8634  0021CE  0EFF               	movlw	255
  8635  0021D0  1437               	andwf	(___flmul@grs+2)^0,w,c
  8636  0021D2  6E32               	movwf	(??___flmul+2)^0,c
  8637  0021D4  0E7F               	movlw	127
  8638  0021D6  1438               	andwf	(___flmul@grs+3)^0,w,c
  8639  0021D8  6E33               	movwf	(??___flmul+3)^0,c
  8640  0021DA  5030               	movf	??___flmul^0,w,c
  8641  0021DC  1031               	iorwf	(??___flmul+1)^0,w,c
  8642  0021DE  1032               	iorwf	(??___flmul+2)^0,w,c
  8643  0021E0  1033               	iorwf	(??___flmul+3)^0,w,c
  8644  0021E2  B4D8               	btfsc	status,2,c
  8645  0021E4  EFF6  F010         	goto	u4061
  8646  0021E8  EFF8  F010         	goto	u4060
  8647  0021EC                     u4061:
  8648  0021EC  EFFC  F010         	goto	l1313
  8649  0021F0                     u4060:
  8650  0021F0                     l4137:
  8651  0021F0  0E01               	movlw	1
  8652  0021F2  6E39               	movwf	___flmul@aexp^0,c
  8653  0021F4  EF05  F011         	goto	l1312
  8654  0021F8                     l1313:
  8655  0021F8  A03B               	btfss	___flmul@prod^0,0,c
  8656  0021FA  EF01  F011         	goto	u4071
  8657  0021FE  EF03  F011         	goto	u4070
  8658  002202                     u4071:
  8659  002202  EF05  F011         	goto	l1312
  8660  002206                     u4070:
  8661  002206  EFF8  F010         	goto	l4137
  8662  00220A                     l1312:
  8663  00220A  5039               	movf	___flmul@aexp^0,w,c
  8664  00220C  B4D8               	btfsc	status,2,c
  8665  00220E  EF0B  F011         	goto	u4081
  8666  002212  EF0D  F011         	goto	u4080
  8667  002216                     u4081:
  8668  002216  EF31  F011         	goto	l4149
  8669  00221A                     u4080:
  8670  00221A  0E01               	movlw	1
  8671  00221C  263B               	addwf	___flmul@prod^0,f,c
  8672  00221E  0E00               	movlw	0
  8673  002220  223C               	addwfc	(___flmul@prod+1)^0,f,c
  8674  002222  223D               	addwfc	(___flmul@prod+2)^0,f,c
  8675  002224  223E               	addwfc	(___flmul@prod+3)^0,f,c
  8676  002226  A03E               	btfss	(___flmul@prod+3)^0,0,c
  8677  002228  EF18  F011         	goto	u4091
  8678  00222C  EF1A  F011         	goto	u4090
  8679  002230                     u4091:
  8680  002230  EF31  F011         	goto	l4149
  8681  002234                     u4090:
  8682  002234  C03B  F030         	movff	___flmul@prod,??___flmul
  8683  002238  C03C  F031         	movff	___flmul@prod+1,??___flmul+1
  8684  00223C  C03D  F032         	movff	___flmul@prod+2,??___flmul+2
  8685  002240  C03E  F033         	movff	___flmul@prod+3,??___flmul+3
  8686  002244  3433               	rlcf	(??___flmul+3)^0,w,c
  8687  002246  3233               	rrcf	(??___flmul+3)^0,f,c
  8688  002248  3232               	rrcf	(??___flmul+2)^0,f,c
  8689  00224A  3231               	rrcf	(??___flmul+1)^0,f,c
  8690  00224C  3230               	rrcf	??___flmul^0,f,c
  8691  00224E  C030  F03B         	movff	??___flmul,___flmul@prod
  8692  002252  C031  F03C         	movff	??___flmul+1,___flmul@prod+1
  8693  002256  C032  F03D         	movff	??___flmul+2,___flmul@prod+2
  8694  00225A  C033  F03E         	movff	??___flmul+3,___flmul@prod+3
  8695  00225E  4A3F               	infsnz	___flmul@temp^0,f,c
  8696  002260  2A40               	incf	(___flmul@temp+1)^0,f,c
  8697  002262                     l4149:
  8698  002262  BE40               	btfsc	(___flmul@temp+1)^0,7,c
  8699  002264  EF3C  F011         	goto	u4101
  8700  002268  5040               	movf	(___flmul@temp+1)^0,w,c
  8701  00226A  E108               	bnz	u4100
  8702  00226C  283F               	incf	___flmul@temp^0,w,c
  8703  00226E  A0D8               	btfss	status,0,c
  8704  002270  EF3C  F011         	goto	u4101
  8705  002274  EF3E  F011         	goto	u4100
  8706  002278                     u4101:
  8707  002278  EF48  F011         	goto	l4153
  8708  00227C                     u4100:
  8709  00227C  0E00               	movlw	0
  8710  00227E  6E3B               	movwf	___flmul@prod^0,c
  8711  002280  0E00               	movlw	0
  8712  002282  6E3C               	movwf	(___flmul@prod+1)^0,c
  8713  002284  0E80               	movlw	128
  8714  002286  6E3D               	movwf	(___flmul@prod+2)^0,c
  8715  002288  0E7F               	movlw	127
  8716  00228A  6E3E               	movwf	(___flmul@prod+3)^0,c
  8717  00228C  EF76  F011         	goto	l4165
  8718  002290                     l4153:
  8719  002290  BE40               	btfsc	(___flmul@temp+1)^0,7,c
  8720  002292  EF55  F011         	goto	u4110
  8721  002296  5040               	movf	(___flmul@temp+1)^0,w,c
  8722  002298  E106               	bnz	u4111
  8723  00229A  043F               	decf	___flmul@temp^0,w,c
  8724  00229C  B0D8               	btfsc	status,0,c
  8725  00229E  EF53  F011         	goto	u4111
  8726  0022A2  EF55  F011         	goto	u4110
  8727  0022A6                     u4111:
  8728  0022A6  EF61  F011         	goto	l1320
  8729  0022AA                     u4110:
  8730  0022AA  0E00               	movlw	0
  8731  0022AC  6E3B               	movwf	___flmul@prod^0,c
  8732  0022AE  0E00               	movlw	0
  8733  0022B0  6E3C               	movwf	(___flmul@prod+1)^0,c
  8734  0022B2  0E00               	movlw	0
  8735  0022B4  6E3D               	movwf	(___flmul@prod+2)^0,c
  8736  0022B6  0E00               	movlw	0
  8737  0022B8  6E3E               	movwf	(___flmul@prod+3)^0,c
  8738  0022BA  0E00               	movlw	0
  8739  0022BC  6E34               	movwf	___flmul@sign^0,c
  8740  0022BE  EF76  F011         	goto	l4165
  8741  0022C2                     l1320:
  8742  0022C2  C03F  F03A         	movff	___flmul@temp,___flmul@bexp
  8743  0022C6  0EFF               	movlw	255
  8744  0022C8  163B               	andwf	___flmul@prod^0,f,c
  8745  0022CA  0EFF               	movlw	255
  8746  0022CC  163C               	andwf	(___flmul@prod+1)^0,f,c
  8747  0022CE  0E7F               	movlw	127
  8748  0022D0  163D               	andwf	(___flmul@prod+2)^0,f,c
  8749  0022D2  0E00               	movlw	0
  8750  0022D4  163E               	andwf	(___flmul@prod+3)^0,f,c
  8751  0022D6  A03A               	btfss	___flmul@bexp^0,0,c
  8752  0022D8  EF70  F011         	goto	u4121
  8753  0022DC  EF72  F011         	goto	u4120
  8754  0022E0                     u4121:
  8755  0022E0  EF73  F011         	goto	l4163
  8756  0022E4                     u4120:
  8757  0022E4  8E3D               	bsf	(___flmul@prod+2)^0,7,c
  8758  0022E6                     l4163:
  8759  0022E6  90D8               	bcf	status,0,c
  8760  0022E8  303A               	rrcf	___flmul@bexp^0,w,c
  8761  0022EA  6E3E               	movwf	(___flmul@prod+3)^0,c
  8762  0022EC                     l4165:
  8763  0022EC  5034               	movf	___flmul@sign^0,w,c
  8764  0022EE  123E               	iorwf	(___flmul@prod+3)^0,f,c
  8765  0022F0  C03B  F028         	movff	___flmul@prod,?___flmul
  8766  0022F4  C03C  F029         	movff	___flmul@prod+1,?___flmul+1
  8767  0022F8  C03D  F02A         	movff	___flmul@prod+2,?___flmul+2
  8768  0022FC  C03E  F02B         	movff	___flmul@prod+3,?___flmul+3
  8769  002300                     l1307:
  8770  002300  0012               	return		;funcret
  8771  002302                     __end_of___flmul:
  8772                           	callstack 0
  8773                           
  8774 ;; *************** function ___flge *****************
  8775 ;; Defined at:
  8776 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\flge.c"
  8777 ;; Parameters:    Size  Location     Type
  8778 ;;  ff1             4    0[COMRAM] unsigned char 
  8779 ;;  ff2             4    4[COMRAM] unsigned char 
  8780 ;; Auto vars:     Size  Location     Type
  8781 ;;		None
  8782 ;; Return value:  Size  Location     Type
  8783 ;;		None               void
  8784 ;; Registers used:
  8785 ;;		wreg, status,2, status,0
  8786 ;; Tracked objects:
  8787 ;;		On entry : 0/0
  8788 ;;		On exit  : 0/0
  8789 ;;		Unchanged: 0/0
  8790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8791 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8792 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8793 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8794 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8795 ;;Total ram usage:       12 bytes
  8796 ;; Hardware stack levels used: 1
  8797 ;; Hardware stack levels required when called: 1
  8798 ;; This function calls:
  8799 ;;		Nothing
  8800 ;; This function is called by:
  8801 ;;		_roundf
  8802 ;; This function uses a non-reentrant model
  8803 ;;
  8804                           
  8805                           	psect	text39
  8806  004D50                     __ptext39:
  8807                           	callstack 0
  8808  004D50                     ___flge:
  8809                           	callstack 25
  8810  004D50  0E00               	movlw	0
  8811  004D52  1401               	andwf	___flge@ff1^0,w,c
  8812  004D54  6E09               	movwf	??___flge^0,c
  8813  004D56  0E00               	movlw	0
  8814  004D58  1402               	andwf	(___flge@ff1+1)^0,w,c
  8815  004D5A  6E0A               	movwf	(??___flge+1)^0,c
  8816  004D5C  0E80               	movlw	128
  8817  004D5E  1403               	andwf	(___flge@ff1+2)^0,w,c
  8818  004D60  6E0B               	movwf	(??___flge+2)^0,c
  8819  004D62  0E7F               	movlw	127
  8820  004D64  1404               	andwf	(___flge@ff1+3)^0,w,c
  8821  004D66  6E0C               	movwf	(??___flge+3)^0,c
  8822  004D68  5009               	movf	??___flge^0,w,c
  8823  004D6A  100A               	iorwf	(??___flge+1)^0,w,c
  8824  004D6C  100B               	iorwf	(??___flge+2)^0,w,c
  8825  004D6E  100C               	iorwf	(??___flge+3)^0,w,c
  8826  004D70  A4D8               	btfss	status,2,c
  8827  004D72  EFBD  F026         	goto	u4131
  8828  004D76  EFBF  F026         	goto	u4130
  8829  004D7A                     u4131:
  8830  004D7A  EFC7  F026         	goto	l4181
  8831  004D7E                     u4130:
  8832  004D7E  0E00               	movlw	0
  8833  004D80  6E01               	movwf	___flge@ff1^0,c
  8834  004D82  0E00               	movlw	0
  8835  004D84  6E02               	movwf	(___flge@ff1+1)^0,c
  8836  004D86  0E00               	movlw	0
  8837  004D88  6E03               	movwf	(___flge@ff1+2)^0,c
  8838  004D8A  0E00               	movlw	0
  8839  004D8C  6E04               	movwf	(___flge@ff1+3)^0,c
  8840  004D8E                     l4181:
  8841  004D8E  0E00               	movlw	0
  8842  004D90  1405               	andwf	___flge@ff2^0,w,c
  8843  004D92  6E09               	movwf	??___flge^0,c
  8844  004D94  0E00               	movlw	0
  8845  004D96  1406               	andwf	(___flge@ff2+1)^0,w,c
  8846  004D98  6E0A               	movwf	(??___flge+1)^0,c
  8847  004D9A  0E80               	movlw	128
  8848  004D9C  1407               	andwf	(___flge@ff2+2)^0,w,c
  8849  004D9E  6E0B               	movwf	(??___flge+2)^0,c
  8850  004DA0  0E7F               	movlw	127
  8851  004DA2  1408               	andwf	(___flge@ff2+3)^0,w,c
  8852  004DA4  6E0C               	movwf	(??___flge+3)^0,c
  8853  004DA6  5009               	movf	??___flge^0,w,c
  8854  004DA8  100A               	iorwf	(??___flge+1)^0,w,c
  8855  004DAA  100B               	iorwf	(??___flge+2)^0,w,c
  8856  004DAC  100C               	iorwf	(??___flge+3)^0,w,c
  8857  004DAE  A4D8               	btfss	status,2,c
  8858  004DB0  EFDC  F026         	goto	u4141
  8859  004DB4  EFDE  F026         	goto	u4140
  8860  004DB8                     u4141:
  8861  004DB8  EFE6  F026         	goto	l4185
  8862  004DBC                     u4140:
  8863  004DBC  0E00               	movlw	0
  8864  004DBE  6E05               	movwf	___flge@ff2^0,c
  8865  004DC0  0E00               	movlw	0
  8866  004DC2  6E06               	movwf	(___flge@ff2+1)^0,c
  8867  004DC4  0E00               	movlw	0
  8868  004DC6  6E07               	movwf	(___flge@ff2+2)^0,c
  8869  004DC8  0E00               	movlw	0
  8870  004DCA  6E08               	movwf	(___flge@ff2+3)^0,c
  8871  004DCC                     l4185:
  8872  004DCC  AE04               	btfss	(___flge@ff1+3)^0,7,c
  8873  004DCE  EFEB  F026         	goto	u4151
  8874  004DD2  EFED  F026         	goto	u4150
  8875  004DD6                     u4151:
  8876  004DD6  EFF6  F026         	goto	l4189
  8877  004DDA                     u4150:
  8878  004DDA  6C01               	negf	___flge@ff1^0,c
  8879  004DDC  1E02               	comf	(___flge@ff1+1)^0,f,c
  8880  004DDE  B0D8               	btfsc	status,0,c
  8881  004DE0  2A02               	incf	(___flge@ff1+1)^0,f,c
  8882  004DE2  1E03               	comf	(___flge@ff1+2)^0,f,c
  8883  004DE4  B0D8               	btfsc	status,0,c
  8884  004DE6  2A03               	incf	(___flge@ff1+2)^0,f,c
  8885  004DE8  0E80               	movlw	128
  8886  004DEA  5604               	subfwb	(___flge@ff1+3)^0,f,c
  8887  004DEC                     l4189:
  8888  004DEC  AE08               	btfss	(___flge@ff2+3)^0,7,c
  8889  004DEE  EFFB  F026         	goto	u4161
  8890  004DF2  EFFD  F026         	goto	u4160
  8891  004DF6                     u4161:
  8892  004DF6  EF06  F027         	goto	l954
  8893  004DFA                     u4160:
  8894  004DFA  6C05               	negf	___flge@ff2^0,c
  8895  004DFC  1E06               	comf	(___flge@ff2+1)^0,f,c
  8896  004DFE  B0D8               	btfsc	status,0,c
  8897  004E00  2A06               	incf	(___flge@ff2+1)^0,f,c
  8898  004E02  1E07               	comf	(___flge@ff2+2)^0,f,c
  8899  004E04  B0D8               	btfsc	status,0,c
  8900  004E06  2A07               	incf	(___flge@ff2+2)^0,f,c
  8901  004E08  0E80               	movlw	128
  8902  004E0A  5608               	subfwb	(___flge@ff2+3)^0,f,c
  8903  004E0C                     l954:
  8904  004E0C  0E00               	movlw	0
  8905  004E0E  1A01               	xorwf	___flge@ff1^0,f,c
  8906  004E10  0E00               	movlw	0
  8907  004E12  1A02               	xorwf	(___flge@ff1+1)^0,f,c
  8908  004E14  0E00               	movlw	0
  8909  004E16  1A03               	xorwf	(___flge@ff1+2)^0,f,c
  8910  004E18  0E80               	movlw	128
  8911  004E1A  1A04               	xorwf	(___flge@ff1+3)^0,f,c
  8912  004E1C  0E00               	movlw	0
  8913  004E1E  1A05               	xorwf	___flge@ff2^0,f,c
  8914  004E20  0E00               	movlw	0
  8915  004E22  1A06               	xorwf	(___flge@ff2+1)^0,f,c
  8916  004E24  0E00               	movlw	0
  8917  004E26  1A07               	xorwf	(___flge@ff2+2)^0,f,c
  8918  004E28  0E80               	movlw	128
  8919  004E2A  1A08               	xorwf	(___flge@ff2+3)^0,f,c
  8920  004E2C  5005               	movf	___flge@ff2^0,w,c
  8921  004E2E  5C01               	subwf	___flge@ff1^0,w,c
  8922  004E30  5006               	movf	(___flge@ff2+1)^0,w,c
  8923  004E32  5802               	subwfb	(___flge@ff1+1)^0,w,c
  8924  004E34  5007               	movf	(___flge@ff2+2)^0,w,c
  8925  004E36  5803               	subwfb	(___flge@ff1+2)^0,w,c
  8926  004E38  5008               	movf	(___flge@ff2+3)^0,w,c
  8927  004E3A  5804               	subwfb	(___flge@ff1+3)^0,w,c
  8928  004E3C  B0D8               	btfsc	status,0,c
  8929  004E3E  EF23  F027         	goto	u4171
  8930  004E42  EF25  F027         	goto	u4170
  8931  004E46                     u4171:
  8932  004E46  EF28  F027         	goto	l4195
  8933  004E4A                     u4170:
  8934  004E4A  90D8               	bcf	status,0,c
  8935  004E4C  EF29  F027         	goto	l959
  8936  004E50                     l4195:
  8937  004E50  80D8               	bsf	status,0,c
  8938  004E52                     l959:
  8939  004E52  0012               	return		;funcret
  8940  004E54                     __end_of___flge:
  8941                           	callstack 0
  8942                           
  8943 ;; *************** function ___fltol *****************
  8944 ;; Defined at:
  8945 ;;		line 43 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\fltol.c"
  8946 ;; Parameters:    Size  Location     Type
  8947 ;;  f1              4   90[COMRAM] unsigned char 
  8948 ;; Auto vars:     Size  Location     Type
  8949 ;;  exp1            1    5[BANK0 ] unsigned char 
  8950 ;;  sign1           1    4[BANK0 ] unsigned char 
  8951 ;; Return value:  Size  Location     Type
  8952 ;;                  4   90[COMRAM] long 
  8953 ;; Registers used:
  8954 ;;		wreg, status,2, status,0
  8955 ;; Tracked objects:
  8956 ;;		On entry : 0/0
  8957 ;;		On exit  : 0/0
  8958 ;;		Unchanged: 0/0
  8959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8960 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8961 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8962 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8963 ;;      Totals:         4       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8964 ;;Total ram usage:       10 bytes
  8965 ;; Hardware stack levels used: 1
  8966 ;; Hardware stack levels required when called: 1
  8967 ;; This function calls:
  8968 ;;		Nothing
  8969 ;; This function is called by:
  8970 ;;		_lroundf
  8971 ;; This function uses a non-reentrant model
  8972 ;;
  8973                           
  8974                           	psect	text40
  8975  004C48                     __ptext40:
  8976                           	callstack 0
  8977  004C48                     ___fltol:
  8978                           	callstack 26
  8979  004C48  345D               	rlcf	(___fltol@f1+2)^0,w,c
  8980  004C4A  345E               	rlcf	(___fltol@f1+3)^0,w,c
  8981  004C4C  0100               	movlb	0	; () banked
  8982  004C4E  6F65               	movwf	___fltol@exp1& (0+255),b
  8983  004C50  5165               	movf	___fltol@exp1& (0+255),w,b
  8984  004C52  A4D8               	btfss	status,2,c
  8985  004C54  EF2E  F026         	goto	u4311
  8986  004C58  EF30  F026         	goto	u4310
  8987  004C5C                     u4311:
  8988  004C5C  EF3A  F026         	goto	l4321
  8989  004C60                     u4310:
  8990  004C60                     l4317:
  8991                           
  8992                           ; BSR set to: 0
  8993  004C60  0E00               	movlw	0
  8994  004C62  6E5B               	movwf	?___fltol^0,c
  8995  004C64  0E00               	movlw	0
  8996  004C66  6E5C               	movwf	(?___fltol+1)^0,c
  8997  004C68  0E00               	movlw	0
  8998  004C6A  6E5D               	movwf	(?___fltol+2)^0,c
  8999  004C6C  0E00               	movlw	0
  9000  004C6E  6E5E               	movwf	(?___fltol+3)^0,c
  9001  004C70  EFA7  F026         	goto	l986
  9002  004C74                     l4321:
  9003                           
  9004                           ; BSR set to: 0
  9005  004C74  C05B  F060         	movff	___fltol@f1,??___fltol
  9006  004C78  C05C  F061         	movff	___fltol@f1+1,??___fltol+1
  9007  004C7C  C05D  F062         	movff	___fltol@f1+2,??___fltol+2
  9008  004C80  C05E  F063         	movff	___fltol@f1+3,??___fltol+3
  9009  004C84  0E20               	movlw	32
  9010  004C86  EF4A  F026         	goto	u4320
  9011  004C8A                     u4325:
  9012  004C8A  90D8               	bcf	status,0,c
  9013  004C8C  3363               	rrcf	(??___fltol+3)& (0+255),f,b
  9014  004C8E  3362               	rrcf	(??___fltol+2)& (0+255),f,b
  9015  004C90  3361               	rrcf	(??___fltol+1)& (0+255),f,b
  9016  004C92  3360               	rrcf	??___fltol& (0+255),f,b
  9017  004C94                     u4320:
  9018  004C94  2EE8               	decfsz	wreg,f,c
  9019  004C96  EF45  F026         	goto	u4325
  9020  004C9A  5160               	movf	??___fltol& (0+255),w,b
  9021  004C9C  6F64               	movwf	___fltol@sign1& (0+255),b
  9022  004C9E                     
  9023                           ; BSR set to: 0
  9024  004C9E  8E5D               	bsf	(___fltol@f1+2)^0,7,c
  9025  004CA0                     
  9026                           ; BSR set to: 0
  9027  004CA0  0EFF               	movlw	255
  9028  004CA2  165B               	andwf	___fltol@f1^0,f,c
  9029  004CA4  0EFF               	movlw	255
  9030  004CA6  165C               	andwf	(___fltol@f1+1)^0,f,c
  9031  004CA8  0EFF               	movlw	255
  9032  004CAA  165D               	andwf	(___fltol@f1+2)^0,f,c
  9033  004CAC  0E00               	movlw	0
  9034  004CAE  165E               	andwf	(___fltol@f1+3)^0,f,c
  9035  004CB0                     
  9036                           ; BSR set to: 0
  9037  004CB0  0E96               	movlw	150
  9038  004CB2  5F65               	subwf	___fltol@exp1& (0+255),f,b
  9039  004CB4                     
  9040                           ; BSR set to: 0
  9041  004CB4  BF65               	btfsc	___fltol@exp1& (0+255),7,b
  9042  004CB6  EF61  F026         	goto	u4330
  9043  004CBA  EF5F  F026         	goto	u4331
  9044  004CBE                     u4331:
  9045  004CBE  EF77  F026         	goto	l4341
  9046  004CC2                     u4330:
  9047  004CC2                     
  9048                           ; BSR set to: 0
  9049  004CC2  5165               	movf	___fltol@exp1& (0+255),w,b
  9050  004CC4  0A80               	xorlw	128
  9051  004CC6  0F97               	addlw	151
  9052  004CC8  B0D8               	btfsc	status,0,c
  9053  004CCA  EF69  F026         	goto	u4341
  9054  004CCE  EF6B  F026         	goto	u4340
  9055  004CD2                     u4341:
  9056  004CD2  EF6D  F026         	goto	l4337
  9057  004CD6                     u4340:
  9058  004CD6  EF30  F026         	goto	l4317
  9059  004CDA                     l4337:
  9060                           
  9061                           ; BSR set to: 0
  9062  004CDA  90D8               	bcf	status,0,c
  9063  004CDC  325E               	rrcf	(___fltol@f1+3)^0,f,c
  9064  004CDE  325D               	rrcf	(___fltol@f1+2)^0,f,c
  9065  004CE0  325C               	rrcf	(___fltol@f1+1)^0,f,c
  9066  004CE2  325B               	rrcf	___fltol@f1^0,f,c
  9067  004CE4                     
  9068                           ; BSR set to: 0
  9069  004CE4  3F65               	incfsz	___fltol@exp1& (0+255),f,b
  9070  004CE6  EF6D  F026         	goto	l4337
  9071  004CEA  EF8F  F026         	goto	l4351
  9072  004CEE                     l4341:
  9073                           
  9074                           ; BSR set to: 0
  9075  004CEE  0E1F               	movlw	31
  9076  004CF0  6565               	cpfsgt	___fltol@exp1& (0+255),b
  9077  004CF2  EF7D  F026         	goto	u4351
  9078  004CF6  EF7F  F026         	goto	u4350
  9079  004CFA                     u4351:
  9080  004CFA  EF87  F026         	goto	l4349
  9081  004CFE                     u4350:
  9082  004CFE  EF30  F026         	goto	l4317
  9083  004D02                     l4347:
  9084                           
  9085                           ; BSR set to: 0
  9086  004D02  90D8               	bcf	status,0,c
  9087  004D04  365B               	rlcf	___fltol@f1^0,f,c
  9088  004D06  365C               	rlcf	(___fltol@f1+1)^0,f,c
  9089  004D08  365D               	rlcf	(___fltol@f1+2)^0,f,c
  9090  004D0A  365E               	rlcf	(___fltol@f1+3)^0,f,c
  9091  004D0C  0765               	decf	___fltol@exp1& (0+255),f,b
  9092  004D0E                     l4349:
  9093                           
  9094                           ; BSR set to: 0
  9095  004D0E  5165               	movf	___fltol@exp1& (0+255),w,b
  9096  004D10  A4D8               	btfss	status,2,c
  9097  004D12  EF8D  F026         	goto	u4361
  9098  004D16  EF8F  F026         	goto	u4360
  9099  004D1A                     u4361:
  9100  004D1A  EF81  F026         	goto	l4347
  9101  004D1E                     u4360:
  9102  004D1E                     l4351:
  9103                           
  9104                           ; BSR set to: 0
  9105  004D1E  5164               	movf	___fltol@sign1& (0+255),w,b
  9106  004D20  B4D8               	btfsc	status,2,c
  9107  004D22  EF95  F026         	goto	u4371
  9108  004D26  EF97  F026         	goto	u4370
  9109  004D2A                     u4371:
  9110  004D2A  EF9F  F026         	goto	l4355
  9111  004D2E                     u4370:
  9112  004D2E                     
  9113                           ; BSR set to: 0
  9114  004D2E  1E5E               	comf	(___fltol@f1+3)^0,f,c
  9115  004D30  1E5D               	comf	(___fltol@f1+2)^0,f,c
  9116  004D32  1E5C               	comf	(___fltol@f1+1)^0,f,c
  9117  004D34  6C5B               	negf	___fltol@f1^0,c
  9118  004D36  0E00               	movlw	0
  9119  004D38  225C               	addwfc	(___fltol@f1+1)^0,f,c
  9120  004D3A  225D               	addwfc	(___fltol@f1+2)^0,f,c
  9121  004D3C  225E               	addwfc	(___fltol@f1+3)^0,f,c
  9122  004D3E                     l4355:
  9123                           
  9124                           ; BSR set to: 0
  9125  004D3E  C05B  F05B         	movff	___fltol@f1,?___fltol
  9126  004D42  C05C  F05C         	movff	___fltol@f1+1,?___fltol+1
  9127  004D46  C05D  F05D         	movff	___fltol@f1+2,?___fltol+2
  9128  004D4A  C05E  F05E         	movff	___fltol@f1+3,?___fltol+3
  9129  004D4E                     l986:
  9130                           
  9131                           ; BSR set to: 0
  9132  004D4E  0012               	return		;funcret
  9133  004D50                     __end_of___fltol:
  9134                           	callstack 0
  9135                           
  9136 ;; *************** function _color_read_Clear *****************
  9137 ;; Defined at:
  9138 ;;		line 133 in file "color.c"
  9139 ;; Parameters:    Size  Location     Type
  9140 ;;		None
  9141 ;; Auto vars:     Size  Location     Type
  9142 ;;  tmp             2    9[COMRAM] unsigned int 
  9143 ;; Return value:  Size  Location     Type
  9144 ;;                  2    4[COMRAM] unsigned int 
  9145 ;; Registers used:
  9146 ;;		wreg, status,2, status,0, cstack
  9147 ;; Tracked objects:
  9148 ;;		On entry : 0/0
  9149 ;;		On exit  : 0/0
  9150 ;;		Unchanged: 0/0
  9151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9152 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9153 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9154 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9155 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9156 ;;Total ram usage:        7 bytes
  9157 ;; Hardware stack levels used: 1
  9158 ;; Hardware stack levels required when called: 3
  9159 ;; This function calls:
  9160 ;;		_I2C_2_Master_Read
  9161 ;;		_I2C_2_Master_RepStart
  9162 ;;		_I2C_2_Master_Start
  9163 ;;		_I2C_2_Master_Stop
  9164 ;;		_I2C_2_Master_Write
  9165 ;; This function is called by:
  9166 ;;		_read_color
  9167 ;;		_calibrate_white
  9168 ;;		_amb_light_measure
  9169 ;;		_distance_measure
  9170 ;; This function uses a non-reentrant model
  9171 ;;
  9172                           
  9173                           	psect	text41
  9174  0058CE                     __ptext41:
  9175                           	callstack 0
  9176  0058CE                     _color_read_Clear:
  9177                           	callstack 24
  9178  0058CE                     
  9179                           ;color.c: 135:  unsigned int tmp;;color.c: 136:  I2C_2_Master_Start();
  9180  0058CE  EC48  F02F         	call	_I2C_2_Master_Start	;wreg free
  9181                           
  9182                           ;color.c: 137:  I2C_2_Master_Write(0x52 | 0x00);
  9183  0058D2  0E52               	movlw	82
  9184  0058D4  EC32  F02F         	call	_I2C_2_Master_Write
  9185                           
  9186                           ;color.c: 138:  I2C_2_Master_Write(0xA0 | 0x14);
  9187  0058D8  0EB4               	movlw	180
  9188  0058DA  EC32  F02F         	call	_I2C_2_Master_Write
  9189                           
  9190                           ;color.c: 139:  I2C_2_Master_RepStart();
  9191  0058DE  EC3E  F02F         	call	_I2C_2_Master_RepStart	;wreg free
  9192                           
  9193                           ;color.c: 140:  I2C_2_Master_Write(0x52 | 0x01);
  9194  0058E2  0E53               	movlw	83
  9195  0058E4  EC32  F02F         	call	_I2C_2_Master_Write
  9196                           
  9197                           ;color.c: 141:  tmp=I2C_2_Master_Read(1);
  9198  0058E8  0E01               	movlw	1
  9199  0058EA  ECD4  F02C         	call	_I2C_2_Master_Read
  9200  0058EE  6E07               	movwf	??_color_read_Clear^0,c
  9201  0058F0  5007               	movf	??_color_read_Clear^0,w,c
  9202  0058F2  6E0A               	movwf	color_read_Clear@tmp^0,c
  9203  0058F4  6A0B               	clrf	(color_read_Clear@tmp+1)^0,c
  9204                           
  9205                           ;color.c: 142:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  9206  0058F6  0E00               	movlw	0
  9207  0058F8  ECD4  F02C         	call	_I2C_2_Master_Read
  9208  0058FC  6E07               	movwf	??_color_read_Clear^0,c
  9209  0058FE  5007               	movf	??_color_read_Clear^0,w,c
  9210  005900  6E09               	movwf	(??_color_read_Clear+2)^0,c
  9211  005902  6A08               	clrf	(??_color_read_Clear+1)^0,c
  9212  005904  500A               	movf	color_read_Clear@tmp^0,w,c
  9213  005906  1008               	iorwf	(??_color_read_Clear+1)^0,w,c
  9214  005908  6E0A               	movwf	color_read_Clear@tmp^0,c
  9215  00590A  500B               	movf	(color_read_Clear@tmp+1)^0,w,c
  9216  00590C  1009               	iorwf	(??_color_read_Clear+2)^0,w,c
  9217  00590E  6E0B               	movwf	(color_read_Clear@tmp+1)^0,c
  9218                           
  9219                           ;color.c: 143:  I2C_2_Master_Stop();
  9220  005910  EC43  F02F         	call	_I2C_2_Master_Stop	;wreg free
  9221  005914                     
  9222                           ;color.c: 144:  return tmp;
  9223  005914  C00A  F005         	movff	color_read_Clear@tmp,?_color_read_Clear
  9224  005918  C00B  F006         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
  9225  00591C  0012               	return		;funcret
  9226  00591E                     __end_of_color_read_Clear:
  9227                           	callstack 0
  9228                           
  9229 ;; *************** function _I2C_2_Master_RepStart *****************
  9230 ;; Defined at:
  9231 ;;		line 33 in file "i2c.c"
  9232 ;; Parameters:    Size  Location     Type
  9233 ;;		None
  9234 ;; Auto vars:     Size  Location     Type
  9235 ;;		None
  9236 ;; Return value:  Size  Location     Type
  9237 ;;                  1    wreg      void 
  9238 ;; Registers used:
  9239 ;;		wreg, status,2, status,0, cstack
  9240 ;; Tracked objects:
  9241 ;;		On entry : 0/0
  9242 ;;		On exit  : 0/0
  9243 ;;		Unchanged: 0/0
  9244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9246 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9247 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9248 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9249 ;;Total ram usage:        0 bytes
  9250 ;; Hardware stack levels used: 1
  9251 ;; Hardware stack levels required when called: 2
  9252 ;; This function calls:
  9253 ;;		_I2C_2_Master_Idle
  9254 ;; This function is called by:
  9255 ;;		_color_read_Red
  9256 ;;		_color_read_Blue
  9257 ;;		_color_read_Green
  9258 ;;		_color_read_Clear
  9259 ;; This function uses a non-reentrant model
  9260 ;;
  9261                           
  9262                           	psect	text42
  9263  005E7C                     __ptext42:
  9264                           	callstack 0
  9265  005E7C                     _I2C_2_Master_RepStart:
  9266                           	callstack 24
  9267  005E7C                     
  9268                           ;i2c.c: 35:   I2C_2_Master_Idle();
  9269  005E7C  EC66  F02E         	call	_I2C_2_Master_Idle	;wreg free
  9270  005E80                     
  9271                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  9272  005E80  010E               	movlb	14	; () banked
  9273  005E82  83DA               	bsf	218,1,b	;volatile
  9274  005E84                     
  9275                           ; BSR set to: 14
  9276  005E84  0012               	return		;funcret
  9277  005E86                     __end_of_I2C_2_Master_RepStart:
  9278                           	callstack 0
  9279                           
  9280 ;; *************** function _I2C_2_Master_Read *****************
  9281 ;; Defined at:
  9282 ;;		line 51 in file "i2c.c"
  9283 ;; Parameters:    Size  Location     Type
  9284 ;;  ack             1    wreg     unsigned char 
  9285 ;; Auto vars:     Size  Location     Type
  9286 ;;  ack             1    2[COMRAM] unsigned char 
  9287 ;;  tmp             1    3[COMRAM] unsigned char 
  9288 ;; Return value:  Size  Location     Type
  9289 ;;                  1    wreg      unsigned char 
  9290 ;; Registers used:
  9291 ;;		wreg, status,2, status,0, cstack
  9292 ;; Tracked objects:
  9293 ;;		On entry : 0/0
  9294 ;;		On exit  : 0/0
  9295 ;;		Unchanged: 0/0
  9296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9297 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9298 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9299 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9300 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9301 ;;Total ram usage:        3 bytes
  9302 ;; Hardware stack levels used: 1
  9303 ;; Hardware stack levels required when called: 2
  9304 ;; This function calls:
  9305 ;;		_I2C_2_Master_Idle
  9306 ;; This function is called by:
  9307 ;;		_color_read_Red
  9308 ;;		_color_read_Blue
  9309 ;;		_color_read_Green
  9310 ;;		_color_read_Clear
  9311 ;; This function uses a non-reentrant model
  9312 ;;
  9313                           
  9314                           	psect	text43
  9315  0059A8                     __ptext43:
  9316                           	callstack 0
  9317  0059A8                     _I2C_2_Master_Read:
  9318                           	callstack 24
  9319                           
  9320                           ; BSR set to: 14
  9321                           ;incstack = 0
  9322                           ;I2C_2_Master_Read@ack stored from wreg
  9323  0059A8  6E03               	movwf	I2C_2_Master_Read@ack^0,c
  9324  0059AA                     
  9325                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  9326  0059AA  EC66  F02E         	call	_I2C_2_Master_Idle	;wreg free
  9327  0059AE                     
  9328                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  9329  0059AE  010E               	movlb	14	; () banked
  9330  0059B0  87DA               	bsf	218,3,b	;volatile
  9331                           
  9332                           ;i2c.c: 56:   I2C_2_Master_Idle();
  9333  0059B2  EC66  F02E         	call	_I2C_2_Master_Idle	;wreg free
  9334  0059B6                     
  9335                           ;i2c.c: 57:   tmp = SSP2BUF;
  9336  0059B6  CED5 F004          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  9337                           
  9338                           ;i2c.c: 58:   I2C_2_Master_Idle();
  9339  0059BA  EC66  F02E         	call	_I2C_2_Master_Idle	;wreg free
  9340  0059BE                     
  9341                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  9342  0059BE  5003               	movf	I2C_2_Master_Read@ack^0,w,c
  9343  0059C0  B4D8               	btfsc	status,2,c
  9344  0059C2  EFE5  F02C         	goto	u3871
  9345  0059C6  EFE9  F02C         	goto	u3870
  9346  0059CA                     u3871:
  9347  0059CA  6A02               	clrf	??_I2C_2_Master_Read^0,c
  9348  0059CC  2A02               	incf	??_I2C_2_Master_Read^0,f,c
  9349  0059CE  EFEA  F02C         	goto	u3888
  9350  0059D2                     u3870:
  9351  0059D2  6A02               	clrf	??_I2C_2_Master_Read^0,c
  9352  0059D4                     u3888:
  9353  0059D4  3A02               	swapf	??_I2C_2_Master_Read^0,f,c
  9354  0059D6  4602               	rlncf	??_I2C_2_Master_Read^0,f,c
  9355  0059D8  010E               	movlb	14	; () banked
  9356  0059DA  51DA               	movf	218,w,b	;volatile
  9357  0059DC  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  9358  0059DE  0BDF               	andlw	-33
  9359  0059E0  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  9360  0059E2  6FDA               	movwf	218,b	;volatile
  9361  0059E4                     
  9362                           ; BSR set to: 14
  9363                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  9364  0059E4  89DA               	bsf	218,4,b	;volatile
  9365  0059E6                     
  9366                           ; BSR set to: 14
  9367                           ;i2c.c: 61:   return tmp;
  9368  0059E6  5004               	movf	I2C_2_Master_Read@tmp^0,w,c
  9369  0059E8                     
  9370                           ; BSR set to: 14
  9371  0059E8  0012               	return		;funcret
  9372  0059EA                     __end_of_I2C_2_Master_Read:
  9373                           	callstack 0
  9374                           
  9375 ;; *************** function ___xxtofl *****************
  9376 ;; Defined at:
  9377 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\xxtofl.c"
  9378 ;; Parameters:    Size  Location     Type
  9379 ;;  sign            1    wreg     unsigned char 
  9380 ;;  val             4    0[COMRAM] long 
  9381 ;; Auto vars:     Size  Location     Type
  9382 ;;  sign            1    8[COMRAM] unsigned char 
  9383 ;;  arg             4   10[COMRAM] unsigned long 
  9384 ;;  exp             1    9[COMRAM] unsigned char 
  9385 ;; Return value:  Size  Location     Type
  9386 ;;                  4    0[COMRAM] unsigned char 
  9387 ;; Registers used:
  9388 ;;		wreg, status,2, status,0
  9389 ;; Tracked objects:
  9390 ;;		On entry : 0/0
  9391 ;;		On exit  : 0/0
  9392 ;;		Unchanged: 0/0
  9393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9394 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9395 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9396 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9397 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9398 ;;Total ram usage:       14 bytes
  9399 ;; Hardware stack levels used: 1
  9400 ;; Hardware stack levels required when called: 1
  9401 ;; This function calls:
  9402 ;;		Nothing
  9403 ;; This function is called by:
  9404 ;;		_detect_color
  9405 ;;		_amb_light_measure
  9406 ;;		_distance_measure
  9407 ;;		_check_color_reading
  9408 ;; This function uses a non-reentrant model
  9409 ;;
  9410                           
  9411                           	psect	text44
  9412  004040                     __ptext44:
  9413                           	callstack 0
  9414  004040                     ___xxtofl:
  9415                           	callstack 27
  9416                           
  9417                           ; BSR set to: 14
  9418                           ;incstack = 0
  9419                           ;___xxtofl@sign stored from wreg
  9420  004040  6E09               	movwf	___xxtofl@sign^0,c
  9421  004042  5009               	movf	___xxtofl@sign^0,w,c
  9422  004044  B4D8               	btfsc	status,2,c
  9423  004046  EF27  F020         	goto	u5151
  9424  00404A  EF29  F020         	goto	u5150
  9425  00404E                     u5151:
  9426  00404E  EF4B  F020         	goto	l1344
  9427  004052                     u5150:
  9428  004052  BE04               	btfsc	(___xxtofl@val+3)^0,7,c
  9429  004054  EF30  F020         	goto	u5160
  9430  004058  EF2E  F020         	goto	u5161
  9431  00405C                     u5161:
  9432  00405C  EF4B  F020         	goto	l1344
  9433  004060                     u5160:
  9434  004060  C001  F005         	movff	___xxtofl@val,??___xxtofl
  9435  004064  C002  F006         	movff	___xxtofl@val+1,??___xxtofl+1
  9436  004068  C003  F007         	movff	___xxtofl@val+2,??___xxtofl+2
  9437  00406C  C004  F008         	movff	___xxtofl@val+3,??___xxtofl+3
  9438  004070  1E05               	comf	??___xxtofl^0,f,c
  9439  004072  1E06               	comf	(??___xxtofl+1)^0,f,c
  9440  004074  1E07               	comf	(??___xxtofl+2)^0,f,c
  9441  004076  1E08               	comf	(??___xxtofl+3)^0,f,c
  9442  004078  2A05               	incf	??___xxtofl^0,f,c
  9443  00407A  0E00               	movlw	0
  9444  00407C  2206               	addwfc	(??___xxtofl+1)^0,f,c
  9445  00407E  2207               	addwfc	(??___xxtofl+2)^0,f,c
  9446  004080  2208               	addwfc	(??___xxtofl+3)^0,f,c
  9447  004082  C005  F00B         	movff	??___xxtofl,___xxtofl@arg
  9448  004086  C006  F00C         	movff	??___xxtofl+1,___xxtofl@arg+1
  9449  00408A  C007  F00D         	movff	??___xxtofl+2,___xxtofl@arg+2
  9450  00408E  C008  F00E         	movff	??___xxtofl+3,___xxtofl@arg+3
  9451  004092  EF53  F020         	goto	l4735
  9452  004096                     l1344:
  9453  004096  C001  F00B         	movff	___xxtofl@val,___xxtofl@arg
  9454  00409A  C002  F00C         	movff	___xxtofl@val+1,___xxtofl@arg+1
  9455  00409E  C003  F00D         	movff	___xxtofl@val+2,___xxtofl@arg+2
  9456  0040A2  C004  F00E         	movff	___xxtofl@val+3,___xxtofl@arg+3
  9457  0040A6                     l4735:
  9458  0040A6  5001               	movf	___xxtofl@val^0,w,c
  9459  0040A8  1002               	iorwf	(___xxtofl@val+1)^0,w,c
  9460  0040AA  1003               	iorwf	(___xxtofl@val+2)^0,w,c
  9461  0040AC  1004               	iorwf	(___xxtofl@val+3)^0,w,c
  9462  0040AE  A4D8               	btfss	status,2,c
  9463  0040B0  EF5C  F020         	goto	u5171
  9464  0040B4  EF5E  F020         	goto	u5170
  9465  0040B8                     u5171:
  9466  0040B8  EF68  F020         	goto	l4741
  9467  0040BC                     u5170:
  9468  0040BC  0E00               	movlw	0
  9469  0040BE  6E01               	movwf	?___xxtofl^0,c
  9470  0040C0  0E00               	movlw	0
  9471  0040C2  6E02               	movwf	(?___xxtofl+1)^0,c
  9472  0040C4  0E00               	movlw	0
  9473  0040C6  6E03               	movwf	(?___xxtofl+2)^0,c
  9474  0040C8  0E00               	movlw	0
  9475  0040CA  6E04               	movwf	(?___xxtofl+3)^0,c
  9476  0040CC  EFF9  F020         	goto	l1347
  9477  0040D0                     l4741:
  9478  0040D0  0E96               	movlw	150
  9479  0040D2  6E0A               	movwf	___xxtofl@exp^0,c
  9480  0040D4  EF72  F020         	goto	l4745
  9481  0040D8                     l4743:
  9482  0040D8  2A0A               	incf	___xxtofl@exp^0,f,c
  9483  0040DA  90D8               	bcf	status,0,c
  9484  0040DC  320E               	rrcf	(___xxtofl@arg+3)^0,f,c
  9485  0040DE  320D               	rrcf	(___xxtofl@arg+2)^0,f,c
  9486  0040E0  320C               	rrcf	(___xxtofl@arg+1)^0,f,c
  9487  0040E2  320B               	rrcf	___xxtofl@arg^0,f,c
  9488  0040E4                     l4745:
  9489  0040E4  0E00               	movlw	0
  9490  0040E6  140B               	andwf	___xxtofl@arg^0,w,c
  9491  0040E8  6E05               	movwf	??___xxtofl^0,c
  9492  0040EA  0E00               	movlw	0
  9493  0040EC  140C               	andwf	(___xxtofl@arg+1)^0,w,c
  9494  0040EE  6E06               	movwf	(??___xxtofl+1)^0,c
  9495  0040F0  0E00               	movlw	0
  9496  0040F2  140D               	andwf	(___xxtofl@arg+2)^0,w,c
  9497  0040F4  6E07               	movwf	(??___xxtofl+2)^0,c
  9498  0040F6  0EFE               	movlw	254
  9499  0040F8  140E               	andwf	(___xxtofl@arg+3)^0,w,c
  9500  0040FA  6E08               	movwf	(??___xxtofl+3)^0,c
  9501  0040FC  5005               	movf	??___xxtofl^0,w,c
  9502  0040FE  1006               	iorwf	(??___xxtofl+1)^0,w,c
  9503  004100  1007               	iorwf	(??___xxtofl+2)^0,w,c
  9504  004102  1008               	iorwf	(??___xxtofl+3)^0,w,c
  9505  004104  A4D8               	btfss	status,2,c
  9506  004106  EF87  F020         	goto	u5181
  9507  00410A  EF89  F020         	goto	u5180
  9508  00410E                     u5181:
  9509  00410E  EF6C  F020         	goto	l4743
  9510  004112                     u5180:
  9511  004112  EF97  F020         	goto	l1351
  9512  004116                     l4747:
  9513  004116  2A0A               	incf	___xxtofl@exp^0,f,c
  9514  004118  0E01               	movlw	1
  9515  00411A  260B               	addwf	___xxtofl@arg^0,f,c
  9516  00411C  0E00               	movlw	0
  9517  00411E  220C               	addwfc	(___xxtofl@arg+1)^0,f,c
  9518  004120  220D               	addwfc	(___xxtofl@arg+2)^0,f,c
  9519  004122  220E               	addwfc	(___xxtofl@arg+3)^0,f,c
  9520  004124  90D8               	bcf	status,0,c
  9521  004126  320E               	rrcf	(___xxtofl@arg+3)^0,f,c
  9522  004128  320D               	rrcf	(___xxtofl@arg+2)^0,f,c
  9523  00412A  320C               	rrcf	(___xxtofl@arg+1)^0,f,c
  9524  00412C  320B               	rrcf	___xxtofl@arg^0,f,c
  9525  00412E                     l1351:
  9526  00412E  0E00               	movlw	0
  9527  004130  140B               	andwf	___xxtofl@arg^0,w,c
  9528  004132  6E05               	movwf	??___xxtofl^0,c
  9529  004134  0E00               	movlw	0
  9530  004136  140C               	andwf	(___xxtofl@arg+1)^0,w,c
  9531  004138  6E06               	movwf	(??___xxtofl+1)^0,c
  9532  00413A  0E00               	movlw	0
  9533  00413C  140D               	andwf	(___xxtofl@arg+2)^0,w,c
  9534  00413E  6E07               	movwf	(??___xxtofl+2)^0,c
  9535  004140  0EFF               	movlw	255
  9536  004142  140E               	andwf	(___xxtofl@arg+3)^0,w,c
  9537  004144  6E08               	movwf	(??___xxtofl+3)^0,c
  9538  004146  5005               	movf	??___xxtofl^0,w,c
  9539  004148  1006               	iorwf	(??___xxtofl+1)^0,w,c
  9540  00414A  1007               	iorwf	(??___xxtofl+2)^0,w,c
  9541  00414C  1008               	iorwf	(??___xxtofl+3)^0,w,c
  9542  00414E  A4D8               	btfss	status,2,c
  9543  004150  EFAC  F020         	goto	u5191
  9544  004154  EFAE  F020         	goto	u5190
  9545  004158                     u5191:
  9546  004158  EF8B  F020         	goto	l4747
  9547  00415C                     u5190:
  9548  00415C  EFB6  F020         	goto	l4755
  9549  004160                     l4753:
  9550  004160  060A               	decf	___xxtofl@exp^0,f,c
  9551  004162  90D8               	bcf	status,0,c
  9552  004164  360B               	rlcf	___xxtofl@arg^0,f,c
  9553  004166  360C               	rlcf	(___xxtofl@arg+1)^0,f,c
  9554  004168  360D               	rlcf	(___xxtofl@arg+2)^0,f,c
  9555  00416A  360E               	rlcf	(___xxtofl@arg+3)^0,f,c
  9556  00416C                     l4755:
  9557  00416C  BE0D               	btfsc	(___xxtofl@arg+2)^0,7,c
  9558  00416E  EFBB  F020         	goto	u5201
  9559  004172  EFBD  F020         	goto	u5200
  9560  004176                     u5201:
  9561  004176  EFC5  F020         	goto	l1358
  9562  00417A                     u5200:
  9563  00417A  0E02               	movlw	2
  9564  00417C  600A               	cpfslt	___xxtofl@exp^0,c
  9565  00417E  EFC3  F020         	goto	u5211
  9566  004182  EFC5  F020         	goto	u5210
  9567  004186                     u5211:
  9568  004186  EFB0  F020         	goto	l4753
  9569  00418A                     u5210:
  9570  00418A                     l1358:
  9571  00418A  B00A               	btfsc	___xxtofl@exp^0,0,c
  9572  00418C  EFCA  F020         	goto	u5221
  9573  004190  EFCC  F020         	goto	u5220
  9574  004194                     u5221:
  9575  004194  EFCD  F020         	goto	l4761
  9576  004198                     u5220:
  9577  004198  9E0D               	bcf	(___xxtofl@arg+2)^0,7,c
  9578  00419A                     l4761:
  9579  00419A  90D8               	bcf	status,0,c
  9580  00419C  320A               	rrcf	___xxtofl@exp^0,f,c
  9581  00419E  C00A  F005         	movff	___xxtofl@exp,??___xxtofl
  9582  0041A2  6A06               	clrf	(??___xxtofl+1)^0,c
  9583  0041A4  6A07               	clrf	(??___xxtofl+2)^0,c
  9584  0041A6  6A08               	clrf	(??___xxtofl+3)^0,c
  9585  0041A8  C005  F008         	movff	??___xxtofl,??___xxtofl+3
  9586  0041AC  6A07               	clrf	(??___xxtofl+2)^0,c
  9587  0041AE  6A06               	clrf	(??___xxtofl+1)^0,c
  9588  0041B0  6A05               	clrf	??___xxtofl^0,c
  9589  0041B2  5005               	movf	??___xxtofl^0,w,c
  9590  0041B4  120B               	iorwf	___xxtofl@arg^0,f,c
  9591  0041B6  5006               	movf	(??___xxtofl+1)^0,w,c
  9592  0041B8  120C               	iorwf	(___xxtofl@arg+1)^0,f,c
  9593  0041BA  5007               	movf	(??___xxtofl+2)^0,w,c
  9594  0041BC  120D               	iorwf	(___xxtofl@arg+2)^0,f,c
  9595  0041BE  5008               	movf	(??___xxtofl+3)^0,w,c
  9596  0041C0  120E               	iorwf	(___xxtofl@arg+3)^0,f,c
  9597  0041C2  5009               	movf	___xxtofl@sign^0,w,c
  9598  0041C4  B4D8               	btfsc	status,2,c
  9599  0041C6  EFE7  F020         	goto	u5231
  9600  0041CA  EFE9  F020         	goto	u5230
  9601  0041CE                     u5231:
  9602  0041CE  EFF1  F020         	goto	l4771
  9603  0041D2                     u5230:
  9604  0041D2  BE04               	btfsc	(___xxtofl@val+3)^0,7,c
  9605  0041D4  EFF0  F020         	goto	u5240
  9606  0041D8  EFEE  F020         	goto	u5241
  9607  0041DC                     u5241:
  9608  0041DC  EFF1  F020         	goto	l4771
  9609  0041E0                     u5240:
  9610  0041E0  8E0E               	bsf	(___xxtofl@arg+3)^0,7,c
  9611  0041E2                     l4771:
  9612  0041E2  C00B  F001         	movff	___xxtofl@arg,?___xxtofl
  9613  0041E6  C00C  F002         	movff	___xxtofl@arg+1,?___xxtofl+1
  9614  0041EA  C00D  F003         	movff	___xxtofl@arg+2,?___xxtofl+2
  9615  0041EE  C00E  F004         	movff	___xxtofl@arg+3,?___xxtofl+3
  9616  0041F2                     l1347:
  9617  0041F2  0012               	return		;funcret
  9618  0041F4                     __end_of___xxtofl:
  9619                           	callstack 0
  9620                           
  9621 ;; *************** function ___fldiv *****************
  9622 ;; Defined at:
  9623 ;;		line 11 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\sprcdiv.c"
  9624 ;; Parameters:    Size  Location     Type
  9625 ;;  b               4   14[COMRAM] unsigned char 
  9626 ;;  a               4   18[COMRAM] unsigned char 
  9627 ;; Auto vars:     Size  Location     Type
  9628 ;;  grs             4   33[COMRAM] unsigned long 
  9629 ;;  rem             4   26[COMRAM] unsigned long 
  9630 ;;  new_exp         2   31[COMRAM] short 
  9631 ;;  aexp            1   38[COMRAM] unsigned char 
  9632 ;;  bexp            1   37[COMRAM] unsigned char 
  9633 ;;  sign            1   30[COMRAM] unsigned char 
  9634 ;; Return value:  Size  Location     Type
  9635 ;;                  4   14[COMRAM] unsigned char 
  9636 ;; Registers used:
  9637 ;;		wreg, status,2, status,0
  9638 ;; Tracked objects:
  9639 ;;		On entry : 0/0
  9640 ;;		On exit  : 0/0
  9641 ;;		Unchanged: 0/0
  9642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9643 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9644 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9645 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9646 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9647 ;;Total ram usage:       25 bytes
  9648 ;; Hardware stack levels used: 1
  9649 ;; Hardware stack levels required when called: 1
  9650 ;; This function calls:
  9651 ;;		Nothing
  9652 ;; This function is called by:
  9653 ;;		_detect_color
  9654 ;;		_amb_light_measure
  9655 ;;		_check_color_reading
  9656 ;; This function uses a non-reentrant model
  9657 ;;
  9658                           
  9659                           	psect	text45
  9660  0026B0                     __ptext45:
  9661                           	callstack 0
  9662  0026B0                     ___fldiv:
  9663                           	callstack 27
  9664  0026B0  5012               	movf	(___fldiv@b+3)^0,w,c
  9665  0026B2  0B80               	andlw	128
  9666  0026B4  6E1F               	movwf	___fldiv@sign^0,c
  9667  0026B6  5012               	movf	(___fldiv@b+3)^0,w,c
  9668  0026B8  2412               	addwf	(___fldiv@b+3)^0,w,c
  9669  0026BA  6E26               	movwf	___fldiv@bexp^0,c
  9670  0026BC  AE11               	btfss	(___fldiv@b+2)^0,7,c
  9671  0026BE  EF63  F013         	goto	u4921
  9672  0026C2  EF65  F013         	goto	u4920
  9673  0026C6                     u4921:
  9674  0026C6  EF66  F013         	goto	l4597
  9675  0026CA                     u4920:
  9676  0026CA  8026               	bsf	___fldiv@bexp^0,0,c
  9677  0026CC                     l4597:
  9678  0026CC  5026               	movf	___fldiv@bexp^0,w,c
  9679  0026CE  B4D8               	btfsc	status,2,c
  9680  0026D0  EF6C  F013         	goto	u4931
  9681  0026D4  EF6E  F013         	goto	u4930
  9682  0026D8                     u4931:
  9683  0026D8  EF83  F013         	goto	l4607
  9684  0026DC                     u4930:
  9685  0026DC  2826               	incf	___fldiv@bexp^0,w,c
  9686  0026DE  A4D8               	btfss	status,2,c
  9687  0026E0  EF74  F013         	goto	u4941
  9688  0026E4  EF76  F013         	goto	u4940
  9689  0026E8                     u4941:
  9690  0026E8  EF7E  F013         	goto	l4603
  9691  0026EC                     u4940:
  9692  0026EC  0E00               	movlw	0
  9693  0026EE  6E0F               	movwf	___fldiv@b^0,c
  9694  0026F0  0E00               	movlw	0
  9695  0026F2  6E10               	movwf	(___fldiv@b+1)^0,c
  9696  0026F4  0E00               	movlw	0
  9697  0026F6  6E11               	movwf	(___fldiv@b+2)^0,c
  9698  0026F8  0E00               	movlw	0
  9699  0026FA  6E12               	movwf	(___fldiv@b+3)^0,c
  9700  0026FC                     l4603:
  9701  0026FC  8E11               	bsf	(___fldiv@b+2)^0,7,c
  9702  0026FE  0E00               	movlw	0
  9703  002700  6E12               	movwf	(___fldiv@b+3)^0,c
  9704  002702  EF8B  F013         	goto	l4609
  9705  002706                     l4607:
  9706  002706  0E00               	movlw	0
  9707  002708  6E0F               	movwf	___fldiv@b^0,c
  9708  00270A  0E00               	movlw	0
  9709  00270C  6E10               	movwf	(___fldiv@b+1)^0,c
  9710  00270E  0E00               	movlw	0
  9711  002710  6E11               	movwf	(___fldiv@b+2)^0,c
  9712  002712  0E00               	movlw	0
  9713  002714  6E12               	movwf	(___fldiv@b+3)^0,c
  9714  002716                     l4609:
  9715  002716  5016               	movf	(___fldiv@a+3)^0,w,c
  9716  002718  0B80               	andlw	128
  9717  00271A  1A1F               	xorwf	___fldiv@sign^0,f,c
  9718  00271C  5016               	movf	(___fldiv@a+3)^0,w,c
  9719  00271E  2416               	addwf	(___fldiv@a+3)^0,w,c
  9720  002720  6E27               	movwf	___fldiv@aexp^0,c
  9721  002722  AE15               	btfss	(___fldiv@a+2)^0,7,c
  9722  002724  EF96  F013         	goto	u4951
  9723  002728  EF98  F013         	goto	u4950
  9724  00272C                     u4951:
  9725  00272C  EF99  F013         	goto	l4617
  9726  002730                     u4950:
  9727  002730  8027               	bsf	___fldiv@aexp^0,0,c
  9728  002732                     l4617:
  9729  002732  5027               	movf	___fldiv@aexp^0,w,c
  9730  002734  B4D8               	btfsc	status,2,c
  9731  002736  EF9F  F013         	goto	u4961
  9732  00273A  EFA1  F013         	goto	u4960
  9733  00273E                     u4961:
  9734  00273E  EFB6  F013         	goto	l4627
  9735  002742                     u4960:
  9736  002742  2827               	incf	___fldiv@aexp^0,w,c
  9737  002744  A4D8               	btfss	status,2,c
  9738  002746  EFA7  F013         	goto	u4971
  9739  00274A  EFA9  F013         	goto	u4970
  9740  00274E                     u4971:
  9741  00274E  EFB1  F013         	goto	l4623
  9742  002752                     u4970:
  9743  002752  0E00               	movlw	0
  9744  002754  6E13               	movwf	___fldiv@a^0,c
  9745  002756  0E00               	movlw	0
  9746  002758  6E14               	movwf	(___fldiv@a+1)^0,c
  9747  00275A  0E00               	movlw	0
  9748  00275C  6E15               	movwf	(___fldiv@a+2)^0,c
  9749  00275E  0E00               	movlw	0
  9750  002760  6E16               	movwf	(___fldiv@a+3)^0,c
  9751  002762                     l4623:
  9752  002762  8E15               	bsf	(___fldiv@a+2)^0,7,c
  9753  002764  0E00               	movlw	0
  9754  002766  6E16               	movwf	(___fldiv@a+3)^0,c
  9755  002768  EFBE  F013         	goto	l4629
  9756  00276C                     l4627:
  9757  00276C  0E00               	movlw	0
  9758  00276E  6E13               	movwf	___fldiv@a^0,c
  9759  002770  0E00               	movlw	0
  9760  002772  6E14               	movwf	(___fldiv@a+1)^0,c
  9761  002774  0E00               	movlw	0
  9762  002776  6E15               	movwf	(___fldiv@a+2)^0,c
  9763  002778  0E00               	movlw	0
  9764  00277A  6E16               	movwf	(___fldiv@a+3)^0,c
  9765  00277C                     l4629:
  9766  00277C  5013               	movf	___fldiv@a^0,w,c
  9767  00277E  1014               	iorwf	(___fldiv@a+1)^0,w,c
  9768  002780  1015               	iorwf	(___fldiv@a+2)^0,w,c
  9769  002782  1016               	iorwf	(___fldiv@a+3)^0,w,c
  9770  002784  A4D8               	btfss	status,2,c
  9771  002786  EFC7  F013         	goto	u4981
  9772  00278A  EFC9  F013         	goto	u4980
  9773  00278E                     u4981:
  9774  00278E  EFE1  F013         	goto	l4641
  9775  002792                     u4980:
  9776  002792  0E00               	movlw	0
  9777  002794  6E0F               	movwf	___fldiv@b^0,c
  9778  002796  0E00               	movlw	0
  9779  002798  6E10               	movwf	(___fldiv@b+1)^0,c
  9780  00279A  0E00               	movlw	0
  9781  00279C  6E11               	movwf	(___fldiv@b+2)^0,c
  9782  00279E  0E00               	movlw	0
  9783  0027A0  6E12               	movwf	(___fldiv@b+3)^0,c
  9784  0027A2  0E80               	movlw	128
  9785  0027A4  1211               	iorwf	(___fldiv@b+2)^0,f,c
  9786  0027A6  0E7F               	movlw	127
  9787  0027A8  1212               	iorwf	(___fldiv@b+3)^0,f,c
  9788  0027AA                     l4635:
  9789  0027AA  501F               	movf	___fldiv@sign^0,w,c
  9790  0027AC  1212               	iorwf	(___fldiv@b+3)^0,f,c
  9791  0027AE  C00F  F00F         	movff	___fldiv@b,?___fldiv
  9792  0027B2  C010  F010         	movff	___fldiv@b+1,?___fldiv+1
  9793  0027B6  C011  F011         	movff	___fldiv@b+2,?___fldiv+2
  9794  0027BA  C012  F012         	movff	___fldiv@b+3,?___fldiv+3
  9795  0027BE  EF24  F015         	goto	l1271
  9796  0027C2                     l4641:
  9797  0027C2  5026               	movf	___fldiv@bexp^0,w,c
  9798  0027C4  A4D8               	btfss	status,2,c
  9799  0027C6  EFE7  F013         	goto	u4991
  9800  0027CA  EFE9  F013         	goto	u4990
  9801  0027CE                     u4991:
  9802  0027CE  EFF3  F013         	goto	l4649
  9803  0027D2                     u4990:
  9804  0027D2  0E00               	movlw	0
  9805  0027D4  6E0F               	movwf	?___fldiv^0,c
  9806  0027D6  0E00               	movlw	0
  9807  0027D8  6E10               	movwf	(?___fldiv+1)^0,c
  9808  0027DA  0E00               	movlw	0
  9809  0027DC  6E11               	movwf	(?___fldiv+2)^0,c
  9810  0027DE  0E00               	movlw	0
  9811  0027E0  6E12               	movwf	(?___fldiv+3)^0,c
  9812  0027E2  EF24  F015         	goto	l1271
  9813  0027E6                     l4649:
  9814  0027E6  5027               	movf	___fldiv@aexp^0,w,c
  9815  0027E8  C026  F017         	movff	___fldiv@bexp,??___fldiv
  9816  0027EC  6A18               	clrf	(??___fldiv+1)^0,c
  9817  0027EE  5E17               	subwf	??___fldiv^0,f,c
  9818  0027F0  0E00               	movlw	0
  9819  0027F2  5A18               	subwfb	(??___fldiv+1)^0,f,c
  9820  0027F4  0E7F               	movlw	127
  9821  0027F6  2417               	addwf	??___fldiv^0,w,c
  9822  0027F8  6E20               	movwf	___fldiv@new_exp^0,c
  9823  0027FA  0E00               	movlw	0
  9824  0027FC  2018               	addwfc	(??___fldiv+1)^0,w,c
  9825  0027FE  6E21               	movwf	(___fldiv@new_exp+1)^0,c
  9826  002800  C00F  F01B         	movff	___fldiv@b,___fldiv@rem
  9827  002804  C010  F01C         	movff	___fldiv@b+1,___fldiv@rem+1
  9828  002808  C011  F01D         	movff	___fldiv@b+2,___fldiv@rem+2
  9829  00280C  C012  F01E         	movff	___fldiv@b+3,___fldiv@rem+3
  9830  002810  0E00               	movlw	0
  9831  002812  6E0F               	movwf	___fldiv@b^0,c
  9832  002814  0E00               	movlw	0
  9833  002816  6E10               	movwf	(___fldiv@b+1)^0,c
  9834  002818  0E00               	movlw	0
  9835  00281A  6E11               	movwf	(___fldiv@b+2)^0,c
  9836  00281C  0E00               	movlw	0
  9837  00281E  6E12               	movwf	(___fldiv@b+3)^0,c
  9838  002820  0E00               	movlw	0
  9839  002822  6E22               	movwf	___fldiv@grs^0,c
  9840  002824  0E00               	movlw	0
  9841  002826  6E23               	movwf	(___fldiv@grs+1)^0,c
  9842  002828  0E00               	movlw	0
  9843  00282A  6E24               	movwf	(___fldiv@grs+2)^0,c
  9844  00282C  0E00               	movlw	0
  9845  00282E  6E25               	movwf	(___fldiv@grs+3)^0,c
  9846  002830  0E00               	movlw	0
  9847  002832  6E27               	movwf	___fldiv@aexp^0,c
  9848  002834  EF54  F014         	goto	l1273
  9849  002838                     l4659:
  9850  002838  5027               	movf	___fldiv@aexp^0,w,c
  9851  00283A  B4D8               	btfsc	status,2,c
  9852  00283C  EF22  F014         	goto	u5001
  9853  002840  EF24  F014         	goto	u5000
  9854  002844                     u5001:
  9855  002844  EF3B  F014         	goto	l4667
  9856  002848                     u5000:
  9857  002848  90D8               	bcf	status,0,c
  9858  00284A  361B               	rlcf	___fldiv@rem^0,f,c
  9859  00284C  361C               	rlcf	(___fldiv@rem+1)^0,f,c
  9860  00284E  361D               	rlcf	(___fldiv@rem+2)^0,f,c
  9861  002850  361E               	rlcf	(___fldiv@rem+3)^0,f,c
  9862  002852  90D8               	bcf	status,0,c
  9863  002854  360F               	rlcf	___fldiv@b^0,f,c
  9864  002856  3610               	rlcf	(___fldiv@b+1)^0,f,c
  9865  002858  3611               	rlcf	(___fldiv@b+2)^0,f,c
  9866  00285A  3612               	rlcf	(___fldiv@b+3)^0,f,c
  9867  00285C  AE25               	btfss	(___fldiv@grs+3)^0,7,c
  9868  00285E  EF33  F014         	goto	u5011
  9869  002862  EF35  F014         	goto	u5010
  9870  002866                     u5011:
  9871  002866  EF36  F014         	goto	l1276
  9872  00286A                     u5010:
  9873  00286A  800F               	bsf	___fldiv@b^0,0,c
  9874  00286C                     l1276:
  9875  00286C  90D8               	bcf	status,0,c
  9876  00286E  3622               	rlcf	___fldiv@grs^0,f,c
  9877  002870  3623               	rlcf	(___fldiv@grs+1)^0,f,c
  9878  002872  3624               	rlcf	(___fldiv@grs+2)^0,f,c
  9879  002874  3625               	rlcf	(___fldiv@grs+3)^0,f,c
  9880  002876                     l4667:
  9881  002876  5013               	movf	___fldiv@a^0,w,c
  9882  002878  5C1B               	subwf	___fldiv@rem^0,w,c
  9883  00287A  5014               	movf	(___fldiv@a+1)^0,w,c
  9884  00287C  581C               	subwfb	(___fldiv@rem+1)^0,w,c
  9885  00287E  5015               	movf	(___fldiv@a+2)^0,w,c
  9886  002880  581D               	subwfb	(___fldiv@rem+2)^0,w,c
  9887  002882  5016               	movf	(___fldiv@a+3)^0,w,c
  9888  002884  581E               	subwfb	(___fldiv@rem+3)^0,w,c
  9889  002886  A0D8               	btfss	status,0,c
  9890  002888  EF48  F014         	goto	u5021
  9891  00288C  EF4A  F014         	goto	u5020
  9892  002890                     u5021:
  9893  002890  EF53  F014         	goto	l4673
  9894  002894                     u5020:
  9895  002894  8C25               	bsf	(___fldiv@grs+3)^0,6,c
  9896  002896  5013               	movf	___fldiv@a^0,w,c
  9897  002898  5E1B               	subwf	___fldiv@rem^0,f,c
  9898  00289A  5014               	movf	(___fldiv@a+1)^0,w,c
  9899  00289C  5A1C               	subwfb	(___fldiv@rem+1)^0,f,c
  9900  00289E  5015               	movf	(___fldiv@a+2)^0,w,c
  9901  0028A0  5A1D               	subwfb	(___fldiv@rem+2)^0,f,c
  9902  0028A2  5016               	movf	(___fldiv@a+3)^0,w,c
  9903  0028A4  5A1E               	subwfb	(___fldiv@rem+3)^0,f,c
  9904  0028A6                     l4673:
  9905  0028A6  2A27               	incf	___fldiv@aexp^0,f,c
  9906  0028A8                     l1273:
  9907  0028A8  0E19               	movlw	25
  9908  0028AA  6427               	cpfsgt	___fldiv@aexp^0,c
  9909  0028AC  EF5A  F014         	goto	u5031
  9910  0028B0  EF5C  F014         	goto	u5030
  9911  0028B4                     u5031:
  9912  0028B4  EF1C  F014         	goto	l4659
  9913  0028B8                     u5030:
  9914  0028B8  501B               	movf	___fldiv@rem^0,w,c
  9915  0028BA  101C               	iorwf	(___fldiv@rem+1)^0,w,c
  9916  0028BC  101D               	iorwf	(___fldiv@rem+2)^0,w,c
  9917  0028BE  101E               	iorwf	(___fldiv@rem+3)^0,w,c
  9918  0028C0  B4D8               	btfsc	status,2,c
  9919  0028C2  EF65  F014         	goto	u5041
  9920  0028C6  EF67  F014         	goto	u5040
  9921  0028CA                     u5041:
  9922  0028CA  EF7F  F014         	goto	l4685
  9923  0028CE                     u5040:
  9924  0028CE  8022               	bsf	___fldiv@grs^0,0,c
  9925  0028D0  EF7F  F014         	goto	l4685
  9926  0028D4                     l4679:
  9927  0028D4  90D8               	bcf	status,0,c
  9928  0028D6  360F               	rlcf	___fldiv@b^0,f,c
  9929  0028D8  3610               	rlcf	(___fldiv@b+1)^0,f,c
  9930  0028DA  3611               	rlcf	(___fldiv@b+2)^0,f,c
  9931  0028DC  3612               	rlcf	(___fldiv@b+3)^0,f,c
  9932  0028DE  AE25               	btfss	(___fldiv@grs+3)^0,7,c
  9933  0028E0  EF74  F014         	goto	u5051
  9934  0028E4  EF76  F014         	goto	u5050
  9935  0028E8                     u5051:
  9936  0028E8  EF77  F014         	goto	l1282
  9937  0028EC                     u5050:
  9938  0028EC  800F               	bsf	___fldiv@b^0,0,c
  9939  0028EE                     l1282:
  9940  0028EE  90D8               	bcf	status,0,c
  9941  0028F0  3622               	rlcf	___fldiv@grs^0,f,c
  9942  0028F2  3623               	rlcf	(___fldiv@grs+1)^0,f,c
  9943  0028F4  3624               	rlcf	(___fldiv@grs+2)^0,f,c
  9944  0028F6  3625               	rlcf	(___fldiv@grs+3)^0,f,c
  9945  0028F8  0620               	decf	___fldiv@new_exp^0,f,c
  9946  0028FA  A0D8               	btfss	status,0,c
  9947  0028FC  0621               	decf	(___fldiv@new_exp+1)^0,f,c
  9948  0028FE                     l4685:
  9949  0028FE  AE11               	btfss	(___fldiv@b+2)^0,7,c
  9950  002900  EF84  F014         	goto	u5061
  9951  002904  EF86  F014         	goto	u5060
  9952  002908                     u5061:
  9953  002908  EF6A  F014         	goto	l4679
  9954  00290C                     u5060:
  9955  00290C  0E00               	movlw	0
  9956  00290E  6E27               	movwf	___fldiv@aexp^0,c
  9957  002910  AE25               	btfss	(___fldiv@grs+3)^0,7,c
  9958  002912  EF8D  F014         	goto	u5071
  9959  002916  EF8F  F014         	goto	u5070
  9960  00291A                     u5071:
  9961  00291A  EFB3  F014         	goto	l1284
  9962  00291E                     u5070:
  9963  00291E  0EFF               	movlw	255
  9964  002920  1422               	andwf	___fldiv@grs^0,w,c
  9965  002922  6E17               	movwf	??___fldiv^0,c
  9966  002924  0EFF               	movlw	255
  9967  002926  1423               	andwf	(___fldiv@grs+1)^0,w,c
  9968  002928  6E18               	movwf	(??___fldiv+1)^0,c
  9969  00292A  0EFF               	movlw	255
  9970  00292C  1424               	andwf	(___fldiv@grs+2)^0,w,c
  9971  00292E  6E19               	movwf	(??___fldiv+2)^0,c
  9972  002930  0E7F               	movlw	127
  9973  002932  1425               	andwf	(___fldiv@grs+3)^0,w,c
  9974  002934  6E1A               	movwf	(??___fldiv+3)^0,c
  9975  002936  5017               	movf	??___fldiv^0,w,c
  9976  002938  1018               	iorwf	(??___fldiv+1)^0,w,c
  9977  00293A  1019               	iorwf	(??___fldiv+2)^0,w,c
  9978  00293C  101A               	iorwf	(??___fldiv+3)^0,w,c
  9979  00293E  B4D8               	btfsc	status,2,c
  9980  002940  EFA4  F014         	goto	u5081
  9981  002944  EFA6  F014         	goto	u5080
  9982  002948                     u5081:
  9983  002948  EFAA  F014         	goto	l1285
  9984  00294C                     u5080:
  9985  00294C                     l4693:
  9986  00294C  0E01               	movlw	1
  9987  00294E  6E27               	movwf	___fldiv@aexp^0,c
  9988  002950  EFB3  F014         	goto	l1284
  9989  002954                     l1285:
  9990  002954  A00F               	btfss	___fldiv@b^0,0,c
  9991  002956  EFAF  F014         	goto	u5091
  9992  00295A  EFB1  F014         	goto	u5090
  9993  00295E                     u5091:
  9994  00295E  EFB3  F014         	goto	l1284
  9995  002962                     u5090:
  9996  002962  EFA6  F014         	goto	l4693
  9997  002966                     l1284:
  9998  002966  5027               	movf	___fldiv@aexp^0,w,c
  9999  002968  B4D8               	btfsc	status,2,c
 10000  00296A  EFB9  F014         	goto	u5101
 10001  00296E  EFBB  F014         	goto	u5100
 10002  002972                     u5101:
 10003  002972  EFDF  F014         	goto	l4705
 10004  002976                     u5100:
 10005  002976  0E01               	movlw	1
 10006  002978  260F               	addwf	___fldiv@b^0,f,c
 10007  00297A  0E00               	movlw	0
 10008  00297C  2210               	addwfc	(___fldiv@b+1)^0,f,c
 10009  00297E  2211               	addwfc	(___fldiv@b+2)^0,f,c
 10010  002980  2212               	addwfc	(___fldiv@b+3)^0,f,c
 10011  002982  A012               	btfss	(___fldiv@b+3)^0,0,c
 10012  002984  EFC6  F014         	goto	u5111
 10013  002988  EFC8  F014         	goto	u5110
 10014  00298C                     u5111:
 10015  00298C  EFDF  F014         	goto	l4705
 10016  002990                     u5110:
 10017  002990  C00F  F017         	movff	___fldiv@b,??___fldiv
 10018  002994  C010  F018         	movff	___fldiv@b+1,??___fldiv+1
 10019  002998  C011  F019         	movff	___fldiv@b+2,??___fldiv+2
 10020  00299C  C012  F01A         	movff	___fldiv@b+3,??___fldiv+3
 10021  0029A0  341A               	rlcf	(??___fldiv+3)^0,w,c
 10022  0029A2  321A               	rrcf	(??___fldiv+3)^0,f,c
 10023  0029A4  3219               	rrcf	(??___fldiv+2)^0,f,c
 10024  0029A6  3218               	rrcf	(??___fldiv+1)^0,f,c
 10025  0029A8  3217               	rrcf	??___fldiv^0,f,c
 10026  0029AA  C017  F00F         	movff	??___fldiv,___fldiv@b
 10027  0029AE  C018  F010         	movff	??___fldiv+1,___fldiv@b+1
 10028  0029B2  C019  F011         	movff	??___fldiv+2,___fldiv@b+2
 10029  0029B6  C01A  F012         	movff	??___fldiv+3,___fldiv@b+3
 10030  0029BA  4A20               	infsnz	___fldiv@new_exp^0,f,c
 10031  0029BC  2A21               	incf	(___fldiv@new_exp+1)^0,f,c
 10032  0029BE                     l4705:
 10033  0029BE  BE21               	btfsc	(___fldiv@new_exp+1)^0,7,c
 10034  0029C0  EFEA  F014         	goto	u5121
 10035  0029C4  5021               	movf	(___fldiv@new_exp+1)^0,w,c
 10036  0029C6  E108               	bnz	u5120
 10037  0029C8  2820               	incf	___fldiv@new_exp^0,w,c
 10038  0029CA  A0D8               	btfss	status,0,c
 10039  0029CC  EFEA  F014         	goto	u5121
 10040  0029D0  EFEC  F014         	goto	u5120
 10041  0029D4                     u5121:
 10042  0029D4  EFF7  F014         	goto	l4709
 10043  0029D8                     u5120:
 10044  0029D8  0E00               	movlw	0
 10045  0029DA  6E21               	movwf	(___fldiv@new_exp+1)^0,c
 10046  0029DC  6820               	setf	___fldiv@new_exp^0,c
 10047  0029DE  0E00               	movlw	0
 10048  0029E0  6E0F               	movwf	___fldiv@b^0,c
 10049  0029E2  0E00               	movlw	0
 10050  0029E4  6E10               	movwf	(___fldiv@b+1)^0,c
 10051  0029E6  0E00               	movlw	0
 10052  0029E8  6E11               	movwf	(___fldiv@b+2)^0,c
 10053  0029EA  0E00               	movlw	0
 10054  0029EC  6E12               	movwf	(___fldiv@b+3)^0,c
 10055  0029EE                     l4709:
 10056  0029EE  BE21               	btfsc	(___fldiv@new_exp+1)^0,7,c
 10057  0029F0  EF04  F015         	goto	u5130
 10058  0029F4  5021               	movf	(___fldiv@new_exp+1)^0,w,c
 10059  0029F6  E106               	bnz	u5131
 10060  0029F8  0420               	decf	___fldiv@new_exp^0,w,c
 10061  0029FA  B0D8               	btfsc	status,0,c
 10062  0029FC  EF02  F015         	goto	u5131
 10063  002A00  EF04  F015         	goto	u5130
 10064  002A04                     u5131:
 10065  002A04  EF12  F015         	goto	l4713
 10066  002A08                     u5130:
 10067  002A08  0E00               	movlw	0
 10068  002A0A  6E21               	movwf	(___fldiv@new_exp+1)^0,c
 10069  002A0C  0E00               	movlw	0
 10070  002A0E  6E20               	movwf	___fldiv@new_exp^0,c
 10071  002A10  0E00               	movlw	0
 10072  002A12  6E0F               	movwf	___fldiv@b^0,c
 10073  002A14  0E00               	movlw	0
 10074  002A16  6E10               	movwf	(___fldiv@b+1)^0,c
 10075  002A18  0E00               	movlw	0
 10076  002A1A  6E11               	movwf	(___fldiv@b+2)^0,c
 10077  002A1C  0E00               	movlw	0
 10078  002A1E  6E12               	movwf	(___fldiv@b+3)^0,c
 10079  002A20  0E00               	movlw	0
 10080  002A22  6E1F               	movwf	___fldiv@sign^0,c
 10081  002A24                     l4713:
 10082  002A24  C020  F026         	movff	___fldiv@new_exp,___fldiv@bexp
 10083  002A28  A026               	btfss	___fldiv@bexp^0,0,c
 10084  002A2A  EF19  F015         	goto	u5141
 10085  002A2E  EF1B  F015         	goto	u5140
 10086  002A32                     u5141:
 10087  002A32  EF1E  F015         	goto	l4719
 10088  002A36                     u5140:
 10089  002A36  8E11               	bsf	(___fldiv@b+2)^0,7,c
 10090  002A38  EF1F  F015         	goto	l4721
 10091  002A3C                     l4719:
 10092  002A3C  9E11               	bcf	(___fldiv@b+2)^0,7,c
 10093  002A3E                     l4721:
 10094  002A3E  90D8               	bcf	status,0,c
 10095  002A40  3026               	rrcf	___fldiv@bexp^0,w,c
 10096  002A42  6E12               	movwf	(___fldiv@b+3)^0,c
 10097  002A44  EFD5  F013         	goto	l4635
 10098  002A48                     l1271:
 10099  002A48  0012               	return		;funcret
 10100  002A4A                     __end_of___fldiv:
 10101                           	callstack 0
 10102                           
 10103 ;; *************** function _LED_C *****************
 10104 ;; Defined at:
 10105 ;;		line 173 in file "color.c"
 10106 ;; Parameters:    Size  Location     Type
 10107 ;;		None
 10108 ;; Auto vars:     Size  Location     Type
 10109 ;;		None
 10110 ;; Return value:  Size  Location     Type
 10111 ;;                  1    wreg      void 
 10112 ;; Registers used:
 10113 ;;		wreg
 10114 ;; Tracked objects:
 10115 ;;		On entry : 0/0
 10116 ;;		On exit  : 0/0
 10117 ;;		Unchanged: 0/0
 10118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10119 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10120 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10121 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10122 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10123 ;;Total ram usage:        2 bytes
 10124 ;; Hardware stack levels used: 1
 10125 ;; Hardware stack levels required when called: 1
 10126 ;; This function calls:
 10127 ;;		Nothing
 10128 ;; This function is called by:
 10129 ;;		_color_data_collection
 10130 ;;		_calibrate_white
 10131 ;;		_amb_light_measure
 10132 ;;		_distance_measure
 10133 ;;		_test_function
 10134 ;; This function uses a non-reentrant model
 10135 ;;
 10136                           
 10137                           	psect	text46
 10138  005D9A                     __ptext46:
 10139                           	callstack 0
 10140  005D9A                     _LED_C:
 10141                           	callstack 27
 10142  005D9A                     
 10143                           ;color.c: 175:     LATGbits.LATG1 = 1;
 10144  005D9A  827F               	bsf	127,1,c	;volatile
 10145                           
 10146                           ;color.c: 176:     LATFbits.LATF7 = 1;
 10147  005D9C  8E7E               	bsf	126,7,c	;volatile
 10148                           
 10149                           ;color.c: 177:     LATAbits.LATA4 = 1;
 10150  005D9E  8879               	bsf	121,4,c	;volatile
 10151  005DA0                     
 10152                           ;color.c: 178:     _delay((unsigned long)((200)*(64000000/4000.0)));
 10153  005DA0  0E11               	movlw	17
 10154  005DA2  6E02               	movwf	(??_LED_C+1)^0,c
 10155  005DA4  0E3C               	movlw	60
 10156  005DA6  6E01               	movwf	??_LED_C^0,c
 10157  005DA8  0ECB               	movlw	203
 10158  005DAA                     u6227:
 10159  005DAA  2EE8               	decfsz	wreg,f,c
 10160  005DAC  D7FE               	bra	u6227
 10161  005DAE  2E01               	decfsz	??_LED_C^0,f,c
 10162  005DB0  D7FC               	bra	u6227
 10163  005DB2  2E02               	decfsz	(??_LED_C+1)^0,f,c
 10164  005DB4  D7FA               	bra	u6227
 10165  005DB6  F000               	nop	
 10166  005DB8  0012               	return		;funcret
 10167  005DBA                     __end_of_LED_C:
 10168                           	callstack 0
 10169                           
 10170 ;; *************** function _short_burst *****************
 10171 ;; Defined at:
 10172 ;;		line 10 in file "movement.c"
 10173 ;; Parameters:    Size  Location     Type
 10174 ;;  mL              2   31[COMRAM] PTR struct DC_motor
 10175 ;;		 -> main@motorL(9), 
 10176 ;;  mR              2   33[COMRAM] PTR struct DC_motor
 10177 ;;		 -> main@motorR(9), 
 10178 ;; Auto vars:     Size  Location     Type
 10179 ;;		None
 10180 ;; Return value:  Size  Location     Type
 10181 ;;                  1    wreg      void 
 10182 ;; Registers used:
 10183 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10184 ;; Tracked objects:
 10185 ;;		On entry : 0/0
 10186 ;;		On exit  : 0/0
 10187 ;;		Unchanged: 0/0
 10188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10189 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10190 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10191 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10192 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10193 ;;Total ram usage:        6 bytes
 10194 ;; Hardware stack levels used: 1
 10195 ;; Hardware stack levels required when called: 4
 10196 ;; This function calls:
 10197 ;;		_fullSpeedAhead
 10198 ;;		_stop
 10199 ;; This function is called by:
 10200 ;;		_main
 10201 ;; This function uses a non-reentrant model
 10202 ;;
 10203                           
 10204                           	psect	text47
 10205  0059EA                     __ptext47:
 10206                           	callstack 0
 10207  0059EA                     _short_burst:
 10208                           	callstack 26
 10209  0059EA                     
 10210                           ;movement.c: 10: void short_burst(struct DC_motor *mL, struct DC_motor *mR);movement.c: 
      +                          11: {;movement.c: 12:     fullSpeedAhead(mL,mR);
 10211  0059EA  C020  F01A         	movff	short_burst@mL,fullSpeedAhead@mL
 10212  0059EE  C021  F01B         	movff	short_burst@mL+1,fullSpeedAhead@mL+1
 10213  0059F2  C022  F01C         	movff	short_burst@mR,fullSpeedAhead@mR
 10214  0059F6  C023  F01D         	movff	short_burst@mR+1,fullSpeedAhead@mR+1
 10215  0059FA  EC31  F029         	call	_fullSpeedAhead	;wreg free
 10216  0059FE                     
 10217                           ;movement.c: 13:     _delay((unsigned long)((500)*(64000000/4000.0)));
 10218  0059FE  0E29               	movlw	41
 10219  005A00  6E25               	movwf	(??_short_burst+1)^0,c
 10220  005A02  0E96               	movlw	150
 10221  005A04  6E24               	movwf	??_short_burst^0,c
 10222  005A06  0E7F               	movlw	127
 10223  005A08                     u6237:
 10224  005A08  2EE8               	decfsz	wreg,f,c
 10225  005A0A  D7FE               	bra	u6237
 10226  005A0C  2E24               	decfsz	??_short_burst^0,f,c
 10227  005A0E  D7FC               	bra	u6237
 10228  005A10  2E25               	decfsz	(??_short_burst+1)^0,f,c
 10229  005A12  D7FA               	bra	u6237
 10230  005A14  F000               	nop	
 10231  005A16                     
 10232                           ;movement.c: 14:     stop(mL,mR);
 10233  005A16  C020  F01A         	movff	short_burst@mL,stop@mL
 10234  005A1A  C021  F01B         	movff	short_burst@mL+1,stop@mL+1
 10235  005A1E  C022  F01C         	movff	short_burst@mR,stop@mR
 10236  005A22  C023  F01D         	movff	short_burst@mR+1,stop@mR+1
 10237  005A26  ECF5  F029         	call	_stop	;wreg free
 10238  005A2A  0012               	return		;funcret
 10239  005A2C                     __end_of_short_burst:
 10240                           	callstack 0
 10241                           
 10242 ;; *************** function _pin_init *****************
 10243 ;; Defined at:
 10244 ;;		line 69 in file "movement.c"
 10245 ;; Parameters:    Size  Location     Type
 10246 ;;		None
 10247 ;; Auto vars:     Size  Location     Type
 10248 ;;		None
 10249 ;; Return value:  Size  Location     Type
 10250 ;;                  1    wreg      void 
 10251 ;; Registers used:
 10252 ;;		None
 10253 ;; Tracked objects:
 10254 ;;		On entry : 0/0
 10255 ;;		On exit  : 0/0
 10256 ;;		Unchanged: 0/0
 10257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10259 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10261 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10262 ;;Total ram usage:        0 bytes
 10263 ;; Hardware stack levels used: 1
 10264 ;; Hardware stack levels required when called: 1
 10265 ;; This function calls:
 10266 ;;		Nothing
 10267 ;; This function is called by:
 10268 ;;		_main
 10269 ;; This function uses a non-reentrant model
 10270 ;;
 10271                           
 10272                           	psect	text48
 10273  005DBA                     __ptext48:
 10274                           	callstack 0
 10275  005DBA                     _pin_init:
 10276                           	callstack 29
 10277  005DBA  8486               	bsf	134,2,c	;volatile
 10278                           
 10279                           ;movement.c: 71:     ANSELFbits.ANSELF2=0;
 10280  005DBC  010E               	movlb	14	; () banked
 10281  005DBE  95B4               	bcf	180,2,b	;volatile
 10282                           
 10283                           ;movement.c: 72:     TRISFbits.TRISF3=1;
 10284  005DC0  8686               	bsf	134,3,c	;volatile
 10285                           
 10286                           ;movement.c: 73:     ANSELFbits.ANSELF3=0;
 10287  005DC2  97B4               	bcf	180,3,b	;volatile
 10288                           
 10289                           ;movement.c: 78:     TRISGbits.TRISG1 = 0;
 10290  005DC4  9287               	bcf	135,1,c	;volatile
 10291                           
 10292                           ;movement.c: 79:     TRISFbits.TRISF7 = 0;
 10293  005DC6  9E86               	bcf	134,7,c	;volatile
 10294                           
 10295                           ;movement.c: 80:     TRISAbits.TRISA4 = 0;
 10296  005DC8  9881               	bcf	129,4,c	;volatile
 10297                           
 10298                           ;movement.c: 81:     LATGbits.LATG1 = 1;
 10299  005DCA  827F               	bsf	127,1,c	;volatile
 10300                           
 10301                           ;movement.c: 82:     LATFbits.LATF7 = 1;
 10302  005DCC  8E7E               	bsf	126,7,c	;volatile
 10303                           
 10304                           ;movement.c: 83:     LATAbits.LATA4 = 1;
 10305  005DCE  8879               	bsf	121,4,c	;volatile
 10306                           
 10307                           ;movement.c: 86:     TRISDbits.TRISD7 = 0;
 10308  005DD0  9E84               	bcf	132,7,c	;volatile
 10309                           
 10310                           ;movement.c: 87:     LATDbits.LATD7 = 0;
 10311  005DD2  9E7C               	bcf	124,7,c	;volatile
 10312                           
 10313                           ;movement.c: 88:     TRISHbits.TRISH3 = 0;
 10314  005DD4  9688               	bcf	136,3,c	;volatile
 10315                           
 10316                           ;movement.c: 89:     LATHbits.LATH3 = 0;
 10317  005DD6  9680               	bcf	128,3,c	;volatile
 10318  005DD8                     
 10319                           ; BSR set to: 14
 10320  005DD8  0012               	return		;funcret
 10321  005DDA                     __end_of_pin_init:
 10322                           	callstack 0
 10323                           
 10324 ;; *************** function _initUSART4 *****************
 10325 ;; Defined at:
 10326 ;;		line 4 in file "serial.c"
 10327 ;; Parameters:    Size  Location     Type
 10328 ;;		None
 10329 ;; Auto vars:     Size  Location     Type
 10330 ;;		None
 10331 ;; Return value:  Size  Location     Type
 10332 ;;                  1    wreg      void 
 10333 ;; Registers used:
 10334 ;;		wreg, status,2
 10335 ;; Tracked objects:
 10336 ;;		On entry : 0/0
 10337 ;;		On exit  : 0/0
 10338 ;;		Unchanged: 0/0
 10339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10341 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10343 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10344 ;;Total ram usage:        0 bytes
 10345 ;; Hardware stack levels used: 1
 10346 ;; Hardware stack levels required when called: 1
 10347 ;; This function calls:
 10348 ;;		Nothing
 10349 ;; This function is called by:
 10350 ;;		_main
 10351 ;; This function uses a non-reentrant model
 10352 ;;
 10353                           
 10354                           	psect	text49
 10355  005DFA                     __ptext49:
 10356                           	callstack 0
 10357  005DFA                     _initUSART4:
 10358                           	callstack 29
 10359  005DFA                     
 10360                           ;serial.c: 8:     RC0PPS = 0x12;
 10361  005DFA  0E12               	movlw	18
 10362  005DFC  010E               	movlb	14	; () banked
 10363  005DFE  6F62               	movwf	98,b	;volatile
 10364                           
 10365                           ;serial.c: 9:     RX4PPS = 0x11;
 10366  005E00  0E11               	movlw	17
 10367  005E02  6F15               	movwf	21,b	;volatile
 10368  005E04                     
 10369                           ; BSR set to: 14
 10370                           ;serial.c: 11:     BAUD4CONbits.BRG16 = 0;
 10371  005E04  97E9               	bcf	233,3,b	;volatile
 10372  005E06                     
 10373                           ; BSR set to: 14
 10374                           ;serial.c: 12:     TX4STAbits.BRGH = 0;
 10375  005E06  95E8               	bcf	232,2,b	;volatile
 10376                           
 10377                           ;serial.c: 13:     SP4BRGL = 51;
 10378  005E08  0E33               	movlw	51
 10379  005E0A  6FE5               	movwf	229,b	;volatile
 10380                           
 10381                           ;serial.c: 15:     SP4BRGH = 0;
 10382  005E0C  0E00               	movlw	0
 10383  005E0E  6FE6               	movwf	230,b	;volatile
 10384  005E10                     
 10385                           ; BSR set to: 14
 10386                           ;serial.c: 17:     RC4STAbits.CREN = 1;
 10387  005E10  89E7               	bsf	231,4,b	;volatile
 10388  005E12                     
 10389                           ; BSR set to: 14
 10390                           ;serial.c: 18:     TX4STAbits.TXEN = 1;
 10391  005E12  8BE8               	bsf	232,5,b	;volatile
 10392  005E14                     
 10393                           ; BSR set to: 14
 10394                           ;serial.c: 19:     RC4STAbits.SPEN = 1;
 10395  005E14  8FE7               	bsf	231,7,b	;volatile
 10396  005E16                     
 10397                           ; BSR set to: 14
 10398  005E16  0012               	return		;funcret
 10399  005E18                     __end_of_initUSART4:
 10400                           	callstack 0
 10401                           
 10402 ;; *************** function _initDCmotors_parameter *****************
 10403 ;; Defined at:
 10404 ;;		line 40 in file "dc_motor.c"
 10405 ;; Parameters:    Size  Location     Type
 10406 ;;  motorL          2    0[COMRAM] PTR struct DC_motor
 10407 ;;		 -> main@motorL(9), 
 10408 ;;  motorR          2    2[COMRAM] PTR struct DC_motor
 10409 ;;		 -> main@motorR(9), 
 10410 ;; Auto vars:     Size  Location     Type
 10411 ;;		None
 10412 ;; Return value:  Size  Location     Type
 10413 ;;                  1    wreg      void 
 10414 ;; Registers used:
 10415 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10416 ;; Tracked objects:
 10417 ;;		On entry : 0/0
 10418 ;;		On exit  : 0/0
 10419 ;;		Unchanged: 0/0
 10420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10421 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10422 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10423 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10424 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10425 ;;Total ram usage:        4 bytes
 10426 ;; Hardware stack levels used: 1
 10427 ;; Hardware stack levels required when called: 1
 10428 ;; This function calls:
 10429 ;;		Nothing
 10430 ;; This function is called by:
 10431 ;;		_main
 10432 ;; This function uses a non-reentrant model
 10433 ;;
 10434                           
 10435                           	psect	text50
 10436  004F3A                     __ptext50:
 10437                           	callstack 0
 10438  004F3A                     _initDCmotors_parameter:
 10439                           	callstack 29
 10440  004F3A                     
 10441                           ;dc_motor.c: 42:     motorL->power = 0;
 10442  004F3A  C001  FFD9         	movff	initDCmotors_parameter@motorL,fsr2l
 10443  004F3E  C002  FFDA         	movff	initDCmotors_parameter@motorL+1,fsr2h
 10444  004F42  0E00               	movlw	0
 10445  004F44  6EDF               	movwf	indf2,c
 10446  004F46                     
 10447                           ;dc_motor.c: 43:     motorL->direction = 1;
 10448  004F46  EE20 F001          	lfsr	2,1
 10449  004F4A  5001               	movf	initDCmotors_parameter@motorL^0,w,c
 10450  004F4C  26D9               	addwf	fsr2l,f,c
 10451  004F4E  5002               	movf	(initDCmotors_parameter@motorL+1)^0,w,c
 10452  004F50  22DA               	addwfc	fsr2h,f,c
 10453  004F52  0E01               	movlw	1
 10454  004F54  6EDF               	movwf	indf2,c
 10455  004F56                     
 10456                           ;dc_motor.c: 44:     motorL->dutyHighByte = (unsigned char *)(&PWM6DCH);
 10457  004F56  EE20 F002          	lfsr	2,2
 10458  004F5A  5001               	movf	initDCmotors_parameter@motorL^0,w,c
 10459  004F5C  26D9               	addwf	fsr2l,f,c
 10460  004F5E  5002               	movf	(initDCmotors_parameter@motorL+1)^0,w,c
 10461  004F60  22DA               	addwfc	fsr2h,f,c
 10462  004F62  0EA3               	movlw	163
 10463  004F64  6EDE               	movwf	postinc2,c
 10464  004F66  0E0F               	movlw	15
 10465  004F68  6EDD               	movwf	postdec2,c
 10466  004F6A                     
 10467                           ;dc_motor.c: 45:     motorL->dir_LAT = (unsigned char *)(&LATE);
 10468  004F6A  EE20 F004          	lfsr	2,4
 10469  004F6E  5001               	movf	initDCmotors_parameter@motorL^0,w,c
 10470  004F70  26D9               	addwf	fsr2l,f,c
 10471  004F72  5002               	movf	(initDCmotors_parameter@motorL+1)^0,w,c
 10472  004F74  22DA               	addwfc	fsr2h,f,c
 10473  004F76  0E7D               	movlw	125
 10474  004F78  6EDE               	movwf	postinc2,c
 10475  004F7A  0E0F               	movlw	15
 10476  004F7C  6EDD               	movwf	postdec2,c
 10477  004F7E                     
 10478                           ;dc_motor.c: 46:     motorL->dir_pin = 4;
 10479  004F7E  EE20 F006          	lfsr	2,6
 10480  004F82  5001               	movf	initDCmotors_parameter@motorL^0,w,c
 10481  004F84  26D9               	addwf	fsr2l,f,c
 10482  004F86  5002               	movf	(initDCmotors_parameter@motorL+1)^0,w,c
 10483  004F88  22DA               	addwfc	fsr2h,f,c
 10484  004F8A  0E04               	movlw	4
 10485  004F8C  6EDF               	movwf	indf2,c
 10486  004F8E                     
 10487                           ;dc_motor.c: 47:     motorL->PWMperiod = 199;
 10488  004F8E  EE20 F007          	lfsr	2,7
 10489  004F92  5001               	movf	initDCmotors_parameter@motorL^0,w,c
 10490  004F94  26D9               	addwf	fsr2l,f,c
 10491  004F96  5002               	movf	(initDCmotors_parameter@motorL+1)^0,w,c
 10492  004F98  22DA               	addwfc	fsr2h,f,c
 10493  004F9A  0EC7               	movlw	199
 10494  004F9C  6EDE               	movwf	postinc2,c
 10495  004F9E  0E00               	movlw	0
 10496  004FA0  6EDD               	movwf	postdec2,c
 10497  004FA2                     
 10498                           ;dc_motor.c: 50:     motorR->power = 0;
 10499  004FA2  C003  FFD9         	movff	initDCmotors_parameter@motorR,fsr2l
 10500  004FA6  C004  FFDA         	movff	initDCmotors_parameter@motorR+1,fsr2h
 10501  004FAA  0E00               	movlw	0
 10502  004FAC  6EDF               	movwf	indf2,c
 10503                           
 10504                           ;dc_motor.c: 51:     motorR->direction = 1;
 10505  004FAE  EE20 F001          	lfsr	2,1
 10506  004FB2  5003               	movf	initDCmotors_parameter@motorR^0,w,c
 10507  004FB4  26D9               	addwf	fsr2l,f,c
 10508  004FB6  5004               	movf	(initDCmotors_parameter@motorR+1)^0,w,c
 10509  004FB8  22DA               	addwfc	fsr2h,f,c
 10510  004FBA  0E01               	movlw	1
 10511  004FBC  6EDF               	movwf	indf2,c
 10512                           
 10513                           ;dc_motor.c: 52:     motorR->dutyHighByte = (unsigned char *)(&PWM7DCH);
 10514  004FBE  EE20 F002          	lfsr	2,2
 10515  004FC2  5003               	movf	initDCmotors_parameter@motorR^0,w,c
 10516  004FC4  26D9               	addwf	fsr2l,f,c
 10517  004FC6  5004               	movf	(initDCmotors_parameter@motorR+1)^0,w,c
 10518  004FC8  22DA               	addwfc	fsr2h,f,c
 10519  004FCA  0EA0               	movlw	160
 10520  004FCC  6EDE               	movwf	postinc2,c
 10521  004FCE  0E0F               	movlw	15
 10522  004FD0  6EDD               	movwf	postdec2,c
 10523                           
 10524                           ;dc_motor.c: 53:     motorR->dir_LAT = (unsigned char *)(&LATG);
 10525  004FD2  EE20 F004          	lfsr	2,4
 10526  004FD6  5003               	movf	initDCmotors_parameter@motorR^0,w,c
 10527  004FD8  26D9               	addwf	fsr2l,f,c
 10528  004FDA  5004               	movf	(initDCmotors_parameter@motorR+1)^0,w,c
 10529  004FDC  22DA               	addwfc	fsr2h,f,c
 10530  004FDE  0E7F               	movlw	127
 10531  004FE0  6EDE               	movwf	postinc2,c
 10532  004FE2  0E0F               	movlw	15
 10533  004FE4  6EDD               	movwf	postdec2,c
 10534                           
 10535                           ;dc_motor.c: 54:     motorR->dir_pin = 6;
 10536  004FE6  EE20 F006          	lfsr	2,6
 10537  004FEA  5003               	movf	initDCmotors_parameter@motorR^0,w,c
 10538  004FEC  26D9               	addwf	fsr2l,f,c
 10539  004FEE  5004               	movf	(initDCmotors_parameter@motorR+1)^0,w,c
 10540  004FF0  22DA               	addwfc	fsr2h,f,c
 10541  004FF2  0E06               	movlw	6
 10542  004FF4  6EDF               	movwf	indf2,c
 10543                           
 10544                           ;dc_motor.c: 55:     motorR->PWMperiod = 199;
 10545  004FF6  EE20 F007          	lfsr	2,7
 10546  004FFA  5003               	movf	initDCmotors_parameter@motorR^0,w,c
 10547  004FFC  26D9               	addwf	fsr2l,f,c
 10548  004FFE  5004               	movf	(initDCmotors_parameter@motorR+1)^0,w,c
 10549  005000  22DA               	addwfc	fsr2h,f,c
 10550  005002  0EC7               	movlw	199
 10551  005004  6EDE               	movwf	postinc2,c
 10552  005006  0E00               	movlw	0
 10553  005008  6EDD               	movwf	postdec2,c
 10554  00500A  0012               	return		;funcret
 10555  00500C                     __end_of_initDCmotors_parameter:
 10556                           	callstack 0
 10557                           
 10558 ;; *************** function _initDCmotorsPWM *****************
 10559 ;; Defined at:
 10560 ;;		line 10 in file "dc_motor.c"
 10561 ;; Parameters:    Size  Location     Type
 10562 ;;  PWMperiod       2    0[COMRAM] int 
 10563 ;; Auto vars:     Size  Location     Type
 10564 ;;		None
 10565 ;; Return value:  Size  Location     Type
 10566 ;;                  1    wreg      void 
 10567 ;; Registers used:
 10568 ;;		wreg, status,2
 10569 ;; Tracked objects:
 10570 ;;		On entry : 0/0
 10571 ;;		On exit  : 0/0
 10572 ;;		Unchanged: 0/0
 10573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10574 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10575 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10576 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10577 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10578 ;;Total ram usage:        2 bytes
 10579 ;; Hardware stack levels used: 1
 10580 ;; Hardware stack levels required when called: 1
 10581 ;; This function calls:
 10582 ;;		Nothing
 10583 ;; This function is called by:
 10584 ;;		_main
 10585 ;; This function uses a non-reentrant model
 10586 ;;
 10587                           
 10588                           	psect	text51
 10589  005A2C                     __ptext51:
 10590                           	callstack 0
 10591  005A2C                     _initDCmotorsPWM:
 10592                           	callstack 29
 10593  005A2C                     
 10594                           ;dc_motor.c: 13:     TRISEbits.TRISE2=0;
 10595  005A2C  9485               	bcf	133,2,c	;volatile
 10596                           
 10597                           ;dc_motor.c: 14:     TRISCbits.TRISC7=0;
 10598  005A2E  9E83               	bcf	131,7,c	;volatile
 10599                           
 10600                           ;dc_motor.c: 15:     TRISGbits.TRISG6=0;
 10601  005A30  9C87               	bcf	135,6,c	;volatile
 10602                           
 10603                           ;dc_motor.c: 16:     TRISEbits.TRISE4=0;
 10604  005A32  9885               	bcf	133,4,c	;volatile
 10605                           
 10606                           ;dc_motor.c: 17:     LATEbits.LATE2=0;
 10607  005A34  947D               	bcf	125,2,c	;volatile
 10608                           
 10609                           ;dc_motor.c: 18:     LATCbits.LATC7=0;
 10610  005A36  9E7B               	bcf	123,7,c	;volatile
 10611                           
 10612                           ;dc_motor.c: 19:     LATGbits.LATG6=0;
 10613  005A38  9C7F               	bcf	127,6,c	;volatile
 10614                           
 10615                           ;dc_motor.c: 20:     LATEbits.LATE4=0;
 10616  005A3A  987D               	bcf	125,4,c	;volatile
 10617  005A3C                     
 10618                           ;dc_motor.c: 23:     T2CONbits.CKPS=0b011;
 10619  005A3C  50BD               	movf	189,w,c	;volatile
 10620  005A3E  0B8F               	andlw	-113
 10621  005A40  0930               	iorlw	48
 10622  005A42  6EBD               	movwf	189,c	;volatile
 10623                           
 10624                           ;dc_motor.c: 24:     T2HLTbits.MODE=0b00000;
 10625  005A44  0EE0               	movlw	-32
 10626  005A46  16BE               	andwf	190,f,c	;volatile
 10627                           
 10628                           ;dc_motor.c: 25:     T2CLKCONbits.CS=0b0001;
 10629  005A48  50BF               	movf	191,w,c	;volatile
 10630  005A4A  0BF0               	andlw	-16
 10631  005A4C  0901               	iorlw	1
 10632  005A4E  6EBF               	movwf	191,c	;volatile
 10633                           
 10634                           ;dc_motor.c: 28:     T2PR=200-1;
 10635  005A50  0EC7               	movlw	199
 10636  005A52  6EBC               	movwf	188,c	;volatile
 10637  005A54                     
 10638                           ;dc_motor.c: 29:     T2CONbits.ON=1;
 10639  005A54  8EBD               	bsf	189,7,c	;volatile
 10640                           
 10641                           ;dc_motor.c: 31:     RE2PPS=0x0A;
 10642  005A56  0E0A               	movlw	10
 10643  005A58  010E               	movlb	14	; () banked
 10644  005A5A  6F74               	movwf	116,b	;volatile
 10645                           
 10646                           ;dc_motor.c: 32:     RC7PPS=0x0B;
 10647  005A5C  0E0B               	movlw	11
 10648  005A5E  6F69               	movwf	105,b	;volatile
 10649                           
 10650                           ;dc_motor.c: 34:     PWM6DCH=0;
 10651  005A60  0E00               	movlw	0
 10652  005A62  6EA3               	movwf	163,c	;volatile
 10653                           
 10654                           ;dc_motor.c: 35:     PWM7DCH=0;
 10655  005A64  0E00               	movlw	0
 10656  005A66  6EA0               	movwf	160,c	;volatile
 10657  005A68                     
 10658                           ; BSR set to: 14
 10659                           ;dc_motor.c: 37:     PWM6CONbits.EN = 1;
 10660  005A68  8EA4               	bsf	164,7,c	;volatile
 10661  005A6A                     
 10662                           ; BSR set to: 14
 10663                           ;dc_motor.c: 38:     PWM7CONbits.EN = 1;
 10664  005A6A  8EA1               	bsf	161,7,c	;volatile
 10665  005A6C                     
 10666                           ; BSR set to: 14
 10667  005A6C  0012               	return		;funcret
 10668  005A6E                     __end_of_initDCmotorsPWM:
 10669                           	callstack 0
 10670                           
 10671 ;; *************** function _color_click_init *****************
 10672 ;; Defined at:
 10673 ;;		line 67 in file "color.c"
 10674 ;; Parameters:    Size  Location     Type
 10675 ;;		None
 10676 ;; Auto vars:     Size  Location     Type
 10677 ;;		None
 10678 ;; Return value:  Size  Location     Type
 10679 ;;                  1    wreg      void 
 10680 ;; Registers used:
 10681 ;;		wreg, status,2, status,0, cstack
 10682 ;; Tracked objects:
 10683 ;;		On entry : 0/0
 10684 ;;		On exit  : 0/0
 10685 ;;		Unchanged: 0/0
 10686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10688 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10689 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10690 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10691 ;;Total ram usage:        1 bytes
 10692 ;; Hardware stack levels used: 1
 10693 ;; Hardware stack levels required when called: 4
 10694 ;; This function calls:
 10695 ;;		_I2C_2_Master_Init
 10696 ;;		_color_writetoaddr
 10697 ;; This function is called by:
 10698 ;;		_main
 10699 ;; This function uses a non-reentrant model
 10700 ;;
 10701                           
 10702                           	psect	text52
 10703  005C10                     __ptext52:
 10704                           	callstack 0
 10705  005C10                     _color_click_init:
 10706                           	callstack 26
 10707  005C10                     
 10708                           ;color.c: 70:     I2C_2_Master_Init();
 10709  005C10  EC51  F02E         	call	_I2C_2_Master_Init	;wreg free
 10710  005C14                     
 10711                           ;color.c: 73:  color_writetoaddr(0x00, 0x01);
 10712  005C14  0E01               	movlw	1
 10713  005C16  6E03               	movwf	color_writetoaddr@value^0,c
 10714  005C18  0E00               	movlw	0
 10715  005C1A  ECED  F02E         	call	_color_writetoaddr
 10716  005C1E                     
 10717                           ;color.c: 74:     _delay((unsigned long)((3)*(64000000/4000.0)));
 10718  005C1E  0E3F               	movlw	63
 10719  005C20  6E05               	movwf	??_color_click_init^0,c
 10720  005C22  0E55               	movlw	85
 10721  005C24                     u6247:
 10722  005C24  2EE8               	decfsz	wreg,f,c
 10723  005C26  D7FE               	bra	u6247
 10724  005C28  2E05               	decfsz	??_color_click_init^0,f,c
 10725  005C2A  D7FC               	bra	u6247
 10726  005C2C  F000               	nop	
 10727  005C2E                     
 10728                           ;color.c: 77:  color_writetoaddr(0x00, 0x03);
 10729  005C2E  0E03               	movlw	3
 10730  005C30  6E03               	movwf	color_writetoaddr@value^0,c
 10731  005C32  0E00               	movlw	0
 10732  005C34  ECED  F02E         	call	_color_writetoaddr
 10733  005C38                     
 10734                           ;color.c: 80:  color_writetoaddr(0x01, 0xD5);
 10735  005C38  0ED5               	movlw	213
 10736  005C3A  6E03               	movwf	color_writetoaddr@value^0,c
 10737  005C3C  0E01               	movlw	1
 10738  005C3E  ECED  F02E         	call	_color_writetoaddr
 10739  005C42  0012               	return		;funcret
 10740  005C44                     __end_of_color_click_init:
 10741                           	callstack 0
 10742                           
 10743 ;; *************** function _color_writetoaddr *****************
 10744 ;; Defined at:
 10745 ;;		line 83 in file "color.c"
 10746 ;; Parameters:    Size  Location     Type
 10747 ;;  address         1    wreg     unsigned char 
 10748 ;;  value           1    2[COMRAM] unsigned char 
 10749 ;; Auto vars:     Size  Location     Type
 10750 ;;  address         1    3[COMRAM] unsigned char 
 10751 ;; Return value:  Size  Location     Type
 10752 ;;                  1    wreg      void 
 10753 ;; Registers used:
 10754 ;;		wreg, status,2, status,0, cstack
 10755 ;; Tracked objects:
 10756 ;;		On entry : 0/0
 10757 ;;		On exit  : 0/0
 10758 ;;		Unchanged: 0/0
 10759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10760 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10761 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10762 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10763 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10764 ;;Total ram usage:        2 bytes
 10765 ;; Hardware stack levels used: 1
 10766 ;; Hardware stack levels required when called: 3
 10767 ;; This function calls:
 10768 ;;		_I2C_2_Master_Start
 10769 ;;		_I2C_2_Master_Stop
 10770 ;;		_I2C_2_Master_Write
 10771 ;; This function is called by:
 10772 ;;		_color_click_init
 10773 ;; This function uses a non-reentrant model
 10774 ;;
 10775                           
 10776                           	psect	text53
 10777  005DDA                     __ptext53:
 10778                           	callstack 0
 10779  005DDA                     _color_writetoaddr:
 10780                           	callstack 26
 10781                           
 10782                           ;incstack = 0
 10783                           ;color_writetoaddr@address stored from wreg
 10784  005DDA  6E04               	movwf	color_writetoaddr@address^0,c
 10785  005DDC                     
 10786                           ;color.c: 84:     I2C_2_Master_Start();
 10787  005DDC  EC48  F02F         	call	_I2C_2_Master_Start	;wreg free
 10788                           
 10789                           ;color.c: 85:     I2C_2_Master_Write(0x52 | 0x00);
 10790  005DE0  0E52               	movlw	82
 10791  005DE2  EC32  F02F         	call	_I2C_2_Master_Write
 10792                           
 10793                           ;color.c: 86:     I2C_2_Master_Write(0x80 | address);
 10794  005DE6  5004               	movf	color_writetoaddr@address^0,w,c
 10795  005DE8  0980               	iorlw	128
 10796  005DEA  EC32  F02F         	call	_I2C_2_Master_Write
 10797                           
 10798                           ;color.c: 87:     I2C_2_Master_Write(value);
 10799  005DEE  5003               	movf	color_writetoaddr@value^0,w,c
 10800  005DF0  EC32  F02F         	call	_I2C_2_Master_Write
 10801                           
 10802                           ;color.c: 88:     I2C_2_Master_Stop();
 10803  005DF4  EC43  F02F         	call	_I2C_2_Master_Stop	;wreg free
 10804  005DF8  0012               	return		;funcret
 10805  005DFA                     __end_of_color_writetoaddr:
 10806                           	callstack 0
 10807                           
 10808 ;; *************** function _I2C_2_Master_Write *****************
 10809 ;; Defined at:
 10810 ;;		line 45 in file "i2c.c"
 10811 ;; Parameters:    Size  Location     Type
 10812 ;;  data_byte       1    wreg     unsigned char 
 10813 ;; Auto vars:     Size  Location     Type
 10814 ;;  data_byte       1    1[COMRAM] unsigned char 
 10815 ;; Return value:  Size  Location     Type
 10816 ;;                  1    wreg      void 
 10817 ;; Registers used:
 10818 ;;		wreg, status,2, status,0, cstack
 10819 ;; Tracked objects:
 10820 ;;		On entry : 0/0
 10821 ;;		On exit  : 0/0
 10822 ;;		Unchanged: 0/0
 10823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10824 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10825 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10826 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10827 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10828 ;;Total ram usage:        1 bytes
 10829 ;; Hardware stack levels used: 1
 10830 ;; Hardware stack levels required when called: 2
 10831 ;; This function calls:
 10832 ;;		_I2C_2_Master_Idle
 10833 ;; This function is called by:
 10834 ;;		_color_writetoaddr
 10835 ;;		_color_read_Red
 10836 ;;		_color_read_Blue
 10837 ;;		_color_read_Green
 10838 ;;		_color_read_Clear
 10839 ;; This function uses a non-reentrant model
 10840 ;;
 10841                           
 10842                           	psect	text54
 10843  005E64                     __ptext54:
 10844                           	callstack 0
 10845  005E64                     _I2C_2_Master_Write:
 10846                           	callstack 24
 10847                           
 10848                           ;incstack = 0
 10849                           ;I2C_2_Master_Write@data_byte stored from wreg
 10850  005E64  6E02               	movwf	I2C_2_Master_Write@data_byte^0,c
 10851  005E66                     
 10852                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
 10853  005E66  EC66  F02E         	call	_I2C_2_Master_Idle	;wreg free
 10854  005E6A                     
 10855                           ;i2c.c: 48:   SSP2BUF = data_byte;
 10856  005E6A  C002  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
 10857  005E6E  0012               	return		;funcret
 10858  005E70                     __end_of_I2C_2_Master_Write:
 10859                           	callstack 0
 10860                           
 10861 ;; *************** function _I2C_2_Master_Stop *****************
 10862 ;; Defined at:
 10863 ;;		line 39 in file "i2c.c"
 10864 ;; Parameters:    Size  Location     Type
 10865 ;;		None
 10866 ;; Auto vars:     Size  Location     Type
 10867 ;;		None
 10868 ;; Return value:  Size  Location     Type
 10869 ;;                  1    wreg      void 
 10870 ;; Registers used:
 10871 ;;		wreg, status,2, status,0, cstack
 10872 ;; Tracked objects:
 10873 ;;		On entry : 0/0
 10874 ;;		On exit  : 0/0
 10875 ;;		Unchanged: 0/0
 10876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10877 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10878 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10879 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10880 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10881 ;;Total ram usage:        0 bytes
 10882 ;; Hardware stack levels used: 1
 10883 ;; Hardware stack levels required when called: 2
 10884 ;; This function calls:
 10885 ;;		_I2C_2_Master_Idle
 10886 ;; This function is called by:
 10887 ;;		_color_writetoaddr
 10888 ;;		_color_read_Red
 10889 ;;		_color_read_Blue
 10890 ;;		_color_read_Green
 10891 ;;		_color_read_Clear
 10892 ;; This function uses a non-reentrant model
 10893 ;;
 10894                           
 10895                           	psect	text55
 10896  005E86                     __ptext55:
 10897                           	callstack 0
 10898  005E86                     _I2C_2_Master_Stop:
 10899                           	callstack 24
 10900  005E86                     
 10901                           ;i2c.c: 41:   I2C_2_Master_Idle();
 10902  005E86  EC66  F02E         	call	_I2C_2_Master_Idle	;wreg free
 10903  005E8A                     
 10904                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
 10905  005E8A  010E               	movlb	14	; () banked
 10906  005E8C  85DA               	bsf	218,2,b	;volatile
 10907  005E8E                     
 10908                           ; BSR set to: 14
 10909  005E8E  0012               	return		;funcret
 10910  005E90                     __end_of_I2C_2_Master_Stop:
 10911                           	callstack 0
 10912                           
 10913 ;; *************** function _I2C_2_Master_Start *****************
 10914 ;; Defined at:
 10915 ;;		line 27 in file "i2c.c"
 10916 ;; Parameters:    Size  Location     Type
 10917 ;;		None
 10918 ;; Auto vars:     Size  Location     Type
 10919 ;;		None
 10920 ;; Return value:  Size  Location     Type
 10921 ;;                  1    wreg      void 
 10922 ;; Registers used:
 10923 ;;		wreg, status,2, status,0, cstack
 10924 ;; Tracked objects:
 10925 ;;		On entry : 0/0
 10926 ;;		On exit  : 0/0
 10927 ;;		Unchanged: 0/0
 10928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10930 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10932 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10933 ;;Total ram usage:        0 bytes
 10934 ;; Hardware stack levels used: 1
 10935 ;; Hardware stack levels required when called: 2
 10936 ;; This function calls:
 10937 ;;		_I2C_2_Master_Idle
 10938 ;; This function is called by:
 10939 ;;		_color_writetoaddr
 10940 ;;		_color_read_Red
 10941 ;;		_color_read_Blue
 10942 ;;		_color_read_Green
 10943 ;;		_color_read_Clear
 10944 ;; This function uses a non-reentrant model
 10945 ;;
 10946                           
 10947                           	psect	text56
 10948  005E90                     __ptext56:
 10949                           	callstack 0
 10950  005E90                     _I2C_2_Master_Start:
 10951                           	callstack 24
 10952  005E90                     
 10953                           ;i2c.c: 29:   I2C_2_Master_Idle();
 10954  005E90  EC66  F02E         	call	_I2C_2_Master_Idle	;wreg free
 10955  005E94                     
 10956                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
 10957  005E94  010E               	movlb	14	; () banked
 10958  005E96  81DA               	bsf	218,0,b	;volatile
 10959  005E98                     
 10960                           ; BSR set to: 14
 10961  005E98  0012               	return		;funcret
 10962  005E9A                     __end_of_I2C_2_Master_Start:
 10963                           	callstack 0
 10964                           
 10965 ;; *************** function _I2C_2_Master_Idle *****************
 10966 ;; Defined at:
 10967 ;;		line 22 in file "i2c.c"
 10968 ;; Parameters:    Size  Location     Type
 10969 ;;		None
 10970 ;; Auto vars:     Size  Location     Type
 10971 ;;		None
 10972 ;; Return value:  Size  Location     Type
 10973 ;;                  1    wreg      void 
 10974 ;; Registers used:
 10975 ;;		wreg, status,2, status,0
 10976 ;; Tracked objects:
 10977 ;;		On entry : 0/0
 10978 ;;		On exit  : 0/0
 10979 ;;		Unchanged: 0/0
 10980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10981 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10982 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10983 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10984 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10985 ;;Total ram usage:        1 bytes
 10986 ;; Hardware stack levels used: 1
 10987 ;; Hardware stack levels required when called: 1
 10988 ;; This function calls:
 10989 ;;		Nothing
 10990 ;; This function is called by:
 10991 ;;		_I2C_2_Master_Start
 10992 ;;		_I2C_2_Master_RepStart
 10993 ;;		_I2C_2_Master_Stop
 10994 ;;		_I2C_2_Master_Write
 10995 ;;		_I2C_2_Master_Read
 10996 ;; This function uses a non-reentrant model
 10997 ;;
 10998                           
 10999                           	psect	text57
 11000  005CCC                     __ptext57:
 11001                           	callstack 0
 11002  005CCC                     _I2C_2_Master_Idle:
 11003                           	callstack 24
 11004  005CCC                     l191:
 11005  005CCC  010E               	movlb	14	; () banked
 11006  005CCE  B5D8               	btfsc	216,2,b	;volatile
 11007  005CD0  EF6C  F02E         	goto	u3361
 11008  005CD4  EF6E  F02E         	goto	u3360
 11009  005CD8                     u3361:
 11010  005CD8  EF66  F02E         	goto	l191
 11011  005CDC                     u3360:
 11012  005CDC                     
 11013                           ; BSR set to: 14
 11014  005CDC  CEDA F001          	movff	3802,??_I2C_2_Master_Idle	;volatile
 11015  005CE0  0E1F               	movlw	31
 11016  005CE2  1601               	andwf	??_I2C_2_Master_Idle^0,f,c
 11017  005CE4  A4D8               	btfss	status,2,c
 11018  005CE6  EF77  F02E         	goto	u3371
 11019  005CEA  EF79  F02E         	goto	u3370
 11020  005CEE                     u3371:
 11021  005CEE  EF66  F02E         	goto	l191
 11022  005CF2                     u3370:
 11023  005CF2                     
 11024                           ; BSR set to: 14
 11025  005CF2  0012               	return		;funcret
 11026  005CF4                     __end_of_I2C_2_Master_Idle:
 11027                           	callstack 0
 11028                           
 11029 ;; *************** function _I2C_2_Master_Init *****************
 11030 ;; Defined at:
 11031 ;;		line 4 in file "i2c.c"
 11032 ;; Parameters:    Size  Location     Type
 11033 ;;		None
 11034 ;; Auto vars:     Size  Location     Type
 11035 ;;		None
 11036 ;; Return value:  Size  Location     Type
 11037 ;;                  1    wreg      void 
 11038 ;; Registers used:
 11039 ;;		wreg, status,2
 11040 ;; Tracked objects:
 11041 ;;		On entry : 0/0
 11042 ;;		On exit  : 0/0
 11043 ;;		Unchanged: 0/0
 11044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11045 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11046 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11047 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11048 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11049 ;;Total ram usage:        0 bytes
 11050 ;; Hardware stack levels used: 1
 11051 ;; Hardware stack levels required when called: 1
 11052 ;; This function calls:
 11053 ;;		Nothing
 11054 ;; This function is called by:
 11055 ;;		_color_click_init
 11056 ;;		_main
 11057 ;; This function uses a non-reentrant model
 11058 ;;
 11059                           
 11060                           	psect	text58
 11061  005CA2                     __ptext58:
 11062                           	callstack 0
 11063  005CA2                     _I2C_2_Master_Init:
 11064                           	callstack 28
 11065  005CA2                     
 11066                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
 11067  005CA2  010E               	movlb	14	; () banked
 11068  005CA4  51D9               	movf	217,w,b	;volatile
 11069  005CA6  0BF0               	andlw	-16
 11070  005CA8  0908               	iorlw	8
 11071  005CAA  6FD9               	movwf	217,b	;volatile
 11072  005CAC                     
 11073                           ; BSR set to: 14
 11074                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
 11075  005CAC  8BD9               	bsf	217,5,b	;volatile
 11076                           
 11077                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
 11078  005CAE  0E9F               	movlw	159
 11079  005CB0  6FD6               	movwf	214,b	;volatile
 11080  005CB2                     
 11081                           ; BSR set to: 14
 11082                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
 11083  005CB2  8A84               	bsf	132,5,c	;volatile
 11084  005CB4                     
 11085                           ; BSR set to: 14
 11086                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
 11087  005CB4  8C84               	bsf	132,6,c	;volatile
 11088  005CB6                     
 11089                           ; BSR set to: 14
 11090                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
 11091  005CB6  9BA7               	bcf	167,5,b	;volatile
 11092  005CB8                     
 11093                           ; BSR set to: 14
 11094                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
 11095  005CB8  9DA7               	bcf	167,6,b	;volatile
 11096                           
 11097                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
 11098  005CBA  0E1D               	movlw	29
 11099  005CBC  6F1D               	movwf	29,b	;volatile
 11100                           
 11101                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
 11102  005CBE  0E1E               	movlw	30
 11103  005CC0  6F1C               	movwf	28,b	;volatile
 11104                           
 11105                           ;i2c.c: 18:   RD5PPS=0x1C;
 11106  005CC2  0E1C               	movlw	28
 11107  005CC4  6F6F               	movwf	111,b	;volatile
 11108                           
 11109                           ;i2c.c: 19:   RD6PPS=0x1B;
 11110  005CC6  0E1B               	movlw	27
 11111  005CC8  6F70               	movwf	112,b	;volatile
 11112  005CCA                     
 11113                           ; BSR set to: 14
 11114  005CCA  0012               	return		;funcret
 11115  005CCC                     __end_of_I2C_2_Master_Init:
 11116                           	callstack 0
 11117                           
 11118 ;; *************** function _calibration_motor *****************
 11119 ;; Defined at:
 11120 ;;		line 82 in file "test_and_calibration.c"
 11121 ;; Parameters:    Size  Location     Type
 11122 ;;  mL              2   54[COMRAM] PTR struct DC_motor
 11123 ;;		 -> main@motorL(9), 
 11124 ;;  mR              2   56[COMRAM] PTR struct DC_motor
 11125 ;;		 -> main@motorR(9), 
 11126 ;; Auto vars:     Size  Location     Type
 11127 ;;		None
 11128 ;; Return value:  Size  Location     Type
 11129 ;;                  1    wreg      void 
 11130 ;; Registers used:
 11131 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11132 ;; Tracked objects:
 11133 ;;		On entry : 0/0
 11134 ;;		On exit  : 0/0
 11135 ;;		Unchanged: 0/0
 11136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11137 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11138 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11139 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11140 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11141 ;;Total ram usage:        6 bytes
 11142 ;; Hardware stack levels used: 1
 11143 ;; Hardware stack levels required when called: 6
 11144 ;; This function calls:
 11145 ;;		_test_action
 11146 ;; This function is called by:
 11147 ;;		_main
 11148 ;; This function uses a non-reentrant model
 11149 ;;
 11150                           
 11151                           	psect	text59
 11152  004E54                     __ptext59:
 11153                           	callstack 0
 11154  004E54                     _calibration_motor:
 11155                           	callstack 24
 11156  004E54                     l677:
 11157                           
 11158                           ;test_and_calibration.c: 85:         LATDbits.LATD7 = 1;
 11159  004E54  8E7C               	bsf	124,7,c	;volatile
 11160                           
 11161                           ;test_and_calibration.c: 86:         LATHbits.LATH3 = 1;
 11162  004E56  8680               	bsf	128,3,c	;volatile
 11163                           
 11164                           ;test_and_calibration.c: 88:         if (!PORTFbits.RF2) {
 11165  004E58  B48E               	btfsc	142,2,c	;volatile
 11166  004E5A  EF31  F027         	goto	u5571
 11167  004E5E  EF33  F027         	goto	u5570
 11168  004E62                     u5571:
 11169  004E62  EF5D  F027         	goto	l678
 11170  004E66                     u5570:
 11171  004E66                     
 11172                           ;test_and_calibration.c: 89:             _delay((unsigned long)((300)*(64000000/4000.0))
      +                          );
 11173  004E66  0E19               	movlw	25
 11174  004E68  6E3C               	movwf	(??_calibration_motor+1)^0,c
 11175  004E6A  0E5A               	movlw	90
 11176  004E6C  6E3B               	movwf	??_calibration_motor^0,c
 11177  004E6E  0EB2               	movlw	178
 11178  004E70                     u6257:
 11179  004E70  2EE8               	decfsz	wreg,f,c
 11180  004E72  D7FE               	bra	u6257
 11181  004E74  2E3B               	decfsz	??_calibration_motor^0,f,c
 11182  004E76  D7FC               	bra	u6257
 11183  004E78  2E3C               	decfsz	(??_calibration_motor+1)^0,f,c
 11184  004E7A  D7FA               	bra	u6257
 11185  004E7C                     
 11186                           ;test_and_calibration.c: 90:             if (!PORTFbits.RF2){LATDbits.LATD7 = 0; _delay(
      +                          (unsigned long)((300)*(64000000/4000.0))); SENSITIVITY += 5; }
 11187  004E7C  B48E               	btfsc	142,2,c	;volatile
 11188  004E7E  EF43  F027         	goto	u5581
 11189  004E82  EF45  F027         	goto	u5580
 11190  004E86                     u5581:
 11191  004E86  EF54  F027         	goto	l5243
 11192  004E8A                     u5580:
 11193  004E8A  9E7C               	bcf	124,7,c	;volatile
 11194  004E8C  0E19               	movlw	25
 11195  004E8E  6E3C               	movwf	(??_calibration_motor+1)^0,c
 11196  004E90  0E5A               	movlw	90
 11197  004E92  6E3B               	movwf	??_calibration_motor^0,c
 11198  004E94  0EB2               	movlw	178
 11199  004E96                     u6267:
 11200  004E96  2EE8               	decfsz	wreg,f,c
 11201  004E98  D7FE               	bra	u6267
 11202  004E9A  2E3B               	decfsz	??_calibration_motor^0,f,c
 11203  004E9C  D7FC               	bra	u6267
 11204  004E9E  2E3C               	decfsz	(??_calibration_motor+1)^0,f,c
 11205  004EA0  D7FA               	bra	u6267
 11206  004EA2  0E05               	movlw	5
 11207  004EA4  0100               	movlb	0	; () banked
 11208  004EA6  27FE               	addwf	_SENSITIVITY& (0+255),f,b
 11209  004EA8                     l5243:
 11210                           
 11211                           ;test_and_calibration.c: 91:             if (!PORTFbits.RF3){break;}
 11212  004EA8  B68E               	btfsc	142,3,c	;volatile
 11213  004EAA  EF59  F027         	goto	u5591
 11214  004EAE  EF5B  F027         	goto	u5590
 11215  004EB2                     u5591:
 11216  004EB2  EF5D  F027         	goto	l678
 11217  004EB6                     u5590:
 11218  004EB6  EF90  F027         	goto	l681
 11219  004EBA                     l678:
 11220                           
 11221                           ;test_and_calibration.c: 93:         if (!PORTFbits.RF3) {
 11222  004EBA  B68E               	btfsc	142,3,c	;volatile
 11223  004EBC  EF62  F027         	goto	u5601
 11224  004EC0  EF64  F027         	goto	u5600
 11225  004EC4                     u5601:
 11226  004EC4  EF2A  F027         	goto	l677
 11227  004EC8                     u5600:
 11228  004EC8                     
 11229                           ;test_and_calibration.c: 94:             _delay((unsigned long)((300)*(64000000/4000.0))
      +                          );
 11230  004EC8  0E19               	movlw	25
 11231  004ECA  6E3C               	movwf	(??_calibration_motor+1)^0,c
 11232  004ECC  0E5A               	movlw	90
 11233  004ECE  6E3B               	movwf	??_calibration_motor^0,c
 11234  004ED0  0EB2               	movlw	178
 11235  004ED2                     u6277:
 11236  004ED2  2EE8               	decfsz	wreg,f,c
 11237  004ED4  D7FE               	bra	u6277
 11238  004ED6  2E3B               	decfsz	??_calibration_motor^0,f,c
 11239  004ED8  D7FC               	bra	u6277
 11240  004EDA  2E3C               	decfsz	(??_calibration_motor+1)^0,f,c
 11241  004EDC  D7FA               	bra	u6277
 11242  004EDE                     
 11243                           ;test_and_calibration.c: 95:             if (!PORTFbits.RF2){break;}
 11244  004EDE  B48E               	btfsc	142,2,c	;volatile
 11245  004EE0  EF74  F027         	goto	u5611
 11246  004EE4  EF76  F027         	goto	u5610
 11247  004EE8                     u5611:
 11248  004EE8  EF78  F027         	goto	l683
 11249  004EEC                     u5610:
 11250  004EEC  EF90  F027         	goto	l681
 11251  004EF0                     l683:
 11252                           
 11253                           ;test_and_calibration.c: 96:             if (!PORTFbits.RF3){LATHbits.LATH3 = 0; _delay(
      +                          (unsigned long)((300)*(64000000/4000.0))); SENSITIVITY -= 5; }
 11254  004EF0  B68E               	btfsc	142,3,c	;volatile
 11255  004EF2  EF7D  F027         	goto	u5621
 11256  004EF6  EF7F  F027         	goto	u5620
 11257  004EFA                     u5621:
 11258  004EFA  EF2A  F027         	goto	l677
 11259  004EFE                     u5620:
 11260  004EFE  9680               	bcf	128,3,c	;volatile
 11261  004F00  0E19               	movlw	25
 11262  004F02  6E3C               	movwf	(??_calibration_motor+1)^0,c
 11263  004F04  0E5A               	movlw	90
 11264  004F06  6E3B               	movwf	??_calibration_motor^0,c
 11265  004F08  0EB2               	movlw	178
 11266  004F0A                     u6287:
 11267  004F0A  2EE8               	decfsz	wreg,f,c
 11268  004F0C  D7FE               	bra	u6287
 11269  004F0E  2E3B               	decfsz	??_calibration_motor^0,f,c
 11270  004F10  D7FC               	bra	u6287
 11271  004F12  2E3C               	decfsz	(??_calibration_motor+1)^0,f,c
 11272  004F14  D7FA               	bra	u6287
 11273  004F16  0E05               	movlw	5
 11274  004F18  0100               	movlb	0	; () banked
 11275  004F1A  5FFE               	subwf	_SENSITIVITY& (0+255),f,b
 11276  004F1C  EF2A  F027         	goto	l677
 11277  004F20                     l681:
 11278                           
 11279                           ;test_and_calibration.c: 99:     LATDbits.LATD7 = 0;
 11280  004F20  9E7C               	bcf	124,7,c	;volatile
 11281                           
 11282                           ;test_and_calibration.c: 100:     LATHbits.LATH3 = 0;
 11283  004F22  9680               	bcf	128,3,c	;volatile
 11284  004F24                     
 11285                           ;test_and_calibration.c: 101:     test_action(mL, mR);
 11286  004F24  C037  F033         	movff	calibration_motor@mL,test_action@mL
 11287  004F28  C038  F034         	movff	calibration_motor@mL+1,test_action@mL+1
 11288  004F2C  C039  F035         	movff	calibration_motor@mR,test_action@mR
 11289  004F30  C03A  F036         	movff	calibration_motor@mR+1,test_action@mR+1
 11290  004F34  EC69  F01E         	call	_test_action	;wreg free
 11291  004F38  0012               	return		;funcret
 11292  004F3A                     __end_of_calibration_motor:
 11293                           	callstack 0
 11294                           
 11295 ;; *************** function _test_action *****************
 11296 ;; Defined at:
 11297 ;;		line 16 in file "test_and_calibration.c"
 11298 ;; Parameters:    Size  Location     Type
 11299 ;;  mL              2   50[COMRAM] PTR struct DC_motor
 11300 ;;		 -> main@motorL(9), 
 11301 ;;  mR              2   52[COMRAM] PTR struct DC_motor
 11302 ;;		 -> main@motorR(9), 
 11303 ;; Auto vars:     Size  Location     Type
 11304 ;;		None
 11305 ;; Return value:  Size  Location     Type
 11306 ;;                  1    wreg      void 
 11307 ;; Registers used:
 11308 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11309 ;; Tracked objects:
 11310 ;;		On entry : 0/0
 11311 ;;		On exit  : 0/0
 11312 ;;		Unchanged: 0/0
 11313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11314 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11315 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11316 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11317 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11318 ;;Total ram usage:        4 bytes
 11319 ;; Hardware stack levels used: 1
 11320 ;; Hardware stack levels required when called: 5
 11321 ;; This function calls:
 11322 ;;		_fullSpeedAhead_test
 11323 ;;		_turnLeft
 11324 ;;		_turnRight
 11325 ;; This function is called by:
 11326 ;;		_calibration_motor
 11327 ;; This function uses a non-reentrant model
 11328 ;;
 11329                           
 11330                           	psect	text60
 11331  003CD2                     __ptext60:
 11332                           	callstack 0
 11333  003CD2                     _test_action:
 11334                           	callstack 24
 11335  003CD2                     
 11336                           ;test_and_calibration.c: 16: void test_action (struct DC_motor *mL, struct DC_motor *mR)
      +                          ;test_and_calibration.c: 17: { fullSpeedAhead_test(mL,mR);
 11337  003CD2  C033  F020         	movff	test_action@mL,fullSpeedAhead_test@mL
 11338  003CD6  C034  F021         	movff	test_action@mL+1,fullSpeedAhead_test@mL+1
 11339  003CDA  C035  F022         	movff	test_action@mR,fullSpeedAhead_test@mR
 11340  003CDE  C036  F023         	movff	test_action@mR+1,fullSpeedAhead_test@mR+1
 11341  003CE2  EC37  F02D         	call	_fullSpeedAhead_test	;wreg free
 11342                           
 11343                           ;test_and_calibration.c: 18:     turnLeft(mL,mR,90);
 11344  003CE6  C033  F020         	movff	test_action@mL,turnLeft@mL
 11345  003CEA  C034  F021         	movff	test_action@mL+1,turnLeft@mL+1
 11346  003CEE  C035  F022         	movff	test_action@mR,turnLeft@mR
 11347  003CF2  C036  F023         	movff	test_action@mR+1,turnLeft@mR+1
 11348  003CF6  0E5A               	movlw	90
 11349  003CF8  6E24               	movwf	turnLeft@angle_left^0,c
 11350  003CFA  ECC5  F021         	call	_turnLeft	;wreg free
 11351                           
 11352                           ;test_and_calibration.c: 19:     fullSpeedAhead_test(mL,mR);
 11353  003CFE  C033  F020         	movff	test_action@mL,fullSpeedAhead_test@mL
 11354  003D02  C034  F021         	movff	test_action@mL+1,fullSpeedAhead_test@mL+1
 11355  003D06  C035  F022         	movff	test_action@mR,fullSpeedAhead_test@mR
 11356  003D0A  C036  F023         	movff	test_action@mR+1,fullSpeedAhead_test@mR+1
 11357  003D0E  EC37  F02D         	call	_fullSpeedAhead_test	;wreg free
 11358                           
 11359                           ;test_and_calibration.c: 20:     turnLeft(mL,mR,90);
 11360  003D12  C033  F020         	movff	test_action@mL,turnLeft@mL
 11361  003D16  C034  F021         	movff	test_action@mL+1,turnLeft@mL+1
 11362  003D1A  C035  F022         	movff	test_action@mR,turnLeft@mR
 11363  003D1E  C036  F023         	movff	test_action@mR+1,turnLeft@mR+1
 11364  003D22  0E5A               	movlw	90
 11365  003D24  6E24               	movwf	turnLeft@angle_left^0,c
 11366  003D26  ECC5  F021         	call	_turnLeft	;wreg free
 11367                           
 11368                           ;test_and_calibration.c: 21:     fullSpeedAhead_test(mL,mR);
 11369  003D2A  C033  F020         	movff	test_action@mL,fullSpeedAhead_test@mL
 11370  003D2E  C034  F021         	movff	test_action@mL+1,fullSpeedAhead_test@mL+1
 11371  003D32  C035  F022         	movff	test_action@mR,fullSpeedAhead_test@mR
 11372  003D36  C036  F023         	movff	test_action@mR+1,fullSpeedAhead_test@mR+1
 11373  003D3A  EC37  F02D         	call	_fullSpeedAhead_test	;wreg free
 11374                           
 11375                           ;test_and_calibration.c: 22:     turnLeft(mL,mR,180);
 11376  003D3E  C033  F020         	movff	test_action@mL,turnLeft@mL
 11377  003D42  C034  F021         	movff	test_action@mL+1,turnLeft@mL+1
 11378  003D46  C035  F022         	movff	test_action@mR,turnLeft@mR
 11379  003D4A  C036  F023         	movff	test_action@mR+1,turnLeft@mR+1
 11380  003D4E  0EB4               	movlw	180
 11381  003D50  6E24               	movwf	turnLeft@angle_left^0,c
 11382  003D52  ECC5  F021         	call	_turnLeft	;wreg free
 11383                           
 11384                           ;test_and_calibration.c: 23:     fullSpeedAhead_test(mL,mR);
 11385  003D56  C033  F020         	movff	test_action@mL,fullSpeedAhead_test@mL
 11386  003D5A  C034  F021         	movff	test_action@mL+1,fullSpeedAhead_test@mL+1
 11387  003D5E  C035  F022         	movff	test_action@mR,fullSpeedAhead_test@mR
 11388  003D62  C036  F023         	movff	test_action@mR+1,fullSpeedAhead_test@mR+1
 11389  003D66  EC37  F02D         	call	_fullSpeedAhead_test	;wreg free
 11390                           
 11391                           ;test_and_calibration.c: 24:     turnRight(mL,mR,90);
 11392  003D6A  C033  F020         	movff	test_action@mL,turnRight@mL
 11393  003D6E  C034  F021         	movff	test_action@mL+1,turnRight@mL+1
 11394  003D72  C035  F022         	movff	test_action@mR,turnRight@mR
 11395  003D76  C036  F023         	movff	test_action@mR+1,turnRight@mR+1
 11396  003D7A  0E5A               	movlw	90
 11397  003D7C  6E24               	movwf	turnRight@angle_right^0,c
 11398  003D7E  EC55  F023         	call	_turnRight	;wreg free
 11399                           
 11400                           ;test_and_calibration.c: 25:     fullSpeedAhead_test(mL,mR);
 11401  003D82  C033  F020         	movff	test_action@mL,fullSpeedAhead_test@mL
 11402  003D86  C034  F021         	movff	test_action@mL+1,fullSpeedAhead_test@mL+1
 11403  003D8A  C035  F022         	movff	test_action@mR,fullSpeedAhead_test@mR
 11404  003D8E  C036  F023         	movff	test_action@mR+1,fullSpeedAhead_test@mR+1
 11405  003D92  EC37  F02D         	call	_fullSpeedAhead_test	;wreg free
 11406                           
 11407                           ;test_and_calibration.c: 26:     turnRight(mL,mR,90);
 11408  003D96  C033  F020         	movff	test_action@mL,turnRight@mL
 11409  003D9A  C034  F021         	movff	test_action@mL+1,turnRight@mL+1
 11410  003D9E  C035  F022         	movff	test_action@mR,turnRight@mR
 11411  003DA2  C036  F023         	movff	test_action@mR+1,turnRight@mR+1
 11412  003DA6  0E5A               	movlw	90
 11413  003DA8  6E24               	movwf	turnRight@angle_right^0,c
 11414  003DAA  EC55  F023         	call	_turnRight	;wreg free
 11415                           
 11416                           ;test_and_calibration.c: 27:     fullSpeedAhead_test(mL,mR);
 11417  003DAE  C033  F020         	movff	test_action@mL,fullSpeedAhead_test@mL
 11418  003DB2  C034  F021         	movff	test_action@mL+1,fullSpeedAhead_test@mL+1
 11419  003DB6  C035  F022         	movff	test_action@mR,fullSpeedAhead_test@mR
 11420  003DBA  C036  F023         	movff	test_action@mR+1,fullSpeedAhead_test@mR+1
 11421  003DBE  EC37  F02D         	call	_fullSpeedAhead_test	;wreg free
 11422                           
 11423                           ;test_and_calibration.c: 28:     turnLeft(mL,mR,180);
 11424  003DC2  C033  F020         	movff	test_action@mL,turnLeft@mL
 11425  003DC6  C034  F021         	movff	test_action@mL+1,turnLeft@mL+1
 11426  003DCA  C035  F022         	movff	test_action@mR,turnLeft@mR
 11427  003DCE  C036  F023         	movff	test_action@mR+1,turnLeft@mR+1
 11428  003DD2  0EB4               	movlw	180
 11429  003DD4  6E24               	movwf	turnLeft@angle_left^0,c
 11430  003DD6  ECC5  F021         	call	_turnLeft	;wreg free
 11431                           
 11432                           ;test_and_calibration.c: 29:     fullSpeedAhead_test(mL,mR);
 11433  003DDA  C033  F020         	movff	test_action@mL,fullSpeedAhead_test@mL
 11434  003DDE  C034  F021         	movff	test_action@mL+1,fullSpeedAhead_test@mL+1
 11435  003DE2  C035  F022         	movff	test_action@mR,fullSpeedAhead_test@mR
 11436  003DE6  C036  F023         	movff	test_action@mR+1,fullSpeedAhead_test@mR+1
 11437  003DEA  EC37  F02D         	call	_fullSpeedAhead_test	;wreg free
 11438                           
 11439                           ;test_and_calibration.c: 30:     turnLeft(mL,mR,135);
 11440  003DEE  C033  F020         	movff	test_action@mL,turnLeft@mL
 11441  003DF2  C034  F021         	movff	test_action@mL+1,turnLeft@mL+1
 11442  003DF6  C035  F022         	movff	test_action@mR,turnLeft@mR
 11443  003DFA  C036  F023         	movff	test_action@mR+1,turnLeft@mR+1
 11444  003DFE  0E87               	movlw	135
 11445  003E00  6E24               	movwf	turnLeft@angle_left^0,c
 11446  003E02  ECC5  F021         	call	_turnLeft	;wreg free
 11447                           
 11448                           ;test_and_calibration.c: 31:     fullSpeedAhead_test(mL,mR);
 11449  003E06  C033  F020         	movff	test_action@mL,fullSpeedAhead_test@mL
 11450  003E0A  C034  F021         	movff	test_action@mL+1,fullSpeedAhead_test@mL+1
 11451  003E0E  C035  F022         	movff	test_action@mR,fullSpeedAhead_test@mR
 11452  003E12  C036  F023         	movff	test_action@mR+1,fullSpeedAhead_test@mR+1
 11453  003E16  EC37  F02D         	call	_fullSpeedAhead_test	;wreg free
 11454                           
 11455                           ;test_and_calibration.c: 32:     turnRight(mL,mR,135);
 11456  003E1A  C033  F020         	movff	test_action@mL,turnRight@mL
 11457  003E1E  C034  F021         	movff	test_action@mL+1,turnRight@mL+1
 11458  003E22  C035  F022         	movff	test_action@mR,turnRight@mR
 11459  003E26  C036  F023         	movff	test_action@mR+1,turnRight@mR+1
 11460  003E2A  0E87               	movlw	135
 11461  003E2C  6E24               	movwf	turnRight@angle_right^0,c
 11462  003E2E  EC55  F023         	call	_turnRight	;wreg free
 11463                           
 11464                           ;test_and_calibration.c: 33:     fullSpeedAhead_test(mL,mR);
 11465  003E32  C033  F020         	movff	test_action@mL,fullSpeedAhead_test@mL
 11466  003E36  C034  F021         	movff	test_action@mL+1,fullSpeedAhead_test@mL+1
 11467  003E3A  C035  F022         	movff	test_action@mR,fullSpeedAhead_test@mR
 11468  003E3E  C036  F023         	movff	test_action@mR+1,fullSpeedAhead_test@mR+1
 11469  003E42  EC37  F02D         	call	_fullSpeedAhead_test	;wreg free
 11470                           
 11471                           ;test_and_calibration.c: 34:     turnLeft(mL,mR,135);
 11472  003E46  C033  F020         	movff	test_action@mL,turnLeft@mL
 11473  003E4A  C034  F021         	movff	test_action@mL+1,turnLeft@mL+1
 11474  003E4E  C035  F022         	movff	test_action@mR,turnLeft@mR
 11475  003E52  C036  F023         	movff	test_action@mR+1,turnLeft@mR+1
 11476  003E56  0E87               	movlw	135
 11477  003E58  6E24               	movwf	turnLeft@angle_left^0,c
 11478  003E5A  ECC5  F021         	call	_turnLeft	;wreg free
 11479                           
 11480                           ;test_and_calibration.c: 35:     fullSpeedAhead_test(mL,mR);
 11481  003E5E  C033  F020         	movff	test_action@mL,fullSpeedAhead_test@mL
 11482  003E62  C034  F021         	movff	test_action@mL+1,fullSpeedAhead_test@mL+1
 11483  003E66  C035  F022         	movff	test_action@mR,fullSpeedAhead_test@mR
 11484  003E6A  C036  F023         	movff	test_action@mR+1,fullSpeedAhead_test@mR+1
 11485  003E6E  EC37  F02D         	call	_fullSpeedAhead_test	;wreg free
 11486                           
 11487                           ;test_and_calibration.c: 36:     turnRight(mL,mR,135);
 11488  003E72  C033  F020         	movff	test_action@mL,turnRight@mL
 11489  003E76  C034  F021         	movff	test_action@mL+1,turnRight@mL+1
 11490  003E7A  C035  F022         	movff	test_action@mR,turnRight@mR
 11491  003E7E  C036  F023         	movff	test_action@mR+1,turnRight@mR+1
 11492  003E82  0E87               	movlw	135
 11493  003E84  6E24               	movwf	turnRight@angle_right^0,c
 11494  003E86  EC55  F023         	call	_turnRight	;wreg free
 11495  003E8A  0012               	return		;funcret
 11496  003E8C                     __end_of_test_action:
 11497                           	callstack 0
 11498                           
 11499 ;; *************** function _fullSpeedAhead_test *****************
 11500 ;; Defined at:
 11501 ;;		line 163 in file "dc_motor.c"
 11502 ;; Parameters:    Size  Location     Type
 11503 ;;  mL              2   31[COMRAM] PTR struct DC_motor
 11504 ;;		 -> main@motorL(9), 
 11505 ;;  mR              2   33[COMRAM] PTR struct DC_motor
 11506 ;;		 -> main@motorR(9), 
 11507 ;; Auto vars:     Size  Location     Type
 11508 ;;		None
 11509 ;; Return value:  Size  Location     Type
 11510 ;;                  1    wreg      void 
 11511 ;; Registers used:
 11512 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11513 ;; Tracked objects:
 11514 ;;		On entry : 0/0
 11515 ;;		On exit  : 0/0
 11516 ;;		Unchanged: 0/0
 11517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11518 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11519 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11520 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11521 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11522 ;;Total ram usage:        6 bytes
 11523 ;; Hardware stack levels used: 1
 11524 ;; Hardware stack levels required when called: 4
 11525 ;; This function calls:
 11526 ;;		_fullSpeedAhead
 11527 ;;		_stop
 11528 ;; This function is called by:
 11529 ;;		_test_action
 11530 ;; This function uses a non-reentrant model
 11531 ;;
 11532                           
 11533                           	psect	text61
 11534  005A6E                     __ptext61:
 11535                           	callstack 0
 11536  005A6E                     _fullSpeedAhead_test:
 11537                           	callstack 24
 11538  005A6E                     
 11539                           ;dc_motor.c: 163: void fullSpeedAhead_test(struct DC_motor *mL, struct DC_motor *mR);dc_
      +                          motor.c: 164: { fullSpeedAhead(mL, mR);
 11540  005A6E  C020  F01A         	movff	fullSpeedAhead_test@mL,fullSpeedAhead@mL
 11541  005A72  C021  F01B         	movff	fullSpeedAhead_test@mL+1,fullSpeedAhead@mL+1
 11542  005A76  C022  F01C         	movff	fullSpeedAhead_test@mR,fullSpeedAhead@mR
 11543  005A7A  C023  F01D         	movff	fullSpeedAhead_test@mR+1,fullSpeedAhead@mR+1
 11544  005A7E  EC31  F029         	call	_fullSpeedAhead	;wreg free
 11545  005A82                     
 11546                           ;dc_motor.c: 165:     _delay((unsigned long)((1000)*(64000000/4000.0)));
 11547  005A82  0E52               	movlw	82
 11548  005A84  6E25               	movwf	(??_fullSpeedAhead_test+1)^0,c
 11549  005A86  0E2B               	movlw	43
 11550  005A88  6E24               	movwf	??_fullSpeedAhead_test^0,c
 11551  005A8A  0E00               	movlw	0
 11552  005A8C                     u6297:
 11553  005A8C  2EE8               	decfsz	wreg,f,c
 11554  005A8E  D7FE               	bra	u6297
 11555  005A90  2E24               	decfsz	??_fullSpeedAhead_test^0,f,c
 11556  005A92  D7FC               	bra	u6297
 11557  005A94  2E25               	decfsz	(??_fullSpeedAhead_test+1)^0,f,c
 11558  005A96  D7FA               	bra	u6297
 11559  005A98  D000               	nop2	
 11560  005A9A                     
 11561                           ;dc_motor.c: 166:     stop(mL,mR);
 11562  005A9A  C020  F01A         	movff	fullSpeedAhead_test@mL,stop@mL
 11563  005A9E  C021  F01B         	movff	fullSpeedAhead_test@mL+1,stop@mL+1
 11564  005AA2  C022  F01C         	movff	fullSpeedAhead_test@mR,stop@mR
 11565  005AA6  C023  F01D         	movff	fullSpeedAhead_test@mR+1,stop@mR+1
 11566  005AAA  ECF5  F029         	call	_stop	;wreg free
 11567  005AAE  0012               	return		;funcret
 11568  005AB0                     __end_of_fullSpeedAhead_test:
 11569                           	callstack 0
 11570                           
 11571 ;; *************** function _buggylight_init *****************
 11572 ;; Defined at:
 11573 ;;		line 13 in file "color.c"
 11574 ;; Parameters:    Size  Location     Type
 11575 ;;		None
 11576 ;; Auto vars:     Size  Location     Type
 11577 ;;		None
 11578 ;; Return value:  Size  Location     Type
 11579 ;;                  1    wreg      void 
 11580 ;; Registers used:
 11581 ;;		None
 11582 ;; Tracked objects:
 11583 ;;		On entry : 0/0
 11584 ;;		On exit  : 0/0
 11585 ;;		Unchanged: 0/0
 11586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11587 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11588 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11589 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11590 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11591 ;;Total ram usage:        0 bytes
 11592 ;; Hardware stack levels used: 1
 11593 ;; Hardware stack levels required when called: 1
 11594 ;; This function calls:
 11595 ;;		Nothing
 11596 ;; This function is called by:
 11597 ;;		_main
 11598 ;; This function uses a non-reentrant model
 11599 ;;
 11600                           
 11601                           	psect	text62
 11602  005E4E                     __ptext62:
 11603                           	callstack 0
 11604  005E4E                     _buggylight_init:
 11605                           	callstack 29
 11606  005E4E                     
 11607                           ;color.c: 15:     TRISHbits.TRISH1=0;
 11608  005E4E  9288               	bcf	136,1,c	;volatile
 11609                           
 11610                           ;color.c: 16:     TRISDbits.TRISD4=0;
 11611  005E50  9884               	bcf	132,4,c	;volatile
 11612                           
 11613                           ;color.c: 17:     TRISDbits.TRISD3=0;
 11614  005E52  9684               	bcf	132,3,c	;volatile
 11615                           
 11616                           ;color.c: 18:     TRISFbits.TRISF0=0;
 11617  005E54  9086               	bcf	134,0,c	;volatile
 11618                           
 11619                           ;color.c: 19:     TRISHbits.TRISH0=0;
 11620  005E56  9088               	bcf	136,0,c	;volatile
 11621                           
 11622                           ;color.c: 21:     LATHbits.LATH1 = 0;
 11623  005E58  9280               	bcf	128,1,c	;volatile
 11624                           
 11625                           ;color.c: 22:     LATDbits.LATD4 = 0;
 11626  005E5A  987C               	bcf	124,4,c	;volatile
 11627                           
 11628                           ;color.c: 23:     LATDbits.LATD3 = 0;
 11629  005E5C  967C               	bcf	124,3,c	;volatile
 11630                           
 11631                           ;color.c: 24:     LATFbits.LATF0 = 0;
 11632  005E5E  907E               	bcf	126,0,c	;volatile
 11633                           
 11634                           ;color.c: 25:     LATHbits.LATH0 = 0;
 11635  005E60  9080               	bcf	128,0,c	;volatile
 11636  005E62  0012               	return		;funcret
 11637  005E64                     __end_of_buggylight_init:
 11638                           	callstack 0
 11639                           
 11640 ;; *************** function _action *****************
 11641 ;; Defined at:
 11642 ;;		line 17 in file "movement.c"
 11643 ;; Parameters:    Size  Location     Type
 11644 ;;  color           1    wreg     unsigned char 
 11645 ;;  mL              2   58[COMRAM] PTR struct DC_motor
 11646 ;;		 -> main@motorL(9), 
 11647 ;;  mR              2   60[COMRAM] PTR struct DC_motor
 11648 ;;		 -> main@motorR(9), 
 11649 ;; Auto vars:     Size  Location     Type
 11650 ;;  color           1   62[COMRAM] unsigned char 
 11651 ;; Return value:  Size  Location     Type
 11652 ;;                  1    wreg      void 
 11653 ;; Registers used:
 11654 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11655 ;; Tracked objects:
 11656 ;;		On entry : 0/0
 11657 ;;		On exit  : 0/0
 11658 ;;		Unchanged: 0/0
 11659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11660 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11661 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11662 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11663 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11664 ;;Total ram usage:        5 bytes
 11665 ;; Hardware stack levels used: 1
 11666 ;; Hardware stack levels required when called: 6
 11667 ;; This function calls:
 11668 ;;		_goback
 11669 ;;		_short_reverse
 11670 ;;		_toggle_light
 11671 ;;		_turnLeft
 11672 ;;		_turnRight
 11673 ;; This function is called by:
 11674 ;;		_main
 11675 ;; This function uses a non-reentrant model
 11676 ;;
 11677                           
 11678                           	psect	text63
 11679  002DB6                     __ptext63:
 11680                           	callstack 0
 11681  002DB6                     _action:
 11682                           	callstack 24
 11683                           
 11684                           ;incstack = 0
 11685                           ;action@color stored from wreg
 11686  002DB6  6E3F               	movwf	action@color^0,c
 11687  002DB8                     
 11688                           ;movement.c: 17: void action(unsigned char color, struct DC_motor *mL, struct DC_motor *
      +                          mR);movement.c: 18: { if (color != 0){
 11689  002DB8  503F               	movf	action@color^0,w,c
 11690  002DBA  B4D8               	btfsc	status,2,c
 11691  002DBC  EFE2  F016         	goto	u5711
 11692  002DC0  EFE4  F016         	goto	u5710
 11693  002DC4                     u5711:
 11694  002DC4  EF50  F018         	goto	l543
 11695  002DC8                     u5710:
 11696  002DC8                     
 11697                           ;movement.c: 19:         if (color == 1){
 11698  002DC8  043F               	decf	action@color^0,w,c
 11699  002DCA  A4D8               	btfss	status,2,c
 11700  002DCC  EFEA  F016         	goto	u5721
 11701  002DD0  EFEC  F016         	goto	u5720
 11702  002DD4                     u5721:
 11703  002DD4  EF12  F017         	goto	l5327
 11704  002DD8                     u5720:
 11705  002DD8                     
 11706                           ;movement.c: 20:             short_reverse(mL,mR,1);
 11707  002DD8  C03B  F020         	movff	action@mL,short_reverse@mL
 11708  002DDC  C03C  F021         	movff	action@mL+1,short_reverse@mL+1
 11709  002DE0  C03D  F022         	movff	action@mR,short_reverse@mR
 11710  002DE4  C03E  F023         	movff	action@mR+1,short_reverse@mR+1
 11711  002DE8  0E01               	movlw	1
 11712  002DEA  6E24               	movwf	short_reverse@instruction^0,c
 11713  002DEC  EC53  F02A         	call	_short_reverse	;wreg free
 11714                           
 11715                           ;movement.c: 21:             turnRight(mL,mR,90);
 11716  002DF0  C03B  F020         	movff	action@mL,turnRight@mL
 11717  002DF4  C03C  F021         	movff	action@mL+1,turnRight@mL+1
 11718  002DF8  C03D  F022         	movff	action@mR,turnRight@mR
 11719  002DFC  C03E  F023         	movff	action@mR+1,turnRight@mR+1
 11720  002E00  0E5A               	movlw	90
 11721  002E02  6E24               	movwf	turnRight@angle_right^0,c
 11722  002E04  EC55  F023         	call	_turnRight	;wreg free
 11723  002E08                     
 11724                           ;movement.c: 22:             memory[array_index] = 1;
 11725  002E08  0101               	movlb	1	; () banked
 11726  002E0A  5147               	movf	_array_index& (0+255),w,b
 11727  002E0C  0D02               	mullw	2
 11728  002E0E  0E00               	movlw	low _memory
 11729  002E10  24F3               	addwf	243,w,c
 11730  002E12  6ED9               	movwf	fsr2l,c
 11731  002E14  0E01               	movlw	high _memory
 11732  002E16  20F4               	addwfc	prodh,w,c
 11733  002E18  6EDA               	movwf	fsr2h,c
 11734  002E1A  0E01               	movlw	1
 11735  002E1C  6EDE               	movwf	postinc2,c
 11736  002E1E  0E00               	movlw	0
 11737  002E20  6EDD               	movwf	postdec2,c
 11738  002E22                     
 11739                           ; BSR set to: 1
 11740                           ;movement.c: 23:             array_index++;
 11741  002E22  2B47               	incf	_array_index& (0+255),f,b
 11742  002E24                     l5327:
 11743                           
 11744                           ;movement.c: 25:         if (color == 2){
 11745  002E24  0E02               	movlw	2
 11746  002E26  183F               	xorwf	action@color^0,w,c
 11747  002E28  A4D8               	btfss	status,2,c
 11748  002E2A  EF19  F017         	goto	u5731
 11749  002E2E  EF1B  F017         	goto	u5730
 11750  002E32                     u5731:
 11751  002E32  EF41  F017         	goto	l5335
 11752  002E36                     u5730:
 11753  002E36                     
 11754                           ;movement.c: 26:             short_reverse(mL,mR,1);
 11755  002E36  C03B  F020         	movff	action@mL,short_reverse@mL
 11756  002E3A  C03C  F021         	movff	action@mL+1,short_reverse@mL+1
 11757  002E3E  C03D  F022         	movff	action@mR,short_reverse@mR
 11758  002E42  C03E  F023         	movff	action@mR+1,short_reverse@mR+1
 11759  002E46  0E01               	movlw	1
 11760  002E48  6E24               	movwf	short_reverse@instruction^0,c
 11761  002E4A  EC53  F02A         	call	_short_reverse	;wreg free
 11762                           
 11763                           ;movement.c: 27:             turnLeft(mL,mR,90);
 11764  002E4E  C03B  F020         	movff	action@mL,turnLeft@mL
 11765  002E52  C03C  F021         	movff	action@mL+1,turnLeft@mL+1
 11766  002E56  C03D  F022         	movff	action@mR,turnLeft@mR
 11767  002E5A  C03E  F023         	movff	action@mR+1,turnLeft@mR+1
 11768  002E5E  0E5A               	movlw	90
 11769  002E60  6E24               	movwf	turnLeft@angle_left^0,c
 11770  002E62  ECC5  F021         	call	_turnLeft	;wreg free
 11771  002E66                     
 11772                           ;movement.c: 28:             memory[array_index] = 2;
 11773  002E66  0101               	movlb	1	; () banked
 11774  002E68  5147               	movf	_array_index& (0+255),w,b
 11775  002E6A  0D02               	mullw	2
 11776  002E6C  0E00               	movlw	low _memory
 11777  002E6E  24F3               	addwf	243,w,c
 11778  002E70  6ED9               	movwf	fsr2l,c
 11779  002E72  0E01               	movlw	high _memory
 11780  002E74  20F4               	addwfc	prodh,w,c
 11781  002E76  6EDA               	movwf	fsr2h,c
 11782  002E78  0E02               	movlw	2
 11783  002E7A  6EDE               	movwf	postinc2,c
 11784  002E7C  0E00               	movlw	0
 11785  002E7E  6EDD               	movwf	postdec2,c
 11786  002E80                     
 11787                           ; BSR set to: 1
 11788                           ;movement.c: 29:             array_index++;
 11789  002E80  2B47               	incf	_array_index& (0+255),f,b
 11790  002E82                     l5335:
 11791                           
 11792                           ;movement.c: 31:         if (color == 3){
 11793  002E82  0E03               	movlw	3
 11794  002E84  183F               	xorwf	action@color^0,w,c
 11795  002E86  A4D8               	btfss	status,2,c
 11796  002E88  EF48  F017         	goto	u5741
 11797  002E8C  EF4A  F017         	goto	u5740
 11798  002E90                     u5741:
 11799  002E90  EF70  F017         	goto	l5343
 11800  002E94                     u5740:
 11801  002E94                     
 11802                           ;movement.c: 32:             short_reverse(mL,mR,1);
 11803  002E94  C03B  F020         	movff	action@mL,short_reverse@mL
 11804  002E98  C03C  F021         	movff	action@mL+1,short_reverse@mL+1
 11805  002E9C  C03D  F022         	movff	action@mR,short_reverse@mR
 11806  002EA0  C03E  F023         	movff	action@mR+1,short_reverse@mR+1
 11807  002EA4  0E01               	movlw	1
 11808  002EA6  6E24               	movwf	short_reverse@instruction^0,c
 11809  002EA8  EC53  F02A         	call	_short_reverse	;wreg free
 11810                           
 11811                           ;movement.c: 33:             turnLeft(mL,mR,180);
 11812  002EAC  C03B  F020         	movff	action@mL,turnLeft@mL
 11813  002EB0  C03C  F021         	movff	action@mL+1,turnLeft@mL+1
 11814  002EB4  C03D  F022         	movff	action@mR,turnLeft@mR
 11815  002EB8  C03E  F023         	movff	action@mR+1,turnLeft@mR+1
 11816  002EBC  0EB4               	movlw	180
 11817  002EBE  6E24               	movwf	turnLeft@angle_left^0,c
 11818  002EC0  ECC5  F021         	call	_turnLeft	;wreg free
 11819  002EC4                     
 11820                           ;movement.c: 34:             memory[array_index] = 3;
 11821  002EC4  0101               	movlb	1	; () banked
 11822  002EC6  5147               	movf	_array_index& (0+255),w,b
 11823  002EC8  0D02               	mullw	2
 11824  002ECA  0E00               	movlw	low _memory
 11825  002ECC  24F3               	addwf	243,w,c
 11826  002ECE  6ED9               	movwf	fsr2l,c
 11827  002ED0  0E01               	movlw	high _memory
 11828  002ED2  20F4               	addwfc	prodh,w,c
 11829  002ED4  6EDA               	movwf	fsr2h,c
 11830  002ED6  0E03               	movlw	3
 11831  002ED8  6EDE               	movwf	postinc2,c
 11832  002EDA  0E00               	movlw	0
 11833  002EDC  6EDD               	movwf	postdec2,c
 11834  002EDE                     
 11835                           ; BSR set to: 1
 11836                           ;movement.c: 35:             array_index++;
 11837  002EDE  2B47               	incf	_array_index& (0+255),f,b
 11838  002EE0                     l5343:
 11839                           
 11840                           ;movement.c: 37:         if (color == 4){
 11841  002EE0  0E04               	movlw	4
 11842  002EE2  183F               	xorwf	action@color^0,w,c
 11843  002EE4  A4D8               	btfss	status,2,c
 11844  002EE6  EF77  F017         	goto	u5751
 11845  002EEA  EF79  F017         	goto	u5750
 11846  002EEE                     u5751:
 11847  002EEE  EF9F  F017         	goto	l5351
 11848  002EF2                     u5750:
 11849  002EF2                     
 11850                           ;movement.c: 38:             short_reverse(mL,mR,3);
 11851  002EF2  C03B  F020         	movff	action@mL,short_reverse@mL
 11852  002EF6  C03C  F021         	movff	action@mL+1,short_reverse@mL+1
 11853  002EFA  C03D  F022         	movff	action@mR,short_reverse@mR
 11854  002EFE  C03E  F023         	movff	action@mR+1,short_reverse@mR+1
 11855  002F02  0E03               	movlw	3
 11856  002F04  6E24               	movwf	short_reverse@instruction^0,c
 11857  002F06  EC53  F02A         	call	_short_reverse	;wreg free
 11858                           
 11859                           ;movement.c: 39:             turnRight(mL,mR,90);
 11860  002F0A  C03B  F020         	movff	action@mL,turnRight@mL
 11861  002F0E  C03C  F021         	movff	action@mL+1,turnRight@mL+1
 11862  002F12  C03D  F022         	movff	action@mR,turnRight@mR
 11863  002F16  C03E  F023         	movff	action@mR+1,turnRight@mR+1
 11864  002F1A  0E5A               	movlw	90
 11865  002F1C  6E24               	movwf	turnRight@angle_right^0,c
 11866  002F1E  EC55  F023         	call	_turnRight	;wreg free
 11867  002F22                     
 11868                           ;movement.c: 40:             memory[array_index] = 4;
 11869  002F22  0101               	movlb	1	; () banked
 11870  002F24  5147               	movf	_array_index& (0+255),w,b
 11871  002F26  0D02               	mullw	2
 11872  002F28  0E00               	movlw	low _memory
 11873  002F2A  24F3               	addwf	243,w,c
 11874  002F2C  6ED9               	movwf	fsr2l,c
 11875  002F2E  0E01               	movlw	high _memory
 11876  002F30  20F4               	addwfc	prodh,w,c
 11877  002F32  6EDA               	movwf	fsr2h,c
 11878  002F34  0E04               	movlw	4
 11879  002F36  6EDE               	movwf	postinc2,c
 11880  002F38  0E00               	movlw	0
 11881  002F3A  6EDD               	movwf	postdec2,c
 11882  002F3C                     
 11883                           ; BSR set to: 1
 11884                           ;movement.c: 41:             array_index++;
 11885  002F3C  2B47               	incf	_array_index& (0+255),f,b
 11886  002F3E                     l5351:
 11887                           
 11888                           ;movement.c: 43:         if (color == 5){
 11889  002F3E  0E05               	movlw	5
 11890  002F40  183F               	xorwf	action@color^0,w,c
 11891  002F42  A4D8               	btfss	status,2,c
 11892  002F44  EFA6  F017         	goto	u5761
 11893  002F48  EFA8  F017         	goto	u5760
 11894  002F4C                     u5761:
 11895  002F4C  EFCE  F017         	goto	l5359
 11896  002F50                     u5760:
 11897  002F50                     
 11898                           ;movement.c: 44:             short_reverse(mL,mR,3);
 11899  002F50  C03B  F020         	movff	action@mL,short_reverse@mL
 11900  002F54  C03C  F021         	movff	action@mL+1,short_reverse@mL+1
 11901  002F58  C03D  F022         	movff	action@mR,short_reverse@mR
 11902  002F5C  C03E  F023         	movff	action@mR+1,short_reverse@mR+1
 11903  002F60  0E03               	movlw	3
 11904  002F62  6E24               	movwf	short_reverse@instruction^0,c
 11905  002F64  EC53  F02A         	call	_short_reverse	;wreg free
 11906                           
 11907                           ;movement.c: 45:             turnLeft(mL,mR,90);
 11908  002F68  C03B  F020         	movff	action@mL,turnLeft@mL
 11909  002F6C  C03C  F021         	movff	action@mL+1,turnLeft@mL+1
 11910  002F70  C03D  F022         	movff	action@mR,turnLeft@mR
 11911  002F74  C03E  F023         	movff	action@mR+1,turnLeft@mR+1
 11912  002F78  0E5A               	movlw	90
 11913  002F7A  6E24               	movwf	turnLeft@angle_left^0,c
 11914  002F7C  ECC5  F021         	call	_turnLeft	;wreg free
 11915  002F80                     
 11916                           ;movement.c: 46:             memory[array_index] = 5;
 11917  002F80  0101               	movlb	1	; () banked
 11918  002F82  5147               	movf	_array_index& (0+255),w,b
 11919  002F84  0D02               	mullw	2
 11920  002F86  0E00               	movlw	low _memory
 11921  002F88  24F3               	addwf	243,w,c
 11922  002F8A  6ED9               	movwf	fsr2l,c
 11923  002F8C  0E01               	movlw	high _memory
 11924  002F8E  20F4               	addwfc	prodh,w,c
 11925  002F90  6EDA               	movwf	fsr2h,c
 11926  002F92  0E05               	movlw	5
 11927  002F94  6EDE               	movwf	postinc2,c
 11928  002F96  0E00               	movlw	0
 11929  002F98  6EDD               	movwf	postdec2,c
 11930  002F9A                     
 11931                           ; BSR set to: 1
 11932                           ;movement.c: 47:             array_index++;
 11933  002F9A  2B47               	incf	_array_index& (0+255),f,b
 11934  002F9C                     l5359:
 11935                           
 11936                           ;movement.c: 49:         if (color == 6){
 11937  002F9C  0E06               	movlw	6
 11938  002F9E  183F               	xorwf	action@color^0,w,c
 11939  002FA0  A4D8               	btfss	status,2,c
 11940  002FA2  EFD5  F017         	goto	u5771
 11941  002FA6  EFD7  F017         	goto	u5770
 11942  002FAA                     u5771:
 11943  002FAA  EFFD  F017         	goto	l5367
 11944  002FAE                     u5770:
 11945  002FAE                     
 11946                           ;movement.c: 50:             short_reverse(mL,mR,1);
 11947  002FAE  C03B  F020         	movff	action@mL,short_reverse@mL
 11948  002FB2  C03C  F021         	movff	action@mL+1,short_reverse@mL+1
 11949  002FB6  C03D  F022         	movff	action@mR,short_reverse@mR
 11950  002FBA  C03E  F023         	movff	action@mR+1,short_reverse@mR+1
 11951  002FBE  0E01               	movlw	1
 11952  002FC0  6E24               	movwf	short_reverse@instruction^0,c
 11953  002FC2  EC53  F02A         	call	_short_reverse	;wreg free
 11954                           
 11955                           ;movement.c: 51:             turnRight(mL,mR,135);
 11956  002FC6  C03B  F020         	movff	action@mL,turnRight@mL
 11957  002FCA  C03C  F021         	movff	action@mL+1,turnRight@mL+1
 11958  002FCE  C03D  F022         	movff	action@mR,turnRight@mR
 11959  002FD2  C03E  F023         	movff	action@mR+1,turnRight@mR+1
 11960  002FD6  0E87               	movlw	135
 11961  002FD8  6E24               	movwf	turnRight@angle_right^0,c
 11962  002FDA  EC55  F023         	call	_turnRight	;wreg free
 11963  002FDE                     
 11964                           ;movement.c: 52:             memory[array_index] = 6;
 11965  002FDE  0101               	movlb	1	; () banked
 11966  002FE0  5147               	movf	_array_index& (0+255),w,b
 11967  002FE2  0D02               	mullw	2
 11968  002FE4  0E00               	movlw	low _memory
 11969  002FE6  24F3               	addwf	243,w,c
 11970  002FE8  6ED9               	movwf	fsr2l,c
 11971  002FEA  0E01               	movlw	high _memory
 11972  002FEC  20F4               	addwfc	prodh,w,c
 11973  002FEE  6EDA               	movwf	fsr2h,c
 11974  002FF0  0E06               	movlw	6
 11975  002FF2  6EDE               	movwf	postinc2,c
 11976  002FF4  0E00               	movlw	0
 11977  002FF6  6EDD               	movwf	postdec2,c
 11978  002FF8                     
 11979                           ; BSR set to: 1
 11980                           ;movement.c: 53:             array_index++;
 11981  002FF8  2B47               	incf	_array_index& (0+255),f,b
 11982  002FFA                     l5367:
 11983                           
 11984                           ;movement.c: 55:         if (color == 7){
 11985  002FFA  0E07               	movlw	7
 11986  002FFC  183F               	xorwf	action@color^0,w,c
 11987  002FFE  A4D8               	btfss	status,2,c
 11988  003000  EF04  F018         	goto	u5781
 11989  003004  EF06  F018         	goto	u5780
 11990  003008                     u5781:
 11991  003008  EF2C  F018         	goto	l5375
 11992  00300C                     u5780:
 11993  00300C                     
 11994                           ;movement.c: 56:             short_reverse(mL,mR,1);
 11995  00300C  C03B  F020         	movff	action@mL,short_reverse@mL
 11996  003010  C03C  F021         	movff	action@mL+1,short_reverse@mL+1
 11997  003014  C03D  F022         	movff	action@mR,short_reverse@mR
 11998  003018  C03E  F023         	movff	action@mR+1,short_reverse@mR+1
 11999  00301C  0E01               	movlw	1
 12000  00301E  6E24               	movwf	short_reverse@instruction^0,c
 12001  003020  EC53  F02A         	call	_short_reverse	;wreg free
 12002                           
 12003                           ;movement.c: 57:             turnLeft(mL,mR,135);
 12004  003024  C03B  F020         	movff	action@mL,turnLeft@mL
 12005  003028  C03C  F021         	movff	action@mL+1,turnLeft@mL+1
 12006  00302C  C03D  F022         	movff	action@mR,turnLeft@mR
 12007  003030  C03E  F023         	movff	action@mR+1,turnLeft@mR+1
 12008  003034  0E87               	movlw	135
 12009  003036  6E24               	movwf	turnLeft@angle_left^0,c
 12010  003038  ECC5  F021         	call	_turnLeft	;wreg free
 12011  00303C                     
 12012                           ;movement.c: 58:             memory[array_index] = 7;
 12013  00303C  0101               	movlb	1	; () banked
 12014  00303E  5147               	movf	_array_index& (0+255),w,b
 12015  003040  0D02               	mullw	2
 12016  003042  0E00               	movlw	low _memory
 12017  003044  24F3               	addwf	243,w,c
 12018  003046  6ED9               	movwf	fsr2l,c
 12019  003048  0E01               	movlw	high _memory
 12020  00304A  20F4               	addwfc	prodh,w,c
 12021  00304C  6EDA               	movwf	fsr2h,c
 12022  00304E  0E07               	movlw	7
 12023  003050  6EDE               	movwf	postinc2,c
 12024  003052  0E00               	movlw	0
 12025  003054  6EDD               	movwf	postdec2,c
 12026  003056                     
 12027                           ; BSR set to: 1
 12028                           ;movement.c: 59:             array_index++;
 12029  003056  2B47               	incf	_array_index& (0+255),f,b
 12030  003058                     l5375:
 12031                           
 12032                           ;movement.c: 61:         if (color == 8){
 12033  003058  0E08               	movlw	8
 12034  00305A  183F               	xorwf	action@color^0,w,c
 12035  00305C  A4D8               	btfss	status,2,c
 12036  00305E  EF33  F018         	goto	u5791
 12037  003062  EF35  F018         	goto	u5790
 12038  003066                     u5791:
 12039  003066  EF50  F018         	goto	l543
 12040  00306A                     u5790:
 12041  00306A                     
 12042                           ;movement.c: 62:             toggle_light(2,1);
 12043  00306A  0E01               	movlw	1
 12044  00306C  6E01               	movwf	toggle_light@toggletime^0,c
 12045  00306E  0E02               	movlw	2
 12046  003070  EC24  F01B         	call	_toggle_light
 12047  003074                     
 12048                           ;movement.c: 63:             short_reverse(mL,mR,1);
 12049  003074  C03B  F020         	movff	action@mL,short_reverse@mL
 12050  003078  C03C  F021         	movff	action@mL+1,short_reverse@mL+1
 12051  00307C  C03D  F022         	movff	action@mR,short_reverse@mR
 12052  003080  C03E  F023         	movff	action@mR+1,short_reverse@mR+1
 12053  003084  0E01               	movlw	1
 12054  003086  6E24               	movwf	short_reverse@instruction^0,c
 12055  003088  EC53  F02A         	call	_short_reverse	;wreg free
 12056  00308C                     
 12057                           ;movement.c: 64:             goback(mL,mR);
 12058  00308C  C03B  F033         	movff	action@mL,goback@mL
 12059  003090  C03C  F034         	movff	action@mL+1,goback@mL+1
 12060  003094  C03D  F035         	movff	action@mR,goback@mR
 12061  003098  C03E  F036         	movff	action@mR+1,goback@mR+1
 12062  00309C  EC25  F015         	call	_goback	;wreg free
 12063  0030A0                     l543:
 12064  0030A0  0012               	return		;funcret
 12065  0030A2                     __end_of_action:
 12066                           	callstack 0
 12067                           
 12068 ;; *************** function _toggle_light *****************
 12069 ;; Defined at:
 12070 ;;		line 29 in file "color.c"
 12071 ;; Parameters:    Size  Location     Type
 12072 ;;  lightnumber     1    wreg     unsigned char 
 12073 ;;  toggletime      1    0[COMRAM] unsigned char 
 12074 ;; Auto vars:     Size  Location     Type
 12075 ;;  lightnumber     1    4[COMRAM] unsigned char 
 12076 ;;  i               1    3[COMRAM] unsigned char 
 12077 ;; Return value:  Size  Location     Type
 12078 ;;                  1    wreg      void 
 12079 ;; Registers used:
 12080 ;;		wreg, status,2, status,0
 12081 ;; Tracked objects:
 12082 ;;		On entry : 0/0
 12083 ;;		On exit  : 0/0
 12084 ;;		Unchanged: 0/0
 12085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12086 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12087 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12088 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12089 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12090 ;;Total ram usage:        5 bytes
 12091 ;; Hardware stack levels used: 1
 12092 ;; Hardware stack levels required when called: 1
 12093 ;; This function calls:
 12094 ;;		Nothing
 12095 ;; This function is called by:
 12096 ;;		_calibrate_white
 12097 ;;		_detect_color
 12098 ;;		_amb_light_measure
 12099 ;;		_action
 12100 ;; This function uses a non-reentrant model
 12101 ;;
 12102                           
 12103                           	psect	text64
 12104  003648                     __ptext64:
 12105                           	callstack 0
 12106  003648                     _toggle_light:
 12107                           	callstack 27
 12108                           
 12109                           ;incstack = 0
 12110                           ;toggle_light@lightnumber stored from wreg
 12111  003648  6E05               	movwf	toggle_light@lightnumber^0,c
 12112  00364A                     
 12113                           ;color.c: 29: void toggle_light(unsigned char lightnumber, unsigned char toggletime);col
      +                          or.c: 30: {;color.c: 31:     unsigned char i = 0;
 12114  00364A  0E00               	movlw	0
 12115  00364C  6E04               	movwf	toggle_light@i^0,c
 12116                           
 12117                           ;color.c: 33:     for (i = 0; i < toggletime; i++){
 12118  00364E  0E00               	movlw	0
 12119  003650  6E04               	movwf	toggle_light@i^0,c
 12120  003652  EF70  F01C         	goto	l58
 12121  003656                     l4395:
 12122                           
 12123                           ;color.c: 34:         if (lightnumber == 1){
 12124  003656  0405               	decf	toggle_light@lightnumber^0,w,c
 12125  003658  A4D8               	btfss	status,2,c
 12126  00365A  EF31  F01B         	goto	u4471
 12127  00365E  EF33  F01B         	goto	u4470
 12128  003662                     u4471:
 12129  003662  EF6B  F01B         	goto	l4403
 12130  003666                     u4470:
 12131  003666                     
 12132                           ;color.c: 35:             LATHbits.LATH1 = !LATHbits.LATH1;
 12133  003666  A280               	btfss	128,1,c	;volatile
 12134  003668  EF38  F01B         	goto	u4481
 12135  00366C  EF3C  F01B         	goto	u4480
 12136  003670                     u4481:
 12137  003670  6A02               	clrf	??_toggle_light^0,c
 12138  003672  2A02               	incf	??_toggle_light^0,f,c
 12139  003674  EF3D  F01B         	goto	u4498
 12140  003678                     u4480:
 12141  003678  6A02               	clrf	??_toggle_light^0,c
 12142  00367A                     u4498:
 12143  00367A  4602               	rlncf	??_toggle_light^0,f,c
 12144  00367C  5080               	movf	128,w,c	;volatile
 12145  00367E  1802               	xorwf	??_toggle_light^0,w,c
 12146  003680  0BFD               	andlw	-3
 12147  003682  1802               	xorwf	??_toggle_light^0,w,c
 12148  003684  6E80               	movwf	128,c	;volatile
 12149  003686                     
 12150                           ;color.c: 36:             _delay((unsigned long)((500)*(64000000/4000.0)));
 12151  003686  0E29               	movlw	41
 12152  003688  6E03               	movwf	(??_toggle_light+1)^0,c
 12153  00368A  0E96               	movlw	150
 12154  00368C  6E02               	movwf	??_toggle_light^0,c
 12155  00368E  0E7F               	movlw	127
 12156  003690                     u6307:
 12157  003690  2EE8               	decfsz	wreg,f,c
 12158  003692  D7FE               	bra	u6307
 12159  003694  2E02               	decfsz	??_toggle_light^0,f,c
 12160  003696  D7FC               	bra	u6307
 12161  003698  2E03               	decfsz	(??_toggle_light+1)^0,f,c
 12162  00369A  D7FA               	bra	u6307
 12163  00369C  F000               	nop	
 12164  00369E                     
 12165                           ;color.c: 37:             LATHbits.LATH1 = !LATHbits.LATH1;
 12166  00369E  A280               	btfss	128,1,c	;volatile
 12167  0036A0  EF54  F01B         	goto	u4501
 12168  0036A4  EF58  F01B         	goto	u4500
 12169  0036A8                     u4501:
 12170  0036A8  6A02               	clrf	??_toggle_light^0,c
 12171  0036AA  2A02               	incf	??_toggle_light^0,f,c
 12172  0036AC  EF59  F01B         	goto	u4518
 12173  0036B0                     u4500:
 12174  0036B0  6A02               	clrf	??_toggle_light^0,c
 12175  0036B2                     u4518:
 12176  0036B2  4602               	rlncf	??_toggle_light^0,f,c
 12177  0036B4  5080               	movf	128,w,c	;volatile
 12178  0036B6  1802               	xorwf	??_toggle_light^0,w,c
 12179  0036B8  0BFD               	andlw	-3
 12180  0036BA  1802               	xorwf	??_toggle_light^0,w,c
 12181  0036BC  6E80               	movwf	128,c	;volatile
 12182                           
 12183                           ;color.c: 38:             _delay((unsigned long)((500)*(64000000/4000.0)));
 12184  0036BE  0E29               	movlw	41
 12185  0036C0  6E03               	movwf	(??_toggle_light+1)^0,c
 12186  0036C2  0E96               	movlw	150
 12187  0036C4  6E02               	movwf	??_toggle_light^0,c
 12188  0036C6  0E7F               	movlw	127
 12189  0036C8                     u6317:
 12190  0036C8  2EE8               	decfsz	wreg,f,c
 12191  0036CA  D7FE               	bra	u6317
 12192  0036CC  2E02               	decfsz	??_toggle_light^0,f,c
 12193  0036CE  D7FC               	bra	u6317
 12194  0036D0  2E03               	decfsz	(??_toggle_light+1)^0,f,c
 12195  0036D2  D7FA               	bra	u6317
 12196  0036D4  F000               	nop	
 12197  0036D6                     l4403:
 12198                           
 12199                           ;color.c: 40:         if (lightnumber == 2){
 12200  0036D6  0E02               	movlw	2
 12201  0036D8  1805               	xorwf	toggle_light@lightnumber^0,w,c
 12202  0036DA  A4D8               	btfss	status,2,c
 12203  0036DC  EF72  F01B         	goto	u4521
 12204  0036E0  EF74  F01B         	goto	u4520
 12205  0036E4                     u4521:
 12206  0036E4  EFAC  F01B         	goto	l4411
 12207  0036E8                     u4520:
 12208  0036E8                     
 12209                           ;color.c: 41:             LATDbits.LATD4 = !LATDbits.LATD4;
 12210  0036E8  A87C               	btfss	124,4,c	;volatile
 12211  0036EA  EF79  F01B         	goto	u4531
 12212  0036EE  EF7D  F01B         	goto	u4530
 12213  0036F2                     u4531:
 12214  0036F2  6A02               	clrf	??_toggle_light^0,c
 12215  0036F4  2A02               	incf	??_toggle_light^0,f,c
 12216  0036F6  EF7E  F01B         	goto	u4548
 12217  0036FA                     u4530:
 12218  0036FA  6A02               	clrf	??_toggle_light^0,c
 12219  0036FC                     u4548:
 12220  0036FC  3A02               	swapf	??_toggle_light^0,f,c
 12221  0036FE  507C               	movf	124,w,c	;volatile
 12222  003700  1802               	xorwf	??_toggle_light^0,w,c
 12223  003702  0BEF               	andlw	-17
 12224  003704  1802               	xorwf	??_toggle_light^0,w,c
 12225  003706  6E7C               	movwf	124,c	;volatile
 12226  003708                     
 12227                           ;color.c: 42:             _delay((unsigned long)((500)*(64000000/4000.0)));
 12228  003708  0E29               	movlw	41
 12229  00370A  6E03               	movwf	(??_toggle_light+1)^0,c
 12230  00370C  0E96               	movlw	150
 12231  00370E  6E02               	movwf	??_toggle_light^0,c
 12232  003710  0E7F               	movlw	127
 12233  003712                     u6327:
 12234  003712  2EE8               	decfsz	wreg,f,c
 12235  003714  D7FE               	bra	u6327
 12236  003716  2E02               	decfsz	??_toggle_light^0,f,c
 12237  003718  D7FC               	bra	u6327
 12238  00371A  2E03               	decfsz	(??_toggle_light+1)^0,f,c
 12239  00371C  D7FA               	bra	u6327
 12240  00371E  F000               	nop	
 12241  003720                     
 12242                           ;color.c: 43:             LATDbits.LATD4 = !LATDbits.LATD4;
 12243  003720  A87C               	btfss	124,4,c	;volatile
 12244  003722  EF95  F01B         	goto	u4551
 12245  003726  EF99  F01B         	goto	u4550
 12246  00372A                     u4551:
 12247  00372A  6A02               	clrf	??_toggle_light^0,c
 12248  00372C  2A02               	incf	??_toggle_light^0,f,c
 12249  00372E  EF9A  F01B         	goto	u4568
 12250  003732                     u4550:
 12251  003732  6A02               	clrf	??_toggle_light^0,c
 12252  003734                     u4568:
 12253  003734  3A02               	swapf	??_toggle_light^0,f,c
 12254  003736  507C               	movf	124,w,c	;volatile
 12255  003738  1802               	xorwf	??_toggle_light^0,w,c
 12256  00373A  0BEF               	andlw	-17
 12257  00373C  1802               	xorwf	??_toggle_light^0,w,c
 12258  00373E  6E7C               	movwf	124,c	;volatile
 12259                           
 12260                           ;color.c: 44:             _delay((unsigned long)((500)*(64000000/4000.0)));
 12261  003740  0E29               	movlw	41
 12262  003742  6E03               	movwf	(??_toggle_light+1)^0,c
 12263  003744  0E96               	movlw	150
 12264  003746  6E02               	movwf	??_toggle_light^0,c
 12265  003748  0E7F               	movlw	127
 12266  00374A                     u6337:
 12267  00374A  2EE8               	decfsz	wreg,f,c
 12268  00374C  D7FE               	bra	u6337
 12269  00374E  2E02               	decfsz	??_toggle_light^0,f,c
 12270  003750  D7FC               	bra	u6337
 12271  003752  2E03               	decfsz	(??_toggle_light+1)^0,f,c
 12272  003754  D7FA               	bra	u6337
 12273  003756  F000               	nop	
 12274  003758                     l4411:
 12275                           
 12276                           ;color.c: 46:         if (lightnumber == 3){
 12277  003758  0E03               	movlw	3
 12278  00375A  1805               	xorwf	toggle_light@lightnumber^0,w,c
 12279  00375C  A4D8               	btfss	status,2,c
 12280  00375E  EFB3  F01B         	goto	u4571
 12281  003762  EFB5  F01B         	goto	u4570
 12282  003766                     u4571:
 12283  003766  EFF1  F01B         	goto	l4419
 12284  00376A                     u4570:
 12285  00376A                     
 12286                           ;color.c: 47:             LATDbits.LATD3 = !LATDbits.LATD3;
 12287  00376A  A67C               	btfss	124,3,c	;volatile
 12288  00376C  EFBA  F01B         	goto	u4581
 12289  003770  EFBE  F01B         	goto	u4580
 12290  003774                     u4581:
 12291  003774  6A02               	clrf	??_toggle_light^0,c
 12292  003776  2A02               	incf	??_toggle_light^0,f,c
 12293  003778  EFBF  F01B         	goto	u4598
 12294  00377C                     u4580:
 12295  00377C  6A02               	clrf	??_toggle_light^0,c
 12296  00377E                     u4598:
 12297  00377E  4602               	rlncf	??_toggle_light^0,f,c
 12298  003780  4602               	rlncf	??_toggle_light^0,f,c
 12299  003782  4602               	rlncf	??_toggle_light^0,f,c
 12300  003784  507C               	movf	124,w,c	;volatile
 12301  003786  1802               	xorwf	??_toggle_light^0,w,c
 12302  003788  0BF7               	andlw	-9
 12303  00378A  1802               	xorwf	??_toggle_light^0,w,c
 12304  00378C  6E7C               	movwf	124,c	;volatile
 12305  00378E                     
 12306                           ;color.c: 48:             _delay((unsigned long)((500)*(64000000/4000.0)));
 12307  00378E  0E29               	movlw	41
 12308  003790  6E03               	movwf	(??_toggle_light+1)^0,c
 12309  003792  0E96               	movlw	150
 12310  003794  6E02               	movwf	??_toggle_light^0,c
 12311  003796  0E7F               	movlw	127
 12312  003798                     u6347:
 12313  003798  2EE8               	decfsz	wreg,f,c
 12314  00379A  D7FE               	bra	u6347
 12315  00379C  2E02               	decfsz	??_toggle_light^0,f,c
 12316  00379E  D7FC               	bra	u6347
 12317  0037A0  2E03               	decfsz	(??_toggle_light+1)^0,f,c
 12318  0037A2  D7FA               	bra	u6347
 12319  0037A4  F000               	nop	
 12320  0037A6                     
 12321                           ;color.c: 49:             LATDbits.LATD3 = !LATDbits.LATD3;
 12322  0037A6  A67C               	btfss	124,3,c	;volatile
 12323  0037A8  EFD8  F01B         	goto	u4601
 12324  0037AC  EFDC  F01B         	goto	u4600
 12325  0037B0                     u4601:
 12326  0037B0  6A02               	clrf	??_toggle_light^0,c
 12327  0037B2  2A02               	incf	??_toggle_light^0,f,c
 12328  0037B4  EFDD  F01B         	goto	u4618
 12329  0037B8                     u4600:
 12330  0037B8  6A02               	clrf	??_toggle_light^0,c
 12331  0037BA                     u4618:
 12332  0037BA  4602               	rlncf	??_toggle_light^0,f,c
 12333  0037BC  4602               	rlncf	??_toggle_light^0,f,c
 12334  0037BE  4602               	rlncf	??_toggle_light^0,f,c
 12335  0037C0  507C               	movf	124,w,c	;volatile
 12336  0037C2  1802               	xorwf	??_toggle_light^0,w,c
 12337  0037C4  0BF7               	andlw	-9
 12338  0037C6  1802               	xorwf	??_toggle_light^0,w,c
 12339  0037C8  6E7C               	movwf	124,c	;volatile
 12340                           
 12341                           ;color.c: 50:             _delay((unsigned long)((500)*(64000000/4000.0)));
 12342  0037CA  0E29               	movlw	41
 12343  0037CC  6E03               	movwf	(??_toggle_light+1)^0,c
 12344  0037CE  0E96               	movlw	150
 12345  0037D0  6E02               	movwf	??_toggle_light^0,c
 12346  0037D2  0E7F               	movlw	127
 12347  0037D4                     u6357:
 12348  0037D4  2EE8               	decfsz	wreg,f,c
 12349  0037D6  D7FE               	bra	u6357
 12350  0037D8  2E02               	decfsz	??_toggle_light^0,f,c
 12351  0037DA  D7FC               	bra	u6357
 12352  0037DC  2E03               	decfsz	(??_toggle_light+1)^0,f,c
 12353  0037DE  D7FA               	bra	u6357
 12354  0037E0  F000               	nop	
 12355  0037E2                     l4419:
 12356                           
 12357                           ;color.c: 52:         if (lightnumber == 4){
 12358  0037E2  0E04               	movlw	4
 12359  0037E4  1805               	xorwf	toggle_light@lightnumber^0,w,c
 12360  0037E6  A4D8               	btfss	status,2,c
 12361  0037E8  EFF8  F01B         	goto	u4621
 12362  0037EC  EFFA  F01B         	goto	u4620
 12363  0037F0                     u4621:
 12364  0037F0  EF30  F01C         	goto	l4427
 12365  0037F4                     u4620:
 12366  0037F4                     
 12367                           ;color.c: 53:             LATFbits.LATF0 = !LATFbits.LATF0;
 12368  0037F4  A07E               	btfss	126,0,c	;volatile
 12369  0037F6  EFFF  F01B         	goto	u4631
 12370  0037FA  EF03  F01C         	goto	u4630
 12371  0037FE                     u4631:
 12372  0037FE  6A02               	clrf	??_toggle_light^0,c
 12373  003800  2A02               	incf	??_toggle_light^0,f,c
 12374  003802  EF04  F01C         	goto	u4648
 12375  003806                     u4630:
 12376  003806  6A02               	clrf	??_toggle_light^0,c
 12377  003808                     u4648:
 12378  003808  507E               	movf	126,w,c	;volatile
 12379  00380A  1802               	xorwf	??_toggle_light^0,w,c
 12380  00380C  0BFE               	andlw	-2
 12381  00380E  1802               	xorwf	??_toggle_light^0,w,c
 12382  003810  6E7E               	movwf	126,c	;volatile
 12383  003812                     
 12384                           ;color.c: 54:             _delay((unsigned long)((500)*(64000000/4000.0)));
 12385  003812  0E29               	movlw	41
 12386  003814  6E03               	movwf	(??_toggle_light+1)^0,c
 12387  003816  0E96               	movlw	150
 12388  003818  6E02               	movwf	??_toggle_light^0,c
 12389  00381A  0E7F               	movlw	127
 12390  00381C                     u6367:
 12391  00381C  2EE8               	decfsz	wreg,f,c
 12392  00381E  D7FE               	bra	u6367
 12393  003820  2E02               	decfsz	??_toggle_light^0,f,c
 12394  003822  D7FC               	bra	u6367
 12395  003824  2E03               	decfsz	(??_toggle_light+1)^0,f,c
 12396  003826  D7FA               	bra	u6367
 12397  003828  F000               	nop	
 12398  00382A                     
 12399                           ;color.c: 55:             LATFbits.LATF0 = !LATFbits.LATF0;
 12400  00382A  A07E               	btfss	126,0,c	;volatile
 12401  00382C  EF1A  F01C         	goto	u4651
 12402  003830  EF1E  F01C         	goto	u4650
 12403  003834                     u4651:
 12404  003834  6A02               	clrf	??_toggle_light^0,c
 12405  003836  2A02               	incf	??_toggle_light^0,f,c
 12406  003838  EF1F  F01C         	goto	u4668
 12407  00383C                     u4650:
 12408  00383C  6A02               	clrf	??_toggle_light^0,c
 12409  00383E                     u4668:
 12410  00383E  507E               	movf	126,w,c	;volatile
 12411  003840  1802               	xorwf	??_toggle_light^0,w,c
 12412  003842  0BFE               	andlw	-2
 12413  003844  1802               	xorwf	??_toggle_light^0,w,c
 12414  003846  6E7E               	movwf	126,c	;volatile
 12415                           
 12416                           ;color.c: 56:             _delay((unsigned long)((500)*(64000000/4000.0)));
 12417  003848  0E29               	movlw	41
 12418  00384A  6E03               	movwf	(??_toggle_light+1)^0,c
 12419  00384C  0E96               	movlw	150
 12420  00384E  6E02               	movwf	??_toggle_light^0,c
 12421  003850  0E7F               	movlw	127
 12422  003852                     u6377:
 12423  003852  2EE8               	decfsz	wreg,f,c
 12424  003854  D7FE               	bra	u6377
 12425  003856  2E02               	decfsz	??_toggle_light^0,f,c
 12426  003858  D7FC               	bra	u6377
 12427  00385A  2E03               	decfsz	(??_toggle_light+1)^0,f,c
 12428  00385C  D7FA               	bra	u6377
 12429  00385E  F000               	nop	
 12430  003860                     l4427:
 12431                           
 12432                           ;color.c: 58:         if (lightnumber == 3){
 12433  003860  0E03               	movlw	3
 12434  003862  1805               	xorwf	toggle_light@lightnumber^0,w,c
 12435  003864  A4D8               	btfss	status,2,c
 12436  003866  EF37  F01C         	goto	u4671
 12437  00386A  EF39  F01C         	goto	u4670
 12438  00386E                     u4671:
 12439  00386E  EF6F  F01C         	goto	l4435
 12440  003872                     u4670:
 12441  003872                     
 12442                           ;color.c: 59:             LATHbits.LATH0 = !LATHbits.LATH0;
 12443  003872  A080               	btfss	128,0,c	;volatile
 12444  003874  EF3E  F01C         	goto	u4681
 12445  003878  EF42  F01C         	goto	u4680
 12446  00387C                     u4681:
 12447  00387C  6A02               	clrf	??_toggle_light^0,c
 12448  00387E  2A02               	incf	??_toggle_light^0,f,c
 12449  003880  EF43  F01C         	goto	u4698
 12450  003884                     u4680:
 12451  003884  6A02               	clrf	??_toggle_light^0,c
 12452  003886                     u4698:
 12453  003886  5080               	movf	128,w,c	;volatile
 12454  003888  1802               	xorwf	??_toggle_light^0,w,c
 12455  00388A  0BFE               	andlw	-2
 12456  00388C  1802               	xorwf	??_toggle_light^0,w,c
 12457  00388E  6E80               	movwf	128,c	;volatile
 12458  003890                     
 12459                           ;color.c: 60:             _delay((unsigned long)((500)*(64000000/4000.0)));
 12460  003890  0E29               	movlw	41
 12461  003892  6E03               	movwf	(??_toggle_light+1)^0,c
 12462  003894  0E96               	movlw	150
 12463  003896  6E02               	movwf	??_toggle_light^0,c
 12464  003898  0E7F               	movlw	127
 12465  00389A                     u6387:
 12466  00389A  2EE8               	decfsz	wreg,f,c
 12467  00389C  D7FE               	bra	u6387
 12468  00389E  2E02               	decfsz	??_toggle_light^0,f,c
 12469  0038A0  D7FC               	bra	u6387
 12470  0038A2  2E03               	decfsz	(??_toggle_light+1)^0,f,c
 12471  0038A4  D7FA               	bra	u6387
 12472  0038A6  F000               	nop	
 12473  0038A8                     
 12474                           ;color.c: 61:             LATHbits.LATH0 = !LATHbits.LATH0;
 12475  0038A8  A080               	btfss	128,0,c	;volatile
 12476  0038AA  EF59  F01C         	goto	u4701
 12477  0038AE  EF5D  F01C         	goto	u4700
 12478  0038B2                     u4701:
 12479  0038B2  6A02               	clrf	??_toggle_light^0,c
 12480  0038B4  2A02               	incf	??_toggle_light^0,f,c
 12481  0038B6  EF5E  F01C         	goto	u4718
 12482  0038BA                     u4700:
 12483  0038BA  6A02               	clrf	??_toggle_light^0,c
 12484  0038BC                     u4718:
 12485  0038BC  5080               	movf	128,w,c	;volatile
 12486  0038BE  1802               	xorwf	??_toggle_light^0,w,c
 12487  0038C0  0BFE               	andlw	-2
 12488  0038C2  1802               	xorwf	??_toggle_light^0,w,c
 12489  0038C4  6E80               	movwf	128,c	;volatile
 12490                           
 12491                           ;color.c: 62:             _delay((unsigned long)((500)*(64000000/4000.0)));
 12492  0038C6  0E29               	movlw	41
 12493  0038C8  6E03               	movwf	(??_toggle_light+1)^0,c
 12494  0038CA  0E96               	movlw	150
 12495  0038CC  6E02               	movwf	??_toggle_light^0,c
 12496  0038CE  0E7F               	movlw	127
 12497  0038D0                     u6397:
 12498  0038D0  2EE8               	decfsz	wreg,f,c
 12499  0038D2  D7FE               	bra	u6397
 12500  0038D4  2E02               	decfsz	??_toggle_light^0,f,c
 12501  0038D6  D7FC               	bra	u6397
 12502  0038D8  2E03               	decfsz	(??_toggle_light+1)^0,f,c
 12503  0038DA  D7FA               	bra	u6397
 12504  0038DC  F000               	nop	
 12505  0038DE                     l4435:
 12506                           
 12507                           ;color.c: 64:     }
 12508  0038DE  2A04               	incf	toggle_light@i^0,f,c
 12509  0038E0                     l58:
 12510  0038E0  5001               	movf	toggle_light@toggletime^0,w,c
 12511  0038E2  5C04               	subwf	toggle_light@i^0,w,c
 12512  0038E4  A0D8               	btfss	status,0,c
 12513  0038E6  EF77  F01C         	goto	u4721
 12514  0038EA  EF79  F01C         	goto	u4720
 12515  0038EE                     u4721:
 12516  0038EE  EF2B  F01B         	goto	l4395
 12517  0038F2                     u4720:
 12518  0038F2  0012               	return		;funcret
 12519  0038F4                     __end_of_toggle_light:
 12520                           	callstack 0
 12521                           
 12522 ;; *************** function _goback *****************
 12523 ;; Defined at:
 12524 ;;		line 92 in file "movement.c"
 12525 ;; Parameters:    Size  Location     Type
 12526 ;;  mL              2   50[COMRAM] PTR struct DC_motor
 12527 ;;		 -> main@motorL(9), 
 12528 ;;  mR              2   52[COMRAM] PTR struct DC_motor
 12529 ;;		 -> main@motorR(9), 
 12530 ;; Auto vars:     Size  Location     Type
 12531 ;;  i               2   56[COMRAM] unsigned int 
 12532 ;; Return value:  Size  Location     Type
 12533 ;;                  1    wreg      void 
 12534 ;; Registers used:
 12535 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12536 ;; Tracked objects:
 12537 ;;		On entry : 0/0
 12538 ;;		On exit  : 0/0
 12539 ;;		Unchanged: 0/0
 12540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12541 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12542 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12543 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12544 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12545 ;;Total ram usage:        8 bytes
 12546 ;; Hardware stack levels used: 1
 12547 ;; Hardware stack levels required when called: 5
 12548 ;; This function calls:
 12549 ;;		_fullSpeedAhead
 12550 ;;		_short_reverse
 12551 ;;		_stop
 12552 ;;		_turnLeft
 12553 ;;		_turnRight
 12554 ;; This function is called by:
 12555 ;;		_action
 12556 ;; This function uses a non-reentrant model
 12557 ;;
 12558                           
 12559                           	psect	text65
 12560  002A4A                     __ptext65:
 12561                           	callstack 0
 12562  002A4A                     _goback:
 12563                           	callstack 24
 12564  002A4A                     
 12565                           ;movement.c: 92: void goback(struct DC_motor *mL, struct DC_motor *mR);movement.c: 93: {
      +                           turnRight(mL,mR,180);
 12566  002A4A  C033  F020         	movff	goback@mL,turnRight@mL
 12567  002A4E  C034  F021         	movff	goback@mL+1,turnRight@mL+1
 12568  002A52  C035  F022         	movff	goback@mR,turnRight@mR
 12569  002A56  C036  F023         	movff	goback@mR+1,turnRight@mR+1
 12570  002A5A  0EB4               	movlw	180
 12571  002A5C  6E24               	movwf	turnRight@angle_right^0,c
 12572  002A5E  EC55  F023         	call	_turnRight	;wreg free
 12573                           
 12574                           ;movement.c: 94:     short_reverse(mL,mR,2);
 12575  002A62  C033  F020         	movff	goback@mL,short_reverse@mL
 12576  002A66  C034  F021         	movff	goback@mL+1,short_reverse@mL+1
 12577  002A6A  C035  F022         	movff	goback@mR,short_reverse@mR
 12578  002A6E  C036  F023         	movff	goback@mR+1,short_reverse@mR+1
 12579  002A72  0E02               	movlw	2
 12580  002A74  6E24               	movwf	short_reverse@instruction^0,c
 12581  002A76  EC53  F02A         	call	_short_reverse	;wreg free
 12582  002A7A                     l5087:
 12583                           
 12584                           ;movement.c: 95:     array_index--;
 12585  002A7A  0101               	movlb	1	; () banked
 12586  002A7C  0747               	decf	_array_index& (0+255),f,b
 12587  002A7E                     l5089:
 12588                           
 12589                           ; BSR set to: 1
 12590                           ;movement.c: 97:         fullSpeedAhead(mL,mR);
 12591  002A7E  C033  F01A         	movff	goback@mL,fullSpeedAhead@mL
 12592  002A82  C034  F01B         	movff	goback@mL+1,fullSpeedAhead@mL+1
 12593  002A86  C035  F01C         	movff	goback@mR,fullSpeedAhead@mR
 12594  002A8A  C036  F01D         	movff	goback@mR+1,fullSpeedAhead@mR+1
 12595  002A8E  EC31  F029         	call	_fullSpeedAhead	;wreg free
 12596  002A92                     
 12597                           ;movement.c: 98:         for (unsigned int i=0; i<memory[array_index]; i++) {_delay((uns
      +                          igned long)((100)*(64000000/4000.0)));}
 12598  002A92  0E00               	movlw	0
 12599  002A94  6E3A               	movwf	(goback@i+1)^0,c
 12600  002A96  0E00               	movlw	0
 12601  002A98  6E39               	movwf	goback@i^0,c
 12602  002A9A  EF5D  F015         	goto	l5097
 12603  002A9E                     l5093:
 12604                           
 12605                           ; BSR set to: 1
 12606  002A9E  0E09               	movlw	9
 12607  002AA0  6E38               	movwf	(??_goback+1)^0,c
 12608  002AA2  0E1E               	movlw	30
 12609  002AA4  6E37               	movwf	??_goback^0,c
 12610  002AA6  0EE4               	movlw	228
 12611  002AA8                     u6407:
 12612  002AA8  2EE8               	decfsz	wreg,f,c
 12613  002AAA  D7FE               	bra	u6407
 12614  002AAC  2E37               	decfsz	??_goback^0,f,c
 12615  002AAE  D7FC               	bra	u6407
 12616  002AB0  2E38               	decfsz	(??_goback+1)^0,f,c
 12617  002AB2  D7FA               	bra	u6407
 12618  002AB4  D000               	nop2	
 12619  002AB6  4A39               	infsnz	goback@i^0,f,c
 12620  002AB8  2A3A               	incf	(goback@i+1)^0,f,c
 12621  002ABA                     l5097:
 12622  002ABA  0101               	movlb	1	; () banked
 12623  002ABC  5147               	movf	_array_index& (0+255),w,b
 12624  002ABE  0D02               	mullw	2
 12625  002AC0  0E00               	movlw	low _memory
 12626  002AC2  24F3               	addwf	243,w,c
 12627  002AC4  6ED9               	movwf	fsr2l,c
 12628  002AC6  0E01               	movlw	high _memory
 12629  002AC8  20F4               	addwfc	prodh,w,c
 12630  002ACA  6EDA               	movwf	fsr2h,c
 12631  002ACC  50DE               	movf	postinc2,w,c
 12632  002ACE  5C39               	subwf	goback@i^0,w,c
 12633  002AD0  50DE               	movf	postinc2,w,c
 12634  002AD2  583A               	subwfb	(goback@i+1)^0,w,c
 12635  002AD4  A0D8               	btfss	status,0,c
 12636  002AD6  EF6F  F015         	goto	u5451
 12637  002ADA  EF71  F015         	goto	u5450
 12638  002ADE                     u5451:
 12639  002ADE  EF4F  F015         	goto	l5093
 12640  002AE2                     u5450:
 12641  002AE2                     
 12642                           ; BSR set to: 1
 12643                           ;movement.c: 99:         stop(mL,mR);
 12644  002AE2  C033  F01A         	movff	goback@mL,stop@mL
 12645  002AE6  C034  F01B         	movff	goback@mL+1,stop@mL+1
 12646  002AEA  C035  F01C         	movff	goback@mR,stop@mR
 12647  002AEE  C036  F01D         	movff	goback@mR+1,stop@mR+1
 12648  002AF2  ECF5  F029         	call	_stop	;wreg free
 12649  002AF6                     
 12650                           ;movement.c: 100:         if (array_index == 0){break;}
 12651  002AF6  0101               	movlb	1	; () banked
 12652  002AF8  5147               	movf	_array_index& (0+255),w,b
 12653  002AFA  A4D8               	btfss	status,2,c
 12654  002AFC  EF82  F015         	goto	u5461
 12655  002B00  EF84  F015         	goto	u5460
 12656  002B04                     u5461:
 12657  002B04  EF86  F015         	goto	l5105
 12658  002B08                     u5460:
 12659  002B08  EFBC  F016         	goto	l555
 12660  002B0C                     l5105:
 12661                           
 12662                           ; BSR set to: 1
 12663                           ;movement.c: 101:         array_index--;
 12664  002B0C  0747               	decf	_array_index& (0+255),f,b
 12665  002B0E                     
 12666                           ; BSR set to: 1
 12667                           ;movement.c: 102:         if (memory[array_index] == 1){turnLeft(mL,mR,90);short_reverse
      +                          (mL,mR,2);array_index--;}
 12668  002B0E  5147               	movf	_array_index& (0+255),w,b
 12669  002B10  0D02               	mullw	2
 12670  002B12  0E00               	movlw	low _memory
 12671  002B14  24F3               	addwf	243,w,c
 12672  002B16  6ED9               	movwf	fsr2l,c
 12673  002B18  0E01               	movlw	high _memory
 12674  002B1A  20F4               	addwfc	prodh,w,c
 12675  002B1C  6EDA               	movwf	fsr2h,c
 12676  002B1E  04DE               	decf	postinc2,w,c
 12677  002B20  10DE               	iorwf	postinc2,w,c
 12678  002B22  A4D8               	btfss	status,2,c
 12679  002B24  EF96  F015         	goto	u5471
 12680  002B28  EF98  F015         	goto	u5470
 12681  002B2C                     u5471:
 12682  002B2C  EFB2  F015         	goto	l5113
 12683  002B30                     u5470:
 12684  002B30                     
 12685                           ; BSR set to: 1
 12686  002B30  C033  F020         	movff	goback@mL,turnLeft@mL
 12687  002B34  C034  F021         	movff	goback@mL+1,turnLeft@mL+1
 12688  002B38  C035  F022         	movff	goback@mR,turnLeft@mR
 12689  002B3C  C036  F023         	movff	goback@mR+1,turnLeft@mR+1
 12690  002B40  0E5A               	movlw	90
 12691  002B42  6E24               	movwf	turnLeft@angle_left^0,c
 12692  002B44  ECC5  F021         	call	_turnLeft	;wreg free
 12693  002B48  C033  F020         	movff	goback@mL,short_reverse@mL
 12694  002B4C  C034  F021         	movff	goback@mL+1,short_reverse@mL+1
 12695  002B50  C035  F022         	movff	goback@mR,short_reverse@mR
 12696  002B54  C036  F023         	movff	goback@mR+1,short_reverse@mR+1
 12697  002B58  0E02               	movlw	2
 12698  002B5A  6E24               	movwf	short_reverse@instruction^0,c
 12699  002B5C  EC53  F02A         	call	_short_reverse	;wreg free
 12700  002B60  EF3D  F015         	goto	l5087
 12701  002B64                     l5113:
 12702                           
 12703                           ; BSR set to: 1
 12704  002B64  5147               	movf	_array_index& (0+255),w,b
 12705  002B66  0D02               	mullw	2
 12706  002B68  0E00               	movlw	low _memory
 12707  002B6A  24F3               	addwf	243,w,c
 12708  002B6C  6ED9               	movwf	fsr2l,c
 12709  002B6E  0E01               	movlw	high _memory
 12710  002B70  20F4               	addwfc	prodh,w,c
 12711  002B72  6EDA               	movwf	fsr2h,c
 12712  002B74  0E02               	movlw	2
 12713  002B76  18DE               	xorwf	postinc2,w,c
 12714  002B78  10DE               	iorwf	postinc2,w,c
 12715  002B7A  A4D8               	btfss	status,2,c
 12716  002B7C  EFC2  F015         	goto	u5481
 12717  002B80  EFC4  F015         	goto	u5480
 12718  002B84                     u5481:
 12719  002B84  EFDE  F015         	goto	l5119
 12720  002B88                     u5480:
 12721  002B88                     
 12722                           ; BSR set to: 1
 12723  002B88  C033  F020         	movff	goback@mL,turnRight@mL
 12724  002B8C  C034  F021         	movff	goback@mL+1,turnRight@mL+1
 12725  002B90  C035  F022         	movff	goback@mR,turnRight@mR
 12726  002B94  C036  F023         	movff	goback@mR+1,turnRight@mR+1
 12727  002B98  0E5A               	movlw	90
 12728  002B9A  6E24               	movwf	turnRight@angle_right^0,c
 12729  002B9C  EC55  F023         	call	_turnRight	;wreg free
 12730  002BA0  C033  F020         	movff	goback@mL,short_reverse@mL
 12731  002BA4  C034  F021         	movff	goback@mL+1,short_reverse@mL+1
 12732  002BA8  C035  F022         	movff	goback@mR,short_reverse@mR
 12733  002BAC  C036  F023         	movff	goback@mR+1,short_reverse@mR+1
 12734  002BB0  0E02               	movlw	2
 12735  002BB2  6E24               	movwf	short_reverse@instruction^0,c
 12736  002BB4  EC53  F02A         	call	_short_reverse	;wreg free
 12737  002BB8  EF3D  F015         	goto	l5087
 12738  002BBC                     l5119:
 12739                           
 12740                           ; BSR set to: 1
 12741  002BBC  5147               	movf	_array_index& (0+255),w,b
 12742  002BBE  0D02               	mullw	2
 12743  002BC0  0E00               	movlw	low _memory
 12744  002BC2  24F3               	addwf	243,w,c
 12745  002BC4  6ED9               	movwf	fsr2l,c
 12746  002BC6  0E01               	movlw	high _memory
 12747  002BC8  20F4               	addwfc	prodh,w,c
 12748  002BCA  6EDA               	movwf	fsr2h,c
 12749  002BCC  0E03               	movlw	3
 12750  002BCE  18DE               	xorwf	postinc2,w,c
 12751  002BD0  10DE               	iorwf	postinc2,w,c
 12752  002BD2  A4D8               	btfss	status,2,c
 12753  002BD4  EFEE  F015         	goto	u5491
 12754  002BD8  EFF0  F015         	goto	u5490
 12755  002BDC                     u5491:
 12756  002BDC  EF0A  F016         	goto	l5125
 12757  002BE0                     u5490:
 12758  002BE0                     
 12759                           ; BSR set to: 1
 12760  002BE0  C033  F020         	movff	goback@mL,turnLeft@mL
 12761  002BE4  C034  F021         	movff	goback@mL+1,turnLeft@mL+1
 12762  002BE8  C035  F022         	movff	goback@mR,turnLeft@mR
 12763  002BEC  C036  F023         	movff	goback@mR+1,turnLeft@mR+1
 12764  002BF0  0EB4               	movlw	180
 12765  002BF2  6E24               	movwf	turnLeft@angle_left^0,c
 12766  002BF4  ECC5  F021         	call	_turnLeft	;wreg free
 12767  002BF8  C033  F020         	movff	goback@mL,short_reverse@mL
 12768  002BFC  C034  F021         	movff	goback@mL+1,short_reverse@mL+1
 12769  002C00  C035  F022         	movff	goback@mR,short_reverse@mR
 12770  002C04  C036  F023         	movff	goback@mR+1,short_reverse@mR+1
 12771  002C08  0E02               	movlw	2
 12772  002C0A  6E24               	movwf	short_reverse@instruction^0,c
 12773  002C0C  EC53  F02A         	call	_short_reverse	;wreg free
 12774  002C10  EF3D  F015         	goto	l5087
 12775  002C14                     l5125:
 12776                           
 12777                           ; BSR set to: 1
 12778  002C14  5147               	movf	_array_index& (0+255),w,b
 12779  002C16  0D02               	mullw	2
 12780  002C18  0E00               	movlw	low _memory
 12781  002C1A  24F3               	addwf	243,w,c
 12782  002C1C  6ED9               	movwf	fsr2l,c
 12783  002C1E  0E01               	movlw	high _memory
 12784  002C20  20F4               	addwfc	prodh,w,c
 12785  002C22  6EDA               	movwf	fsr2h,c
 12786  002C24  0E04               	movlw	4
 12787  002C26  18DE               	xorwf	postinc2,w,c
 12788  002C28  10DE               	iorwf	postinc2,w,c
 12789  002C2A  A4D8               	btfss	status,2,c
 12790  002C2C  EF1A  F016         	goto	u5501
 12791  002C30  EF1C  F016         	goto	u5500
 12792  002C34                     u5501:
 12793  002C34  EF36  F016         	goto	l5131
 12794  002C38                     u5500:
 12795  002C38                     
 12796                           ; BSR set to: 1
 12797  002C38  C033  F020         	movff	goback@mL,turnLeft@mL
 12798  002C3C  C034  F021         	movff	goback@mL+1,turnLeft@mL+1
 12799  002C40  C035  F022         	movff	goback@mR,turnLeft@mR
 12800  002C44  C036  F023         	movff	goback@mR+1,turnLeft@mR+1
 12801  002C48  0E5A               	movlw	90
 12802  002C4A  6E24               	movwf	turnLeft@angle_left^0,c
 12803  002C4C  ECC5  F021         	call	_turnLeft	;wreg free
 12804  002C50  C033  F020         	movff	goback@mL,short_reverse@mL
 12805  002C54  C034  F021         	movff	goback@mL+1,short_reverse@mL+1
 12806  002C58  C035  F022         	movff	goback@mR,short_reverse@mR
 12807  002C5C  C036  F023         	movff	goback@mR+1,short_reverse@mR+1
 12808  002C60  0E03               	movlw	3
 12809  002C62  6E24               	movwf	short_reverse@instruction^0,c
 12810  002C64  EC53  F02A         	call	_short_reverse	;wreg free
 12811  002C68  EF3D  F015         	goto	l5087
 12812  002C6C                     l5131:
 12813                           
 12814                           ; BSR set to: 1
 12815  002C6C  5147               	movf	_array_index& (0+255),w,b
 12816  002C6E  0D02               	mullw	2
 12817  002C70  0E00               	movlw	low _memory
 12818  002C72  24F3               	addwf	243,w,c
 12819  002C74  6ED9               	movwf	fsr2l,c
 12820  002C76  0E01               	movlw	high _memory
 12821  002C78  20F4               	addwfc	prodh,w,c
 12822  002C7A  6EDA               	movwf	fsr2h,c
 12823  002C7C  0E05               	movlw	5
 12824  002C7E  18DE               	xorwf	postinc2,w,c
 12825  002C80  10DE               	iorwf	postinc2,w,c
 12826  002C82  A4D8               	btfss	status,2,c
 12827  002C84  EF46  F016         	goto	u5511
 12828  002C88  EF48  F016         	goto	u5510
 12829  002C8C                     u5511:
 12830  002C8C  EF62  F016         	goto	l5137
 12831  002C90                     u5510:
 12832  002C90                     
 12833                           ; BSR set to: 1
 12834  002C90  C033  F020         	movff	goback@mL,turnRight@mL
 12835  002C94  C034  F021         	movff	goback@mL+1,turnRight@mL+1
 12836  002C98  C035  F022         	movff	goback@mR,turnRight@mR
 12837  002C9C  C036  F023         	movff	goback@mR+1,turnRight@mR+1
 12838  002CA0  0E5A               	movlw	90
 12839  002CA2  6E24               	movwf	turnRight@angle_right^0,c
 12840  002CA4  EC55  F023         	call	_turnRight	;wreg free
 12841  002CA8  C033  F020         	movff	goback@mL,short_reverse@mL
 12842  002CAC  C034  F021         	movff	goback@mL+1,short_reverse@mL+1
 12843  002CB0  C035  F022         	movff	goback@mR,short_reverse@mR
 12844  002CB4  C036  F023         	movff	goback@mR+1,short_reverse@mR+1
 12845  002CB8  0E03               	movlw	3
 12846  002CBA  6E24               	movwf	short_reverse@instruction^0,c
 12847  002CBC  EC53  F02A         	call	_short_reverse	;wreg free
 12848  002CC0  EF3D  F015         	goto	l5087
 12849  002CC4                     l5137:
 12850                           
 12851                           ; BSR set to: 1
 12852  002CC4  5147               	movf	_array_index& (0+255),w,b
 12853  002CC6  0D02               	mullw	2
 12854  002CC8  0E00               	movlw	low _memory
 12855  002CCA  24F3               	addwf	243,w,c
 12856  002CCC  6ED9               	movwf	fsr2l,c
 12857  002CCE  0E01               	movlw	high _memory
 12858  002CD0  20F4               	addwfc	prodh,w,c
 12859  002CD2  6EDA               	movwf	fsr2h,c
 12860  002CD4  0E06               	movlw	6
 12861  002CD6  18DE               	xorwf	postinc2,w,c
 12862  002CD8  10DE               	iorwf	postinc2,w,c
 12863  002CDA  A4D8               	btfss	status,2,c
 12864  002CDC  EF72  F016         	goto	u5521
 12865  002CE0  EF74  F016         	goto	u5520
 12866  002CE4                     u5521:
 12867  002CE4  EF8E  F016         	goto	l5143
 12868  002CE8                     u5520:
 12869  002CE8                     
 12870                           ; BSR set to: 1
 12871  002CE8  C033  F020         	movff	goback@mL,turnLeft@mL
 12872  002CEC  C034  F021         	movff	goback@mL+1,turnLeft@mL+1
 12873  002CF0  C035  F022         	movff	goback@mR,turnLeft@mR
 12874  002CF4  C036  F023         	movff	goback@mR+1,turnLeft@mR+1
 12875  002CF8  0E87               	movlw	135
 12876  002CFA  6E24               	movwf	turnLeft@angle_left^0,c
 12877  002CFC  ECC5  F021         	call	_turnLeft	;wreg free
 12878  002D00  C033  F020         	movff	goback@mL,short_reverse@mL
 12879  002D04  C034  F021         	movff	goback@mL+1,short_reverse@mL+1
 12880  002D08  C035  F022         	movff	goback@mR,short_reverse@mR
 12881  002D0C  C036  F023         	movff	goback@mR+1,short_reverse@mR+1
 12882  002D10  0E02               	movlw	2
 12883  002D12  6E24               	movwf	short_reverse@instruction^0,c
 12884  002D14  EC53  F02A         	call	_short_reverse	;wreg free
 12885  002D18  EF3D  F015         	goto	l5087
 12886  002D1C                     l5143:
 12887                           
 12888                           ; BSR set to: 1
 12889  002D1C  5147               	movf	_array_index& (0+255),w,b
 12890  002D1E  0D02               	mullw	2
 12891  002D20  0E00               	movlw	low _memory
 12892  002D22  24F3               	addwf	243,w,c
 12893  002D24  6ED9               	movwf	fsr2l,c
 12894  002D26  0E01               	movlw	high _memory
 12895  002D28  20F4               	addwfc	prodh,w,c
 12896  002D2A  6EDA               	movwf	fsr2h,c
 12897  002D2C  0E07               	movlw	7
 12898  002D2E  18DE               	xorwf	postinc2,w,c
 12899  002D30  10DE               	iorwf	postinc2,w,c
 12900  002D32  A4D8               	btfss	status,2,c
 12901  002D34  EF9E  F016         	goto	u5531
 12902  002D38  EFA0  F016         	goto	u5530
 12903  002D3C                     u5531:
 12904  002D3C  EFBA  F016         	goto	l563
 12905  002D40                     u5530:
 12906  002D40                     
 12907                           ; BSR set to: 1
 12908  002D40  C033  F020         	movff	goback@mL,turnRight@mL
 12909  002D44  C034  F021         	movff	goback@mL+1,turnRight@mL+1
 12910  002D48  C035  F022         	movff	goback@mR,turnRight@mR
 12911  002D4C  C036  F023         	movff	goback@mR+1,turnRight@mR+1
 12912  002D50  0E87               	movlw	135
 12913  002D52  6E24               	movwf	turnRight@angle_right^0,c
 12914  002D54  EC55  F023         	call	_turnRight	;wreg free
 12915  002D58  C033  F020         	movff	goback@mL,short_reverse@mL
 12916  002D5C  C034  F021         	movff	goback@mL+1,short_reverse@mL+1
 12917  002D60  C035  F022         	movff	goback@mR,short_reverse@mR
 12918  002D64  C036  F023         	movff	goback@mR+1,short_reverse@mR+1
 12919  002D68  0E02               	movlw	2
 12920  002D6A  6E24               	movwf	short_reverse@instruction^0,c
 12921  002D6C  EC53  F02A         	call	_short_reverse	;wreg free
 12922  002D70  EF3D  F015         	goto	l5087
 12923  002D74                     l563:
 12924                           
 12925                           ; BSR set to: 1
 12926  002D74  EF3F  F015         	goto	l5089
 12927  002D78                     l555:
 12928                           
 12929                           ; BSR set to: 1
 12930                           ;movement.c: 110:     LATDbits.LATD7 = 1;
 12931  002D78  8E7C               	bsf	124,7,c	;volatile
 12932                           
 12933                           ;movement.c: 111:     while(PORTFbits.RF2){
 12934  002D7A  EFD3  F016         	goto	l569
 12935  002D7E                     l5149:
 12936                           
 12937                           ;movement.c: 112:         stop(mL,mR);
 12938  002D7E  C033  F01A         	movff	goback@mL,stop@mL
 12939  002D82  C034  F01B         	movff	goback@mL+1,stop@mL+1
 12940  002D86  C035  F01C         	movff	goback@mR,stop@mR
 12941  002D8A  C036  F01D         	movff	goback@mR+1,stop@mR+1
 12942  002D8E  ECF5  F029         	call	_stop	;wreg free
 12943  002D92                     
 12944                           ;movement.c: 113:         if (!PORTFbits.RF2){LATDbits.LATD7 = 0;break;}
 12945  002D92  B48E               	btfsc	142,2,c	;volatile
 12946  002D94  EFCE  F016         	goto	u5541
 12947  002D98  EFD0  F016         	goto	u5540
 12948  002D9C                     u5541:
 12949  002D9C  EFD3  F016         	goto	l569
 12950  002DA0                     u5540:
 12951  002DA0  9E7C               	bcf	124,7,c	;volatile
 12952  002DA2  EFDA  F016         	goto	l573
 12953  002DA6                     l569:
 12954                           
 12955                           ;movement.c: 111:     while(PORTFbits.RF2){
 12956  002DA6  B48E               	btfsc	142,2,c	;volatile
 12957  002DA8  EFD8  F016         	goto	u5551
 12958  002DAC  EFDA  F016         	goto	u5550
 12959  002DB0                     u5551:
 12960  002DB0  EFBF  F016         	goto	l5149
 12961  002DB4                     u5550:
 12962  002DB4                     l573:
 12963  002DB4  0012               	return		;funcret
 12964  002DB6                     __end_of_goback:
 12965                           	callstack 0
 12966                           
 12967 ;; *************** function _turnRight *****************
 12968 ;; Defined at:
 12969 ;;		line 122 in file "dc_motor.c"
 12970 ;; Parameters:    Size  Location     Type
 12971 ;;  mL              2   31[COMRAM] PTR struct DC_motor
 12972 ;;		 -> main@motorL(9), 
 12973 ;;  mR              2   33[COMRAM] PTR struct DC_motor
 12974 ;;		 -> main@motorR(9), 
 12975 ;;  angle_right     1   35[COMRAM] unsigned char 
 12976 ;; Auto vars:     Size  Location     Type
 12977 ;;  i               2   45[COMRAM] unsigned int 
 12978 ;;  i               2   43[COMRAM] unsigned int 
 12979 ;;  i               2   41[COMRAM] unsigned int 
 12980 ;;  delay           2   47[COMRAM] unsigned int 
 12981 ;;  delay_180       2   39[COMRAM] unsigned int 
 12982 ;;  delay_135       2   37[COMRAM] unsigned int 
 12983 ;; Return value:  Size  Location     Type
 12984 ;;                  1    wreg      void 
 12985 ;; Registers used:
 12986 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12987 ;; Tracked objects:
 12988 ;;		On entry : 0/0
 12989 ;;		On exit  : 0/0
 12990 ;;		Unchanged: 0/0
 12991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12992 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12993 ;;      Locals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12994 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12995 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12996 ;;Total ram usage:       18 bytes
 12997 ;; Hardware stack levels used: 1
 12998 ;; Hardware stack levels required when called: 4
 12999 ;; This function calls:
 13000 ;;		_setMotorPWM
 13001 ;;		_stop
 13002 ;; This function is called by:
 13003 ;;		_action
 13004 ;;		_goback
 13005 ;;		_test_action
 13006 ;; This function uses a non-reentrant model
 13007 ;;
 13008                           
 13009                           	psect	text66
 13010  0046AA                     __ptext66:
 13011                           	callstack 0
 13012  0046AA                     _turnRight:
 13013                           	callstack 24
 13014  0046AA                     
 13015                           ;dc_motor.c: 122: void turnRight(struct DC_motor *mL, struct DC_motor *mR, unsigned char
      +                           angle_right);dc_motor.c: 123: {;dc_motor.c: 124:     mL->direction=1;
 13016  0046AA  EE20 F001          	lfsr	2,1
 13017  0046AE  5020               	movf	turnRight@mL^0,w,c
 13018  0046B0  26D9               	addwf	fsr2l,f,c
 13019  0046B2  5021               	movf	(turnRight@mL+1)^0,w,c
 13020  0046B4  22DA               	addwfc	fsr2h,f,c
 13021  0046B6  0E01               	movlw	1
 13022  0046B8  6EDF               	movwf	indf2,c
 13023                           
 13024                           ;dc_motor.c: 125:     mR->direction=1;
 13025  0046BA  EE20 F001          	lfsr	2,1
 13026  0046BE  5022               	movf	turnRight@mR^0,w,c
 13027  0046C0  26D9               	addwf	fsr2l,f,c
 13028  0046C2  5023               	movf	(turnRight@mR+1)^0,w,c
 13029  0046C4  22DA               	addwfc	fsr2h,f,c
 13030  0046C6  0E01               	movlw	1
 13031  0046C8  6EDF               	movwf	indf2,c
 13032                           
 13033                           ;dc_motor.c: 126:     while (mL->power <30){
 13034  0046CA  EF86  F023         	goto	l4535
 13035  0046CE                     l4527:
 13036                           
 13037                           ;dc_motor.c: 127:         mL->power += 5;
 13038  0046CE  C020  FFD9         	movff	turnRight@mL,fsr2l
 13039  0046D2  C021  FFDA         	movff	turnRight@mL+1,fsr2h
 13040  0046D6  0E05               	movlw	5
 13041  0046D8  26DF               	addwf	indf2,f,c
 13042                           
 13043                           ;dc_motor.c: 128:         mR->power = 0;
 13044  0046DA  C022  FFD9         	movff	turnRight@mR,fsr2l
 13045  0046DE  C023  FFDA         	movff	turnRight@mR+1,fsr2h
 13046  0046E2  0E00               	movlw	0
 13047  0046E4  6EDF               	movwf	indf2,c
 13048  0046E6                     
 13049                           ;dc_motor.c: 129:         setMotorPWM(mL);
 13050  0046E6  C020  F00F         	movff	turnRight@mL,setMotorPWM@m
 13051  0046EA  C021  F010         	movff	turnRight@mL+1,setMotorPWM@m+1
 13052  0046EE  EC7F  F01D         	call	_setMotorPWM	;wreg free
 13053  0046F2                     
 13054                           ;dc_motor.c: 130:         setMotorPWM(mR);
 13055  0046F2  C022  F00F         	movff	turnRight@mR,setMotorPWM@m
 13056  0046F6  C023  F010         	movff	turnRight@mR+1,setMotorPWM@m+1
 13057  0046FA  EC7F  F01D         	call	_setMotorPWM	;wreg free
 13058  0046FE                     
 13059                           ;dc_motor.c: 131:         _delay((unsigned long)((10)*(64000000/4000.0)));
 13060  0046FE  0ED0               	movlw	208
 13061  004700  6E25               	movwf	??_turnRight^0,c
 13062  004702  0ECA               	movlw	202
 13063  004704                     u6417:
 13064  004704  2EE8               	decfsz	wreg,f,c
 13065  004706  D7FE               	bra	u6417
 13066  004708  2E25               	decfsz	??_turnRight^0,f,c
 13067  00470A  D7FC               	bra	u6417
 13068  00470C                     l4535:
 13069                           
 13070                           ;dc_motor.c: 126:     while (mL->power <30){
 13071  00470C  C020  FFD9         	movff	turnRight@mL,fsr2l
 13072  004710  C021  FFDA         	movff	turnRight@mL+1,fsr2h
 13073  004714  0E1D               	movlw	29
 13074  004716  64DF               	cpfsgt	indf2,c
 13075  004718  EF90  F023         	goto	u4821
 13076  00471C  EF92  F023         	goto	u4820
 13077  004720                     u4821:
 13078  004720  EF67  F023         	goto	l4527
 13079  004724                     u4820:
 13080  004724                     
 13081                           ;dc_motor.c: 133:     unsigned int delay = angle_right * SENSITIVITY;
 13082  004724  5024               	movf	turnRight@angle_right^0,w,c
 13083  004726  0100               	movlb	0	; () banked
 13084  004728  03FE               	mulwf	_SENSITIVITY& (0+255),b
 13085  00472A  CFF3 F030          	movff	prodl,turnRight@delay
 13086  00472E  CFF4 F031          	movff	prodh,turnRight@delay+1
 13087  004732                     
 13088                           ; BSR set to: 0
 13089                           ;dc_motor.c: 134:     unsigned int delay_135 = delay + 15;;
 13090  004732  0E0F               	movlw	15
 13091  004734  2430               	addwf	turnRight@delay^0,w,c
 13092  004736  6E26               	movwf	turnRight@delay_135^0,c
 13093  004738  0E00               	movlw	0
 13094  00473A  2031               	addwfc	(turnRight@delay+1)^0,w,c
 13095  00473C  6E27               	movwf	(turnRight@delay_135+1)^0,c
 13096  00473E                     
 13097                           ; BSR set to: 0
 13098                           ;dc_motor.c: 135:     unsigned int delay_180 = delay + 0;;
 13099  00473E  C030  F028         	movff	turnRight@delay,turnRight@delay_180
 13100  004742  C031  F029         	movff	turnRight@delay+1,turnRight@delay_180+1
 13101  004746                     
 13102                           ; BSR set to: 0
 13103                           ;dc_motor.c: 136:     if (angle_right == 180){
 13104  004746  0EB4               	movlw	180
 13105  004748  1824               	xorwf	turnRight@angle_right^0,w,c
 13106  00474A  A4D8               	btfss	status,2,c
 13107  00474C  EFAA  F023         	goto	u4831
 13108  004750  EFAC  F023         	goto	u4830
 13109  004754                     u4831:
 13110  004754  EFC7  F023         	goto	l4551
 13111  004758                     u4830:
 13112  004758                     
 13113                           ; BSR set to: 0
 13114                           ;dc_motor.c: 137:         for(unsigned int i = 0; i <delay_180; i++){_delay((unsigned lo
      +                          ng)((1)*(64000000/4000.0)));}
 13115  004758  0E00               	movlw	0
 13116  00475A  6E2B               	movwf	(turnRight@i+1)^0,c
 13117  00475C  0E00               	movlw	0
 13118  00475E  6E2A               	movwf	turnRight@i^0,c
 13119  004760  EFBC  F023         	goto	l305
 13120  004764                     l4547:
 13121  004764  0E15               	movlw	21
 13122  004766  6E25               	movwf	??_turnRight^0,c
 13123  004768  0EC6               	movlw	198
 13124  00476A                     u6427:
 13125  00476A  2EE8               	decfsz	wreg,f,c
 13126  00476C  D7FE               	bra	u6427
 13127  00476E  2E25               	decfsz	??_turnRight^0,f,c
 13128  004770  D7FC               	bra	u6427
 13129  004772  D000               	nop2	
 13130  004774  4A2A               	infsnz	turnRight@i^0,f,c
 13131  004776  2A2B               	incf	(turnRight@i+1)^0,f,c
 13132  004778                     l305:
 13133  004778  5028               	movf	turnRight@delay_180^0,w,c
 13134  00477A  5C2A               	subwf	turnRight@i^0,w,c
 13135  00477C  5029               	movf	(turnRight@delay_180+1)^0,w,c
 13136  00477E  582B               	subwfb	(turnRight@i+1)^0,w,c
 13137  004780  A0D8               	btfss	status,0,c
 13138  004782  EFC5  F023         	goto	u4841
 13139  004786  EFC7  F023         	goto	u4840
 13140  00478A                     u4841:
 13141  00478A  EFB2  F023         	goto	l4547
 13142  00478E                     u4840:
 13143  00478E                     l4551:
 13144                           
 13145                           ;dc_motor.c: 139:     if (angle_right == 135){
 13146  00478E  0E87               	movlw	135
 13147  004790  1824               	xorwf	turnRight@angle_right^0,w,c
 13148  004792  A4D8               	btfss	status,2,c
 13149  004794  EFCE  F023         	goto	u4851
 13150  004798  EFD0  F023         	goto	u4850
 13151  00479C                     u4851:
 13152  00479C  EFEB  F023         	goto	l4559
 13153  0047A0                     u4850:
 13154  0047A0                     
 13155                           ;dc_motor.c: 140:         for(unsigned int i = 0; i <delay_135; i++){_delay((unsigned lo
      +                          ng)((1)*(64000000/4000.0)));}
 13156  0047A0  0E00               	movlw	0
 13157  0047A2  6E2D               	movwf	(turnRight@i_1328+1)^0,c
 13158  0047A4  0E00               	movlw	0
 13159  0047A6  6E2C               	movwf	turnRight@i_1328^0,c
 13160  0047A8  EFE0  F023         	goto	l309
 13161  0047AC                     l4555:
 13162  0047AC  0E15               	movlw	21
 13163  0047AE  6E25               	movwf	??_turnRight^0,c
 13164  0047B0  0EC6               	movlw	198
 13165  0047B2                     u6437:
 13166  0047B2  2EE8               	decfsz	wreg,f,c
 13167  0047B4  D7FE               	bra	u6437
 13168  0047B6  2E25               	decfsz	??_turnRight^0,f,c
 13169  0047B8  D7FC               	bra	u6437
 13170  0047BA  D000               	nop2	
 13171  0047BC  4A2C               	infsnz	turnRight@i_1328^0,f,c
 13172  0047BE  2A2D               	incf	(turnRight@i_1328+1)^0,f,c
 13173  0047C0                     l309:
 13174  0047C0  5026               	movf	turnRight@delay_135^0,w,c
 13175  0047C2  5C2C               	subwf	turnRight@i_1328^0,w,c
 13176  0047C4  5027               	movf	(turnRight@delay_135+1)^0,w,c
 13177  0047C6  582D               	subwfb	(turnRight@i_1328+1)^0,w,c
 13178  0047C8  A0D8               	btfss	status,0,c
 13179  0047CA  EFE9  F023         	goto	u4861
 13180  0047CE  EFEB  F023         	goto	u4860
 13181  0047D2                     u4861:
 13182  0047D2  EFD6  F023         	goto	l4555
 13183  0047D6                     u4860:
 13184  0047D6                     l4559:
 13185                           
 13186                           ;dc_motor.c: 142:     if (angle_right == 90){
 13187  0047D6  0E5A               	movlw	90
 13188  0047D8  1824               	xorwf	turnRight@angle_right^0,w,c
 13189  0047DA  A4D8               	btfss	status,2,c
 13190  0047DC  EFF2  F023         	goto	u4871
 13191  0047E0  EFF4  F023         	goto	u4870
 13192  0047E4                     u4871:
 13193  0047E4  EF0F  F024         	goto	l4567
 13194  0047E8                     u4870:
 13195  0047E8                     
 13196                           ;dc_motor.c: 143:         for(unsigned int i = 0; i < delay; i++){_delay((unsigned long)
      +                          ((1)*(64000000/4000.0)));}
 13197  0047E8  0E00               	movlw	0
 13198  0047EA  6E2F               	movwf	(turnRight@i_1329+1)^0,c
 13199  0047EC  0E00               	movlw	0
 13200  0047EE  6E2E               	movwf	turnRight@i_1329^0,c
 13201  0047F0  EF04  F024         	goto	l313
 13202  0047F4                     l4563:
 13203  0047F4  0E15               	movlw	21
 13204  0047F6  6E25               	movwf	??_turnRight^0,c
 13205  0047F8  0EC6               	movlw	198
 13206  0047FA                     u6447:
 13207  0047FA  2EE8               	decfsz	wreg,f,c
 13208  0047FC  D7FE               	bra	u6447
 13209  0047FE  2E25               	decfsz	??_turnRight^0,f,c
 13210  004800  D7FC               	bra	u6447
 13211  004802  D000               	nop2	
 13212  004804  4A2E               	infsnz	turnRight@i_1329^0,f,c
 13213  004806  2A2F               	incf	(turnRight@i_1329+1)^0,f,c
 13214  004808                     l313:
 13215  004808  5030               	movf	turnRight@delay^0,w,c
 13216  00480A  5C2E               	subwf	turnRight@i_1329^0,w,c
 13217  00480C  5031               	movf	(turnRight@delay+1)^0,w,c
 13218  00480E  582F               	subwfb	(turnRight@i_1329+1)^0,w,c
 13219  004810  A0D8               	btfss	status,0,c
 13220  004812  EF0D  F024         	goto	u4881
 13221  004816  EF0F  F024         	goto	u4880
 13222  00481A                     u4881:
 13223  00481A  EFFA  F023         	goto	l4563
 13224  00481E                     u4880:
 13225  00481E                     l4567:
 13226                           
 13227                           ;dc_motor.c: 145:     stop(mL,mR);
 13228  00481E  C020  F01A         	movff	turnRight@mL,stop@mL
 13229  004822  C021  F01B         	movff	turnRight@mL+1,stop@mL+1
 13230  004826  C022  F01C         	movff	turnRight@mR,stop@mR
 13231  00482A  C023  F01D         	movff	turnRight@mR+1,stop@mR+1
 13232  00482E  ECF5  F029         	call	_stop	;wreg free
 13233  004832  0012               	return		;funcret
 13234  004834                     __end_of_turnRight:
 13235                           	callstack 0
 13236                           
 13237 ;; *************** function _turnLeft *****************
 13238 ;; Defined at:
 13239 ;;		line 95 in file "dc_motor.c"
 13240 ;; Parameters:    Size  Location     Type
 13241 ;;  mL              2   31[COMRAM] PTR struct DC_motor
 13242 ;;		 -> main@motorL(9), 
 13243 ;;  mR              2   33[COMRAM] PTR struct DC_motor
 13244 ;;		 -> main@motorR(9), 
 13245 ;;  angle_left      1   35[COMRAM] unsigned char 
 13246 ;; Auto vars:     Size  Location     Type
 13247 ;;  i               2   46[COMRAM] unsigned int 
 13248 ;;  i               2   44[COMRAM] unsigned int 
 13249 ;;  i               2   42[COMRAM] unsigned int 
 13250 ;;  delay           2   48[COMRAM] unsigned int 
 13251 ;;  delay_180       2   40[COMRAM] unsigned int 
 13252 ;;  delay_135       2   38[COMRAM] unsigned int 
 13253 ;; Return value:  Size  Location     Type
 13254 ;;                  1    wreg      void 
 13255 ;; Registers used:
 13256 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13257 ;; Tracked objects:
 13258 ;;		On entry : 0/0
 13259 ;;		On exit  : 0/0
 13260 ;;		Unchanged: 0/0
 13261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13262 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13263 ;;      Locals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13264 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13265 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13266 ;;Total ram usage:       19 bytes
 13267 ;; Hardware stack levels used: 1
 13268 ;; Hardware stack levels required when called: 4
 13269 ;; This function calls:
 13270 ;;		_setMotorPWM
 13271 ;;		_stop
 13272 ;; This function is called by:
 13273 ;;		_action
 13274 ;;		_goback
 13275 ;;		_test_action
 13276 ;; This function uses a non-reentrant model
 13277 ;;
 13278                           
 13279                           	psect	text67
 13280  00438A                     __ptext67:
 13281                           	callstack 0
 13282  00438A                     _turnLeft:
 13283                           	callstack 24
 13284  00438A                     
 13285                           ;dc_motor.c: 95: void turnLeft(struct DC_motor *mL, struct DC_motor *mR, unsigned char a
      +                          ngle_left);dc_motor.c: 96: {;dc_motor.c: 97:       mL->direction=1;
 13286  00438A  EE20 F001          	lfsr	2,1
 13287  00438E  5020               	movf	turnLeft@mL^0,w,c
 13288  004390  26D9               	addwf	fsr2l,f,c
 13289  004392  5021               	movf	(turnLeft@mL+1)^0,w,c
 13290  004394  22DA               	addwfc	fsr2h,f,c
 13291  004396  0E01               	movlw	1
 13292  004398  6EDF               	movwf	indf2,c
 13293                           
 13294                           ;dc_motor.c: 98:       mR->direction=1;
 13295  00439A  EE20 F001          	lfsr	2,1
 13296  00439E  5022               	movf	turnLeft@mR^0,w,c
 13297  0043A0  26D9               	addwf	fsr2l,f,c
 13298  0043A2  5023               	movf	(turnLeft@mR+1)^0,w,c
 13299  0043A4  22DA               	addwfc	fsr2h,f,c
 13300  0043A6  0E01               	movlw	1
 13301  0043A8  6EDF               	movwf	indf2,c
 13302                           
 13303                           ;dc_motor.c: 99:       while (mR->power <30){
 13304  0043AA  EFF6  F021         	goto	l4491
 13305  0043AE                     l4483:
 13306                           
 13307                           ;dc_motor.c: 100:         mR->power += 5;
 13308  0043AE  C022  FFD9         	movff	turnLeft@mR,fsr2l
 13309  0043B2  C023  FFDA         	movff	turnLeft@mR+1,fsr2h
 13310  0043B6  0E05               	movlw	5
 13311  0043B8  26DF               	addwf	indf2,f,c
 13312                           
 13313                           ;dc_motor.c: 101:         mL->power = 0;
 13314  0043BA  C020  FFD9         	movff	turnLeft@mL,fsr2l
 13315  0043BE  C021  FFDA         	movff	turnLeft@mL+1,fsr2h
 13316  0043C2  0E00               	movlw	0
 13317  0043C4  6EDF               	movwf	indf2,c
 13318  0043C6                     
 13319                           ;dc_motor.c: 102:         setMotorPWM(mL);
 13320  0043C6  C020  F00F         	movff	turnLeft@mL,setMotorPWM@m
 13321  0043CA  C021  F010         	movff	turnLeft@mL+1,setMotorPWM@m+1
 13322  0043CE  EC7F  F01D         	call	_setMotorPWM	;wreg free
 13323  0043D2                     
 13324                           ;dc_motor.c: 103:         setMotorPWM(mR);
 13325  0043D2  C022  F00F         	movff	turnLeft@mR,setMotorPWM@m
 13326  0043D6  C023  F010         	movff	turnLeft@mR+1,setMotorPWM@m+1
 13327  0043DA  EC7F  F01D         	call	_setMotorPWM	;wreg free
 13328  0043DE                     
 13329                           ;dc_motor.c: 104:         _delay((unsigned long)((10)*(64000000/4000.0)));
 13330  0043DE  0ED0               	movlw	208
 13331  0043E0  6E25               	movwf	??_turnLeft^0,c
 13332  0043E2  0ECA               	movlw	202
 13333  0043E4                     u6457:
 13334  0043E4  2EE8               	decfsz	wreg,f,c
 13335  0043E6  D7FE               	bra	u6457
 13336  0043E8  2E25               	decfsz	??_turnLeft^0,f,c
 13337  0043EA  D7FC               	bra	u6457
 13338  0043EC                     l4491:
 13339                           
 13340                           ;dc_motor.c: 99:       while (mR->power <30){
 13341  0043EC  C022  FFD9         	movff	turnLeft@mR,fsr2l
 13342  0043F0  C023  FFDA         	movff	turnLeft@mR+1,fsr2h
 13343  0043F4  0E1D               	movlw	29
 13344  0043F6  64DF               	cpfsgt	indf2,c
 13345  0043F8  EF00  F022         	goto	u4751
 13346  0043FC  EF02  F022         	goto	u4750
 13347  004400                     u4751:
 13348  004400  EFD7  F021         	goto	l4483
 13349  004404                     u4750:
 13350  004404                     
 13351                           ;dc_motor.c: 106:     unsigned int delay = angle_left * SENSITIVITY;
 13352  004404  5024               	movf	turnLeft@angle_left^0,w,c
 13353  004406  0100               	movlb	0	; () banked
 13354  004408  03FE               	mulwf	_SENSITIVITY& (0+255),b
 13355  00440A  CFF3 F031          	movff	prodl,turnLeft@delay
 13356  00440E  CFF4 F032          	movff	prodh,turnLeft@delay+1
 13357  004412                     
 13358                           ; BSR set to: 0
 13359                           ;dc_motor.c: 107:     unsigned int delay_135 = delay + 15;;
 13360  004412  0E0F               	movlw	15
 13361  004414  2431               	addwf	turnLeft@delay^0,w,c
 13362  004416  6E27               	movwf	turnLeft@delay_135^0,c
 13363  004418  0E00               	movlw	0
 13364  00441A  2032               	addwfc	(turnLeft@delay+1)^0,w,c
 13365  00441C  6E28               	movwf	(turnLeft@delay_135+1)^0,c
 13366  00441E                     
 13367                           ; BSR set to: 0
 13368                           ;dc_motor.c: 108:     unsigned int delay_180 = delay + 0;;
 13369  00441E  C031  F029         	movff	turnLeft@delay,turnLeft@delay_180
 13370  004422  C032  F02A         	movff	turnLeft@delay+1,turnLeft@delay_180+1
 13371  004426                     
 13372                           ; BSR set to: 0
 13373                           ;dc_motor.c: 109:     if (angle_left == 180){
 13374  004426  0EB4               	movlw	180
 13375  004428  1824               	xorwf	turnLeft@angle_left^0,w,c
 13376  00442A  A4D8               	btfss	status,2,c
 13377  00442C  EF1A  F022         	goto	u4761
 13378  004430  EF1C  F022         	goto	u4760
 13379  004434                     u4761:
 13380  004434  EF37  F022         	goto	l4507
 13381  004438                     u4760:
 13382  004438                     
 13383                           ; BSR set to: 0
 13384                           ;dc_motor.c: 110:         for(unsigned int i = 0; i <delay_180; i++){_delay((unsigned lo
      +                          ng)((1)*(64000000/4000.0)));}
 13385  004438  0E00               	movlw	0
 13386  00443A  6E2C               	movwf	(turnLeft@i+1)^0,c
 13387  00443C  0E00               	movlw	0
 13388  00443E  6E2B               	movwf	turnLeft@i^0,c
 13389  004440  EF2C  F022         	goto	l287
 13390  004444                     l4503:
 13391  004444  0E15               	movlw	21
 13392  004446  6E25               	movwf	??_turnLeft^0,c
 13393  004448  0EC6               	movlw	198
 13394  00444A                     u6467:
 13395  00444A  2EE8               	decfsz	wreg,f,c
 13396  00444C  D7FE               	bra	u6467
 13397  00444E  2E25               	decfsz	??_turnLeft^0,f,c
 13398  004450  D7FC               	bra	u6467
 13399  004452  D000               	nop2	
 13400  004454  4A2B               	infsnz	turnLeft@i^0,f,c
 13401  004456  2A2C               	incf	(turnLeft@i+1)^0,f,c
 13402  004458                     l287:
 13403  004458  5029               	movf	turnLeft@delay_180^0,w,c
 13404  00445A  5C2B               	subwf	turnLeft@i^0,w,c
 13405  00445C  502A               	movf	(turnLeft@delay_180+1)^0,w,c
 13406  00445E  582C               	subwfb	(turnLeft@i+1)^0,w,c
 13407  004460  A0D8               	btfss	status,0,c
 13408  004462  EF35  F022         	goto	u4771
 13409  004466  EF37  F022         	goto	u4770
 13410  00446A                     u4771:
 13411  00446A  EF22  F022         	goto	l4503
 13412  00446E                     u4770:
 13413  00446E                     l4507:
 13414                           
 13415                           ;dc_motor.c: 112:     if (angle_left == 135){
 13416  00446E  0E87               	movlw	135
 13417  004470  1824               	xorwf	turnLeft@angle_left^0,w,c
 13418  004472  A4D8               	btfss	status,2,c
 13419  004474  EF3E  F022         	goto	u4781
 13420  004478  EF40  F022         	goto	u4780
 13421  00447C                     u4781:
 13422  00447C  EF5B  F022         	goto	l4515
 13423  004480                     u4780:
 13424  004480                     
 13425                           ;dc_motor.c: 113:         for(unsigned int i = 0; i <delay_135; i++){_delay((unsigned lo
      +                          ng)((1)*(64000000/4000.0)));}
 13426  004480  0E00               	movlw	0
 13427  004482  6E2E               	movwf	(turnLeft@i_1305+1)^0,c
 13428  004484  0E00               	movlw	0
 13429  004486  6E2D               	movwf	turnLeft@i_1305^0,c
 13430  004488  EF50  F022         	goto	l291
 13431  00448C                     l4511:
 13432  00448C  0E15               	movlw	21
 13433  00448E  6E25               	movwf	??_turnLeft^0,c
 13434  004490  0EC6               	movlw	198
 13435  004492                     u6477:
 13436  004492  2EE8               	decfsz	wreg,f,c
 13437  004494  D7FE               	bra	u6477
 13438  004496  2E25               	decfsz	??_turnLeft^0,f,c
 13439  004498  D7FC               	bra	u6477
 13440  00449A  D000               	nop2	
 13441  00449C  4A2D               	infsnz	turnLeft@i_1305^0,f,c
 13442  00449E  2A2E               	incf	(turnLeft@i_1305+1)^0,f,c
 13443  0044A0                     l291:
 13444  0044A0  5027               	movf	turnLeft@delay_135^0,w,c
 13445  0044A2  5C2D               	subwf	turnLeft@i_1305^0,w,c
 13446  0044A4  5028               	movf	(turnLeft@delay_135+1)^0,w,c
 13447  0044A6  582E               	subwfb	(turnLeft@i_1305+1)^0,w,c
 13448  0044A8  A0D8               	btfss	status,0,c
 13449  0044AA  EF59  F022         	goto	u4791
 13450  0044AE  EF5B  F022         	goto	u4790
 13451  0044B2                     u4791:
 13452  0044B2  EF46  F022         	goto	l4511
 13453  0044B6                     u4790:
 13454  0044B6                     l4515:
 13455                           
 13456                           ;dc_motor.c: 115:     if (angle_left == 90){
 13457  0044B6  0E5A               	movlw	90
 13458  0044B8  1824               	xorwf	turnLeft@angle_left^0,w,c
 13459  0044BA  A4D8               	btfss	status,2,c
 13460  0044BC  EF62  F022         	goto	u4801
 13461  0044C0  EF64  F022         	goto	u4800
 13462  0044C4                     u4801:
 13463  0044C4  EF85  F022         	goto	l4523
 13464  0044C8                     u4800:
 13465  0044C8                     
 13466                           ;dc_motor.c: 116:         for(unsigned int i = 0; i < delay+10; i++){_delay((unsigned lo
      +                          ng)((1)*(64000000/4000.0)));}
 13467  0044C8  0E00               	movlw	0
 13468  0044CA  6E30               	movwf	(turnLeft@i_1306+1)^0,c
 13469  0044CC  0E00               	movlw	0
 13470  0044CE  6E2F               	movwf	turnLeft@i_1306^0,c
 13471  0044D0  EF74  F022         	goto	l295
 13472  0044D4                     l4519:
 13473  0044D4  0E15               	movlw	21
 13474  0044D6  6E25               	movwf	??_turnLeft^0,c
 13475  0044D8  0EC6               	movlw	198
 13476  0044DA                     u6487:
 13477  0044DA  2EE8               	decfsz	wreg,f,c
 13478  0044DC  D7FE               	bra	u6487
 13479  0044DE  2E25               	decfsz	??_turnLeft^0,f,c
 13480  0044E0  D7FC               	bra	u6487
 13481  0044E2  D000               	nop2	
 13482  0044E4  4A2F               	infsnz	turnLeft@i_1306^0,f,c
 13483  0044E6  2A30               	incf	(turnLeft@i_1306+1)^0,f,c
 13484  0044E8                     l295:
 13485  0044E8  0E0A               	movlw	10
 13486  0044EA  2431               	addwf	turnLeft@delay^0,w,c
 13487  0044EC  6E25               	movwf	??_turnLeft^0,c
 13488  0044EE  0E00               	movlw	0
 13489  0044F0  2032               	addwfc	(turnLeft@delay+1)^0,w,c
 13490  0044F2  6E26               	movwf	(??_turnLeft+1)^0,c
 13491  0044F4  5025               	movf	??_turnLeft^0,w,c
 13492  0044F6  5C2F               	subwf	turnLeft@i_1306^0,w,c
 13493  0044F8  5026               	movf	(??_turnLeft+1)^0,w,c
 13494  0044FA  5830               	subwfb	(turnLeft@i_1306+1)^0,w,c
 13495  0044FC  A0D8               	btfss	status,0,c
 13496  0044FE  EF83  F022         	goto	u4811
 13497  004502  EF85  F022         	goto	u4810
 13498  004506                     u4811:
 13499  004506  EF6A  F022         	goto	l4519
 13500  00450A                     u4810:
 13501  00450A                     l4523:
 13502                           
 13503                           ;dc_motor.c: 118:     stop(mL,mR);
 13504  00450A  C020  F01A         	movff	turnLeft@mL,stop@mL
 13505  00450E  C021  F01B         	movff	turnLeft@mL+1,stop@mL+1
 13506  004512  C022  F01C         	movff	turnLeft@mR,stop@mR
 13507  004516  C023  F01D         	movff	turnLeft@mR+1,stop@mR+1
 13508  00451A  ECF5  F029         	call	_stop	;wreg free
 13509  00451E  0012               	return		;funcret
 13510  004520                     __end_of_turnLeft:
 13511                           	callstack 0
 13512                           
 13513 ;; *************** function _short_reverse *****************
 13514 ;; Defined at:
 13515 ;;		line 184 in file "dc_motor.c"
 13516 ;; Parameters:    Size  Location     Type
 13517 ;;  mL              2   31[COMRAM] PTR struct DC_motor
 13518 ;;		 -> main@motorL(9), 
 13519 ;;  mR              2   33[COMRAM] PTR struct DC_motor
 13520 ;;		 -> main@motorR(9), 
 13521 ;;  instruction     1   35[COMRAM] unsigned char 
 13522 ;; Auto vars:     Size  Location     Type
 13523 ;;		None
 13524 ;; Return value:  Size  Location     Type
 13525 ;;                  1    wreg      void 
 13526 ;; Registers used:
 13527 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13528 ;; Tracked objects:
 13529 ;;		On entry : 0/0
 13530 ;;		On exit  : 0/0
 13531 ;;		Unchanged: 0/0
 13532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13533 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13534 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13535 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13536 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13537 ;;Total ram usage:        7 bytes
 13538 ;; Hardware stack levels used: 1
 13539 ;; Hardware stack levels required when called: 4
 13540 ;; This function calls:
 13541 ;;		_fullSpeedBack
 13542 ;;		_stop
 13543 ;; This function is called by:
 13544 ;;		_action
 13545 ;;		_goback
 13546 ;; This function uses a non-reentrant model
 13547 ;;
 13548                           
 13549                           	psect	text68
 13550  0054A6                     __ptext68:
 13551                           	callstack 0
 13552  0054A6                     _short_reverse:
 13553                           	callstack 25
 13554  0054A6                     
 13555                           ;dc_motor.c: 184: void short_reverse(struct DC_motor *mL, struct DC_motor *mR, unsigned 
      +                          char instruction);dc_motor.c: 185: {;dc_motor.c: 186:     fullSpeedBack(mL, mR);
 13556  0054A6  C020  F01A         	movff	short_reverse@mL,fullSpeedBack@mL
 13557  0054AA  C021  F01B         	movff	short_reverse@mL+1,fullSpeedBack@mL+1
 13558  0054AE  C022  F01C         	movff	short_reverse@mR,fullSpeedBack@mR
 13559  0054B2  C023  F01D         	movff	short_reverse@mR+1,fullSpeedBack@mR+1
 13560  0054B6  ECA6  F02A         	call	_fullSpeedBack	;wreg free
 13561  0054BA                     
 13562                           ;dc_motor.c: 187:     if (instruction == 1) {_delay((unsigned long)((500)*(64000000/4000
      +                          .0)));}
 13563  0054BA  0424               	decf	short_reverse@instruction^0,w,c
 13564  0054BC  A4D8               	btfss	status,2,c
 13565  0054BE  EF63  F02A         	goto	u4891
 13566  0054C2  EF65  F02A         	goto	u4890
 13567  0054C6                     u4891:
 13568  0054C6  EF71  F02A         	goto	l4581
 13569  0054CA                     u4890:
 13570  0054CA  0E29               	movlw	41
 13571  0054CC  6E26               	movwf	(??_short_reverse+1)^0,c
 13572  0054CE  0E96               	movlw	150
 13573  0054D0  6E25               	movwf	??_short_reverse^0,c
 13574  0054D2  0E7F               	movlw	127
 13575  0054D4                     u6497:
 13576  0054D4  2EE8               	decfsz	wreg,f,c
 13577  0054D6  D7FE               	bra	u6497
 13578  0054D8  2E25               	decfsz	??_short_reverse^0,f,c
 13579  0054DA  D7FC               	bra	u6497
 13580  0054DC  2E26               	decfsz	(??_short_reverse+1)^0,f,c
 13581  0054DE  D7FA               	bra	u6497
 13582  0054E0  F000               	nop	
 13583  0054E2                     l4581:
 13584                           
 13585                           ;dc_motor.c: 188:     if (instruction == 2) {_delay((unsigned long)((700)*(64000000/4000
      +                          .0)));}
 13586  0054E2  0E02               	movlw	2
 13587  0054E4  1824               	xorwf	short_reverse@instruction^0,w,c
 13588  0054E6  A4D8               	btfss	status,2,c
 13589  0054E8  EF78  F02A         	goto	u4901
 13590  0054EC  EF7A  F02A         	goto	u4900
 13591  0054F0                     u4901:
 13592  0054F0  EF86  F02A         	goto	l4585
 13593  0054F4                     u4900:
 13594  0054F4  0E39               	movlw	57
 13595  0054F6  6E26               	movwf	(??_short_reverse+1)^0,c
 13596  0054F8  0ED2               	movlw	210
 13597  0054FA  6E25               	movwf	??_short_reverse^0,c
 13598  0054FC  0E4C               	movlw	76
 13599  0054FE                     u6507:
 13600  0054FE  2EE8               	decfsz	wreg,f,c
 13601  005500  D7FE               	bra	u6507
 13602  005502  2E25               	decfsz	??_short_reverse^0,f,c
 13603  005504  D7FC               	bra	u6507
 13604  005506  2E26               	decfsz	(??_short_reverse+1)^0,f,c
 13605  005508  D7FA               	bra	u6507
 13606  00550A  D000               	nop2	
 13607  00550C                     l4585:
 13608                           
 13609                           ;dc_motor.c: 189:     if (instruction == 3) {_delay((unsigned long)((1300)*(64000000/400
      +                          0.0)));}
 13610  00550C  0E03               	movlw	3
 13611  00550E  1824               	xorwf	short_reverse@instruction^0,w,c
 13612  005510  A4D8               	btfss	status,2,c
 13613  005512  EF8D  F02A         	goto	u4911
 13614  005516  EF8F  F02A         	goto	u4910
 13615  00551A                     u4911:
 13616  00551A  EF9B  F02A         	goto	l4589
 13617  00551E                     u4910:
 13618  00551E  0E6A               	movlw	106
 13619  005520  6E26               	movwf	(??_short_reverse+1)^0,c
 13620  005522  0E85               	movlw	133
 13621  005524  6E25               	movwf	??_short_reverse^0,c
 13622  005526  0EB4               	movlw	180
 13623  005528                     u6517:
 13624  005528  2EE8               	decfsz	wreg,f,c
 13625  00552A  D7FE               	bra	u6517
 13626  00552C  2E25               	decfsz	??_short_reverse^0,f,c
 13627  00552E  D7FC               	bra	u6517
 13628  005530  2E26               	decfsz	(??_short_reverse+1)^0,f,c
 13629  005532  D7FA               	bra	u6517
 13630  005534  D000               	nop2	
 13631  005536                     l4589:
 13632                           
 13633                           ;dc_motor.c: 190:     stop(mL,mR);
 13634  005536  C020  F01A         	movff	short_reverse@mL,stop@mL
 13635  00553A  C021  F01B         	movff	short_reverse@mL+1,stop@mL+1
 13636  00553E  C022  F01C         	movff	short_reverse@mR,stop@mR
 13637  005542  C023  F01D         	movff	short_reverse@mR+1,stop@mR+1
 13638  005546  ECF5  F029         	call	_stop	;wreg free
 13639  00554A  0012               	return		;funcret
 13640  00554C                     __end_of_short_reverse:
 13641                           	callstack 0
 13642                           
 13643 ;; *************** function _stop *****************
 13644 ;; Defined at:
 13645 ;;		line 82 in file "dc_motor.c"
 13646 ;; Parameters:    Size  Location     Type
 13647 ;;  mL              2   25[COMRAM] PTR struct DC_motor
 13648 ;;		 -> main@motorL(9), 
 13649 ;;  mR              2   27[COMRAM] PTR struct DC_motor
 13650 ;;		 -> main@motorR(9), 
 13651 ;; Auto vars:     Size  Location     Type
 13652 ;;		None
 13653 ;; Return value:  Size  Location     Type
 13654 ;;                  1    wreg      void 
 13655 ;; Registers used:
 13656 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13657 ;; Tracked objects:
 13658 ;;		On entry : 0/0
 13659 ;;		On exit  : 0/0
 13660 ;;		Unchanged: 0/0
 13661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13662 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13663 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13664 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13665 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13666 ;;Total ram usage:        6 bytes
 13667 ;; Hardware stack levels used: 1
 13668 ;; Hardware stack levels required when called: 3
 13669 ;; This function calls:
 13670 ;;		_setMotorPWM
 13671 ;; This function is called by:
 13672 ;;		_turnLeft
 13673 ;;		_turnRight
 13674 ;;		_fullSpeedAhead_test
 13675 ;;		_short_reverse
 13676 ;;		_main
 13677 ;;		_short_burst
 13678 ;;		_goback
 13679 ;;		_test_function
 13680 ;; This function uses a non-reentrant model
 13681 ;;
 13682                           
 13683                           	psect	text69
 13684  0053EA                     __ptext69:
 13685                           	callstack 0
 13686  0053EA                     _stop:
 13687                           	callstack 26
 13688  0053EA                     
 13689                           ;dc_motor.c: 82: void stop(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 83: {;d
      +                          c_motor.c: 84:     while (mL->power >0 || mR->power >0){
 13690  0053EA  EF2E  F02A         	goto	l4275
 13691  0053EE                     l4261:
 13692                           
 13693                           ;dc_motor.c: 85:         if (mL->power !=0){mL->power -= 5;}
 13694  0053EE  C01A  FFD9         	movff	stop@mL,fsr2l
 13695  0053F2  C01B  FFDA         	movff	stop@mL+1,fsr2h
 13696  0053F6  50DF               	movf	indf2,w,c
 13697  0053F8  B4D8               	btfsc	status,2,c
 13698  0053FA  EF01  F02A         	goto	u4211
 13699  0053FE  EF03  F02A         	goto	u4210
 13700  005402                     u4211:
 13701  005402  EF09  F02A         	goto	l4265
 13702  005406                     u4210:
 13703  005406  C01A  FFD9         	movff	stop@mL,fsr2l
 13704  00540A  C01B  FFDA         	movff	stop@mL+1,fsr2h
 13705  00540E  0E05               	movlw	5
 13706  005410  5EDF               	subwf	indf2,f,c
 13707  005412                     l4265:
 13708                           
 13709                           ;dc_motor.c: 86:         if (mR->power !=0){mR->power -= 5;}
 13710  005412  C01C  FFD9         	movff	stop@mR,fsr2l
 13711  005416  C01D  FFDA         	movff	stop@mR+1,fsr2h
 13712  00541A  50DF               	movf	indf2,w,c
 13713  00541C  B4D8               	btfsc	status,2,c
 13714  00541E  EF13  F02A         	goto	u4221
 13715  005422  EF15  F02A         	goto	u4220
 13716  005426                     u4221:
 13717  005426  EF1B  F02A         	goto	l4269
 13718  00542A                     u4220:
 13719  00542A  C01C  FFD9         	movff	stop@mR,fsr2l
 13720  00542E  C01D  FFDA         	movff	stop@mR+1,fsr2h
 13721  005432  0E05               	movlw	5
 13722  005434  5EDF               	subwf	indf2,f,c
 13723  005436                     l4269:
 13724                           
 13725                           ;dc_motor.c: 87:         setMotorPWM(mL);
 13726  005436  C01A  F00F         	movff	stop@mL,setMotorPWM@m
 13727  00543A  C01B  F010         	movff	stop@mL+1,setMotorPWM@m+1
 13728  00543E  EC7F  F01D         	call	_setMotorPWM	;wreg free
 13729  005442                     
 13730                           ;dc_motor.c: 88:         setMotorPWM(mR);
 13731  005442  C01C  F00F         	movff	stop@mR,setMotorPWM@m
 13732  005446  C01D  F010         	movff	stop@mR+1,setMotorPWM@m+1
 13733  00544A  EC7F  F01D         	call	_setMotorPWM	;wreg free
 13734  00544E                     
 13735                           ;dc_motor.c: 89:         _delay((unsigned long)((10)*(64000000/4000.0)));
 13736  00544E  0ED0               	movlw	208
 13737  005450  6E1E               	movwf	??_stop^0,c
 13738  005452  0ECA               	movlw	202
 13739  005454                     u6527:
 13740  005454  2EE8               	decfsz	wreg,f,c
 13741  005456  D7FE               	bra	u6527
 13742  005458  2E1E               	decfsz	??_stop^0,f,c
 13743  00545A  D7FC               	bra	u6527
 13744  00545C                     l4275:
 13745                           
 13746                           ;dc_motor.c: 84:     while (mL->power >0 || mR->power >0){
 13747  00545C  C01A  FFD9         	movff	stop@mL,fsr2l
 13748  005460  C01B  FFDA         	movff	stop@mL+1,fsr2h
 13749  005464  50DF               	movf	indf2,w,c
 13750  005466  A4D8               	btfss	status,2,c
 13751  005468  EF38  F02A         	goto	u4231
 13752  00546C  EF3A  F02A         	goto	u4230
 13753  005470                     u4231:
 13754  005470  EFF7  F029         	goto	l4261
 13755  005474                     u4230:
 13756  005474  C01C  FFD9         	movff	stop@mR,fsr2l
 13757  005478  C01D  FFDA         	movff	stop@mR+1,fsr2h
 13758  00547C  50DF               	movf	indf2,w,c
 13759  00547E  A4D8               	btfss	status,2,c
 13760  005480  EF44  F02A         	goto	u4241
 13761  005484  EF46  F02A         	goto	u4240
 13762  005488                     u4241:
 13763  005488  EFF7  F029         	goto	l4261
 13764  00548C                     u4240:
 13765  00548C                     
 13766                           ;dc_motor.c: 91:     _delay((unsigned long)((500)*(64000000/4000.0)));
 13767  00548C  0E29               	movlw	41
 13768  00548E  6E1F               	movwf	(??_stop+1)^0,c
 13769  005490  0E96               	movlw	150
 13770  005492  6E1E               	movwf	??_stop^0,c
 13771  005494  0E7F               	movlw	127
 13772  005496                     u6537:
 13773  005496  2EE8               	decfsz	wreg,f,c
 13774  005498  D7FE               	bra	u6537
 13775  00549A  2E1E               	decfsz	??_stop^0,f,c
 13776  00549C  D7FC               	bra	u6537
 13777  00549E  2E1F               	decfsz	(??_stop+1)^0,f,c
 13778  0054A0  D7FA               	bra	u6537
 13779  0054A2  F000               	nop	
 13780  0054A4  0012               	return		;funcret
 13781  0054A6                     __end_of_stop:
 13782                           	callstack 0
 13783                           
 13784 ;; *************** function _fullSpeedBack *****************
 13785 ;; Defined at:
 13786 ;;		line 169 in file "dc_motor.c"
 13787 ;; Parameters:    Size  Location     Type
 13788 ;;  mL              2   25[COMRAM] PTR struct DC_motor
 13789 ;;		 -> main@motorL(9), 
 13790 ;;  mR              2   27[COMRAM] PTR struct DC_motor
 13791 ;;		 -> main@motorR(9), 
 13792 ;; Auto vars:     Size  Location     Type
 13793 ;;		None
 13794 ;; Return value:  Size  Location     Type
 13795 ;;                  1    wreg      void 
 13796 ;; Registers used:
 13797 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13798 ;; Tracked objects:
 13799 ;;		On entry : 0/0
 13800 ;;		On exit  : 0/0
 13801 ;;		Unchanged: 0/0
 13802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13803 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13804 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13805 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13806 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13807 ;;Total ram usage:        5 bytes
 13808 ;; Hardware stack levels used: 1
 13809 ;; Hardware stack levels required when called: 3
 13810 ;; This function calls:
 13811 ;;		_setMotorPWM
 13812 ;; This function is called by:
 13813 ;;		_short_reverse
 13814 ;; This function uses a non-reentrant model
 13815 ;;
 13816                           
 13817                           	psect	text70
 13818  00554C                     __ptext70:
 13819                           	callstack 0
 13820  00554C                     _fullSpeedBack:
 13821                           	callstack 25
 13822  00554C                     
 13823                           ;dc_motor.c: 169: void fullSpeedBack(struct DC_motor *mL, struct DC_motor *mR);dc_motor.
      +                          c: 170: {;dc_motor.c: 171:     mL->direction=0;
 13824  00554C  EE20 F001          	lfsr	2,1
 13825  005550  501A               	movf	fullSpeedBack@mL^0,w,c
 13826  005552  26D9               	addwf	fsr2l,f,c
 13827  005554  501B               	movf	(fullSpeedBack@mL+1)^0,w,c
 13828  005556  22DA               	addwfc	fsr2h,f,c
 13829  005558  0E00               	movlw	0
 13830  00555A  6EDF               	movwf	indf2,c
 13831                           
 13832                           ;dc_motor.c: 172:     mR->direction=0;
 13833  00555C  EE20 F001          	lfsr	2,1
 13834  005560  501C               	movf	fullSpeedBack@mR^0,w,c
 13835  005562  26D9               	addwf	fsr2l,f,c
 13836  005564  501D               	movf	(fullSpeedBack@mR+1)^0,w,c
 13837  005566  22DA               	addwfc	fsr2h,f,c
 13838  005568  0E00               	movlw	0
 13839  00556A  6EDF               	movwf	indf2,c
 13840                           
 13841                           ;dc_motor.c: 173:     while (mL->power<50 && mR->power<50){
 13842  00556C  EFD7  F02A         	goto	l4311
 13843  005570                     l4303:
 13844                           
 13845                           ;dc_motor.c: 174:         mL->power += 10;
 13846  005570  C01A  FFD9         	movff	fullSpeedBack@mL,fsr2l
 13847  005574  C01B  FFDA         	movff	fullSpeedBack@mL+1,fsr2h
 13848  005578  0E0A               	movlw	10
 13849  00557A  26DF               	addwf	indf2,f,c
 13850                           
 13851                           ;dc_motor.c: 175:         mR->power += 10;
 13852  00557C  C01C  FFD9         	movff	fullSpeedBack@mR,fsr2l
 13853  005580  C01D  FFDA         	movff	fullSpeedBack@mR+1,fsr2h
 13854  005584  0E0A               	movlw	10
 13855  005586  26DF               	addwf	indf2,f,c
 13856  005588                     
 13857                           ;dc_motor.c: 176:         setMotorPWM(mL);
 13858  005588  C01A  F00F         	movff	fullSpeedBack@mL,setMotorPWM@m
 13859  00558C  C01B  F010         	movff	fullSpeedBack@mL+1,setMotorPWM@m+1
 13860  005590  EC7F  F01D         	call	_setMotorPWM	;wreg free
 13861  005594                     
 13862                           ;dc_motor.c: 177:         setMotorPWM(mR);
 13863  005594  C01C  F00F         	movff	fullSpeedBack@mR,setMotorPWM@m
 13864  005598  C01D  F010         	movff	fullSpeedBack@mR+1,setMotorPWM@m+1
 13865  00559C  EC7F  F01D         	call	_setMotorPWM	;wreg free
 13866  0055A0                     
 13867                           ;dc_motor.c: 178:         _delay((unsigned long)((10)*(64000000/4000.0)));
 13868  0055A0  0ED0               	movlw	208
 13869  0055A2  6E1E               	movwf	??_fullSpeedBack^0,c
 13870  0055A4  0ECA               	movlw	202
 13871  0055A6                     u6547:
 13872  0055A6  2EE8               	decfsz	wreg,f,c
 13873  0055A8  D7FE               	bra	u6547
 13874  0055AA  2E1E               	decfsz	??_fullSpeedBack^0,f,c
 13875  0055AC  D7FC               	bra	u6547
 13876  0055AE                     l4311:
 13877                           
 13878                           ;dc_motor.c: 173:     while (mL->power<50 && mR->power<50){
 13879  0055AE  C01A  FFD9         	movff	fullSpeedBack@mL,fsr2l
 13880  0055B2  C01B  FFDA         	movff	fullSpeedBack@mL+1,fsr2h
 13881  0055B6  0E32               	movlw	50
 13882  0055B8  60DF               	cpfslt	indf2,c
 13883  0055BA  EFE1  F02A         	goto	u4291
 13884  0055BE  EFE3  F02A         	goto	u4290
 13885  0055C2                     u4291:
 13886  0055C2  EFEF  F02A         	goto	l335
 13887  0055C6                     u4290:
 13888  0055C6  C01C  FFD9         	movff	fullSpeedBack@mR,fsr2l
 13889  0055CA  C01D  FFDA         	movff	fullSpeedBack@mR+1,fsr2h
 13890  0055CE  0E31               	movlw	49
 13891  0055D0  64DF               	cpfsgt	indf2,c
 13892  0055D2  EFED  F02A         	goto	u4301
 13893  0055D6  EFEF  F02A         	goto	u4300
 13894  0055DA                     u4301:
 13895  0055DA  EFB8  F02A         	goto	l4303
 13896  0055DE                     u4300:
 13897  0055DE                     l335:
 13898  0055DE  0012               	return		;funcret
 13899  0055E0                     __end_of_fullSpeedBack:
 13900                           	callstack 0
 13901                           
 13902 ;; *************** function _fullSpeedAhead *****************
 13903 ;; Defined at:
 13904 ;;		line 149 in file "dc_motor.c"
 13905 ;; Parameters:    Size  Location     Type
 13906 ;;  mL              2   25[COMRAM] PTR struct DC_motor
 13907 ;;		 -> main@motorL(9), 
 13908 ;;  mR              2   27[COMRAM] PTR struct DC_motor
 13909 ;;		 -> main@motorR(9), 
 13910 ;; Auto vars:     Size  Location     Type
 13911 ;;		None
 13912 ;; Return value:  Size  Location     Type
 13913 ;;                  1    wreg      void 
 13914 ;; Registers used:
 13915 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13916 ;; Tracked objects:
 13917 ;;		On entry : 0/0
 13918 ;;		On exit  : 0/0
 13919 ;;		Unchanged: 0/0
 13920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13921 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13922 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13923 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13924 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13925 ;;Total ram usage:        5 bytes
 13926 ;; Hardware stack levels used: 1
 13927 ;; Hardware stack levels required when called: 3
 13928 ;; This function calls:
 13929 ;;		_setMotorPWM
 13930 ;; This function is called by:
 13931 ;;		_fullSpeedAhead_test
 13932 ;;		_main
 13933 ;;		_short_burst
 13934 ;;		_goback
 13935 ;;		_test_function
 13936 ;; This function uses a non-reentrant model
 13937 ;;
 13938                           
 13939                           	psect	text71
 13940  005262                     __ptext71:
 13941                           	callstack 0
 13942  005262                     _fullSpeedAhead:
 13943                           	callstack 26
 13944  005262                     
 13945                           ;dc_motor.c: 149: void fullSpeedAhead(struct DC_motor *mL, struct DC_motor *mR);dc_motor
      +                          .c: 150: {;dc_motor.c: 151:     mL->direction=1;
 13946  005262  EE20 F001          	lfsr	2,1
 13947  005266  501A               	movf	fullSpeedAhead@mL^0,w,c
 13948  005268  26D9               	addwf	fsr2l,f,c
 13949  00526A  501B               	movf	(fullSpeedAhead@mL+1)^0,w,c
 13950  00526C  22DA               	addwfc	fsr2h,f,c
 13951  00526E  0E01               	movlw	1
 13952  005270  6EDF               	movwf	indf2,c
 13953                           
 13954                           ;dc_motor.c: 152:     mR->direction=1;
 13955  005272  EE20 F001          	lfsr	2,1
 13956  005276  501C               	movf	fullSpeedAhead@mR^0,w,c
 13957  005278  26D9               	addwf	fsr2l,f,c
 13958  00527A  501D               	movf	(fullSpeedAhead@mR+1)^0,w,c
 13959  00527C  22DA               	addwfc	fsr2h,f,c
 13960  00527E  0E01               	movlw	1
 13961  005280  6EDF               	movwf	indf2,c
 13962                           
 13963                           ;dc_motor.c: 153:     while (mL->power<35 || mR->power<30){
 13964  005282  EF7A  F029         	goto	l4297
 13965  005286                     l4283:
 13966                           
 13967                           ;dc_motor.c: 154:         if (mL->power<35) {mL->power += 5;}
 13968  005286  C01A  FFD9         	movff	fullSpeedAhead@mL,fsr2l
 13969  00528A  C01B  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
 13970  00528E  0E23               	movlw	35
 13971  005290  60DF               	cpfslt	indf2,c
 13972  005292  EF4D  F029         	goto	u4251
 13973  005296  EF4F  F029         	goto	u4250
 13974  00529A                     u4251:
 13975  00529A  EF55  F029         	goto	l4287
 13976  00529E                     u4250:
 13977  00529E  C01A  FFD9         	movff	fullSpeedAhead@mL,fsr2l
 13978  0052A2  C01B  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
 13979  0052A6  0E05               	movlw	5
 13980  0052A8  26DF               	addwf	indf2,f,c
 13981  0052AA                     l4287:
 13982                           
 13983                           ;dc_motor.c: 155:         if (mR->power<30) {mR->power += 5;}
 13984  0052AA  C01C  FFD9         	movff	fullSpeedAhead@mR,fsr2l
 13985  0052AE  C01D  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
 13986  0052B2  0E1E               	movlw	30
 13987  0052B4  60DF               	cpfslt	indf2,c
 13988  0052B6  EF5F  F029         	goto	u4261
 13989  0052BA  EF61  F029         	goto	u4260
 13990  0052BE                     u4261:
 13991  0052BE  EF67  F029         	goto	l4291
 13992  0052C2                     u4260:
 13993  0052C2  C01C  FFD9         	movff	fullSpeedAhead@mR,fsr2l
 13994  0052C6  C01D  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
 13995  0052CA  0E05               	movlw	5
 13996  0052CC  26DF               	addwf	indf2,f,c
 13997  0052CE                     l4291:
 13998                           
 13999                           ;dc_motor.c: 157:         setMotorPWM(mL);
 14000  0052CE  C01A  F00F         	movff	fullSpeedAhead@mL,setMotorPWM@m
 14001  0052D2  C01B  F010         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
 14002  0052D6  EC7F  F01D         	call	_setMotorPWM	;wreg free
 14003  0052DA                     
 14004                           ;dc_motor.c: 158:         setMotorPWM(mR);
 14005  0052DA  C01C  F00F         	movff	fullSpeedAhead@mR,setMotorPWM@m
 14006  0052DE  C01D  F010         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
 14007  0052E2  EC7F  F01D         	call	_setMotorPWM	;wreg free
 14008  0052E6                     
 14009                           ;dc_motor.c: 159:         _delay((unsigned long)((10)*(64000000/4000.0)));
 14010  0052E6  0ED0               	movlw	208
 14011  0052E8  6E1E               	movwf	??_fullSpeedAhead^0,c
 14012  0052EA  0ECA               	movlw	202
 14013  0052EC                     u6557:
 14014  0052EC  2EE8               	decfsz	wreg,f,c
 14015  0052EE  D7FE               	bra	u6557
 14016  0052F0  2E1E               	decfsz	??_fullSpeedAhead^0,f,c
 14017  0052F2  D7FC               	bra	u6557
 14018  0052F4                     l4297:
 14019                           
 14020                           ;dc_motor.c: 153:     while (mL->power<35 || mR->power<30){
 14021  0052F4  C01A  FFD9         	movff	fullSpeedAhead@mL,fsr2l
 14022  0052F8  C01B  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
 14023  0052FC  0E22               	movlw	34
 14024  0052FE  64DF               	cpfsgt	indf2,c
 14025  005300  EF84  F029         	goto	u4271
 14026  005304  EF86  F029         	goto	u4270
 14027  005308                     u4271:
 14028  005308  EF43  F029         	goto	l4283
 14029  00530C                     u4270:
 14030  00530C  C01C  FFD9         	movff	fullSpeedAhead@mR,fsr2l
 14031  005310  C01D  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
 14032  005314  0E1D               	movlw	29
 14033  005316  64DF               	cpfsgt	indf2,c
 14034  005318  EF90  F029         	goto	u4281
 14035  00531C  EF92  F029         	goto	u4280
 14036  005320                     u4281:
 14037  005320  EF43  F029         	goto	l4283
 14038  005324                     u4280:
 14039  005324  0012               	return		;funcret
 14040  005326                     __end_of_fullSpeedAhead:
 14041                           	callstack 0
 14042                           
 14043 ;; *************** function _setMotorPWM *****************
 14044 ;; Defined at:
 14045 ;;		line 59 in file "dc_motor.c"
 14046 ;; Parameters:    Size  Location     Type
 14047 ;;  m               2   14[COMRAM] PTR struct DC_motor
 14048 ;;		 -> main@motorR(9), main@motorL(9), 
 14049 ;; Auto vars:     Size  Location     Type
 14050 ;;  PWMduty         2   23[COMRAM] int 
 14051 ;; Return value:  Size  Location     Type
 14052 ;;                  1    wreg      void 
 14053 ;; Registers used:
 14054 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14055 ;; Tracked objects:
 14056 ;;		On entry : 0/0
 14057 ;;		On exit  : 0/0
 14058 ;;		Unchanged: 0/0
 14059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 14060 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14061 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14062 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14063 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14064 ;;Total ram usage:       11 bytes
 14065 ;; Hardware stack levels used: 1
 14066 ;; Hardware stack levels required when called: 2
 14067 ;; This function calls:
 14068 ;;		___awdiv
 14069 ;;		___wmul
 14070 ;; This function is called by:
 14071 ;;		_stop
 14072 ;;		_turnLeft
 14073 ;;		_turnRight
 14074 ;;		_fullSpeedAhead
 14075 ;;		_fullSpeedBack
 14076 ;; This function uses a non-reentrant model
 14077 ;;
 14078                           
 14079                           	psect	text72
 14080  003AFE                     __ptext72:
 14081                           	callstack 0
 14082  003AFE                     _setMotorPWM:
 14083                           	callstack 26
 14084  003AFE                     
 14085                           ;dc_motor.c: 59: void setMotorPWM(struct DC_motor *m);dc_motor.c: 60: {;dc_motor.c: 61: 
      +                           int PWMduty;;dc_motor.c: 63:  if (m->direction){
 14086  003AFE  EE20 F001          	lfsr	2,1
 14087  003B02  500F               	movf	setMotorPWM@m^0,w,c
 14088  003B04  26D9               	addwf	fsr2l,f,c
 14089  003B06  5010               	movf	(setMotorPWM@m+1)^0,w,c
 14090  003B08  22DA               	addwfc	fsr2h,f,c
 14091  003B0A  50DF               	movf	indf2,w,c
 14092  003B0C  B4D8               	btfsc	status,2,c
 14093  003B0E  EF8B  F01D         	goto	u3891
 14094  003B12  EF8D  F01D         	goto	u3890
 14095  003B16                     u3891:
 14096  003B16  EFBE  F01D         	goto	l4027
 14097  003B1A                     u3890:
 14098  003B1A                     
 14099                           ;dc_motor.c: 65:   PWMduty=m->PWMperiod - ((int)(m->power)*(m->PWMperiod))/100;
 14100  003B1A  C00F  FFD9         	movff	setMotorPWM@m,fsr2l
 14101  003B1E  C010  FFDA         	movff	setMotorPWM@m+1,fsr2h
 14102  003B22  50DF               	movf	indf2,w,c
 14103  003B24  6E11               	movwf	??_setMotorPWM^0,c
 14104  003B26  5011               	movf	??_setMotorPWM^0,w,c
 14105  003B28  6E01               	movwf	___wmul@multiplier^0,c
 14106  003B2A  6A02               	clrf	(___wmul@multiplier+1)^0,c
 14107  003B2C  EE20 F007          	lfsr	2,7
 14108  003B30  500F               	movf	setMotorPWM@m^0,w,c
 14109  003B32  26D9               	addwf	fsr2l,f,c
 14110  003B34  5010               	movf	(setMotorPWM@m+1)^0,w,c
 14111  003B36  22DA               	addwfc	fsr2h,f,c
 14112  003B38  CFDE F003          	movff	postinc2,___wmul@multiplicand
 14113  003B3C  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
 14114  003B40  EC7A  F02E         	call	___wmul	;wreg free
 14115  003B44  C001  F007         	movff	?___wmul,___awdiv@dividend
 14116  003B48  C002  F008         	movff	?___wmul+1,___awdiv@dividend+1
 14117  003B4C  0E00               	movlw	0
 14118  003B4E  6E0A               	movwf	(___awdiv@divisor+1)^0,c
 14119  003B50  0E64               	movlw	100
 14120  003B52  6E09               	movwf	___awdiv@divisor^0,c
 14121  003B54  EC93  F029         	call	___awdiv	;wreg free
 14122  003B58  EE20 F007          	lfsr	2,7
 14123  003B5C  500F               	movf	setMotorPWM@m^0,w,c
 14124  003B5E  26D9               	addwf	fsr2l,f,c
 14125  003B60  5010               	movf	(setMotorPWM@m+1)^0,w,c
 14126  003B62  22DA               	addwfc	fsr2h,f,c
 14127  003B64  CFDE F012          	movff	postinc2,??_setMotorPWM+1
 14128  003B68  CFDD F013          	movff	postdec2,??_setMotorPWM+2
 14129  003B6C  5007               	movf	?___awdiv^0,w,c
 14130  003B6E  5C12               	subwf	(??_setMotorPWM+1)^0,w,c
 14131  003B70  6E18               	movwf	setMotorPWM@PWMduty^0,c
 14132  003B72  5008               	movf	(?___awdiv+1)^0,w,c
 14133  003B74  5813               	subwfb	(??_setMotorPWM+2)^0,w,c
 14134  003B76  6E19               	movwf	(setMotorPWM@PWMduty+1)^0,c
 14135                           
 14136                           ;dc_motor.c: 66:  }
 14137  003B78  EFE1  F01D         	goto	l4029
 14138  003B7C                     l4027:
 14139                           
 14140                           ;dc_motor.c: 69:   PWMduty=((int)(m->power)*(m->PWMperiod))/100;
 14141  003B7C  C00F  FFD9         	movff	setMotorPWM@m,fsr2l
 14142  003B80  C010  FFDA         	movff	setMotorPWM@m+1,fsr2h
 14143  003B84  50DF               	movf	indf2,w,c
 14144  003B86  6E11               	movwf	??_setMotorPWM^0,c
 14145  003B88  5011               	movf	??_setMotorPWM^0,w,c
 14146  003B8A  6E01               	movwf	___wmul@multiplier^0,c
 14147  003B8C  6A02               	clrf	(___wmul@multiplier+1)^0,c
 14148  003B8E  EE20 F007          	lfsr	2,7
 14149  003B92  500F               	movf	setMotorPWM@m^0,w,c
 14150  003B94  26D9               	addwf	fsr2l,f,c
 14151  003B96  5010               	movf	(setMotorPWM@m+1)^0,w,c
 14152  003B98  22DA               	addwfc	fsr2h,f,c
 14153  003B9A  CFDE F003          	movff	postinc2,___wmul@multiplicand
 14154  003B9E  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
 14155  003BA2  EC7A  F02E         	call	___wmul	;wreg free
 14156  003BA6  C001  F007         	movff	?___wmul,___awdiv@dividend
 14157  003BAA  C002  F008         	movff	?___wmul+1,___awdiv@dividend+1
 14158  003BAE  0E00               	movlw	0
 14159  003BB0  6E0A               	movwf	(___awdiv@divisor+1)^0,c
 14160  003BB2  0E64               	movlw	100
 14161  003BB4  6E09               	movwf	___awdiv@divisor^0,c
 14162  003BB6  EC93  F029         	call	___awdiv	;wreg free
 14163  003BBA  C007  F018         	movff	?___awdiv,setMotorPWM@PWMduty
 14164  003BBE  C008  F019         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
 14165  003BC2                     l4029:
 14166                           
 14167                           ;dc_motor.c: 72:  *(m->dutyHighByte) = PWMduty;
 14168  003BC2  EE20 F002          	lfsr	2,2
 14169  003BC6  500F               	movf	setMotorPWM@m^0,w,c
 14170  003BC8  26D9               	addwf	fsr2l,f,c
 14171  003BCA  5010               	movf	(setMotorPWM@m+1)^0,w,c
 14172  003BCC  22DA               	addwfc	fsr2h,f,c
 14173  003BCE  CFDE F011          	movff	postinc2,??_setMotorPWM
 14174  003BD2  CFDD F012          	movff	postdec2,??_setMotorPWM+1
 14175  003BD6  C011  FFD9         	movff	??_setMotorPWM,fsr2l
 14176  003BDA  C012  FFDA         	movff	??_setMotorPWM+1,fsr2h
 14177  003BDE  C018  FFDF         	movff	setMotorPWM@PWMduty,indf2
 14178  003BE2                     
 14179                           ;dc_motor.c: 74:  if (m->direction){
 14180  003BE2  EE20 F001          	lfsr	2,1
 14181  003BE6  500F               	movf	setMotorPWM@m^0,w,c
 14182  003BE8  26D9               	addwf	fsr2l,f,c
 14183  003BEA  5010               	movf	(setMotorPWM@m+1)^0,w,c
 14184  003BEC  22DA               	addwfc	fsr2h,f,c
 14185  003BEE  50DF               	movf	indf2,w,c
 14186  003BF0  B4D8               	btfsc	status,2,c
 14187  003BF2  EFFD  F01D         	goto	u3901
 14188  003BF6  EFFF  F01D         	goto	u3900
 14189  003BFA                     u3901:
 14190  003BFA  EF34  F01E         	goto	l4035
 14191  003BFE                     u3900:
 14192  003BFE                     
 14193                           ;dc_motor.c: 75:   *(m->dir_LAT) = *(m->dir_LAT) | (1<<(m->dir_pin));
 14194  003BFE  EE20 F004          	lfsr	2,4
 14195  003C02  500F               	movf	setMotorPWM@m^0,w,c
 14196  003C04  26D9               	addwf	fsr2l,f,c
 14197  003C06  5010               	movf	(setMotorPWM@m+1)^0,w,c
 14198  003C08  22DA               	addwfc	fsr2h,f,c
 14199  003C0A  CFDE F011          	movff	postinc2,??_setMotorPWM
 14200  003C0E  CFDD F012          	movff	postdec2,??_setMotorPWM+1
 14201  003C12  C011  FFD9         	movff	??_setMotorPWM,fsr2l
 14202  003C16  C012  FFDA         	movff	??_setMotorPWM+1,fsr2h
 14203  003C1A  EE10 F004          	lfsr	1,4
 14204  003C1E  500F               	movf	setMotorPWM@m^0,w,c
 14205  003C20  26E1               	addwf	fsr1l,f,c
 14206  003C22  5010               	movf	(setMotorPWM@m+1)^0,w,c
 14207  003C24  22E2               	addwfc	fsr1h,f,c
 14208  003C26  CFE6 F013          	movff	postinc1,??_setMotorPWM+2
 14209  003C2A  CFE5 F014          	movff	postdec1,??_setMotorPWM+3
 14210  003C2E  C013  FFE1         	movff	??_setMotorPWM+2,fsr1l
 14211  003C32  C014  FFE2         	movff	??_setMotorPWM+3,fsr1h
 14212  003C36  50E7               	movf	indf1,w,c
 14213  003C38  6E15               	movwf	(??_setMotorPWM+4)^0,c
 14214  003C3A  EE10 F006          	lfsr	1,6
 14215  003C3E  500F               	movf	setMotorPWM@m^0,w,c
 14216  003C40  26E1               	addwf	fsr1l,f,c
 14217  003C42  5010               	movf	(setMotorPWM@m+1)^0,w,c
 14218  003C44  22E2               	addwfc	fsr1h,f,c
 14219  003C46  50E7               	movf	indf1,w,c
 14220  003C48  6E16               	movwf	(??_setMotorPWM+5)^0,c
 14221  003C4A  0E01               	movlw	1
 14222  003C4C  6E17               	movwf	(??_setMotorPWM+6)^0,c
 14223  003C4E  2A16               	incf	(??_setMotorPWM+5)^0,f,c
 14224  003C50  EF2C  F01E         	goto	u3914
 14225  003C54                     u3915:
 14226  003C54  90D8               	bcf	status,0,c
 14227  003C56  3617               	rlcf	(??_setMotorPWM+6)^0,f,c
 14228  003C58                     u3914:
 14229  003C58  2E16               	decfsz	(??_setMotorPWM+5)^0,f,c
 14230  003C5A  EF2A  F01E         	goto	u3915
 14231  003C5E  5017               	movf	(??_setMotorPWM+6)^0,w,c
 14232  003C60  1015               	iorwf	(??_setMotorPWM+4)^0,w,c
 14233  003C62  6EDF               	movwf	indf2,c
 14234                           
 14235                           ;dc_motor.c: 76:  } else {
 14236  003C64  EF68  F01E         	goto	l272
 14237  003C68                     l4035:
 14238                           
 14239                           ;dc_motor.c: 77:   *(m->dir_LAT) = *(m->dir_LAT) & (~(1<<(m->dir_pin)));
 14240  003C68  EE20 F004          	lfsr	2,4
 14241  003C6C  500F               	movf	setMotorPWM@m^0,w,c
 14242  003C6E  26D9               	addwf	fsr2l,f,c
 14243  003C70  5010               	movf	(setMotorPWM@m+1)^0,w,c
 14244  003C72  22DA               	addwfc	fsr2h,f,c
 14245  003C74  CFDE F011          	movff	postinc2,??_setMotorPWM
 14246  003C78  CFDD F012          	movff	postdec2,??_setMotorPWM+1
 14247  003C7C  C011  FFD9         	movff	??_setMotorPWM,fsr2l
 14248  003C80  C012  FFDA         	movff	??_setMotorPWM+1,fsr2h
 14249  003C84  EE10 F004          	lfsr	1,4
 14250  003C88  500F               	movf	setMotorPWM@m^0,w,c
 14251  003C8A  26E1               	addwf	fsr1l,f,c
 14252  003C8C  5010               	movf	(setMotorPWM@m+1)^0,w,c
 14253  003C8E  22E2               	addwfc	fsr1h,f,c
 14254  003C90  CFE6 F013          	movff	postinc1,??_setMotorPWM+2
 14255  003C94  CFE5 F014          	movff	postdec1,??_setMotorPWM+3
 14256  003C98  C013  FFE1         	movff	??_setMotorPWM+2,fsr1l
 14257  003C9C  C014  FFE2         	movff	??_setMotorPWM+3,fsr1h
 14258  003CA0  50E7               	movf	indf1,w,c
 14259  003CA2  6E15               	movwf	(??_setMotorPWM+4)^0,c
 14260  003CA4  EE10 F006          	lfsr	1,6
 14261  003CA8  500F               	movf	setMotorPWM@m^0,w,c
 14262  003CAA  26E1               	addwf	fsr1l,f,c
 14263  003CAC  5010               	movf	(setMotorPWM@m+1)^0,w,c
 14264  003CAE  22E2               	addwfc	fsr1h,f,c
 14265  003CB0  50E7               	movf	indf1,w,c
 14266  003CB2  6E16               	movwf	(??_setMotorPWM+5)^0,c
 14267  003CB4  0E01               	movlw	1
 14268  003CB6  6E17               	movwf	(??_setMotorPWM+6)^0,c
 14269  003CB8  2A16               	incf	(??_setMotorPWM+5)^0,f,c
 14270  003CBA  EF61  F01E         	goto	u3924
 14271  003CBE                     u3925:
 14272  003CBE  90D8               	bcf	status,0,c
 14273  003CC0  3617               	rlcf	(??_setMotorPWM+6)^0,f,c
 14274  003CC2                     u3924:
 14275  003CC2  2E16               	decfsz	(??_setMotorPWM+5)^0,f,c
 14276  003CC4  EF5F  F01E         	goto	u3925
 14277  003CC8  5017               	movf	(??_setMotorPWM+6)^0,w,c
 14278  003CCA  0AFF               	xorlw	255
 14279  003CCC  1415               	andwf	(??_setMotorPWM+4)^0,w,c
 14280  003CCE  6EDF               	movwf	indf2,c
 14281  003CD0                     l272:
 14282  003CD0  0012               	return		;funcret
 14283  003CD2                     __end_of_setMotorPWM:
 14284                           	callstack 0
 14285                           
 14286 ;; *************** function ___wmul *****************
 14287 ;; Defined at:
 14288 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\Umul16.c"
 14289 ;; Parameters:    Size  Location     Type
 14290 ;;  multiplier      2    0[COMRAM] unsigned int 
 14291 ;;  multiplicand    2    2[COMRAM] unsigned int 
 14292 ;; Auto vars:     Size  Location     Type
 14293 ;;  product         2    4[COMRAM] unsigned int 
 14294 ;; Return value:  Size  Location     Type
 14295 ;;                  2    0[COMRAM] unsigned int 
 14296 ;; Registers used:
 14297 ;;		wreg, status,2, status,0, prodl, prodh
 14298 ;; Tracked objects:
 14299 ;;		On entry : 0/0
 14300 ;;		On exit  : 0/0
 14301 ;;		Unchanged: 0/0
 14302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 14303 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14304 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14305 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14306 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14307 ;;Total ram usage:        6 bytes
 14308 ;; Hardware stack levels used: 1
 14309 ;; Hardware stack levels required when called: 1
 14310 ;; This function calls:
 14311 ;;		Nothing
 14312 ;; This function is called by:
 14313 ;;		_setMotorPWM
 14314 ;; This function uses a non-reentrant model
 14315 ;;
 14316                           
 14317                           	psect	text73
 14318  005CF4                     __ptext73:
 14319                           	callstack 0
 14320  005CF4                     ___wmul:
 14321                           	callstack 26
 14322  005CF4  5001               	movf	___wmul@multiplier^0,w,c
 14323  005CF6  0203               	mulwf	___wmul@multiplicand^0,c
 14324  005CF8  CFF3 F005          	movff	prodl,___wmul@product
 14325  005CFC  CFF4 F006          	movff	prodh,___wmul@product+1
 14326  005D00  5001               	movf	___wmul@multiplier^0,w,c
 14327  005D02  0204               	mulwf	(___wmul@multiplicand+1)^0,c
 14328  005D04  50F3               	movf	243,w,c
 14329  005D06  2606               	addwf	(___wmul@product+1)^0,f,c
 14330  005D08  5002               	movf	(___wmul@multiplier+1)^0,w,c
 14331  005D0A  0203               	mulwf	___wmul@multiplicand^0,c
 14332  005D0C  50F3               	movf	243,w,c
 14333  005D0E  2606               	addwf	(___wmul@product+1)^0,f,c
 14334  005D10  C005  F001         	movff	___wmul@product,?___wmul
 14335  005D14  C006  F002         	movff	___wmul@product+1,?___wmul+1
 14336  005D18  0012               	return		;funcret
 14337  005D1A                     __end_of___wmul:
 14338                           	callstack 0
 14339                           
 14340 ;; *************** function ___awdiv *****************
 14341 ;; Defined at:
 14342 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\awdiv.c"
 14343 ;; Parameters:    Size  Location     Type
 14344 ;;  dividend        2    6[COMRAM] int 
 14345 ;;  divisor         2    8[COMRAM] int 
 14346 ;; Auto vars:     Size  Location     Type
 14347 ;;  quotient        2   12[COMRAM] int 
 14348 ;;  sign            1   11[COMRAM] unsigned char 
 14349 ;;  counter         1   10[COMRAM] unsigned char 
 14350 ;; Return value:  Size  Location     Type
 14351 ;;                  2    6[COMRAM] int 
 14352 ;; Registers used:
 14353 ;;		wreg, status,2, status,0
 14354 ;; Tracked objects:
 14355 ;;		On entry : 0/0
 14356 ;;		On exit  : 0/0
 14357 ;;		Unchanged: 0/0
 14358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 14359 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14360 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14361 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14362 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14363 ;;Total ram usage:        8 bytes
 14364 ;; Hardware stack levels used: 1
 14365 ;; Hardware stack levels required when called: 1
 14366 ;; This function calls:
 14367 ;;		Nothing
 14368 ;; This function is called by:
 14369 ;;		_setMotorPWM
 14370 ;; This function uses a non-reentrant model
 14371 ;;
 14372                           
 14373                           	psect	text74
 14374  005326                     __ptext74:
 14375                           	callstack 0
 14376  005326                     ___awdiv:
 14377                           	callstack 26
 14378  005326  0E00               	movlw	0
 14379  005328  6E0C               	movwf	___awdiv@sign^0,c
 14380  00532A  BE0A               	btfsc	(___awdiv@divisor+1)^0,7,c
 14381  00532C  EF9C  F029         	goto	u3770
 14382  005330  EF9A  F029         	goto	u3771
 14383  005334                     u3771:
 14384  005334  EFA2  F029         	goto	l3915
 14385  005338                     u3770:
 14386  005338  6C09               	negf	___awdiv@divisor^0,c
 14387  00533A  1E0A               	comf	(___awdiv@divisor+1)^0,f,c
 14388  00533C  B0D8               	btfsc	status,0,c
 14389  00533E  2A0A               	incf	(___awdiv@divisor+1)^0,f,c
 14390  005340  0E01               	movlw	1
 14391  005342  6E0C               	movwf	___awdiv@sign^0,c
 14392  005344                     l3915:
 14393  005344  BE08               	btfsc	(___awdiv@dividend+1)^0,7,c
 14394  005346  EFA9  F029         	goto	u3780
 14395  00534A  EFA7  F029         	goto	u3781
 14396  00534E                     u3781:
 14397  00534E  EFAF  F029         	goto	l3921
 14398  005352                     u3780:
 14399  005352  6C07               	negf	___awdiv@dividend^0,c
 14400  005354  1E08               	comf	(___awdiv@dividend+1)^0,f,c
 14401  005356  B0D8               	btfsc	status,0,c
 14402  005358  2A08               	incf	(___awdiv@dividend+1)^0,f,c
 14403  00535A  0E01               	movlw	1
 14404  00535C  1A0C               	xorwf	___awdiv@sign^0,f,c
 14405  00535E                     l3921:
 14406  00535E  0E00               	movlw	0
 14407  005360  6E0E               	movwf	(___awdiv@quotient+1)^0,c
 14408  005362  0E00               	movlw	0
 14409  005364  6E0D               	movwf	___awdiv@quotient^0,c
 14410  005366  5009               	movf	___awdiv@divisor^0,w,c
 14411  005368  100A               	iorwf	(___awdiv@divisor+1)^0,w,c
 14412  00536A  B4D8               	btfsc	status,2,c
 14413  00536C  EFBA  F029         	goto	u3791
 14414  005370  EFBC  F029         	goto	u3790
 14415  005374                     u3791:
 14416  005374  EFE4  F029         	goto	l3943
 14417  005378                     u3790:
 14418  005378  0E01               	movlw	1
 14419  00537A  6E0B               	movwf	___awdiv@counter^0,c
 14420  00537C  EFC4  F029         	goto	l3929
 14421  005380                     l3927:
 14422  005380  90D8               	bcf	status,0,c
 14423  005382  3609               	rlcf	___awdiv@divisor^0,f,c
 14424  005384  360A               	rlcf	(___awdiv@divisor+1)^0,f,c
 14425  005386  2A0B               	incf	___awdiv@counter^0,f,c
 14426  005388                     l3929:
 14427  005388  AE0A               	btfss	(___awdiv@divisor+1)^0,7,c
 14428  00538A  EFC9  F029         	goto	u3801
 14429  00538E  EFCB  F029         	goto	u3800
 14430  005392                     u3801:
 14431  005392  EFC0  F029         	goto	l3927
 14432  005396                     u3800:
 14433  005396                     l3931:
 14434  005396  90D8               	bcf	status,0,c
 14435  005398  360D               	rlcf	___awdiv@quotient^0,f,c
 14436  00539A  360E               	rlcf	(___awdiv@quotient+1)^0,f,c
 14437  00539C  5009               	movf	___awdiv@divisor^0,w,c
 14438  00539E  5C07               	subwf	___awdiv@dividend^0,w,c
 14439  0053A0  500A               	movf	(___awdiv@divisor+1)^0,w,c
 14440  0053A2  5808               	subwfb	(___awdiv@dividend+1)^0,w,c
 14441  0053A4  A0D8               	btfss	status,0,c
 14442  0053A6  EFD7  F029         	goto	u3811
 14443  0053AA  EFD9  F029         	goto	u3810
 14444  0053AE                     u3811:
 14445  0053AE  EFDE  F029         	goto	l3939
 14446  0053B2                     u3810:
 14447  0053B2  5009               	movf	___awdiv@divisor^0,w,c
 14448  0053B4  5E07               	subwf	___awdiv@dividend^0,f,c
 14449  0053B6  500A               	movf	(___awdiv@divisor+1)^0,w,c
 14450  0053B8  5A08               	subwfb	(___awdiv@dividend+1)^0,f,c
 14451  0053BA  800D               	bsf	___awdiv@quotient^0,0,c
 14452  0053BC                     l3939:
 14453  0053BC  90D8               	bcf	status,0,c
 14454  0053BE  320A               	rrcf	(___awdiv@divisor+1)^0,f,c
 14455  0053C0  3209               	rrcf	___awdiv@divisor^0,f,c
 14456  0053C2  2E0B               	decfsz	___awdiv@counter^0,f,c
 14457  0053C4  EFCB  F029         	goto	l3931
 14458  0053C8                     l3943:
 14459  0053C8  500C               	movf	___awdiv@sign^0,w,c
 14460  0053CA  B4D8               	btfsc	status,2,c
 14461  0053CC  EFEA  F029         	goto	u3821
 14462  0053D0  EFEC  F029         	goto	u3820
 14463  0053D4                     u3821:
 14464  0053D4  EFF0  F029         	goto	l3947
 14465  0053D8                     u3820:
 14466  0053D8  6C0D               	negf	___awdiv@quotient^0,c
 14467  0053DA  1E0E               	comf	(___awdiv@quotient+1)^0,f,c
 14468  0053DC  B0D8               	btfsc	status,0,c
 14469  0053DE  2A0E               	incf	(___awdiv@quotient+1)^0,f,c
 14470  0053E0                     l3947:
 14471  0053E0  C00D  F007         	movff	___awdiv@quotient,?___awdiv
 14472  0053E4  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
 14473  0053E8  0012               	return		;funcret
 14474  0053EA                     __end_of___awdiv:
 14475                           	callstack 0
 14476                           
 14477 ;; *************** function _Timer0_init *****************
 14478 ;; Defined at:
 14479 ;;		line 7 in file "timers.c"
 14480 ;; Parameters:    Size  Location     Type
 14481 ;;		None
 14482 ;; Auto vars:     Size  Location     Type
 14483 ;;		None
 14484 ;; Return value:  Size  Location     Type
 14485 ;;                  1    wreg      void 
 14486 ;; Registers used:
 14487 ;;		wreg, status,2
 14488 ;; Tracked objects:
 14489 ;;		On entry : 0/0
 14490 ;;		On exit  : 0/0
 14491 ;;		Unchanged: 0/0
 14492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 14493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14494 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14496 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14497 ;;Total ram usage:        0 bytes
 14498 ;; Hardware stack levels used: 1
 14499 ;; Hardware stack levels required when called: 1
 14500 ;; This function calls:
 14501 ;;		Nothing
 14502 ;; This function is called by:
 14503 ;;		_main
 14504 ;; This function uses a non-reentrant model
 14505 ;;
 14506                           
 14507                           	psect	text75
 14508  005E18                     __ptext75:
 14509                           	callstack 0
 14510  005E18                     _Timer0_init:
 14511                           	callstack 29
 14512  005E18                     
 14513                           ;timers.c: 9:     T0CON1bits.T0CS=0b010;
 14514  005E18  50D6               	movf	214,w,c	;volatile
 14515  005E1A  0B1F               	andlw	-225
 14516  005E1C  0940               	iorlw	64
 14517  005E1E  6ED6               	movwf	214,c	;volatile
 14518  005E20                     
 14519                           ;timers.c: 10:     T0CON1bits.T0ASYNC=1;
 14520  005E20  88D6               	bsf	214,4,c	;volatile
 14521                           
 14522                           ;timers.c: 11:     T0CON1bits.T0CKPS=0b0101;
 14523  005E22  50D6               	movf	214,w,c	;volatile
 14524  005E24  0BF0               	andlw	-16
 14525  005E26  0905               	iorlw	5
 14526  005E28  6ED6               	movwf	214,c	;volatile
 14527  005E2A                     
 14528                           ;timers.c: 12:     T0CON0bits.T016BIT=1;
 14529  005E2A  88D5               	bsf	213,4,c	;volatile
 14530                           
 14531                           ;timers.c: 16:     TMR0H=0b00111100;
 14532  005E2C  0E3C               	movlw	60
 14533  005E2E  6ED4               	movwf	212,c	;volatile
 14534                           
 14535                           ;timers.c: 17:     TMR0L=0b10101111;
 14536  005E30  0EAF               	movlw	175
 14537  005E32  6ED3               	movwf	211,c	;volatile
 14538  005E34  0012               	return		;funcret
 14539  005E36                     __end_of_Timer0_init:
 14540                           	callstack 0
 14541                           
 14542 ;; *************** function _Interrupts_init *****************
 14543 ;; Defined at:
 14544 ;;		line 9 in file "interrupts.c"
 14545 ;; Parameters:    Size  Location     Type
 14546 ;;		None
 14547 ;; Auto vars:     Size  Location     Type
 14548 ;;		None
 14549 ;; Return value:  Size  Location     Type
 14550 ;;                  1    wreg      void 
 14551 ;; Registers used:
 14552 ;;		None
 14553 ;; Tracked objects:
 14554 ;;		On entry : 0/0
 14555 ;;		On exit  : 0/0
 14556 ;;		Unchanged: 0/0
 14557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 14558 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14559 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14560 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14561 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14562 ;;Total ram usage:        0 bytes
 14563 ;; Hardware stack levels used: 1
 14564 ;; Hardware stack levels required when called: 1
 14565 ;; This function calls:
 14566 ;;		Nothing
 14567 ;; This function is called by:
 14568 ;;		_main
 14569 ;; This function uses a non-reentrant model
 14570 ;;
 14571                           
 14572                           	psect	text76
 14573  005E70                     __ptext76:
 14574                           	callstack 0
 14575  005E70                     _Interrupts_init:
 14576                           	callstack 29
 14577  005E70  8EF2               	bsf	242,7,c	;volatile
 14578                           
 14579                           ;interrupts.c: 11:     INTCONbits.IPEN=1;
 14580  005E72  8AF2               	bsf	242,5,c	;volatile
 14581                           
 14582                           ;interrupts.c: 12:     INTCONbits.GIEL=1;
 14583  005E74  8CF2               	bsf	242,6,c	;volatile
 14584                           
 14585                           ;interrupts.c: 13:  PIE0bits.TMR0IE = 1;
 14586  005E76  010E               	movlb	14	; () banked
 14587  005E78  8B29               	bsf	41,5,b	;volatile
 14588  005E7A                     
 14589                           ; BSR set to: 14
 14590  005E7A  0012               	return		;funcret
 14591  005E7C                     __end_of_Interrupts_init:
 14592                           	callstack 0
 14593                           
 14594 ;; *************** function _HighISR *****************
 14595 ;; Defined at:
 14596 ;;		line 21 in file "interrupts.c"
 14597 ;; Parameters:    Size  Location     Type
 14598 ;;		None
 14599 ;; Auto vars:     Size  Location     Type
 14600 ;;		None
 14601 ;; Return value:  Size  Location     Type
 14602 ;;                  1    wreg      void 
 14603 ;; Registers used:
 14604 ;;		wreg, status,2, status,0
 14605 ;; Tracked objects:
 14606 ;;		On entry : 0/0
 14607 ;;		On exit  : 0/0
 14608 ;;		Unchanged: 0/0
 14609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 14610 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14611 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14612 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14613 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14614 ;;Total ram usage:        0 bytes
 14615 ;; Hardware stack levels used: 1
 14616 ;; This function calls:
 14617 ;;		Nothing
 14618 ;; This function is called by:
 14619 ;;		Interrupt level 2
 14620 ;; This function uses a non-reentrant model
 14621 ;;
 14622                           
 14623                           	psect	intcode
 14624  000008                     __pintcode:
 14625                           	callstack 0
 14626  000008                     _HighISR:
 14627                           	callstack 19
 14628                           
 14629                           ; BSR set to: 14
 14630                           ;incstack = 0
 14631  000008  825F               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
 14632  00000A                     
 14633                           ;interrupts.c: 23:     if(PIR0bits.TMR0IF){
 14634  00000A  010E               	movlb	14	; () banked
 14635  00000C  AB33               	btfss	51,5,b	;volatile
 14636  00000E  EF0B  F000         	goto	i2u591_41
 14637  000012  EF0D  F000         	goto	i2u591_40
 14638  000016                     i2u591_41:
 14639  000016  EF16  F000         	goto	i2l598
 14640  00001A                     i2u591_40:
 14641  00001A                     
 14642                           ; BSR set to: 14
 14643                           ;interrupts.c: 24:         TMR0H=0b00111100;
 14644  00001A  0E3C               	movlw	60
 14645  00001C  6ED4               	movwf	212,c	;volatile
 14646                           
 14647                           ;interrupts.c: 25:         TMR0L=0b10101111;
 14648  00001E  0EAF               	movlw	175
 14649  000020  6ED3               	movwf	211,c	;volatile
 14650  000022                     
 14651                           ; BSR set to: 14
 14652                           ;interrupts.c: 26:         centisecond ++;
 14653  000022  0101               	movlb	1	; () banked
 14654  000024  4B44               	infsnz	_centisecond& (0+255),f,b
 14655  000026  2B45               	incf	(_centisecond+1)& (0+255),f,b
 14656  000028                     
 14657                           ; BSR set to: 1
 14658                           ;interrupts.c: 27:         PIR0bits.TMR0IF = 0;
 14659  000028  010E               	movlb	14	; () banked
 14660  00002A  9B33               	bcf	51,5,b	;volatile
 14661  00002C                     i2l598:
 14662                           
 14663                           ; BSR set to: 14
 14664  00002C  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
 14665  00002E  0011               	retfie		f
 14666  000030                     __end_of_HighISR:
 14667                           	callstack 0
 14668                           
 14669                           	psect	rparam
 14670  0000                     
 14671                           	psect	temp
 14672  00005F                     btemp:
 14673                           	callstack 0
 14674  00005F                     	ds	1
 14675  0000                     int$flags	set	btemp
 14676  0000                     wtemp8	set	btemp+1
 14677  0000                     ttemp5	set	btemp+1
 14678  0000                     ttemp6	set	btemp+4
 14679  0000                     ttemp7	set	btemp+8
 14680                           
 14681                           	psect	idloc
 14682                           
 14683                           ;Config register IDLOC0 @ 0x200000
 14684                           ;	unspecified, using default values
 14685  200000                     	org	2097152
 14686  200000  0FFF               	dw	4095
 14687                           
 14688                           ;Config register IDLOC1 @ 0x200002
 14689                           ;	unspecified, using default values
 14690  200002                     	org	2097154
 14691  200002  0FFF               	dw	4095
 14692                           
 14693                           ;Config register IDLOC2 @ 0x200004
 14694                           ;	unspecified, using default values
 14695  200004                     	org	2097156
 14696  200004  0FFF               	dw	4095
 14697                           
 14698                           ;Config register IDLOC3 @ 0x200006
 14699                           ;	unspecified, using default values
 14700  200006                     	org	2097158
 14701  200006  0FFF               	dw	4095
 14702                           
 14703                           ;Config register IDLOC4 @ 0x200008
 14704                           ;	unspecified, using default values
 14705  200008                     	org	2097160
 14706  200008  0FFF               	dw	4095
 14707                           
 14708                           ;Config register IDLOC5 @ 0x20000A
 14709                           ;	unspecified, using default values
 14710  20000A                     	org	2097162
 14711  20000A  0FFF               	dw	4095
 14712                           
 14713                           ;Config register IDLOC6 @ 0x20000C
 14714                           ;	unspecified, using default values
 14715  20000C                     	org	2097164
 14716  20000C  0FFF               	dw	4095
 14717                           
 14718                           ;Config register IDLOC7 @ 0x20000E
 14719                           ;	unspecified, using default values
 14720  20000E                     	org	2097166
 14721  20000E  0FFF               	dw	4095
 14722                           
 14723                           	psect	config
 14724                           
 14725                           ;Config register CONFIG1L @ 0x300000
 14726                           ;	External Oscillator mode Selection bits
 14727                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
 14728                           ;	Power-up default value for COSC bits
 14729                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
 14730  300000                     	org	3145728
 14731  300000  AA                 	db	170
 14732                           
 14733                           ;Config register CONFIG1H @ 0x300001
 14734                           ;	unspecified, using default values
 14735                           ;	Clock Out Enable bit
 14736                           ;	CLKOUTEN = 0x1, unprogrammed default
 14737                           ;	Clock Switch Enable bit
 14738                           ;	CSWEN = 0x1, unprogrammed default
 14739                           ;	Fail-Safe Clock Monitor Enable bit
 14740                           ;	FCMEN = 0x1, unprogrammed default
 14741  300001                     	org	3145729
 14742  300001  FF                 	db	255
 14743                           
 14744                           ;Config register CONFIG2L @ 0x300002
 14745                           ;	unspecified, using default values
 14746                           ;	Master Clear Enable bit
 14747                           ;	MCLRE = 0x1, unprogrammed default
 14748                           ;	Power-up Timer Enable bit
 14749                           ;	PWRTE = 0x1, unprogrammed default
 14750                           ;	Low-power BOR enable bit
 14751                           ;	LPBOREN = 0x1, unprogrammed default
 14752                           ;	Brown-out Reset Enable bits
 14753                           ;	BOREN = 0x3, unprogrammed default
 14754  300002                     	org	3145730
 14755  300002  FF                 	db	255
 14756                           
 14757                           ;Config register CONFIG2H @ 0x300003
 14758                           ;	unspecified, using default values
 14759                           ;	Brown Out Reset Voltage selection bits
 14760                           ;	BORV = 0x3, unprogrammed default
 14761                           ;	ZCD Disable bit
 14762                           ;	ZCD = 0x1, unprogrammed default
 14763                           ;	PPSLOCK bit One-Way Set Enable bit
 14764                           ;	PPS1WAY = 0x1, unprogrammed default
 14765                           ;	Stack Full/Underflow Reset Enable bit
 14766                           ;	STVREN = 0x1, unprogrammed default
 14767                           ;	Debugger Enable bit
 14768                           ;	DEBUG = 0x1, unprogrammed default
 14769                           ;	Extended Instruction Set Enable bit
 14770                           ;	XINST = 0x1, unprogrammed default
 14771  300003                     	org	3145731
 14772  300003  FF                 	db	255
 14773                           
 14774                           ;Config register CONFIG3L @ 0x300004
 14775                           ;	WDT Period Select bits
 14776                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
 14777                           ;	WDT operating mode
 14778                           ;	WDTE = OFF, WDT Disabled
 14779  300004                     	org	3145732
 14780  300004  9F                 	db	159
 14781                           
 14782                           ;Config register CONFIG3H @ 0x300005
 14783                           ;	unspecified, using default values
 14784                           ;	WDT Window Select bits
 14785                           ;	WDTCWS = 0x7, unprogrammed default
 14786                           ;	WDT input clock selector
 14787                           ;	WDTCCS = 0x7, unprogrammed default
 14788  300005                     	org	3145733
 14789  300005  FF                 	db	255
 14790                           
 14791                           ;Config register CONFIG4L @ 0x300006
 14792                           ;	unspecified, using default values
 14793                           ;	Write Protection Block 0
 14794                           ;	WRT0 = 0x1, unprogrammed default
 14795                           ;	Write Protection Block 1
 14796                           ;	WRT1 = 0x1, unprogrammed default
 14797                           ;	Write Protection Block 2
 14798                           ;	WRT2 = 0x1, unprogrammed default
 14799                           ;	Write Protection Block 3
 14800                           ;	WRT3 = 0x1, unprogrammed default
 14801                           ;	Write Protection Block 3
 14802                           ;	WRT4 = 0x1, unprogrammed default
 14803                           ;	Write Protection Block 3
 14804                           ;	WRT5 = 0x1, unprogrammed default
 14805                           ;	Write Protection Block 3
 14806                           ;	WRT6 = 0x1, unprogrammed default
 14807                           ;	Write Protection Block 3
 14808                           ;	WRT7 = 0x1, unprogrammed default
 14809  300006                     	org	3145734
 14810  300006  FF                 	db	255
 14811                           
 14812                           ;Config register CONFIG4H @ 0x300007
 14813                           ;	unspecified, using default values
 14814                           ;	Configuration Register Write Protection bit
 14815                           ;	WRTC = 0x1, unprogrammed default
 14816                           ;	Boot Block Write Protection bit
 14817                           ;	WRTB = 0x1, unprogrammed default
 14818                           ;	Data EEPROM Write Protection bit
 14819                           ;	WRTD = 0x1, unprogrammed default
 14820                           ;	Scanner Enable bit
 14821                           ;	SCANE = 0x1, unprogrammed default
 14822                           ;	Low Voltage Programming Enable bit
 14823                           ;	LVP = 0x1, unprogrammed default
 14824  300007                     	org	3145735
 14825  300007  FF                 	db	255
 14826                           
 14827                           ;Config register CONFIG5L @ 0x300008
 14828                           ;	unspecified, using default values
 14829                           ;	UserNVM Program Memory Code Protection bit
 14830                           ;	CP = 0x1, unprogrammed default
 14831                           ;	DataNVM Memory Code Protection bit
 14832                           ;	CPD = 0x1, unprogrammed default
 14833  300008                     	org	3145736
 14834  300008  FF                 	db	255
 14835                           
 14836                           ;Config register CONFIG5H @ 0x300009
 14837                           ;	unspecified, using default values
 14838  300009                     	org	3145737
 14839  300009  FF                 	db	255
 14840                           
 14841                           ;Config register CONFIG6L @ 0x30000A
 14842                           ;	unspecified, using default values
 14843                           ;	Table Read Protection Block 0
 14844                           ;	EBTR0 = 0x1, unprogrammed default
 14845                           ;	Table Read Protection Block 1
 14846                           ;	EBTR1 = 0x1, unprogrammed default
 14847                           ;	Table Read Protection Block 2
 14848                           ;	EBTR2 = 0x1, unprogrammed default
 14849                           ;	Table Read Protection Block 3
 14850                           ;	EBTR3 = 0x1, unprogrammed default
 14851                           ;	Table Read Protection Block 4
 14852                           ;	EBTR4 = 0x1, unprogrammed default
 14853                           ;	Table Read Protection Block 5
 14854                           ;	EBTR5 = 0x1, unprogrammed default
 14855                           ;	Table Read Protection Block 6
 14856                           ;	EBTR6 = 0x1, unprogrammed default
 14857                           ;	Table Read Protection Block 7
 14858                           ;	EBTR7 = 0x1, unprogrammed default
 14859  30000A                     	org	3145738
 14860  30000A  FF                 	db	255
 14861                           
 14862                           ;Config register CONFIG6H @ 0x30000B
 14863                           ;	unspecified, using default values
 14864                           ;	Boot Block Table Read Protection bit
 14865                           ;	EBTRB = 0x1, unprogrammed default
 14866  30000B                     	org	3145739
 14867  30000B  FF                 	db	255
 14868                           tosu	equ	0xFFF
 14869                           tosh	equ	0xFFE
 14870                           tosl	equ	0xFFD
 14871                           stkptr	equ	0xFFC
 14872                           pclatu	equ	0xFFB
 14873                           pclath	equ	0xFFA
 14874                           pcl	equ	0xFF9
 14875                           tblptru	equ	0xFF8
 14876                           tblptrh	equ	0xFF7
 14877                           tblptrl	equ	0xFF6
 14878                           tablat	equ	0xFF5
 14879                           prodh	equ	0xFF4
 14880                           prodl	equ	0xFF3
 14881                           indf0	equ	0xFEF
 14882                           postinc0	equ	0xFEE
 14883                           postdec0	equ	0xFED
 14884                           preinc0	equ	0xFEC
 14885                           plusw0	equ	0xFEB
 14886                           fsr0h	equ	0xFEA
 14887                           fsr0l	equ	0xFE9
 14888                           wreg	equ	0xFE8
 14889                           indf1	equ	0xFE7
 14890                           postinc1	equ	0xFE6
 14891                           postdec1	equ	0xFE5
 14892                           preinc1	equ	0xFE4
 14893                           plusw1	equ	0xFE3
 14894                           fsr1h	equ	0xFE2
 14895                           fsr1l	equ	0xFE1
 14896                           bsr	equ	0xFE0
 14897                           indf2	equ	0xFDF
 14898                           postinc2	equ	0xFDE
 14899                           postdec2	equ	0xFDD
 14900                           preinc2	equ	0xFDC
 14901                           plusw2	equ	0xFDB
 14902                           fsr2h	equ	0xFDA
 14903                           fsr2l	equ	0xFD9
 14904                           status	equ	0xFD8

Data Sizes:
    Strings     14
    Constant    4
    Data        1
    BSS         110
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     94      94
    BANK0           160    152     159
    BANK1           256     66     170
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    distance_measure@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    distance_measure@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    amb_light_measure@amb	PTR struct color_rgb size(2) Largest target is 8
		 -> main@rgb(BANK1[8]), main@amb(BANK1[8]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp...source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp...buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_2(CODE[6]), STR_1(CODE[14]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 14
		 -> STR_2(CODE[6]), STR_1(CODE[14]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_2(CODE[6]), STR_1(CODE[14]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 100
		 -> color_predict@buf(BANK0[100]), color_display@buf(BANK0[100]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S2789$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S2789$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    calibration_motor@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    calibration_motor@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    test_function@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    test_function@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    test_function@m	PTR struct color_rgb size(2) Largest target is 8
		 -> main@rgb(BANK1[8]), 

    test_function@w	PTR struct white_card size(2) Largest target is 28
		 -> main@white(BANK1[28]), 

    test_action@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    test_action@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    goback@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    goback@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    action@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    action@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    short_burst@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    short_burst@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    motorR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhllll[1]), PWM6DCH(BITBIGSFRhllll[1]), 

    motorL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhllll[1]), PWM6DCH(BITBIGSFRhllll[1]), 

    sendStringSerial4@string	PTR unsigned char  size(2) Largest target is 100
		 -> color_predict@buf(BANK0[100]), color_display@buf(BANK0[100]), 

    short_reverse@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    short_reverse@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    fullSpeedBack@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    fullSpeedBack@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhllll[1]), PWM6DCH(BITBIGSFRhllll[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    fullSpeedBack@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    fullSpeedBack@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhllll[1]), PWM6DCH(BITBIGSFRhllll[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    fullSpeedAhead_test@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    fullSpeedAhead_test@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    fullSpeedAhead@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    fullSpeedAhead@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhllll[1]), PWM6DCH(BITBIGSFRhllll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    fullSpeedAhead@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    fullSpeedAhead@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhllll[1]), PWM6DCH(BITBIGSFRhllll[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    turnRight@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhllll[1]), PWM6DCH(BITBIGSFRhllll[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    turnRight@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhllll[1]), PWM6DCH(BITBIGSFRhllll[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    turnLeft@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhllll[1]), PWM6DCH(BITBIGSFRhllll[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    turnLeft@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhllll[1]), PWM6DCH(BITBIGSFRhllll[1]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    stop@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhllll[1]), PWM6DCH(BITBIGSFRhllll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    stop@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhllll[1]), PWM6DCH(BITBIGSFRhllll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    setMotorPWM@m.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhllll[1]), PWM6DCH(BITBIGSFRhllll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), main@motorL(BANK1[9]), 

    initDCmotors_parameter@motorR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    initDCmotors_parameter@motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhllll[1]), PWM6DCH(BITBIGSFRhllll[1]), 

    initDCmotors_parameter@motorR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    initDCmotors_parameter@motorL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    initDCmotors_parameter@motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhllll[1]), PWM6DCH(BITBIGSFRhllll[1]), 

    initDCmotors_parameter@motorL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    motorR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhllll[1]), PWM6DCH(BITBIGSFRhllll[1]), 

    S376DC_motor$dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    motorL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    S376DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhllll[1]), PWM6DCH(BITBIGSFRhllll[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhllll[1]), PWM6DCH(BITBIGSFRhllll[1]), 

    verify_color@w	PTR struct white_card size(2) Largest target is 28
		 -> main@white(BANK1[28]), 

    verify_color@m	PTR struct color_rgb size(2) Largest target is 8
		 -> main@rgb(BANK1[8]), 

    detect_color@w	PTR struct white_card size(2) Largest target is 28
		 -> main@white(BANK1[28]), 

    detect_color@m	PTR struct color_rgb size(2) Largest target is 8
		 -> main@rgb(BANK1[8]), 

    calibrate_white@w	PTR struct white_card size(2) Largest target is 28
		 -> main@white(BANK1[28]), 

    color_display@m	PTR struct color_rgb size(2) Largest target is 8
		 -> main@rgb(BANK1[8]), 

    color_data_collection@m	PTR struct color_rgb size(2) Largest target is 8
		 -> main@rgb(BANK1[8]), 

    read_color@m	PTR struct color_rgb size(2) Largest target is 8
		 -> main@rgb(BANK1[8]), 


Critical Paths under _main in COMRAM

    _color_data_collection->_color_display
    _read_color->_color_read_Blue
    _read_color->_color_read_Clear
    _read_color->_color_read_Green
    _read_color->_color_read_Red
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _sendStringSerial4->_sendCharSerial4
    _calibrate_white->_color_read_Blue
    _calibrate_white->_color_read_Clear
    _calibrate_white->_color_read_Green
    _calibrate_white->_color_read_Red
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _lroundf->___fltol
    _roundf->___flmul
    ___flsub->___fladd
    ___flmul->___fldiv
    ___fltol->_roundf
    _color_read_Clear->_I2C_2_Master_Read
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    ___fldiv->___xxtofl
    _short_burst->_stop
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _calibration_motor->_test_action
    _test_action->_turnLeft
    _fullSpeedAhead_test->_stop
    _action->_goback
    _goback->_turnLeft
    _turnRight->_stop
    _turnLeft->_stop
    _short_reverse->_stop
    _stop->_setMotorPWM
    _fullSpeedBack->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul

Critical Paths under _HighISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_test_function
    _verify_color->_detect_color
    _test_function->_color_data_collection
    _distance_measure->_lroundf
    _detect_color->_compare
    _compare->_lroundf
    _color_data_collection->_color_predict
    _color_predict->_sprintf
    _color_display->_sprintf
    _amb_light_measure->_lroundf
    _lroundf->___fltol

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                68    68      0  304592
                                            150 BANK0      2     2      0
                                              0 BANK1     66    66      0
                  _I2C_2_Master_Init
                    _Interrupts_init
                            _LED_OFF
                        _Timer0_init
                             _action
                  _amb_light_measure
                    _buggylight_init
                    _calibrate_white
                  _calibration_motor
                   _color_click_init
                       _detect_color
                   _distance_measure
                     _fullSpeedAhead
                    _initDCmotorsPWM
             _initDCmotors_parameter
                         _initUSART4
                           _pin_init
                        _short_burst
                               _stop
                      _test_function
                       _verify_color
 ---------------------------------------------------------------------------------
 (1) _verify_color                                        11     7      4   26931
                                             50 BANK0      9     5      4
                       _detect_color
 ---------------------------------------------------------------------------------
 (1) _test_function                                       16     8      8  104761
                                            134 BANK0     16     8      8
                              _LED_C
                  _amb_light_measure
                    _calibrate_white
              _color_data_collection
                      _color_display
                      _color_predict
                       _detect_color
                   _distance_measure
                     _fullSpeedAhead
                         _read_color
                               _stop
 ---------------------------------------------------------------------------------
 (2) _distance_measure                                    19    13      6   19139
                                             10 BANK0     19    13      6
                              _LED_C
                            ___flmul
                           ___xxtofl
                   _color_read_Clear
                   _color_read_Green
                            _lroundf
 ---------------------------------------------------------------------------------
 (2) _detect_color                                        33    29      4   26645
                                             17 BANK0     33    29      4
                              _LED_B
                              _LED_G
                              _LED_R
                            ___fldiv
                            ___flmul
                           ___xxtofl
                            _compare
                            _lroundf
                         _read_color
                       _toggle_light
 ---------------------------------------------------------------------------------
 (3) _compare                                              7     1      6    1936
                                             10 BANK0      7     1      6
                            ___fldiv (ARG)
                            ___flmul (ARG)
                           ___xxtofl (ARG)
                            _lroundf (ARG)
 ---------------------------------------------------------------------------------
 (2) _color_data_collection                               12    10      2   15832
                                             89 COMRAM     4     2      2
                                            126 BANK0      8     8      0
                              _LED_B
                              _LED_C
                              _LED_G
                              _LED_R
                      _color_display
                      _color_predict
                         _read_color
 ---------------------------------------------------------------------------------
 (3) _read_color                                           2     0      2    1148
                                             11 COMRAM     2     0      2
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (2) _color_predict                                      101   101      0    6899
                                             25 BANK0    101   101      0
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _color_display                                      102   100      2    7345
                                             87 COMRAM     2     0      2
                                             25 BANK0    100   100      0
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             27    15     12    6608
                                              0 BANK0     25    13     12
                           _vfprintf
 ---------------------------------------------------------------------------------
 (4) _vfprintf                                             8     2      6    6105
                                             79 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (5) _vfpfcnvrt                                           42    36      6    5751
                                             63 COMRAM    16    10      6
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (6) _dtoa                                                36    26     10    4358
                                             27 COMRAM    36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (7) _pad                                                 11     5      6    2709
                                             16 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (8) _strlen                                               4     2      2     166
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (8) _fputs                                                7     3      4    1235
                                              9 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (6) _fputc                                                9     5      4     834
                                              0 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (7) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (7) _abs                                                  4     2      2     142
                                             18 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (7) ___aomod                                             18     2     16     448
                                              0 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (7) ___aodiv                                             26    10     16     452
                                              0 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (3) _sendStringSerial4                                    2     0      2     219
                                              1 COMRAM     2     0      2
                    _sendCharSerial4
 ---------------------------------------------------------------------------------
 (4) _sendCharSerial4                                      1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _calibrate_white                                      4     2      2    1525
                                             11 COMRAM     4     2      2
                              _LED_B
                              _LED_C
                              _LED_G
                            _LED_OFF
                              _LED_R
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
                       _toggle_light
 ---------------------------------------------------------------------------------
 (4) _color_read_Red                                       7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (4) _color_read_Green                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (4) _color_read_Blue                                      7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _LED_R                                                2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _LED_OFF                                              2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _LED_G                                                2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _LED_B                                                2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _amb_light_measure                                   14    12      2   18815
                                             10 BANK0     14    12      2
                              _LED_C
                            ___fldiv
                           ___xxtofl
                   _color_read_Clear
                            _lroundf
                       _toggle_light
 ---------------------------------------------------------------------------------
 (3) _lroundf                                              4     0      4   13096
                                              6 BANK0      4     0      4
                            ___fldiv (ARG)
                            ___fltol
                           ___xxtofl (ARG)
                             _roundf
 ---------------------------------------------------------------------------------
 (4) _roundf                                              26    22      4   11629
                                             64 COMRAM    26    22      4
                            ___fladd
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
 ---------------------------------------------------------------------------------
 (5) ___flsub                                              8     0      8    3649
                                             16 COMRAM     8     0      8
                            ___fladd
 ---------------------------------------------------------------------------------
 (6) ___fladd                                             16     8      8    3326
                                              0 COMRAM    16     8      8
 ---------------------------------------------------------------------------------
 (5) ___flneg                                              4     0      4     197
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (5) ___flmul                                             25    17      8    3332
                                             39 COMRAM    25    17      8
                            ___fldiv (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (5) ___flge                                              12     4      8     486
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (4) ___fltol                                             10     6      4     305
                                             90 COMRAM     4     0      4
                                              0 BANK0      6     6      0
                             _roundf (ARG)
 ---------------------------------------------------------------------------------
 (4) _color_read_Clear                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (5) _I2C_2_Master_Read                                    3     3      0      45
                                              1 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4    1910
                                              0 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    2835
                                             14 COMRAM    25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) _LED_C                                                2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _short_burst                                          6     2      4    6834
                                             31 COMRAM     6     2      4
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (1) _pin_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotors_parameter                               4     0      4     416
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      76
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     294
                                              4 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     294
                                              2 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_2_Master_Write                                   1     1      0      22
                                              1 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (5) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (5) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (6) _I2C_2_Master_Idle                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _calibration_motor                                    6     2      4   27300
                                             54 COMRAM     6     2      4
                        _test_action
 ---------------------------------------------------------------------------------
 (2) _test_action                                          4     0      4   27104
                                             50 COMRAM     4     0      4
                _fullSpeedAhead_test
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (3) _fullSpeedAhead_test                                  6     2      4    8202
                                             31 COMRAM     6     2      4
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (1) _buggylight_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _action                                               5     1      4   64501
                                             58 COMRAM     5     1      4
                             _goback
                      _short_reverse
                       _toggle_light
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (3) _toggle_light                                         5     4      1     613
                                              0 COMRAM     5     4      1
 ---------------------------------------------------------------------------------
 (2) _goback                                               8     4      4   35220
                                             50 COMRAM     8     4      4
                     _fullSpeedAhead
                      _short_reverse
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (3) _turnRight                                           18    13      5    8593
                                             31 COMRAM    18    13      5
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (3) _turnLeft                                            19    14      5    9277
                                             31 COMRAM    19    14      5
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _short_reverse                                        7     2      5    9744
                                             31 COMRAM     7     2      5
                      _fullSpeedBack
                               _stop
 ---------------------------------------------------------------------------------
 (2) _stop                                                 6     2      4    3579
                                             25 COMRAM     6     2      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _fullSpeedBack                                        5     1      4    2363
                                             25 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _fullSpeedAhead                                       5     1      4    3015
                                             25 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                         11     9      2    2035
                                             14 COMRAM    11     9      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     447
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     496
                                              6 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _HighISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_2_Master_Init
   _Interrupts_init
   _LED_OFF
   _Timer0_init
   _action
     _goback
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _short_reverse
         _fullSpeedBack
           _setMotorPWM
         _stop
           _setMotorPWM
       _stop
       _turnLeft
         _setMotorPWM
         _stop
       _turnRight
         _setMotorPWM
         _stop
     _short_reverse
     _toggle_light
     _turnLeft
     _turnRight
   _amb_light_measure
     _LED_C
     ___fldiv
       ___xxtofl (ARG)
     ___xxtofl
     _color_read_Clear
       _I2C_2_Master_Read
         _I2C_2_Master_Idle
       _I2C_2_Master_RepStart
         _I2C_2_Master_Idle
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
     _lroundf
       ___fldiv (ARG)
       ___fltol (ARG)
         _roundf (ARG)
           ___fladd
           ___flge
           ___flmul
             ___fldiv (ARG)
             ___xxtofl (ARG)
           ___flneg
           ___flsub
             ___fladd
       ___xxtofl (ARG)
       _roundf (ARG)
     _toggle_light
   _buggylight_init
   _calibrate_white
     _LED_B
     _LED_C
     _LED_G
     _LED_OFF
     _LED_R
     _color_read_Blue
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Clear
     _color_read_Green
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Red
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _toggle_light
   _calibration_motor
     _test_action
       _fullSpeedAhead_test
         _fullSpeedAhead
         _stop
       _turnLeft
       _turnRight
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _detect_color
     _LED_B
     _LED_G
     _LED_R
     ___fldiv
     ___flmul
     ___xxtofl
     _compare
       ___fldiv (ARG)
       ___flmul (ARG)
       ___xxtofl (ARG)
       _lroundf (ARG)
     _lroundf
     _read_color
       _color_read_Blue
       _color_read_Clear
       _color_read_Green
       _color_read_Red
     _toggle_light
   _distance_measure
     _LED_C
     ___flmul
     ___xxtofl
     _color_read_Clear
     _color_read_Green
     _lroundf
   _fullSpeedAhead
   _initDCmotorsPWM
   _initDCmotors_parameter
   _initUSART4
   _pin_init
   _short_burst
     _fullSpeedAhead
     _stop
   _stop
   _test_function
     _LED_C
     _amb_light_measure
     _calibrate_white
     _color_data_collection
       _LED_B
       _LED_C
       _LED_G
       _LED_R
       _color_display
         _sendStringSerial4
           _sendCharSerial4
         _sprintf
           _vfprintf
             _vfpfcnvrt
               _dtoa
                 ___aodiv
                 ___aomod
                 _abs
                   ___aomod (ARG)
                 _pad
                   _fputc
                     _putch
                   _fputs
                     _fputc
                   _strlen
               _fputc
       _color_predict
         _sendStringSerial4
         _sprintf
       _read_color
     _color_display
     _color_predict
     _detect_color
     _distance_measure
     _fullSpeedAhead
     _read_color
     _stop
   _verify_color
     _detect_color

 _HighISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      57        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     42      AA       7       66.4%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     98      9F       5       99.4%
BITBIGSFRlllllh     8F      0       0      41        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     5E      5E       1      100.0%
BITBIGSFRllllll     32      0       0      46        0.0%
BITBIGSFRllllll     2A      0       0      50        0.0%
BITBIGSFRllllll     26      0       0      55        0.0%
BITBIGSFRllllll     20      0       0      44        0.0%
BITBIGSFRhhhl       1B      0       0      33        0.0%
BITBIGSFRhlh        17      0       0      35        0.0%
BITBIGSFRhhl        13      0       0      34        0.0%
BITBIGSFRhlllh      11      0       0      37        0.0%
BITBIGSFRhhhh        D      0       0      32        0.0%
BITBIGSFRllllll      C      0       0      45        0.0%
BITBIGSFRllllll      B      0       0      53        0.0%
BITBIGSFRllllll      9      0       0      52        0.0%
BITBIGSFRlllllh      8      0       0      42        0.0%
BITBIGSFRllllll      6      0       0      54        0.0%
BITBIGSFRllllll      6      0       0      49        0.0%
BITBIGSFRllllll      5      0       0      48        0.0%
BITBIGSFRhllll       5      0       0      38        0.0%
BITBIGSFRllllll      3      0       0      51        0.0%
BITBIGSFRllllll      3      0       0      47        0.0%
BITBIGSFRhllh        1      0       0      36        0.0%
BITBIGSFRllllll      1      0       0      43        0.0%
BITBIGSFRllllh       1      0       0      40        0.0%
BITBIGSFRllh         1      0       0      39        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1A7      56        0.0%
DATA                 0      0     1A7       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.35 build 20211206165544 
Symbol Table                                                                                   Tue Mar 15 15:27:53 2022

                ?_short_reverse 0020                  _color_read_Red 57DE                    ___fldiv@aexp 0027  
                  ___fldiv@bexp 0026                    ___fldiv@sign 001F                 _color_read_Blue 587E  
                 _color_predict 5C74                              l55 5E62                              l72 5DF8  
                            l81 587C                              l66 38F2                              l58 38E0  
                            l90 5D58                              l75 582C                              l84 591C  
                            l69 5C42                              l93 5D38                              l78 58CC  
                            l87 578A                              l96 5DB8                              l99 5D98  
                  ___awdiv@sign 000C             ___wmul@multiplicand 0003                _color_read_Clear 58CE  
              _color_read_Green 582E               ??_Interrupts_init 0001                             l102 5D78  
                           l200 5E84                             l113 4388                             l122 5CA0  
                           l203 5E8E                             l116 56CA                             l125 3AFC  
                           l206 5E6E                             l160 5198                             l313 4808  
                           l305 4778                             l209 59E8                             l145 1A16  
                           l161 519A                             l153 565A                             l324 5324  
                           l316 4832                             l148 5B64                             l341 554A  
                           l309 47C0                             l157 4C46                             l149 5B66  
                           l262 5A6C                             l335 55DE                             l327 5AAE  
                           l191 5CCC                             l272 3CD0                             l280 54A4  
                           l265 500A                             l194 5CF2                             l291 44A0  
                           l531 5A2A                             l188 5CCA                             l364 5E16  
                           l460 3422                             l197 5E98                             l373 5E38  
                           l382 5C72                             l462 3430                             l295 44E8  
                           l287 4458                             l543 30A0                             l376 5E4C  
                           l456 33E0                             l609 5E34                             l465 3492  
                           l298 451E                             l546 5DD8                             l458 33EE  
                           l563 2D74                             l555 2D78                             l803 49BA  
                           l475 3534                             l467 34A0                             l573 2DB4  
                           l592 5E7A                             l920 53E8                             l656 3E8A  
                           l816 4B1E                             l569 2DA6                             l681 4F20  
                           l683 4EF0                             l677 4E54                             l686 4F38  
                           l678 4EBA                             l689 5D18                             l954 4E0C  
                           l963 5BD8                             l959 4E52                             l986 4D4E  
             verify_color@color 009A                ?_calibrate_white 000C        __end_of_distance_measure 519C  
                           _abs 5AB0                             _pad 519C                             prod 000FF3  
                           wreg 000FE8                    ___flmul@aexp 0039                    ___flmul@bexp 003A  
                  ___flmul@sign 0034                    ___flmul@temp 003F                    ___flmul@prod 003B  
               __end_of_LED_OFF 5D5A                    ___fltol@exp1 0065                            ?_abs 0013  
                          l1310 2192                            l1303 1F9C                            l1320 22C2  
                          l1312 220A                            l1313 21F8                            l1217 1C06  
                          l1234 1D20                            l1226 1ED6                            l1218 1BF4  
                          l1402 5224                            l1410 3142                            l1307 2300  
                          l1243 1DF0                            l1219 1BBA                            l1244 1DDE  
                          l1404 5260                            l1412 314A                            l1430 3384  
                          l1271 2A48                            l1351 412E                            l1344 4096  
                          l4001 5E86                            l1273 28A8                            l1282 28EE  
                          l4003 5E8A                            l1347 41F2                            l4011 59AE  
                          l1259 5962                            l1451 5AEE                            l1443 5724  
                          l1284 2966                            l1276 286C                            l1444 572C  
                          l1372 57DC                            l1285 2954                            l4013 59B6  
                          l4005 5E7C                            l4101 2062                            l1365 5BA0  
                          l1437 403E                            l1358 418A                            l4031 3BE2  
                          l4023 3AFE                            l4015 59BE                            l4007 5E80  
                          l4111 20C4                            l4103 206E                            l1463 50D4  
                          l1471 59A6                            l1448 5AE6                            l4033 3BFE  
                          l4025 3B1A                            l4017 59E4                            l4009 59AA  
                          l4121 215A                            l4113 20D0                            l4105 207E  
                          l4041 1ED8                            l4201 5BB8                            l5001 18A0  
                          l1482 26AE                            l1474 5E9A                            l4035 3C68  
                          l4027 3B7C                            l4019 59E6                            l4131 21B0  
                          l4123 2178                            l4115 20EC                            l4107 2098  
                          l4051 1F14                            l4043 1EE4                            l4203 5BC8  
                          l4211 56E2                            l5011 18F2                            l5003 18B6  
                          l4029 3BC2                            l4301 554C                            l5101 2AF6  
                          l4141 221A                            l4133 21B4                            l4125 2182  
                          l4117 2116                            l4109 20A8                            l4061 1F46  
                          l4053 1F24                            l4045 1EF2                            l4221 587E  
                          l4037 5E38                            l3501 503A                            l4213 5708  
                          l5021 198C                            l5005 18CC                            l5013 18FA  
                          l4303 5570                            l4311 55AE                            l4151 227C  
                          l4143 2226                            l4135 21C2                            l4127 2190  
                          l4119 214C                            l4071 1F86                            l4063 1F54  
                          l4055 1F2A                            l4047 1EF4                            l4223 58C4  
                          l4215 57DE                            l4039 5E48                            l3503 5058  
                          l3511 5970                            l1495 5C0E                            l1399 51E2  
                          l4207 56CC                            l5031 1A08                            l5023 1992  
                          l5007 18D4                            l5015 18FE                            l4313 55C6  
                          l4305 5588                            l5121 2BE0                            l5113 2B64  
                          l5105 2B0C                            l4401 369E                            l5201 4F56  
                          l4233 58CE                            l4321 4C74                            l4161 22E4  
                          l4153 2290                            l4145 2234                            l4137 21F0  
                          l4129 21A2                            l4081 1FD0                            l4073 1F8C  
                          l4065 1F56                            l4057 1F3A                            l4049 1F04  
                          l5041 4B44                            l4217 5824                            l3601 4ADE  
                          l3505 508E                            l3513 5982                            l3521 5BEA  
                          l4209 56D4                            l4241 579E                            l5033 1A12  
                          l5025 19C0                            l5017 192C                            l5009 18EA  
                          l4307 5594                            l5131 2C6C                            l5115 2B88  
                          l5107 2B0E                            l4411 3758                            l4403 36D6  
                          l5203 4F6A                            l5211 5DFA                            l4235 5914  
                          l4331 4CC2                            l4323 4C9E                            l4315 4C48  
                          l4163 22E6                            l4155 22AA                            l4147 225E  
                          l4091 2020                            l4083 1FDC                            l4075 1FAC  
                          l4067 1F66                            l4059 1F40                            l4171 591E  
                          l5051 4B90                            l5043 4B48                            l4227 582E  
                          l4251 5C44                            l3531 4846                            l3603 4AFE  
                          l3515 5986                            l3523 5C02                            l3611 51C0  
                          l4243 57A6                            l5027 19EE                            l5019 195C  
                          l3701 5D10                            l4309 55A0                            l4261 53EE  
                          l4501 4438                            l5133 2C90                            l5125 2C14  
                          l5109 2B30                            l4421 37F4                            l4413 376A  
                          l4405 36E8                            l5205 4F7E                            l5221 5E14  
                          l5213 5E04                            l4341 4CEE                            l4325 4CA0  
                          l4317 4C60                            l4181 4D8E                            l4157 22C6  
                          l4165 22EC                            l4149 2262                            l4093 202C  
                          l4085 1FE6                            l4077 1FBC                            l4069 1F76  
                          l4173 592E                            l5061 4C3E                            l5053 4BA8  
                          l5045 4B60                            l5037 4B20                            l4229 5874  
                          l4253 5C48                            l3541 489C                            l3533 4866  
                          l3509 5964                            l3517 5BDA                            l3621 5206  
                          l3613 51CE                            l4245 57AE                            l5029 19F4  
                          l5301 4640                            l5223 5E18                            l4271 5442  
                          l4263 5406                            l4511 448C                            l4503 4444  
                          l5151 2D92                            l5143 2D1C                            l5127 2C38  
                          l5119 2BBC                            l4431 3890                            l4423 3812  
                          l4415 378E                            l4407 3708                            l5207 4F8E  
                          l5215 5E06                            l5231 5DBA                            l5311 59EA  
                          l4351 4D1E                            l4327 4CB0                            l4191 4DFA  
                          l4183 4DBC                            l4167 22F0                            l4159 22D6  
                          l4095 2038                            l4087 1FFC                            l3711 1A34  
                          l5055 4BB4                            l5047 4B6C                            l5039 4B3A  
                          l4255 5C56                            l3551 48F0                            l3543 48A8  
                          l3535 486A                            l3527 4834                            l3631 5ACA  
                          l3519 5BE6                            l3623 5234                            l3615 51DA  
                          l3607 519C                            l4247 57CA                            l4239 578C  
                          l5071 510A                            l5303 4660                            l5225 5E20  
                          l4281 5262                            l4273 544E                            l4265 5412  
                          l4521 44E4                            l4513 449C                            l4505 4454  
                          l5153 2DA0                            l5145 2D40                            l5137 2CC4  
                          l4433 38A8                            l4425 382A                            l4417 37A6  
                          l4409 3720                            l5321 2DD8                            l5241 4EA2  
                          l5233 4E66                            l5161 5C14                            l5209 4FA2  
                          l5217 5E10                            l5313 59FE                            l4601 26EC  
                          l4353 4D2E                            l4337 4CDA                            l4329 4CB4  
                          l4193 4E4A                            l4185 4DCC                            l4177 4D50  
                          l4097 2046                            l4089 2008                            l3801 1BE8  
                          l3713 1A44                            l3721 1A6E                            l3705 1A18  
                          l4361 2322                            l5057 4BCC                            l5049 4B84  
                          l4441 5D40                            l4257 5C5A                            l3561 4964  
                          l3553 4902                            l3545 48C6                            l3537 4878  
                          l3529 4838                            l3625 5248                            l3617 51EE  
                          l3609 51AC                            l3641 311A                            l3633 30A2  
                          l5081 5194                            l5073 5116                            l5065 50D6  
                          l5305 4670                            l5401 33AA                            l5227 5E2A  
                          l4291 52CE                            l4283 5286                            l4267 542A  
                          l4275 545C                            l4259 53EA                            l4523 450A  
                          l4515 44B6                            l4507 446E                            l4531 46F2  
                          l5139 2CE8                            l5091 2A92                            l4435 38DE  
                          l4427 3860                            l4419 37E2                            l5331 2E66  
                          l5323 2E08                            l5155 3CD2                            l5243 4EA8  
                          l5235 4E7C                            l5163 5C1E                            l5219 5E12  
                          l5315 5A16                            l4611 271C                            l4603 26FC  
                          l4355 4D3E                            l4347 4D02                            l4339 4CE4  
                          l4195 4E50                            l4187 4DDA                            l4179 4D7E  
                          l4099 2052                            l3811 1C38                            l3803 1BF2  
                          l3731 1A9E                            l3723 1A7E                            l3715 1A54  
                          l3707 1A24                            l4371 23FA                            l4363 236A  
                          l5059 4C34                            l4451 5D7A                            l4443 5D1A  
                          l3555 4930                            l3547 48CE                            l3563 496A  
                          l3539 4898                            l3571 49BC                            l3619 5202  
                          l3651 3172                            l3643 311C                            l3635 30C2  
                          l5075 511A                            l5067 50EC                            l5307 4684  
                          l5171 55FC                            l5411 33D8                            l5403 33AE  
                          l5229 5E70                            l4293 52DA                            l4285 529E  
                          l4277 5474                            l4269 5436                            l4517 44C8  
                          l4509 4480                            l4541 473E                            l4533 46FE  
                          l4525 46AA                            l5149 2D7E                            l5093 2A9E  
                          l5085 2A4A                            l4429 3872                            l5341 2EDE  
                          l5333 2E80                            l5325 2E22                            l5317 2DB8  
                          l5157 5E4E                            l5253 4EFE                            l5237 4E8A  
                          l5165 5C2E                            l4701 2990                            l4621 2752  
                          l4613 2722                            l4605 26FE                            l4349 4D0E  
                          l4189 4DEC                            l3901 1EC4                            l3821 1C74  
                          l3813 1C48                            l3805 1C14                            l3741 1ADE  
                          l3733 1AAC                            l3725 1A84                            l3717 1A64  
                          l3709 1A32                            l4381 259E                            l4365 237E  
                          l4453 5D80                            l4445 5D20                            l3565 497A  
                          l3557 4950                            l3549 48E2                            l3581 4A00  
                          l3573 49C0                            l3629 5AB0                            l3661 3212  
                          l3653 3178                            l3645 3136                            l3637 30EA  
                          l4461 56BE                            l4437 572E                            l5077 5160  
                          l5069 50F0                            l5309 469E                            l5261 4524  
                          l5173 561A                            l5421 340A                            l5413 33DC  
                          l5405 33C2                            ?_pad 0011                            l3911 5338  
                          l4295 52E6                            l4287 52AA                            l4279 548C  
                          l4519 44D4                            l4551 478E                            l4543 4746  
                          l4527 46CE                            l4535 470C                            l5095 2AB6  
                          l5087 2A7A                            l5351 2F3E                            l5343 2EE0  
                          l5335 2E82                            l5327 2E24                            l5319 2DC8  
                          l5255 4F00                            l5247 4EC8                            l5239 4E8C  
                          l5167 5C38                            l5159 5C10                            l5191 5A54  
                          l4447 5D9A                            l4711 2A08                            l4703 29BA  
                          l4631 2792                            l4623 2762                            l4615 2730  
                          l4607 2706                            l4199 5BA2                            l3903 1EC6  
                          l3831 1CBA                            l3823 1C82                            l3815 1C56  
                          l3807 1C24                            l3751 1B18                            l3743 1AE0  
                          l3735 1AAE                            l3727 1A96                            l3719 1A66  
                          l4383 260A                            l4375 2432                            l4367 23BA  
                          l4359 2302                            l4455 5D5A                            l4439 5D3A  
                          l3567 499A                            l3559 4952                            l3591 4A68  
                          l3583 4A20                            l3575 49CE                            l3495 500C  
                          l3671 32BA                            l3663 3218                            l3655 3180  
                          l3647 3152                            l3639 310A                            l4463 5C78  
                          l4471 5B2E                            l5079 517C                            l5271 457C  
                          l5263 4536                            l5183 5658                            l5175 5632  
                          l5431 3470                            l5423 343E                            l5415 33DE  
                          l5407 33C8                            l3921 535E                            l3913 5340  
                          l4289 52C2                            l4297 52F4                            l4481 438A  
                          l4561 47E8                            l4553 47A0                            l4545 4758  
                          l4537 4724                            l4529 46E6                            l5097 2ABA  
                          l5089 2A7E                            l4393 364A                            l5361 2FAE  
                          l5353 2F50                            l5345 2EF2                            l5337 2E94  
                          l5329 2E36                            l5257 4F16                            l5249 4EDE  
                          l5193 5A68                            l4449 5DA0                            l4721 2A3E  
                          l4713 2A24                            l4705 29BE                            l4633 27A2  
                          l4641 27C2                            l4625 2764                            l4617 2732  
                          l4609 2716                            l3841 1D36                            l3833 1CEE  
                          l3825 1C84                            l3817 1C64                            l3761 1B2C  
                          l3753 1B1C                            l3737 1ABE                            l3745 1AE8  
                          l3729 1A98                            l4385 263E                            l4377 2500  
                          l4369 23DE                            l4457 5D60                            l3593 4A96  
                          l3585 4A3E                            l3577 49EE                            l3497 501E  
                          l3681 3320                            l3673 32D4                            l3665 321E  
                          l3657 318A                            l3649 3164                            l4465 5C94  
                          l4801 423E                            l4473 5B34                            l5281 45BE  
                          l5273 458E                            l5265 4548                            l5177 5652  
                          l5169 55E4                            l5433 347E                            l5425 3454  
                          l5417 33FC                            l5441 34CE                            l5409 33D0  
                          l3931 5396                            l3923 5366                            l3915 5344  
                          l3907 5326                            l4299 530C                            l4483 43AE  
                          l4491 43EC                            l4563 47F4                            l4555 47AC  
                          l4547 4764                            l4539 4732                            l5099 2AE2  
                          l4395 3656                            l5371 303C                            l5363 2FDE  
                          l5355 2F80                            l5347 2F22                            l5339 2EC4  
                          l4571 5A82                            l5259 4F24                            l5195 5A6A  
                          l5187 5A2C                            l4715 2A28                            l4707 29D8  
                          l4651 2800                            l4643 27D2                            l4635 27AA  
                          l4619 2742                            l4627 276C                            l4731 4052  
                          l3851 1D72                            l3843 1D46                            l3835 1CF0  
                          l3827 1C8E                            l3819 1C70                            l3771 1B40  
                          l3763 1B30                            l3755 1B20                            l3747 1AF8  
                          l3739 1ACE                            l4387 267A                            l4379 256C  
                          l4467 5B68                            l3595 4AB6                            l3587 4A46  
                          l3579 49F2                            l3499 5030                            l3683 3326  
                          l3691 335C                            l3675 32EE                            l3659 3190  
                          l3667 3282                            l4459 565C                            l4803 424A  
                          l4475 5B4A                            l5291 4600                            l5283 45D6  
                          l5275 4592                            l5267 4554                            l5451 3502  
                          l5435 34AE                            l5427 3456                            l5419 3408  
                          l3941 53C2                            l3933 539C                            l3925 5378  
                          l3917 5352                            l3909 532A                            l4581 54E2  
                          l4493 4404                            l4485 43C6                            l4565 4804  
                          l4557 47BC                            l4549 4774                            l4397 3666  
                          l5381 308C                            l5373 3056                            l5365 2FF8  
                          l5357 2F9A                            l5349 2F3C                            l4573 5A9A  
                          l5189 5A3C                            l5197 4F3A                            l4717 2A36  
                          l4709 29EE                            l4661 2848                            l4653 2810  
                          l4645 27D2                            l4637 27AE                            l4629 277C  
                          l4741 40D0                            l4733 4060                            l3861 1D9E  
                          l3853 1D74                            l3837 1D00                            l3829 1C94  
                          l3781 1B54                            l3773 1B44                            l3765 1B34  
                          l3757 1B24                            l3749 1B0A                            l4389 269E  
                          l4901 3A42                            l3597 4AC8                            l3589 4A5A  
                          l3685 3338                            l3669 329C                            l3677 32FE  
                          l4821 42A6                            l4813 4272                            l4805 4250  
                          l4477 5B60                            l5293 4606                            l5285 45DC  
                          l5277 459E                            l5269 4568                            l5461 3596  
                          l5453 3524                            l5445 34E0                            l5437 34B0  
                          l5429 346E                            l3935 53B2                            l3927 5380  
                          l3943 53C8                            l3919 535A                            l4583 54F4  
                          l4575 54A6                            l4495 4412                            l4487 43D2  
                          l4567 481E                            l4559 47D6                            l4399 3686  
                          l5375 3058                            l5367 2FFA                            l5359 2F9C  
                          l3695 5CCC                            l5199 4F46                            l4719 2A3C  
                          l4671 2896                            l4663 285C                            l4655 2820  
                          l4591 26B0                            l4751 4124                            l4743 40D8  
                          l4735 40A6                            l3871 1DD6                            l3855 1D82  
                          l3847 1D5A                            l3863 1DA0                            l3839 1D10  
                          l3791 1BB2                            l3775 1B48                            l3767 1B38  
                          l3759 1B28                            l3783 1B58                            l4911 3AA6  
                          l4903 3A5A                            l3599 4ACE                            l3687 3344  
                          l3679 3310                            l3951 3E8C                            l4831 42CE  
                          l4823 42AC                            l4815 4276                            l4807 426A  
                          l5295 4616                            l5279 45AA                            l5471 3610  
                          l5463 35AA                            l5455 353E                            l5447 34E2  
                          l5439 34B6                            l5391 338E                            l3945 53D8  
                          l3937 53BA                            l3929 5388                            l4585 550C  
                          l4577 54BA                            l4497 441E                            l4489 43DE  
                          l5377 306A                            l5369 300C                            l4569 5A6E  
                          l3697 5CDC                            l4681 28DE                            l4673 28A6  
                          l4665 286A                            l4657 2830                            l4649 27E6  
                          l4593 26BC                            l4761 419A                            l4753 4160  
                          l4745 40E4                            l4737 40BC                            l4729 4042  
                          l3881 1E54                            l3857 1D8A                            l3849 1D64  
                          l3865 1DAE                            l3793 1BC8                            l3785 1B5C  
                          l3777 1B4C                            l3769 1B3C                            l4913 3ABE  
                          l4905 3A5E                            l3689 334C                            l3961 3EF8  
                          l3953 3EB0                            l4841 4308                            l4833 42D2  
                          l4825 42C6                            l4817 428E                            l4921 0E62  
                          l5289 45F4                            l5473 3620                            l5465 35C4  
                          l5457 3566                            l5449 34EE                            l5393 339A  
                          l3947 53E0                            l3939 53BC                            l3699 5CF4  
                          l4587 551E                            l4579 54CA                            l4499 4426  
                          l5379 3074                            l4691 291E                            l4683 28EC  
                          l4675 28B8                            l4667 2876                            l4659 2838  
                          l4595 26CA                            l4771 41E2                            l4763 419E  
                          l4755 416C                            l4747 4116                            l3891 1E9A  
                          l3875 1E00                            l3883 1E56                            l3867 1DB2  
                          l3859 1D8E                            l3795 1BD4                            l3787 1B86  
                          l3779 1B50                            l4915 3AD6                            l4907 3A76  
                          l3971 3FC0                            l3963 3F1C                            l3955 3EBE  
                          l4851 432E                            l4843 4322                            l4835 42EA  
                          l4819 429A                            l4931 0F44                            l4923 0E66  
                          l5299 462C                            l5475 3636                            l5467 35D8  
                          l5459 3594                            l5395 339E                            l5387 3386  
                          l4589 5536                            l4781 5CB4                            l4693 294C  
                          l4677 28CE                            l4685 28FE                            l4669 2894  
                          l4597 26CC                            l4765 41C2                            l4757 417A  
                          l4749 4118                            l3893 1EA8                            l3885 1E66  
                          l3877 1E0C                            l3869 1DC0                            l3797 1BD8  
                          l3789 1BA2                            l4917 3ADA                            l4909 3A8E  
                          l3981 3FFC                            l3973 3FCE                            l3965 3F64  
                          l3957 3ED0                            l4861 437E                            l4853 4346  
                          l4837 42F6                            l4941 10DC                            l4933 0FEC  
                          l4925 0E80                            l5477 363C                            l5469 35F2  
                          l5397 33A2                            l5389 338A                            l4783 5CB6  
                          l4775 5CA2                            l4687 290C                            l4679 28D4  
                          l4599 26DC                            l4767 41D2                            l4759 4198  
                          l3895 1EAE                            l3887 1E76                            l3879 1E1A  
                          l3799 1BE6                            l4871 391A                            l3975 3FE2  
                          l3959 3ED4                            l4863 4384                            l4855 4352  
                          l4839 4302                            l4951 11C4                            l4943 10E0  
                          l4935 1000                            l4927 0E8C                            l4919 0E14  
                          l5399 33A6                            l4785 5CB8                            l4777 5CAC  
                          l3993 5E90                            l4697 2976                            l4689 2910  
                          l4769 41E0                            l3897 1EB0                            l3889 1E96  
                          l4881 397A                            l4873 391E                            l4865 38F4  
                          l3969 3F9C                            l3985 4008                            l4857 435E  
                          l4849 432A                            l4961 1350                            l4953 126C  
                          l4945 10FA                            l4937 10A8                            l4929 0F28  
                          l4779 5CB2                            l3995 5E94                            l4787 5DDC  
                          l4699 2982                            l3899 1EB6                            l4891 39DE  
                          l4883 397E                            l4875 3936                            l4867 38F8  
                          l3987 402C                            l3979 3FEE                            l4859 4364  
                          l4795 4216                            l4971 14DC                            l4963 136A  
                          l4955 1288                            l4947 1106                            l4939 10C4  
                          l3997 5E66                            l4893 39E2                            l4885 3996  
                          l4877 394A                            l4869 3902                            l4797 421A  
                          l4789 41F4                            l4981 1678                            l4973 14F8  
                          l4965 1376                            l4957 1330                            l4949 11A8  
                          l3999 5E6A                            l4895 39FA                            l4887 39AE  
                          l4879 3962                            l4799 4232                            l4991 17A0  
                          l4983 16A6                            l4975 15A0                            l4967 1418  
                          l4959 134C                            l4897 3A12                            l4889 39C6  
                          l4993 17B6                            l4985 1774                            l4977 15BC  
                          l4969 1434                            l4899 3A2A                            l4995 1876  
                          l4987 177E                            l4979 1664                            l4997 1880  
                          l4989 1788                            l4999 188A                            STR_1 0E05  
                          STR_2 0E0D                            u3000 508E                            u3001 508A  
                          u3010 59A6                            u3011 59A2                            u3100 49CE  
                          u3020 5C02                            u3101 49CA                            u3021 5BFE  
                          u3030 4846                            u3110 4A00                            u3031 4842  
                          u3111 49FC                            u4000 1FAC                            u3040 4878  
                          u3120 4A3E                            u3200 5ACA                    _BAUD4CONbits 000EE9  
                          u4001 1FA8                            u3041 4874                            u3121 4A3A  
                          u3201 5AC6                            _LATE 000F7D                            u4010 1FBC  
                          u3130 4A68                            u3210 30D2                            u4011 1FB8  
                          u3051 48A2                            u3131 4A64                            u3211 30CC  
                          _LATG 000F7F                            u4100 227C                            u4020 2136  
                          u3060 48C6                            u3140 4A96                            u3300 32D4  
                          u3220 30D4                            u4101 2278                            u3061 48C2  
                          u3141 4A92                            u3301 32D0                            u4110 22AA  
                          u4030 2190                            u3070 48F0                            u3150 4ADE  
                          u3310 32EE                            u3230 30EA                            u4111 22A6  
                          u4031 218C                            u3071 48EC                            u3151 4ADA  
                          u3311 32EA                            u3231 30E6                            u5000 2848  
                          u4120 22E4                            u4040 21B0                            u3400 1A54  
                          u4200 5C72                            u3080 4930                            u3160 51AC  
                          u3320 32FE                            u3240 311A                            u5001 2844  
                          u4121 22E0                            u4041 21AC                            u4025 212C  
                          u3401 1A50                            u4201 5C6E                            u3081 492C  
                          u3161 51A8                            u3321 32FA                            u3241 3116  
                          u4210 5406                            u5010 286A                            u4130 4D7E  
                          u4050 21C2                            u3410 1A96                            u3090 497A  
                          u3170 51CE                            u3330 3310                            u3250 3136  
                          _T2PR 000FBC                            u4211 5402                            u5011 2866  
                          u4131 4D7A                            u4051 21BE                            u3411 1A92  
                          u3091 4976                            u3171 51CA                            u3331 330C  
                          u3251 3132                            u4300 55DE                            u4220 542A  
                          u5100 2976                            u5020 2894                            u4140 4DBC  
                          u4060 21F0                            u3500 1BC8                            u3420 1AAC  
                          u3180 5224                            u3340 3320                            u3260 3164  
                          u4301 55DA                            u4221 5426                            u5101 2972  
                          u5021 2890                            u4141 4DB8                            u4061 21EC  
                          u3501 1BC4                            u3421 1AA8                            u3181 5220  
                          u3341 331C                            u3261 3160                            u4230 5474  
                          u5110 2990                            u5030 28B8                            u4310 4C60  
                          u4150 4DDA                            u4070 2206                            u3510 1BE6  
                          u3430 1ABE                            u3190 5234                            u3350 3338  
                          u3270 3172                            u4231 5470                            u5111 298C  
                          u5031 28B4                            u4311 4C5C                            u4151 4DD6  
                          u4071 2202                            u3511 1BE2                            u3431 1ABA  
                          u3191 5230                            u3351 3334                            u3271 316E  
                          u4240 548C                            u3360 5CDC                            u5120 29D8  
                          u5040 28CE                            u5200 417A                            u4320 4C94  
                          u4160 4DFA                            u4080 221A                            u3600 1D36  
                          u3520 1C06                            u3440 1ACE                            u4400 239E  
                          u3280 329C                            u4241 5488                            u3361 5CD8  
                          u5121 29D4                            u5041 28CA                            u5201 4176  
                          u4161 4DF6                            u4081 2216                            u3601 1D32  
                          u3521 1C02                            u3441 1ACA                            u3281 3298  
                          u4250 529E                            u3370 5CF2                            u5130 2A08  
                          u5050 28EC                            u5210 418A                            u4330 4CC2  
                          u4170 4E4A                            u4090 2234                            u3610 1D46  
                          u3530 1C14                            u3450 1B0A                            u4410 23BA  
                          u3290 32BA                            u4251 529A                            u3371 5CEE  
                          u5131 2A04                            u5051 28E8                            u5211 4186  
                          u4331 4CBE                            u4171 4E46                            u4091 2230  
                          u3611 1D42                            u3531 1C10                            u3451 1B06  
                          u4411 23B6                            u3291 32B6                            u4260 52C2  
                          u4500 36B0                            u5140 2A36                            u5060 290C  
                          u5220 4198                            u4340 4CD6                            u4180 5BB8  
                          u3700 1E1A                            u3620 1D72                            u3540 1C24  
                          u3460 1B18                            u3380 1A32                            u4420 23FA  
                          u5300 1774                            u4261 52BE                            u4501 36A8  
                          u5141 2A32                            u5061 2908                            u5221 4194  
                          u4341 4CD2                            u4325 4C8A                            u4181 5BB4  
                          u3701 1E16                            u3621 1D6E                            u3541 1C20  
                          u3461 1B14                            u3381 1A2E                            u4421 23F6  
                          u4405 2394                            u5301 1770                            u4270 530C  
                          u5070 291E                            u5230 41D2                            u5150 4052  
                          u4350 4CFE                            u3710 1E54                            u3630 1D82  
                          u3550 1C56                            u3470 1B86                            u3390 1A44  
                          u4430 2500                            u4190 5724                            u5310 17A0  
                          u4271 5308                            u5071 291A                            u5231 41CE  
                          u5151 404E                            u4351 4CFA                            u3711 1E50  
                          u3631 1D7E                            u3551 1C52                            u3471 1B82  
                          u3391 1A40                            u4431 24FC                            u4191 5720  
                          u5311 179C                            u6007 0E72                            u3800 5396  
                          u4280 5324                            u4600 37B8                            u4520 36E8  
                          u5080 294C                            u5240 41E0                            u5160 4060  
                          u4360 4D1E                            u3720 1E66                            u3640 1D9E  
                          u3560 1C64                            u3480 1B9E                            u4440 259E  
                          u5400 198C                            u5320 17B6                            u3801 5392  
                          u4281 5320                            u4601 37B0                            u4521 36E4  
                          u5081 2948                            u5241 41DC                            u5161 405C  
                          u4361 4D1A                            u3721 1E62                            u3641 1D9A  
                          u3561 1C60                            u3481 1B98                            u4441 259A  
                          u5401 1988                            u5321 17B2                            u6017 10D0  
                          u3810 53B2                            u4290 55C6                            u4530 36FA  
                          u5090 2962                            u5170 40BC                            u4370 4D2E  
                          u3730 1E76                            u3650 1DAE                            u3570 1C82  
                          u3490 1BA0                            u4450 265E                            u5250 426A  
                          u5410 19C0                            u5330 1876              verify_color@color2 0098  
                          u3811 53AE                            u4291 55C2                            u4531 36F2  
                          u5091 295E                            u5171 40B8                            u4371 4D2A  
                          u3731 1E72                            u3651 1DAA                            u3571 1C7E  
                          u6107 3988                            u5251 4266                            u5411 19BC  
                          u5331 1872                            u6027 10EC                            u3820 53D8  
                          u3900 3BFE                            u5500 2C38                            u4700 38BA  
                          u4620 37F4                            u5180 4112                            u3740 1E96  
                          u3660 1DC0                            u3580 1CBA                            u4460 267A  
                          u4380 2342                            u5260 42C6                            u5420 19EE  
                          u5340 18A0                            u3821 53D4                            u3901 3BFA  
                          u5501 2C34                            u4701 38B2                            u4621 37F0  
                          u5181 410E                            u3741 1E92                            u3661 1DBC  
                          u3581 1CB6                            u4461 2676                            u6117 39EC  
                          u5261 42C2                            u5421 19EA                            u5341 189C  
                          u6037 135C                            u5510 2C90                            u4630 3806  
                          u4550 3732                            u4518 36B2                            u4470 3666  
                          u5190 415C                            u3750 1EA8                            u3670 1DD6  
                          u3590 1D00                            u4390 236A                            u3830 3EB0  
                          u5270 4322                            u5430 1A08                            u5350 18B6  
                          u5511 2C8C                            u4631 37FE                            u4551 372A  
                          u4471 3662                            u5191 4158                            u3751 1EA4  
                          u3671 1DD2                            u3591 1CFC                            u4455 2654  
                          u4391 2366                            u6207 4B9C                            u6127 3A68  
                          u3831 3EAC                            u5271 431E                            u6047 4224  
                          u5431 1A04                            u5351 18B2                            u4800 44C8  
                          u5520 2CE8                            u4720 38F2                            u4480 3678  
                          u5600 4EC8                            u3760 1EC4                            u3680 1DEC  
                          u3840 3EF8                            u5280 437E                            u5360 18CC  
                          u5440 5194                            u4801 44C4                            u5521 2CE4  
                          u4721 38EE                            u4481 3670                            u5601 4EC4  
                          u3761 1EC0                            u3681 1DE8                            u4385 2338  
                          u6217 4BC0                            u6137 3AE4                            u3841 3EF4  
                          u5281 437A                            u6057 4280                            u5361 18C8  
                          u5441 5190                            u3770 5338                            u3914 3C58  
                          u4810 450A                            u5530 2D40                            u5450 2AE2  
                          u4650 383C                            u4618 37BA                            u4570 376A  
                          u5610 4EEC                            u3690 1E00                            u3930 5E48  
                          u2970 501E                            u3850 3F1C                            u4730 5B4A  
                          u5370 18EA                            u5290 16A6                            u3771 5334  
                          u3915 3C54                            u4811 4506                            u5531 2D3C  
                          u5451 2ADE                            u4651 3834                            u4571 3766  
                          u6307 3690                            u5611 4EE8                            u6227 5DAA  
                          u3691 1DFC                            u6147 5D2A                            u3931 5E44  
                          u2971 501A                            u3851 3F18                            u6067 42DC  
                          u4731 5B46                            u5371 18E6                            u5291 16A2  
                          u3780 5352                            u3924 3CC2                            u4900 54F4  
                          u4820 4724                            u5540 2DA0                            u5460 2B08  
                          u4580 377C                            u4548 36FC                            u5620 4EFE  
                          u3940 1EF2                            u2980 5030                            u3860 3FC0  
                          u4740 5B60                            u5380 192C                            u5700 4670  
                          u3781 534E                            u3925 3CBE                            u4901 54F0  
                          u4821 4720                            u5541 2D9C                            u5461 2B04  
                          u4581 3774                            u6317 36C8                            u5621 4EFA  
                          u6237 5A08                            u3941 1EEE                            u6157 5D4A  
                          u2981 502C                            u3861 3FBC                            u6077 4338  
                          u4741 5B5C                            u5381 1928                            u5701 466C  
                          u3790 5378                            u4910 551E                            u4750 4404  
                          u4830 4758                            u5550 2DB4                            u5470 2B30  
                          u4718 38BC                            u4670 3872                            u5710 2DC8  
                          u3870 59D2                            u3950 1F04                            u2990 5058  
                          u5390 195C                            u5630 4548                            u3791 5374  
                          u4911 551A                            u4751 4400                            u4831 4754  
                          u5551 2DB0                            u5471 2B2C                            u6407 2AA8  
                          u4671 386E                            u6327 3712                            u5711 2DC4  
                          u6247 5C24                            u3871 59CA                            u3951 1F00  
                          u6167 5D6A                            u6087 390C                            u2991 5054  
                          u5391 1958                            u5631 4544                            u4760 4438  
                          u4840 478E                            u5480 2B88                            u4680 3884  
                          u4648 3808                            u4568 3734                            u5720 2DD8  
                          u4920 26CA                            u3960 1F14                            u5640 4568  
                          u5560 5652                            u5800 33EE                            u4761 4434  
                          u4841 478A                            u6417 4704                            u5481 2B84  
                          u4681 387C                            u6337 374A                            u5721 2DD4  
                          u6257 4E70                            u4921 26C6                            u3961 1F10  
                          u6177 5D8A                            u6097 3928                            u5641 4564  
                          u5561 564E                            u5801 33EA                            u3890 3B1A  
                          u4770 446E                            u4850 47A0                            u5490 2BE0  
                          u4498 367A                            u5730 2E36                            u5570 4E66  
                          u4930 26DC                            u3970 1F54                            u5650 458E  
                          u5810 33FC                            u3891 3B16                            u6507 54FE  
                          u4771 446A                            u4851 479C                            u6427 476A  
                          u5491 2BDC                            u6347 3798                            u5731 2E32  
                          u6267 4E96                            u5571 4E62                            u4931 26D8  
                          u3971 1F50                            u6187 4B54                            u5651 458A  
                          u5811 33F8                            u4780 4480                            u4860 47D6  
                          u4668 383E                            u5740 2E94                            u5580 4E8A  
                          u4940 26EC                            u3980 1F66                            u5660 45BE  
                          u5900 3620                            u5820 3430                            u6517 5528  
                          u4781 447C                            u4861 47D2                            u6437 47B2  
                          u6357 37D4                            u5741 2E90                            u6277 4ED2  
                          u5581 4E86                            u4941 26E8                            u3981 1F62  
                          u6197 4B78                            u5661 45BA                            u5901 361C  
                          u5821 342C                            u4790 44B6                            u4870 47E8  
                          u4598 377E                            u5750 2EF2                            u5590 4EB6  
                          u4950 2730                            u3990 1F76                            u5670 45F0  
                          u5830 343E                            u6527 5454                            u4791 44B2  
                          u6447 47FA                            u4871 47E4                            u6367 381C  
                          u5751 2EEE                            u6287 4F0A                            u5591 4EB2  
                          u4951 272C                            u3991 1F72                            u5671 45EC  
                          u5831 343A                            u4880 481E                            u5760 2F50  
                          u4960 2742                            u3888 59D4                            u5680 4616  
                          u5840 347E                            u6537 5496                            u6457 43E4  
                          u4881 481A                            u6377 3852                            u5761 2F4C  
                          u6297 5A8C                            u4961 273E                            u5681 4612  
                          u5841 347A                            u4890 54CA                            u4698 3886  
                          u5770 2FAE                            u4970 2752                            u5690 4628  
                          u5850 34A0                            u6547 55A6                            u4891 54C6  
                          u6467 444A                            u6387 389A                            u5771 2FAA  
                          u4971 274E                            u5691 4624                            u5851 349C  
                          u5780 300C                            u4980 2792                            u5860 34AE  
                          u6557 52EC                            u6477 4492                            u6397 38D0  
                          u5781 3008                            u4981 278E                            u5861 34AA  
                          u5790 306A                            u4990 27D2                            u5870 34E0  
                          u6487 44DA                            u5791 3066                            u4991 27CE  
                          u5871 34DC                            u5927 3416                            u5880 3534  
                          u6497 54D4                            u5881 3530                            u5937 3462  
                          u5890 3566                            u5891 3562                            u5947 34C2  
                          u5957 35B6                            u5967 55F0                            u5977 5626  
                          u5987 4690                            u5997 50FC                            abs@a 0013  
                          _dbuf 0148                            _main 3386                            _dtoa 30A2  
                          _prec 00FA                            _nout 013E                            pad@i 0018  
                          pad@p 0015                            fsr1h 000FE2                            fsr2h 000FDA  
                          indf1 000FE7                            indf2 000FDF                            fsr1l 000FE1  
                          pad@w 001A                            fsr2l 000FD9                            btemp 005F  
                          _stop 53EA                            prodh 000FF4                            prodl 000FF3  
                          start 0030                  ?_color_display 0058                   test_action@mL 0033  
                 test_action@mR 0035                 ___fldiv@new_exp 0020          __end_of_color_read_Red 582E  
               __end_of_HighISR 0030                    ___param_bank 000000                  ?_color_predict 0001  
                         ??_abs 0015                           ??_pad 0017                   ___fltol@sign1 0064  
               __end_of___aodiv 49BC       amb_light_measure@CC_amb_1 0072       amb_light_measure@CC_amb_2 0074  
     amb_light_measure@CC_amb_3 0076                 __end_of___fladd 1ED8                           ?_main 0001  
                         ?_dtoa 001C                 __end_of___aomod 4B20                 __end_of___fldiv 2A4A  
               __end_of___awdiv 53EA                 __end_of___flneg 5BDA                 __end_of___flmul 2302  
               __end_of___flsub 5964                 __end_of___fltol 4D50                           ?_stop 001A  
               ___awdiv@divisor 0009                           _LED_B 5D7A                           _LED_C 5D9A  
                         _LED_G 5D5A                           _LED_R 5D1A                           i2l598 002C  
               ___awdiv@counter 000B                    vfpfcnvrt@fmt 0042                           _TMR0H 000FD4  
                         _TMR0L 000FD3         __end_of_sendCharSerial4 5E4E      __end_of_I2C_2_Master_Start 5E9A  
       ??_color_data_collection 005C      __end_of_I2C_2_Master_Write 5E70                 __end_of_compare 5B68  
                  compare@lower 006A                           _flags 00FC                           _color 0146  
                  compare@upper 006E                           _fputc 500C                           _fputs 5964  
                         pad@fp 0011                           _width 00F8                           _putch 5E9A  
                         _toint 0E01                           dtoa@d 001E                           dtoa@i 003E  
                         dtoa@n 0036                           dtoa@p 0030                           dtoa@s 0034  
                         dtoa@w 0032                 ??_test_function 00EE            amb_light_measure@amb 006A  
                         tablat 000FF5                 __end_of_lroundf 5BA2                           ttemp5 0060  
                         ttemp6 0063                           ttemp7 0067                           status 000FD8  
                         wtemp8 0060                 __end_of_sprintf 57DE                color_display@buf 0079  
       __end_of_color_read_Blue 58CE           _I2C_2_Master_RepStart 5E7C               _calibration_motor 4E54  
               ??_short_reverse 0025                 ?_color_read_Red 0005                 __initialization 5AF0  
                 short_burst@mL 0020                   short_burst@mR 0022              ?_calibration_motor 0037  
                  __end_of_main 3648                    __end_of_dtoa 3386                   main@amb_light 0170  
          __end_of_detect_color 1A18                    __end_of_stop 54A6          color_data_collection@i 00DE  
        color_data_collection@j 00E0          color_data_collection@k 00E2          color_data_collection@m 005A  
        color_data_collection@x 00E4             ??_calibration_motor 003B                          ??_main 00F6  
                        ??_dtoa 0026                          ??_stop 001E                   __activetblptr 000001  
                        ?_LED_B 0001                          ?_LED_C 0001                          ?_LED_G 0001  
                        ?_LED_R 0001                 _buggylight_init 5E4E                       ??_LED_OFF 0001  
        _initDCmotors_parameter 4F3A                    ?_setMotorPWM 000F                          ?_fputc 0001  
                        ?_fputs 000A                ___awdiv@dividend 0007                          ?_putch 0001  
                        _RC0PPS 000E62                          _RC4REG 000EE3                          _RE2PPS 000E74  
                        _RD5PPS 000E6F                          _RC7PPS 000E69                          _RD6PPS 000E70  
                        i2l5481 001A                          i2l5483 0022                          i2l5485 0028  
                        i2l5479 000A              turnLeft@angle_left 0024                       ??_HighISR 0001  
      __end_of_color_click_init 5C44                          _RX4PPS 000E15                          _TX4REG 000EE4  
               ??_color_display 005A       __end_of_calibration_motor 4F3A                __end_of___xxtofl 41F4  
                 ??_Timer0_init 0001                 ??_color_predict 0058                    vfprintf@cfmt 0056  
                        ___flge 4D50                       ??___aodiv 0011                       ??___fladd 0009  
                     ??___aomod 0011                          ___wmul 5CF4                       ??___fldiv 0017  
                     ??___awdiv 000B                       ??___flneg 0005                       ??___flmul 0030  
                        _action 2DB6                       ??___flsub 0019                       ??___fltol 0060  
                        _goback 2A4A                   compare@result 0070                          _memory 0100  
                        clear_0 5B08                ___awdiv@quotient 000D                          _motorL 0131  
                        _motorR 0128                          isa$std 000001                          pad@buf 0013  
                        _roundf 2302                          dtoa@fp 001C                          _strlen 5BDA  
                     ??_compare 005F                   toggle_light@i 0004                __end_of_pin_init 5DDA  
                        fputc@c 0001         toggle_light@lightnumber 0005                          fputs@c 000E  
                        fputs@i 000F                          fputs@s 000A                  test_function@m 00E6  
                test_function@w 00E8                    __mediumconst 0000                          tblptrh 000FF7  
                        tblptrl 000FF6                          tblptru 000FF8                ?_sendCharSerial4 0001  
                     ??_lroundf 005F                     read_color@m 000C                          putch@c 0001  
              __end_of_vfprintf 572E                          stop@mL 001A                          stop@mR 001C  
             ??_initDCmotorsPWM 0003                    ?_test_action 0033                       ??_sprintf 0058  
              __end_of_turnLeft 4520                      ___flge@ff1 0001                      ___flge@ff2 0005  
                  ___xxtofl@arg 000B                    ___xxtofl@exp 000A                    ___xxtofl@val 0001  
                  ?_short_burst 0020                calibrate_white@w 000C                 fullSpeedBack@mL 001A  
               fullSpeedBack@mR 001C                      __accesstop 0060         __end_of__initialization 5B1C  
                 verify_color@m 0092                   verify_color@w 0094        __end_of_color_read_Clear 591E  
                    ___flneg@f1 0001        __end_of_color_read_Green 587E          ?_I2C_2_Master_RepStart 0001  
            color_predict@color 00DD    initDCmotors_parameter@motorL 0001    initDCmotors_parameter@motorR 0003  
                 ___rparam_used 000001                      ___fltol@f1 005B                   __end_of_LED_B 5D9A  
                 __end_of_LED_C 5DBA                   __end_of_LED_G 5D7A                   __end_of_LED_R 5D3A  
              ?_color_read_Blue 0005                 _Interrupts_init 5E70                  __pcstackCOMRAM 0001  
                 _fullSpeedBack 554C                    __pidataBANK0 5E9C         __end_of_buggylight_init 5E64  
          turnRight@angle_right 0024           _distance_measure$3206 0074                   __end_of_fputc 50D6  
             detect_color@color 0089                   __end_of_fputs 59A8                   __end_of_putch 5E9C  
                 __end_of_toint 0E05             __end_of_Timer0_init 5E36                         ??_LED_B 0001  
                       ??_LED_C 0001                         ??_LED_G 0001                         ??_LED_R 0001  
             ?_distance_measure 006A           fullSpeedAhead_test@mL 0020           fullSpeedAhead_test@mR 0022  
            ??_distance_measure 0070                         ??_fputc 0005                         ??_fputs 000E  
                       ??_putch 0001                      __pbssBANK0 00F8                      __pbssBANK1 0100  
           calibration_motor@mL 0037             calibration_motor@mR 0039                color_predict@buf 0079  
     distance_measure@amb_light 006E               _color_writetoaddr 5DDA                    _T2CLKCONbits 000FBF  
                ?_fullSpeedBack 001A                         ?___flge 0001              ?_color_writetoaddr 0003  
                       ?___wmul 0001                         ?_action 003B                         ?_goback 0033  
                       ?_roundf 0041             ??_color_writetoaddr 0004                         ?_strlen 0001  
                       _LED_OFF 5D3A                       ?___xxtofl 0001                         _SP4BRGH 000EE6  
                       _SP4BRGL 000EE5                         _PWM6DCH 000FA3                         _PWM7DCH 000FA0  
                       _SSP2ADD 000ED6                         _SSP2BUF 000ED5    amb_light_measure@upper_bound 006E  
                  _detect_color 0E14   __end_of_color_data_collection 438A         __end_of_Interrupts_init 5E7C  
        color_writetoaddr@value 0003                ??_color_read_Red 0007                         _HighISR 0008  
     __end_of_color_writetoaddr 5DFA              _I2C_2_Master_Start 5E90                      _initUSART4 5DFA  
            _I2C_2_Master_Write 5E64             _fullSpeedAhead_test 5A6E                       ?_pin_init 0001  
                       __Hparam 0000           test_function@complete 00F2                         __Lparam 0000  
             color_read_Red@tmp 000A                     _Timer0_init 5E18         sendStringSerial4@string 0002  
                       ___aodiv 4834                         ___fladd 1A18                         ___aomod 49BC  
                       ___fldiv 26B0                         ___awdiv 5326                         ___flneg 5BA2  
                       ___flmul 1ED8                         ___flsub 591E                         ___fltol 4C48  
           ?_I2C_2_Master_Start 0001                ?_buggylight_init 0001             ?_I2C_2_Master_Write 0001  
                     ?_vfprintf 0050                    __psmallconst 0E00       distance_measure@threshold 007A  
                       __pcinit 5AF0                         __ramtop 0E00                      _read_color 572E  
                     ?_turnLeft 0020                         __ptext0 3386                         __ptext1 55E0  
                       __ptext2 4520                         __ptext3 50D6                         __ptext4 0E14  
                       __ptext5 5B2E                         __ptext6 41F4                         __ptext7 572E  
                       __ptext8 5C74                         __ptext9 565C                         _compare 5B2E  
       ?_initDCmotors_parameter 0001                       _T2CONbits 000FBD            ?_fullSpeedAhead_test 0020  
                    ??___xxtofl 0005                       _T2HLTbits 000FBE                         _lroundf 5B68  
                       goback@i 0039          distance_measure@CC_amb 0078                         main@amb 0168  
        distance_measure@CG_amb 0072                         _sprintf 578C                         main@rgb 0174  
          ??_I2C_2_Master_Start 0002            ??_I2C_2_Master_Write 0002            end_of_initialization 5B1C  
            setMotorPWM@PWMduty 0018                         fputc@fp 0003           __end_of_test_function 46AA  
                       fputs@fp 000C               ?_color_click_init 0001                 test_function@mL 00EA  
               test_function@mR 00EC                 ??_fullSpeedBack 001E                      ??_pin_init 0001  
            ??_color_click_init 0005               __end_of_vfpfcnvrt 4040           __end_of_short_reverse 554C  
                       postdec1 000FE5                         postdec2 000FDD                         postinc0 000FEE  
                       postinc1 000FE6                         postinc2 000FDE                         roundf@e 004D  
                       roundf@u 0053                         roundf@x 0041                         roundf@y 0057  
                    ??_vfprintf 0056                         strlen@a 0003                         strlen@s 0001  
               _initDCmotorsPWM 5A2C                      ??_turnLeft 0025  __end_of_initDCmotors_parameter 500C  
                     _PORTFbits 000F8E        test_function@stop_signal 00F4           ??_fullSpeedAhead_test 0024  
             __end_of_turnRight 4834                     ___fladd@grs 0010                   ___xxtofl@sign 0009  
                     _TRISAbits 000F81                       _TRISCbits 000F83                       _TRISDbits 000F84  
                     _TRISEbits 000F85                       _TRISFbits 000F86                       _TRISGbits 000F87  
                     _TRISHbits 000F88                     ___fldiv@grs 0022                     ___fldiv@rem 001B  
              fullSpeedAhead@mL 001A                fullSpeedAhead@mR 001C        color_writetoaddr@address 0004  
       ??_I2C_2_Master_RepStart 0002                      _start_move 0142                ?_Interrupts_init 0001  
                   ___flmul@grs 0035                   ?_toggle_light 0001               ?_color_read_Clear 0005  
             ?_color_read_Green 0005                     ?_initUSART4 0001       sendCharSerial4@charToSend 0001  
                 ?_verify_color 0092           __end_of_color_display 56CC                      main@motorL 0198  
                    main@motorR 01A1     amb_light_measure@CC_amb_ave 0070               ??_calibrate_white 000E  
            ??_color_read_Clear 0007                  color_display@m 0058              ??_color_read_Green 0007  
                detect_color@BB 007F                  detect_color@BC 007B                  detect_color@BG 008C  
                detect_color@GB 0083                  detect_color@GG 0087                  detect_color@BR 0085  
                detect_color@GR 007D                  detect_color@RB 0081                  detect_color@RG 0079  
                detect_color@RR 008A           __end_of_color_predict 5CA2                  __end_of___flge 4E54  
                _fullSpeedAhead 5262                     vfpfcnvrt@ap 0044                     vfpfcnvrt@fp 0040  
                   vfpfcnvrt@ll 0048                  __end_of___wmul 5D1A                  __end_of_action 30A2  
                   ?_read_color 000C                  __end_of_goback 2DB6                  __end_of_roundf 26B0  
            turnRight@delay_135 0026              turnRight@delay_180 0028                  __end_of_strlen 5C10  
           color_read_Clear@tmp 000A             start_initialization 5AF0                     __end_of_abs 5AF0  
                   __end_of_pad 5262               turnLeft@delay_135 0027               turnLeft@delay_180 0029  
                ??_toggle_light 0002                  ??_verify_color 0096             color_read_Green@tmp 000A  
       __end_of_initDCmotorsPWM 5A6E                     vfprintf@fmt 0052          __end_of_fullSpeedAhead 5326  
                      ??___flge 0009                        ??___wmul 0005                        ??_action 003F  
                      ??_goback 0037                 short_reverse@mL 0020                 short_reverse@mR 0022  
                   __pdataBANK0 00FE                        ??_roundf 0045                        ??_strlen 0003  
                     ___fladd@a 0005                       ___fladd@b 0001                        ?_LED_OFF 0001  
                     ___fldiv@a 0013                       ___fldiv@b 000F                       ___flmul@a 002C  
                     ___flmul@b 0028                       ___flsub@a 0015                       ___flsub@b 0011  
                 __pcstackBANK0 0060                   __pcstackBANK1 0168                ___aodiv@dividend 0001  
                      ?_HighISR 0001                       _dtoa$2871 002E                    ?_Timer0_init 0001  
               ?_fullSpeedAhead 001A                       __pintcode 0008                        ?___aodiv 0001  
                      ?___fladd 0001                        ?___aomod 0001                        ?___fldiv 000F  
                      ?___awdiv 0007                ___aodiv@quotient 0013                        ?___flneg 0001  
                      ?___flmul 0028                        ?___flsub 0011                        ?___fltol 005B  
            test_function@color 00F3                 turnRight@i_1328 002C                 turnRight@i_1329 002E  
                   _centisecond 0144                  turnLeft@i_1305 002D                  turnLeft@i_1306 002F  
          I2C_2_Master_Read@ack 0003            I2C_2_Master_Read@tmp 0004                        ?_compare 006A  
                   __smallconst 0E00               _I2C_2_Master_Idle 5CCC               _I2C_2_Master_Init 5CA2  
             _I2C_2_Master_Read 59A8               _I2C_2_Master_Stop 5E86          toggle_light@toggletime 0001  
                      ?_lroundf 0066              ?_I2C_2_Master_Idle 0001              ?_I2C_2_Master_Init 0001  
            ?_I2C_2_Master_Read 0001                   ??_setMotorPWM 0011              ?_I2C_2_Master_Stop 0001  
      initDCmotorsPWM@PWMperiod 0001                        ?_sprintf 0060               _sendStringSerial4 5C44  
         _color_data_collection 41F4             ??_I2C_2_Master_Idle 0001             ??_I2C_2_Master_Init 0001  
           ??_I2C_2_Master_Read 0002                  ___wmul@product 0005                        _LATAbits 000F79  
           ??_I2C_2_Master_Stop 0002                        _LATCbits 000F7B                        _LATDbits 000F7C  
                      _LATEbits 000F7D                        _LATFbits 000F7E                        _LATGbits 000F7F  
                      _LATHbits 000F80                        _PIE0bits 000E29              ?_sendStringSerial4 0002  
                   turnRight@mL 0020                     turnRight@mR 0022                        _PIR0bits 000E33  
                      _PIR4bits 000E37                        i2u591_40 001A                        i2u591_41 0016  
              ?_initDCmotorsPWM 0001               ??_sendCharSerial4 0001                        _SSP2CON2 000EDA  
           ??_sendStringSerial4 0004                        _SSP2STAT 000ED8                     _array_index 0147  
                     _vfpfcnvrt 3E8C       __end_of_I2C_2_Master_Idle 5CF4            __end_of_toggle_light 38F4  
     __end_of_I2C_2_Master_Init 5CCC       __end_of_I2C_2_Master_Read 59EA               ___wmul@multiplier 0001  
     __end_of_I2C_2_Master_Stop 5E90                    setMotorPWM@m 000F     I2C_2_Master_Write@data_byte 0002  
          __end_of_verify_color 565C          test_function@amb_light 00F0                       main@setup 0172  
                     main@white 017C               ??_color_read_Blue 0007                       _stop_move 0140  
                 detect_color@m 0071                   detect_color@w 0073                       _turnRight 46AA  
                 ??_test_action 0037                 _calibrate_white 38F4       __end_of_sendStringSerial4 5C74  
                 ??_short_burst 0024               _amb_light_measure 4B20   __end_of_I2C_2_Master_RepStart 5E86  
            color_read_Blue@tmp 000A             __end_of_setMotorPWM 3CD2                      roundf@F527 013A  
              _distance_measure 50D6                    ??_initUSART4 0001              ?_amb_light_measure 006A  
                      __Hrparam 0000                      vfprintf@ap 0054                        __Lrparam 0000  
                    vfprintf@fp 0050           __end_of_fullSpeedBack 55E0                    __Lsmallconst 0E00  
          compare@value2compare 006C             ??_amb_light_measure 006C     __end_of_fullSpeedAhead_test 5AB0  
                    ?_vfpfcnvrt 0040                    ??_read_color 000E                 ___aodiv@divisor 0009  
               ___aodiv@counter 0011                      _ANSELDbits 000EA7                      _ANSELFbits 000EB4  
                   action@color 003F                      sprintf@fmt 0062                        ___xxtofl 4040  
                    _T0CON0bits 000FD5                      _T0CON1bits 000FD6              __end_of_initUSART4 5E18  
                    ?_turnRight 0020                        __ptext10 578C                        __ptext11 56CC  
                      __ptext20 49BC                        __ptext12 3E8C                        __ptext21 4834  
                      __ptext13 30A2                        __ptext30 5D5A                        __ptext22 5C44  
                      __ptext14 519C                        __ptext31 5D7A                        __ptext23 5E36  
                      __ptext15 5BDA                        __ptext40 4C48                        __ptext32 4B20  
                      __ptext24 38F4                        __ptext16 5964                        __ptext41 58CE  
                      __ptext33 5B68                        __ptext25 57DE                        __ptext17 500C  
                      __ptext50 4F3A                        __ptext42 5E7C                        __ptext34 2302  
                      __ptext26 582E                        __ptext18 5E9A                        __ptext51 5A2C  
                      __ptext43 59A8                        __ptext35 591E                        __ptext27 587E  
                      __ptext19 5AB0                        __ptext60 3CD2                        __ptext52 5C10  
                      __ptext44 4040                        __ptext36 1A18                        __ptext28 5D1A  
                      __ptext61 5A6E                        __ptext53 5DDA                        __ptext45 26B0  
                      __ptext37 5BA2                        __ptext29 5D3A                        __ptext70 554C  
                      __ptext62 5E4E                        __ptext54 5E64                        __ptext46 5D9A  
                      __ptext38 1ED8                        __ptext71 5262                        __ptext63 2DB6  
                      __ptext55 5E86                        __ptext47 59EA                        __ptext39 4D50  
                      __ptext72 3AFE                        __ptext64 3648                        __ptext56 5E90  
                      __ptext48 5DBA                        __ptext73 5CF4                        __ptext65 2A4A  
                      __ptext57 5CCC                        __ptext49 5DFA                        __ptext74 5326  
                      __ptext66 46AA                        __ptext58 5CA2                        __ptext75 5E18  
                      __ptext67 438A                        __ptext59 4E54                        __ptext76 5E70  
                      __ptext68 54A6                        __ptext69 53EA       __end_of_amb_light_measure 4C48  
                  _SSP2CON1bits 000ED9                    _SSP2CON2bits 000EDA          ?_color_data_collection 005A  
                turnRight@delay 0030          test_function@test_code 00F5                   turnLeft@delay 0031  
                      action@mL 003B                        action@mR 003D                      turnLeft@mL 0020  
                    turnLeft@mR 0022             __end_of_test_action 3E8C              __end_of_read_color 578C  
                      _pin_init 5DBA                      turnRight@i 002A             __end_of_short_burst 5A2C  
                      isa$xinst 000000            distance_measure@stop 007C                      _RC4STAbits 000EE7  
                      int$flags 005F                     _SENSITIVITY 00FE                        goback@mL 0033  
                      goback@mR 0035                        _vfprintf 56CC                        _turnLeft 438A  
              ___aomod@dividend 0001         __end_of_calibrate_white 3AFE                      _INTCONbits 000FF2  
                   _setMotorPWM 3AFE                   ?_detect_color 0071                     _PWM6CONbits 000FA4  
                   _PWM7CONbits 000FA1                        intlevel2 0000                       sprintf@ap 006C  
             ??_buggylight_init 0001                ??_fullSpeedAhead 001E                   _test_function 4520  
                     turnLeft@i 002B                        lroundf@x 0066        ??_initDCmotors_parameter 0005  
                 _short_reverse 54A6                 ___aomod@divisor 0009                     ??_vfpfcnvrt 0046  
               ___aomod@counter 0011                _color_click_init 5C10                        sprintf@f 006E  
                      sprintf@s 0060               _detect_color$3205 008E                      _SSP2DATPPS 000E1D  
                    _SSP2CLKPPS 000E1C              distance_measure@mL 006A              distance_measure@mR 006C  
                ??_detect_color 0075                     ??_turnRight 0025                     _test_action 3CD2  
                 ___fladd@signs 000D                      _TX4STAbits 000EE8                    ___aodiv@sign 0012  
      short_reverse@instruction 0024                 _sendCharSerial4 5E36                     _short_burst 59EA  
                  ___fladd@aexp 000E                    ___fladd@bexp 000F                  ?_test_function 00E6  
                  _toggle_light 3648                    ___aomod@sign 0012                    _verify_color 55E0  
                   _roundf$3207 004F                     _roundf$3208 0049                   _color_display 565C  
               main@stop_signal 0173  
