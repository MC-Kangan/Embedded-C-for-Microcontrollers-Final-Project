

Microchip MPLAB XC8 Assembler V2.35 build 20211206165544 
                                                                                               Sun Mar 06 23:29:07 2022

Microchip MPLAB XC8 C Compiler v2.35 (Free license) build 20211206165544 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    28                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    29                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    30                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    31  0000                     
    32                           ; Version 2.35
    33                           ; Generated 05/05/2021 GMT
    34                           ; 
    35                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    36                           ; All rights reserved.
    37                           ; 
    38                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    39                           ; 
    40                           ; Redistribution and use in source and binary forms, with or without modification, are
    41                           ; permitted provided that the following conditions are met:
    42                           ; 
    43                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    44                           ;        conditions and the following disclaimer.
    45                           ; 
    46                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    47                           ;        of conditions and the following disclaimer in the documentation and/or other
    48                           ;        materials provided with the distribution. Publication is not required when
    49                           ;        this file is used in an embedded application.
    50                           ; 
    51                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    52                           ;        software without specific prior written permission.
    53                           ; 
    54                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    55                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    56                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    57                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    58                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    59                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    60                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    61                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    62                           ; 
    63                           ; 
    64                           ; Code-generator required, PIC18F67K40 Definitions
    65                           ; 
    66                           ; SFR Addresses
    67  0000                     _TRISFbits	set	3974
    68  0000                     _TX4REG	set	3812
    69  0000                     _RC4STAbits	set	3815
    70  0000                     _SP4BRGH	set	3814
    71  0000                     _TRISGbits	set	3975
    72  0000                     _TRISEbits	set	3973
    73  0000                     _SSP2CON2bits	set	3802
    74  0000                     _LATG	set	3967
    75  0000                     _LATE	set	3965
    76  0000                     _RX4PPS	set	3605
    77  0000                     _SSP2CLKPPS	set	3612
    78  0000                     _SSP2DATPPS	set	3613
    79  0000                     _ANSELDbits	set	3751
    80  0000                     _SSP2ADD	set	3798
    81  0000                     _SSP2CON1bits	set	3801
    82  0000                     _LATAbits	set	3961
    83  0000                     _LATFbits	set	3966
    84  0000                     _LATGbits	set	3967
    85  0000                     _TRISAbits	set	3969
    86  0000                     _TRISCbits	set	3971
    87  0000                     _TRISDbits	set	3972
    88  0000                     _LATCbits	set	3963
    89  0000                     _LATEbits	set	3965
    90  0000                     _RC4REG	set	3811
    91  0000                     _SP4BRGL	set	3813
    92  0000                     _TX4STAbits	set	3816
    93  0000                     _BAUD4CONbits	set	3817
    94  0000                     _SSP2CON2	set	3802
    95  0000                     _SSP2STAT	set	3800
    96  0000                     _ANSELFbits	set	3764
    97  0000                     _SSP2BUF	set	3797
    98  0000                     _PIE4bits	set	3629
    99  0000                     _PIR4bits	set	3639
   100  0000                     _RC0PPS	set	3682
   101  0000                     _RC7PPS	set	3689
   102  0000                     _RD5PPS	set	3695
   103  0000                     _RE2PPS	set	3700
   104  0000                     _RD6PPS	set	3696
   105  0000                     _T2PR	set	4028
   106  0000                     _T2CONbits	set	4029
   107  0000                     _PWM7DCH	set	4000
   108  0000                     _PWM6DCH	set	4003
   109  0000                     _T2CLKCONbits	set	4031
   110  0000                     _T2HLTbits	set	4030
   111  0000                     _PWM6CONbits	set	4004
   112  0000                     _PWM7CONbits	set	4001
   113  0000                     _ADREFbits	set	3928
   114  0000                     _ADPCH	set	3935
   115  0000                     _ADRESH	set	3940
   116  0000                     _ADCON0bits	set	3936
   117                           
   118                           	psect	smallconst
   119  000E00                     __psmallconst:
   120                           	callstack 0
   121  000E00  00                 	db	0
   122  000E01                     STR_1:
   123                           
   124                           ; BSR set to: 14
   125  000E01  09                 	db	9
   126  000E02  25                 	db	37
   127  000E03  64                 	db	100	;'d'
   128  000E04  09                 	db	9
   129  000E05  25                 	db	37
   130  000E06  64                 	db	100	;'d'
   131  000E07  09                 	db	9
   132  000E08  25                 	db	37
   133  000E09  64                 	db	100	;'d'
   134  000E0A  09                 	db	9
   135  000E0B  25                 	db	37
   136  000E0C  64                 	db	100	;'d'
   137  000E0D  0D                 	db	13
   138  000E0E  0A                 	db	10
   139  000E0F  00                 	db	0
   140  000E10  00                 	db	0	; dummy byte at the end
   141  0000                     
   142                           ; #config settings
   143                           
   144                           	psect	cinit
   145  001416                     __pcinit:
   146                           	callstack 0
   147  001416                     start_initialization:
   148                           	callstack 0
   149  001416                     __initialization:
   150                           	callstack 0
   151                           
   152                           ; Clear objects allocated to BANK0 (60 bytes)
   153  001416  EE00  F060         	lfsr	0,__pbssBANK0
   154  00141A  0E3C               	movlw	60
   155  00141C                     clear_0:
   156  00141C  6AEE               	clrf	postinc0,c
   157  00141E  06E8               	decf	wreg,f,c
   158  001420  E1FD               	bnz	clear_0
   159                           
   160                           ; Clear objects allocated to COMRAM (24 bytes)
   161  001422  EE00  F039         	lfsr	0,__pbssCOMRAM
   162  001426  0E18               	movlw	24
   163  001428                     clear_1:
   164  001428  6AEE               	clrf	postinc0,c
   165  00142A  06E8               	decf	wreg,f,c
   166  00142C  E1FD               	bnz	clear_1
   167  00142E                     end_of_initialization:
   168                           	callstack 0
   169  00142E                     __end_of__initialization:
   170                           	callstack 0
   171  00142E  0E00               	movlw	low (__Lsmallconst shr (0+16))
   172  001430  6EF8               	movwf	tblptru,c
   173  001432  0E0E               	movlw	high __Lsmallconst
   174  001434  6EF7               	movwf	tblptrh,c
   175  001436  0100               	movlb	0
   176  001438  EF7B  F009         	goto	_main	;jump to C main() function
   177                           
   178                           	psect	bssCOMRAM
   179  000039                     __pbssCOMRAM:
   180                           	callstack 0
   181  000039                     _EUSART4RXbuf:
   182                           	callstack 0
   183  000039                     	ds	20
   184  00004D                     _TxBufReadCnt:
   185                           	callstack 0
   186  00004D                     	ds	1
   187  00004E                     _TxBufWriteCnt:
   188                           	callstack 0
   189  00004E                     	ds	1
   190  00004F                     _RxBufReadCnt:
   191                           	callstack 0
   192  00004F                     	ds	1
   193  000050                     _RxBufWriteCnt:
   194                           	callstack 0
   195  000050                     	ds	1
   196                           
   197                           	psect	bssBANK0
   198  000060                     __pbssBANK0:
   199                           	callstack 0
   200  000060                     _EUSART4TXbuf:
   201                           	callstack 0
   202  000060                     	ds	60
   203                           
   204                           	psect	cstackCOMRAM
   205  000001                     __pcstackCOMRAM:
   206                           	callstack 0
   207  000001                     ??_I2C_2_Master_Idle:
   208  000001                     ?___wmul:
   209                           	callstack 0
   210  000001                     initDCmotorsPWM@PWMperiod:
   211                           	callstack 0
   212  000001                     initDCmotors_parameter@motorL:
   213                           	callstack 0
   214  000001                     ___wmul@multiplier:
   215                           	callstack 0
   216                           
   217                           ; 2 bytes @ 0x0
   218  000001                     	ds	1
   219  000002                     I2C_2_Master_Write@data_byte:
   220                           	callstack 0
   221                           
   222                           ; 1 bytes @ 0x1
   223  000002                     	ds	1
   224  000003                     color_writetoaddr@value:
   225                           	callstack 0
   226  000003                     initDCmotors_parameter@motorR:
   227                           	callstack 0
   228  000003                     ___wmul@multiplicand:
   229                           	callstack 0
   230                           
   231                           ; 2 bytes @ 0x2
   232  000003                     	ds	1
   233  000004                     color_writetoaddr@address:
   234                           	callstack 0
   235                           
   236                           ; 1 bytes @ 0x3
   237  000004                     	ds	1
   238  000005                     ??_color_click_init:
   239  000005                     ___wmul@product:
   240                           	callstack 0
   241                           
   242                           ; 2 bytes @ 0x4
   243  000005                     	ds	2
   244  000007                     ?___awdiv:
   245                           	callstack 0
   246  000007                     ___awdiv@dividend:
   247                           	callstack 0
   248                           
   249                           ; 2 bytes @ 0x6
   250  000007                     	ds	2
   251  000009                     ___awdiv@divisor:
   252                           	callstack 0
   253                           
   254                           ; 2 bytes @ 0x8
   255  000009                     	ds	2
   256  00000B                     ___awdiv@counter:
   257                           	callstack 0
   258                           
   259                           ; 1 bytes @ 0xA
   260  00000B                     	ds	1
   261  00000C                     ___awdiv@sign:
   262                           	callstack 0
   263                           
   264                           ; 1 bytes @ 0xB
   265  00000C                     	ds	1
   266  00000D                     ___awdiv@quotient:
   267                           	callstack 0
   268                           
   269                           ; 2 bytes @ 0xC
   270  00000D                     	ds	2
   271  00000F                     setMotorPWM@m:
   272                           	callstack 0
   273                           
   274                           ; 2 bytes @ 0xE
   275  00000F                     	ds	2
   276  000011                     ??_setMotorPWM:
   277                           
   278                           ; 1 bytes @ 0x10
   279  000011                     	ds	7
   280  000018                     setMotorPWM@PWMduty:
   281                           	callstack 0
   282                           
   283                           ; 2 bytes @ 0x17
   284  000018                     	ds	2
   285  00001A                     stop@mL:
   286                           	callstack 0
   287  00001A                     turnLeft@mL:
   288                           	callstack 0
   289                           
   290                           ; 2 bytes @ 0x19
   291  00001A                     	ds	2
   292  00001C                     stop@mR:
   293                           	callstack 0
   294  00001C                     turnLeft@mR:
   295                           	callstack 0
   296                           
   297                           ; 2 bytes @ 0x1B
   298  00001C                     	ds	2
   299  00001E                     ??_stop:
   300  00001E                     ??_turnLeft:
   301                           
   302                           ; 1 bytes @ 0x1D
   303  00001E                     	ds	1
   304  00001F                     movement@mL:
   305                           	callstack 0
   306                           
   307                           ; 2 bytes @ 0x1E
   308  00001F                     	ds	2
   309  000021                     movement@mR:
   310                           	callstack 0
   311                           
   312                           ; 2 bytes @ 0x20
   313  000021                     	ds	2
   314  000023                     ??_movement:
   315                           
   316                           ; 1 bytes @ 0x22
   317  000023                     	ds	2
   318  000025                     main@motorL:
   319                           	callstack 0
   320                           
   321                           ; 10 bytes @ 0x24
   322  000025                     	ds	10
   323  00002F                     main@motorR:
   324                           	callstack 0
   325                           
   326                           ; 10 bytes @ 0x2E
   327  00002F                     	ds	10
   328                           
   329 ;;
   330 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   331 ;;
   332 ;; *************** function _main *****************
   333 ;; Defined at:
   334 ;;		line 26 in file "main.c"
   335 ;; Parameters:    Size  Location     Type
   336 ;;		None
   337 ;; Auto vars:     Size  Location     Type
   338 ;;  motorR         10   46[COMRAM] struct DC_motor
   339 ;;  motorL         10   36[COMRAM] struct DC_motor
   340 ;;  rgb             4    0        struct color_rgb
   341 ;;  color           1    0        unsigned char 
   342 ;; Return value:  Size  Location     Type
   343 ;;                  1    wreg      void 
   344 ;; Registers used:
   345 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   346 ;; Tracked objects:
   347 ;;		On entry : 0/0
   348 ;;		On exit  : 0/0
   349 ;;		Unchanged: 0/0
   350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   351 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   352 ;;      Locals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   353 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   354 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   355 ;;Total ram usage:       20 bytes
   356 ;; Hardware stack levels required when called: 4
   357 ;; This function calls:
   358 ;;		_I2C_2_Master_Init
   359 ;;		_color_click_init
   360 ;;		_initDCmotorsPWM
   361 ;;		_initDCmotors_parameter
   362 ;;		_initUSART4
   363 ;;		_movement
   364 ;; This function is called by:
   365 ;;		Startup code after reset
   366 ;; This function uses a non-reentrant model
   367 ;;
   368                           
   369                           	psect	text0
   370  0012F6                     __ptext0:
   371                           	callstack 0
   372  0012F6                     _main:
   373                           	callstack 27
   374  0012F6                     
   375                           ;main.c: 27:     I2C_2_Master_Init();
   376  0012F6  ECE2  F009         	call	_I2C_2_Master_Init	;wreg free
   377  0012FA                     
   378                           ;main.c: 28:     color_click_init();
   379  0012FA  ECC8  F009         	call	_color_click_init	;wreg free
   380  0012FE                     
   381                           ;main.c: 29:     initDCmotorsPWM(199);
   382  0012FE  0E00               	movlw	0
   383  001300  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   384  001302  0EC7               	movlw	199
   385  001304  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
   386  001306  ECA7  F009         	call	_initDCmotorsPWM	;wreg free
   387  00130A                     
   388                           ;main.c: 31:     initUSART4();
   389  00130A  EC41  F00A         	call	_initUSART4	;wreg free
   390  00130E                     
   391                           ;main.c: 33:     struct color_rgb rgb;;main.c: 34:     struct DC_motor motorL, motorR;;m
      +                          ain.c: 36:     initDCmotors_parameter(&motorL, &motorR);
   392  00130E  0E25               	movlw	low main@motorL
   393  001310  6E01               	movwf	initDCmotors_parameter@motorL^0,c
   394  001312  0E00               	movlw	high main@motorL
   395  001314  6E02               	movwf	(initDCmotors_parameter@motorL+1)^0,c
   396  001316  0E2F               	movlw	low main@motorR
   397  001318  6E03               	movwf	initDCmotors_parameter@motorR^0,c
   398  00131A  0E00               	movlw	high main@motorR
   399  00131C  6E04               	movwf	(initDCmotors_parameter@motorR+1)^0,c
   400  00131E  ECF3  F007         	call	_initDCmotors_parameter	;wreg free
   401  001322                     
   402                           ;main.c: 38:     TRISFbits.TRISF6 = 0;
   403  001322  9C86               	bcf	134,6,c	;volatile
   404  001324                     
   405                           ;main.c: 39:     LATFbits.LATF6 = 0;
   406  001324  9C7E               	bcf	126,6,c	;volatile
   407  001326                     
   408                           ;main.c: 41:     TRISGbits.TRISG1 = 0;
   409  001326  9287               	bcf	135,1,c	;volatile
   410  001328                     
   411                           ;main.c: 42:     TRISFbits.TRISF7 = 0;
   412  001328  9E86               	bcf	134,7,c	;volatile
   413  00132A                     
   414                           ;main.c: 43:     TRISAbits.TRISA4 = 0;
   415  00132A  9881               	bcf	129,4,c	;volatile
   416  00132C                     
   417                           ;main.c: 44:     LATGbits.LATG1 = 1;
   418  00132C  827F               	bsf	127,1,c	;volatile
   419  00132E                     
   420                           ;main.c: 45:     LATFbits.LATF7 = 1;
   421  00132E  8E7E               	bsf	126,7,c	;volatile
   422  001330                     
   423                           ;main.c: 46:     LATAbits.LATA4 = 1;
   424  001330  8879               	bsf	121,4,c	;volatile
   425  001332                     l1722:
   426                           
   427                           ;main.c: 62:         movement(&motorL, &motorR);
   428  001332  0E25               	movlw	low main@motorL
   429  001334  6E1F               	movwf	movement@mL^0,c
   430  001336  0E00               	movlw	high main@motorL
   431  001338  6E20               	movwf	(movement@mL+1)^0,c
   432  00133A  0E2F               	movlw	low main@motorR
   433  00133C  6E21               	movwf	movement@mR^0,c
   434  00133E  0E00               	movlw	high main@motorR
   435  001340  6E22               	movwf	(movement@mR+1)^0,c
   436  001342  EC4E  F009         	call	_movement	;wreg free
   437  001346  EF99  F009         	goto	l1722
   438  00134A  EF00  F000         	goto	start
   439  00134E                     __end_of_main:
   440                           	callstack 0
   441                           
   442 ;; *************** function _movement *****************
   443 ;; Defined at:
   444 ;;		line 8 in file "movement.c"
   445 ;; Parameters:    Size  Location     Type
   446 ;;  mL              2   30[COMRAM] PTR struct DC_motor
   447 ;;		 -> main@motorL(10), 
   448 ;;  mR              2   32[COMRAM] PTR struct DC_motor
   449 ;;		 -> main@motorR(10), 
   450 ;; Auto vars:     Size  Location     Type
   451 ;;		None
   452 ;; Return value:  Size  Location     Type
   453 ;;                  1    wreg      void 
   454 ;; Registers used:
   455 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   456 ;; Tracked objects:
   457 ;;		On entry : 0/0
   458 ;;		On exit  : 0/0
   459 ;;		Unchanged: 0/0
   460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   461 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   462 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   463 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   464 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   465 ;;Total ram usage:        6 bytes
   466 ;; Hardware stack levels used: 1
   467 ;; Hardware stack levels required when called: 3
   468 ;; This function calls:
   469 ;;		_stop
   470 ;;		_turnLeft
   471 ;; This function is called by:
   472 ;;		_main
   473 ;; This function uses a non-reentrant model
   474 ;;
   475                           
   476                           	psect	text1
   477  00129C                     __ptext1:
   478                           	callstack 0
   479  00129C                     _movement:
   480                           	callstack 27
   481  00129C                     
   482                           ;movement.c: 8: void movement(struct DC_motor *mL, struct DC_motor *mR);movement.c: 9: {
      +                          ;movement.c: 10:     turnLeft(mL, mR);
   483  00129C  C01F  F01A         	movff	movement@mL,turnLeft@mL
   484  0012A0  C020  F01B         	movff	movement@mL+1,turnLeft@mL+1
   485  0012A4  C021  F01C         	movff	movement@mR,turnLeft@mR
   486  0012A8  C022  F01D         	movff	movement@mR+1,turnLeft@mR+1
   487  0012AC  EC10  F009         	call	_turnLeft	;wreg free
   488  0012B0                     
   489                           ;movement.c: 11:     _delay((unsigned long)((500)*(64000000/4000.0)));
   490  0012B0  0E29               	movlw	41
   491  0012B2  6E24               	movwf	(??_movement+1)^0,c
   492  0012B4  0E96               	movlw	150
   493  0012B6  6E23               	movwf	??_movement^0,c
   494  0012B8  0E7F               	movlw	127
   495  0012BA                     u567:
   496  0012BA  2EE8               	decfsz	wreg,f,c
   497  0012BC  D7FE               	bra	u567
   498  0012BE  2E23               	decfsz	??_movement^0,f,c
   499  0012C0  D7FC               	bra	u567
   500  0012C2  2E24               	decfsz	(??_movement+1)^0,f,c
   501  0012C4  D7FA               	bra	u567
   502  0012C6  F000               	nop	
   503  0012C8                     
   504                           ;movement.c: 12:     stop(mL, mR);
   505  0012C8  C01F  F01A         	movff	movement@mL,stop@mL
   506  0012CC  C020  F01B         	movff	movement@mL+1,stop@mL+1
   507  0012D0  C021  F01C         	movff	movement@mR,stop@mR
   508  0012D4  C022  F01D         	movff	movement@mR+1,stop@mR+1
   509  0012D8  ECBE  F008         	call	_stop	;wreg free
   510                           
   511                           ;movement.c: 13:     _delay((unsigned long)((500)*(64000000/4000.0)));
   512  0012DC  0E29               	movlw	41
   513  0012DE  6E24               	movwf	(??_movement+1)^0,c
   514  0012E0  0E96               	movlw	150
   515  0012E2  6E23               	movwf	??_movement^0,c
   516  0012E4  0E7F               	movlw	127
   517  0012E6                     u577:
   518  0012E6  2EE8               	decfsz	wreg,f,c
   519  0012E8  D7FE               	bra	u577
   520  0012EA  2E23               	decfsz	??_movement^0,f,c
   521  0012EC  D7FC               	bra	u577
   522  0012EE  2E24               	decfsz	(??_movement+1)^0,f,c
   523  0012F0  D7FA               	bra	u577
   524  0012F2  F000               	nop	
   525  0012F4  0012               	return		;funcret
   526  0012F6                     __end_of_movement:
   527                           	callstack 0
   528                           
   529 ;; *************** function _turnLeft *****************
   530 ;; Defined at:
   531 ;;		line 91 in file "dc_motor.c"
   532 ;; Parameters:    Size  Location     Type
   533 ;;  mL              2   25[COMRAM] PTR struct DC_motor
   534 ;;		 -> main@motorL(10), 
   535 ;;  mR              2   27[COMRAM] PTR struct DC_motor
   536 ;;		 -> main@motorR(10), 
   537 ;; Auto vars:     Size  Location     Type
   538 ;;		None
   539 ;; Return value:  Size  Location     Type
   540 ;;                  1    wreg      void 
   541 ;; Registers used:
   542 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   543 ;; Tracked objects:
   544 ;;		On entry : 0/0
   545 ;;		On exit  : 0/0
   546 ;;		Unchanged: 0/0
   547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   548 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   549 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   550 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   551 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   552 ;;Total ram usage:        5 bytes
   553 ;; Hardware stack levels used: 1
   554 ;; Hardware stack levels required when called: 2
   555 ;; This function calls:
   556 ;;		_setMotorPWM
   557 ;; This function is called by:
   558 ;;		_movement
   559 ;; This function uses a non-reentrant model
   560 ;;
   561                           
   562                           	psect	text2
   563  001220                     __ptext2:
   564                           	callstack 0
   565  001220                     _turnLeft:
   566                           	callstack 27
   567  001220                     
   568                           ;dc_motor.c: 91: void turnLeft(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 92:
      +                           {;dc_motor.c: 93:       mL->direction=1;
   569  001220  EE20 F001          	lfsr	2,1
   570  001224  501A               	movf	turnLeft@mL^0,w,c
   571  001226  26D9               	addwf	fsr2l,f,c
   572  001228  501B               	movf	(turnLeft@mL+1)^0,w,c
   573  00122A  22DA               	addwfc	fsr2h,f,c
   574  00122C  0E01               	movlw	1
   575  00122E  6EDF               	movwf	indf2,c
   576                           
   577                           ;dc_motor.c: 94:       mR->direction=1;
   578  001230  EE20 F001          	lfsr	2,1
   579  001234  501C               	movf	turnLeft@mR^0,w,c
   580  001236  26D9               	addwf	fsr2l,f,c
   581  001238  501D               	movf	(turnLeft@mR+1)^0,w,c
   582  00123A  22DA               	addwfc	fsr2h,f,c
   583  00123C  0E01               	movlw	1
   584  00123E  6EDF               	movwf	indf2,c
   585                           
   586                           ;dc_motor.c: 95:       while (mR->power <40){
   587  001240  EF41  F009         	goto	l1608
   588  001244                     l1600:
   589                           
   590                           ;dc_motor.c: 96:         mR->power += 5;
   591  001244  C01C  FFD9         	movff	turnLeft@mR,fsr2l
   592  001248  C01D  FFDA         	movff	turnLeft@mR+1,fsr2h
   593  00124C  0E05               	movlw	5
   594  00124E  26DF               	addwf	indf2,f,c
   595                           
   596                           ;dc_motor.c: 97:         mL->power = 0;
   597  001250  C01A  FFD9         	movff	turnLeft@mL,fsr2l
   598  001254  C01B  FFDA         	movff	turnLeft@mL+1,fsr2h
   599  001258  0E00               	movlw	0
   600  00125A  6EDF               	movwf	indf2,c
   601  00125C                     
   602                           ;dc_motor.c: 98:         setMotorPWM(mR);
   603  00125C  C01C  F00F         	movff	turnLeft@mR,setMotorPWM@m
   604  001260  C01D  F010         	movff	turnLeft@mR+1,setMotorPWM@m+1
   605  001264  EC09  F007         	call	_setMotorPWM	;wreg free
   606  001268                     
   607                           ;dc_motor.c: 99:         setMotorPWM(mL);
   608  001268  C01A  F00F         	movff	turnLeft@mL,setMotorPWM@m
   609  00126C  C01B  F010         	movff	turnLeft@mL+1,setMotorPWM@m+1
   610  001270  EC09  F007         	call	_setMotorPWM	;wreg free
   611  001274                     
   612                           ;dc_motor.c: 100:         _delay((unsigned long)((10)*(64000000/4000.0)));
   613  001274  0ED0               	movlw	208
   614  001276  6E1E               	movwf	??_turnLeft^0,c
   615  001278  0ECA               	movlw	202
   616  00127A                     u587:
   617  00127A  2EE8               	decfsz	wreg,f,c
   618  00127C  D7FE               	bra	u587
   619  00127E  2E1E               	decfsz	??_turnLeft^0,f,c
   620  001280  D7FC               	bra	u587
   621  001282                     l1608:
   622                           
   623                           ;dc_motor.c: 95:       while (mR->power <40){
   624  001282  C01C  FFD9         	movff	turnLeft@mR,fsr2l
   625  001286  C01D  FFDA         	movff	turnLeft@mR+1,fsr2h
   626  00128A  0E27               	movlw	39
   627  00128C  64DF               	cpfsgt	indf2,c
   628  00128E  EF4B  F009         	goto	u491
   629  001292  EF4D  F009         	goto	u490
   630  001296                     u491:
   631  001296  EF22  F009         	goto	l1600
   632  00129A                     u490:
   633  00129A  0012               	return		;funcret
   634  00129C                     __end_of_turnLeft:
   635                           	callstack 0
   636                           
   637 ;; *************** function _stop *****************
   638 ;; Defined at:
   639 ;;		line 79 in file "dc_motor.c"
   640 ;; Parameters:    Size  Location     Type
   641 ;;  mL              2   25[COMRAM] PTR struct DC_motor
   642 ;;		 -> main@motorL(10), 
   643 ;;  mR              2   27[COMRAM] PTR struct DC_motor
   644 ;;		 -> main@motorR(10), 
   645 ;; Auto vars:     Size  Location     Type
   646 ;;		None
   647 ;; Return value:  Size  Location     Type
   648 ;;                  1    wreg      void 
   649 ;; Registers used:
   650 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   651 ;; Tracked objects:
   652 ;;		On entry : 0/0
   653 ;;		On exit  : 0/0
   654 ;;		Unchanged: 0/0
   655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   656 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   657 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   658 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   659 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   660 ;;Total ram usage:        5 bytes
   661 ;; Hardware stack levels used: 1
   662 ;; Hardware stack levels required when called: 2
   663 ;; This function calls:
   664 ;;		_setMotorPWM
   665 ;; This function is called by:
   666 ;;		_movement
   667 ;; This function uses a non-reentrant model
   668 ;;
   669                           
   670                           	psect	text3
   671  00117C                     __ptext3:
   672                           	callstack 0
   673  00117C                     _stop:
   674                           	callstack 27
   675  00117C                     
   676                           ;dc_motor.c: 79: void stop(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 80: {;d
      +                          c_motor.c: 81:     while (mL->power >0 || mR->power >0){
   677  00117C  EFF7  F008         	goto	l1594
   678  001180                     l1580:
   679                           
   680                           ;dc_motor.c: 82:         if (mL->power !=0){mL->power -= 5;}
   681  001180  C01A  FFD9         	movff	stop@mL,fsr2l
   682  001184  C01B  FFDA         	movff	stop@mL+1,fsr2h
   683  001188  50DF               	movf	indf2,w,c
   684  00118A  B4D8               	btfsc	status,2,c
   685  00118C  EFCA  F008         	goto	u451
   686  001190  EFCC  F008         	goto	u450
   687  001194                     u451:
   688  001194  EFD2  F008         	goto	l1584
   689  001198                     u450:
   690  001198  C01A  FFD9         	movff	stop@mL,fsr2l
   691  00119C  C01B  FFDA         	movff	stop@mL+1,fsr2h
   692  0011A0  0E05               	movlw	5
   693  0011A2  5EDF               	subwf	indf2,f,c
   694  0011A4                     l1584:
   695                           
   696                           ;dc_motor.c: 83:         if (mR->power !=0){mR->power -= 5;}
   697  0011A4  C01C  FFD9         	movff	stop@mR,fsr2l
   698  0011A8  C01D  FFDA         	movff	stop@mR+1,fsr2h
   699  0011AC  50DF               	movf	indf2,w,c
   700  0011AE  B4D8               	btfsc	status,2,c
   701  0011B0  EFDC  F008         	goto	u461
   702  0011B4  EFDE  F008         	goto	u460
   703  0011B8                     u461:
   704  0011B8  EFE4  F008         	goto	l1588
   705  0011BC                     u460:
   706  0011BC  C01C  FFD9         	movff	stop@mR,fsr2l
   707  0011C0  C01D  FFDA         	movff	stop@mR+1,fsr2h
   708  0011C4  0E05               	movlw	5
   709  0011C6  5EDF               	subwf	indf2,f,c
   710  0011C8                     l1588:
   711                           
   712                           ;dc_motor.c: 84:         setMotorPWM(mL);
   713  0011C8  C01A  F00F         	movff	stop@mL,setMotorPWM@m
   714  0011CC  C01B  F010         	movff	stop@mL+1,setMotorPWM@m+1
   715  0011D0  EC09  F007         	call	_setMotorPWM	;wreg free
   716  0011D4                     
   717                           ;dc_motor.c: 85:         setMotorPWM(mR);
   718  0011D4  C01C  F00F         	movff	stop@mR,setMotorPWM@m
   719  0011D8  C01D  F010         	movff	stop@mR+1,setMotorPWM@m+1
   720  0011DC  EC09  F007         	call	_setMotorPWM	;wreg free
   721  0011E0                     
   722                           ;dc_motor.c: 86:         _delay((unsigned long)((10)*(64000000/4000.0)));
   723  0011E0  0ED0               	movlw	208
   724  0011E2  6E1E               	movwf	??_stop^0,c
   725  0011E4  0ECA               	movlw	202
   726  0011E6                     u597:
   727  0011E6  2EE8               	decfsz	wreg,f,c
   728  0011E8  D7FE               	bra	u597
   729  0011EA  2E1E               	decfsz	??_stop^0,f,c
   730  0011EC  D7FC               	bra	u597
   731  0011EE                     l1594:
   732                           
   733                           ;dc_motor.c: 81:     while (mL->power >0 || mR->power >0){
   734  0011EE  C01A  FFD9         	movff	stop@mL,fsr2l
   735  0011F2  C01B  FFDA         	movff	stop@mL+1,fsr2h
   736  0011F6  50DF               	movf	indf2,w,c
   737  0011F8  A4D8               	btfss	status,2,c
   738  0011FA  EF01  F009         	goto	u471
   739  0011FE  EF03  F009         	goto	u470
   740  001202                     u471:
   741  001202  EFC0  F008         	goto	l1580
   742  001206                     u470:
   743  001206  C01C  FFD9         	movff	stop@mR,fsr2l
   744  00120A  C01D  FFDA         	movff	stop@mR+1,fsr2h
   745  00120E  50DF               	movf	indf2,w,c
   746  001210  A4D8               	btfss	status,2,c
   747  001212  EF0D  F009         	goto	u481
   748  001216  EF0F  F009         	goto	u480
   749  00121A                     u481:
   750  00121A  EFC0  F008         	goto	l1580
   751  00121E                     u480:
   752  00121E  0012               	return		;funcret
   753  001220                     __end_of_stop:
   754                           	callstack 0
   755                           
   756 ;; *************** function _setMotorPWM *****************
   757 ;; Defined at:
   758 ;;		line 56 in file "dc_motor.c"
   759 ;; Parameters:    Size  Location     Type
   760 ;;  m               2   14[COMRAM] PTR struct DC_motor
   761 ;;		 -> main@motorR(10), main@motorL(10), 
   762 ;; Auto vars:     Size  Location     Type
   763 ;;  PWMduty         2   23[COMRAM] int 
   764 ;; Return value:  Size  Location     Type
   765 ;;                  1    wreg      void 
   766 ;; Registers used:
   767 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   768 ;; Tracked objects:
   769 ;;		On entry : 0/0
   770 ;;		On exit  : 0/0
   771 ;;		Unchanged: 0/0
   772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   773 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   774 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   775 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   776 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   777 ;;Total ram usage:       11 bytes
   778 ;; Hardware stack levels used: 1
   779 ;; Hardware stack levels required when called: 1
   780 ;; This function calls:
   781 ;;		___awdiv
   782 ;;		___wmul
   783 ;; This function is called by:
   784 ;;		_stop
   785 ;;		_turnLeft
   786 ;;		_turnRight
   787 ;;		_fullSpeedAhead
   788 ;;		_turn180
   789 ;; This function uses a non-reentrant model
   790 ;;
   791                           
   792                           	psect	text4
   793  000E12                     __ptext4:
   794                           	callstack 0
   795  000E12                     _setMotorPWM:
   796                           	callstack 27
   797  000E12                     
   798                           ;dc_motor.c: 56: void setMotorPWM(struct DC_motor *m);dc_motor.c: 57: {;dc_motor.c: 58: 
      +                           int PWMduty;;dc_motor.c: 60:  if (m->direction){
   799  000E12  EE20 F001          	lfsr	2,1
   800  000E16  500F               	movf	setMotorPWM@m^0,w,c
   801  000E18  26D9               	addwf	fsr2l,f,c
   802  000E1A  5010               	movf	(setMotorPWM@m+1)^0,w,c
   803  000E1C  22DA               	addwfc	fsr2h,f,c
   804  000E1E  50DF               	movf	indf2,w,c
   805  000E20  B4D8               	btfsc	status,2,c
   806  000E22  EF15  F007         	goto	u411
   807  000E26  EF17  F007         	goto	u410
   808  000E2A                     u411:
   809  000E2A  EF48  F007         	goto	l1566
   810  000E2E                     u410:
   811  000E2E                     
   812                           ;dc_motor.c: 62:   PWMduty=m->PWMperiod - ((int)(m->power)*(m->PWMperiod))/100;
   813  000E2E  C00F  FFD9         	movff	setMotorPWM@m,fsr2l
   814  000E32  C010  FFDA         	movff	setMotorPWM@m+1,fsr2h
   815  000E36  50DF               	movf	indf2,w,c
   816  000E38  6E11               	movwf	??_setMotorPWM^0,c
   817  000E3A  5011               	movf	??_setMotorPWM^0,w,c
   818  000E3C  6E01               	movwf	___wmul@multiplier^0,c
   819  000E3E  6A02               	clrf	(___wmul@multiplier+1)^0,c
   820  000E40  EE20 F007          	lfsr	2,7
   821  000E44  500F               	movf	setMotorPWM@m^0,w,c
   822  000E46  26D9               	addwf	fsr2l,f,c
   823  000E48  5010               	movf	(setMotorPWM@m+1)^0,w,c
   824  000E4A  22DA               	addwfc	fsr2h,f,c
   825  000E4C  CFDE F003          	movff	postinc2,___wmul@multiplicand
   826  000E50  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
   827  000E54  EC1E  F00A         	call	___wmul	;wreg free
   828  000E58  C001  F007         	movff	?___wmul,___awdiv@dividend
   829  000E5C  C002  F008         	movff	?___wmul+1,___awdiv@dividend+1
   830  000E60  0E00               	movlw	0
   831  000E62  6E0A               	movwf	(___awdiv@divisor+1)^0,c
   832  000E64  0E64               	movlw	100
   833  000E66  6E09               	movwf	___awdiv@divisor^0,c
   834  000E68  EC5C  F008         	call	___awdiv	;wreg free
   835  000E6C  EE20 F007          	lfsr	2,7
   836  000E70  500F               	movf	setMotorPWM@m^0,w,c
   837  000E72  26D9               	addwf	fsr2l,f,c
   838  000E74  5010               	movf	(setMotorPWM@m+1)^0,w,c
   839  000E76  22DA               	addwfc	fsr2h,f,c
   840  000E78  CFDE F012          	movff	postinc2,??_setMotorPWM+1
   841  000E7C  CFDD F013          	movff	postdec2,??_setMotorPWM+2
   842  000E80  5007               	movf	?___awdiv^0,w,c
   843  000E82  5C12               	subwf	(??_setMotorPWM+1)^0,w,c
   844  000E84  6E18               	movwf	setMotorPWM@PWMduty^0,c
   845  000E86  5008               	movf	(?___awdiv+1)^0,w,c
   846  000E88  5813               	subwfb	(??_setMotorPWM+2)^0,w,c
   847  000E8A  6E19               	movwf	(setMotorPWM@PWMduty+1)^0,c
   848                           
   849                           ;dc_motor.c: 63:  }
   850  000E8C  EF6B  F007         	goto	l1568
   851  000E90                     l1566:
   852                           
   853                           ;dc_motor.c: 66:   PWMduty=((int)(m->power)*(m->PWMperiod))/100;
   854  000E90  C00F  FFD9         	movff	setMotorPWM@m,fsr2l
   855  000E94  C010  FFDA         	movff	setMotorPWM@m+1,fsr2h
   856  000E98  50DF               	movf	indf2,w,c
   857  000E9A  6E11               	movwf	??_setMotorPWM^0,c
   858  000E9C  5011               	movf	??_setMotorPWM^0,w,c
   859  000E9E  6E01               	movwf	___wmul@multiplier^0,c
   860  000EA0  6A02               	clrf	(___wmul@multiplier+1)^0,c
   861  000EA2  EE20 F007          	lfsr	2,7
   862  000EA6  500F               	movf	setMotorPWM@m^0,w,c
   863  000EA8  26D9               	addwf	fsr2l,f,c
   864  000EAA  5010               	movf	(setMotorPWM@m+1)^0,w,c
   865  000EAC  22DA               	addwfc	fsr2h,f,c
   866  000EAE  CFDE F003          	movff	postinc2,___wmul@multiplicand
   867  000EB2  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
   868  000EB6  EC1E  F00A         	call	___wmul	;wreg free
   869  000EBA  C001  F007         	movff	?___wmul,___awdiv@dividend
   870  000EBE  C002  F008         	movff	?___wmul+1,___awdiv@dividend+1
   871  000EC2  0E00               	movlw	0
   872  000EC4  6E0A               	movwf	(___awdiv@divisor+1)^0,c
   873  000EC6  0E64               	movlw	100
   874  000EC8  6E09               	movwf	___awdiv@divisor^0,c
   875  000ECA  EC5C  F008         	call	___awdiv	;wreg free
   876  000ECE  C007  F018         	movff	?___awdiv,setMotorPWM@PWMduty
   877  000ED2  C008  F019         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
   878  000ED6                     l1568:
   879                           
   880                           ;dc_motor.c: 69:  *(m->dutyHighByte) = PWMduty;
   881  000ED6  EE20 F002          	lfsr	2,2
   882  000EDA  500F               	movf	setMotorPWM@m^0,w,c
   883  000EDC  26D9               	addwf	fsr2l,f,c
   884  000EDE  5010               	movf	(setMotorPWM@m+1)^0,w,c
   885  000EE0  22DA               	addwfc	fsr2h,f,c
   886  000EE2  CFDE F011          	movff	postinc2,??_setMotorPWM
   887  000EE6  CFDD F012          	movff	postdec2,??_setMotorPWM+1
   888  000EEA  C011  FFD9         	movff	??_setMotorPWM,fsr2l
   889  000EEE  C012  FFDA         	movff	??_setMotorPWM+1,fsr2h
   890  000EF2  C018  FFDF         	movff	setMotorPWM@PWMduty,indf2
   891  000EF6                     
   892                           ;dc_motor.c: 71:  if (m->direction){
   893  000EF6  EE20 F001          	lfsr	2,1
   894  000EFA  500F               	movf	setMotorPWM@m^0,w,c
   895  000EFC  26D9               	addwf	fsr2l,f,c
   896  000EFE  5010               	movf	(setMotorPWM@m+1)^0,w,c
   897  000F00  22DA               	addwfc	fsr2h,f,c
   898  000F02  50DF               	movf	indf2,w,c
   899  000F04  B4D8               	btfsc	status,2,c
   900  000F06  EF87  F007         	goto	u421
   901  000F0A  EF89  F007         	goto	u420
   902  000F0E                     u421:
   903  000F0E  EFBE  F007         	goto	l1574
   904  000F12                     u420:
   905  000F12                     
   906                           ;dc_motor.c: 72:   *(m->dir_LAT) = *(m->dir_LAT) | (1<<(m->dir_pin));
   907  000F12  EE20 F004          	lfsr	2,4
   908  000F16  500F               	movf	setMotorPWM@m^0,w,c
   909  000F18  26D9               	addwf	fsr2l,f,c
   910  000F1A  5010               	movf	(setMotorPWM@m+1)^0,w,c
   911  000F1C  22DA               	addwfc	fsr2h,f,c
   912  000F1E  CFDE F011          	movff	postinc2,??_setMotorPWM
   913  000F22  CFDD F012          	movff	postdec2,??_setMotorPWM+1
   914  000F26  C011  FFD9         	movff	??_setMotorPWM,fsr2l
   915  000F2A  C012  FFDA         	movff	??_setMotorPWM+1,fsr2h
   916  000F2E  EE10 F004          	lfsr	1,4
   917  000F32  500F               	movf	setMotorPWM@m^0,w,c
   918  000F34  26E1               	addwf	fsr1l,f,c
   919  000F36  5010               	movf	(setMotorPWM@m+1)^0,w,c
   920  000F38  22E2               	addwfc	fsr1h,f,c
   921  000F3A  CFE6 F013          	movff	postinc1,??_setMotorPWM+2
   922  000F3E  CFE5 F014          	movff	postdec1,??_setMotorPWM+3
   923  000F42  C013  FFE1         	movff	??_setMotorPWM+2,fsr1l
   924  000F46  C014  FFE2         	movff	??_setMotorPWM+3,fsr1h
   925  000F4A  50E7               	movf	indf1,w,c
   926  000F4C  6E15               	movwf	(??_setMotorPWM+4)^0,c
   927  000F4E  EE10 F006          	lfsr	1,6
   928  000F52  500F               	movf	setMotorPWM@m^0,w,c
   929  000F54  26E1               	addwf	fsr1l,f,c
   930  000F56  5010               	movf	(setMotorPWM@m+1)^0,w,c
   931  000F58  22E2               	addwfc	fsr1h,f,c
   932  000F5A  50E7               	movf	indf1,w,c
   933  000F5C  6E16               	movwf	(??_setMotorPWM+5)^0,c
   934  000F5E  0E01               	movlw	1
   935  000F60  6E17               	movwf	(??_setMotorPWM+6)^0,c
   936  000F62  2A16               	incf	(??_setMotorPWM+5)^0,f,c
   937  000F64  EFB6  F007         	goto	u434
   938  000F68                     u435:
   939  000F68  90D8               	bcf	status,0,c
   940  000F6A  3617               	rlcf	(??_setMotorPWM+6)^0,f,c
   941  000F6C                     u434:
   942  000F6C  2E16               	decfsz	(??_setMotorPWM+5)^0,f,c
   943  000F6E  EFB4  F007         	goto	u435
   944  000F72  5017               	movf	(??_setMotorPWM+6)^0,w,c
   945  000F74  1015               	iorwf	(??_setMotorPWM+4)^0,w,c
   946  000F76  6EDF               	movwf	indf2,c
   947                           
   948                           ;dc_motor.c: 73:  } else {
   949  000F78  EFF2  F007         	goto	l197
   950  000F7C                     l1574:
   951                           
   952                           ;dc_motor.c: 74:   *(m->dir_LAT) = *(m->dir_LAT) & (~(1<<(m->dir_pin)));
   953  000F7C  EE20 F004          	lfsr	2,4
   954  000F80  500F               	movf	setMotorPWM@m^0,w,c
   955  000F82  26D9               	addwf	fsr2l,f,c
   956  000F84  5010               	movf	(setMotorPWM@m+1)^0,w,c
   957  000F86  22DA               	addwfc	fsr2h,f,c
   958  000F88  CFDE F011          	movff	postinc2,??_setMotorPWM
   959  000F8C  CFDD F012          	movff	postdec2,??_setMotorPWM+1
   960  000F90  C011  FFD9         	movff	??_setMotorPWM,fsr2l
   961  000F94  C012  FFDA         	movff	??_setMotorPWM+1,fsr2h
   962  000F98  EE10 F004          	lfsr	1,4
   963  000F9C  500F               	movf	setMotorPWM@m^0,w,c
   964  000F9E  26E1               	addwf	fsr1l,f,c
   965  000FA0  5010               	movf	(setMotorPWM@m+1)^0,w,c
   966  000FA2  22E2               	addwfc	fsr1h,f,c
   967  000FA4  CFE6 F013          	movff	postinc1,??_setMotorPWM+2
   968  000FA8  CFE5 F014          	movff	postdec1,??_setMotorPWM+3
   969  000FAC  C013  FFE1         	movff	??_setMotorPWM+2,fsr1l
   970  000FB0  C014  FFE2         	movff	??_setMotorPWM+3,fsr1h
   971  000FB4  50E7               	movf	indf1,w,c
   972  000FB6  6E15               	movwf	(??_setMotorPWM+4)^0,c
   973  000FB8  EE10 F006          	lfsr	1,6
   974  000FBC  500F               	movf	setMotorPWM@m^0,w,c
   975  000FBE  26E1               	addwf	fsr1l,f,c
   976  000FC0  5010               	movf	(setMotorPWM@m+1)^0,w,c
   977  000FC2  22E2               	addwfc	fsr1h,f,c
   978  000FC4  50E7               	movf	indf1,w,c
   979  000FC6  6E16               	movwf	(??_setMotorPWM+5)^0,c
   980  000FC8  0E01               	movlw	1
   981  000FCA  6E17               	movwf	(??_setMotorPWM+6)^0,c
   982  000FCC  2A16               	incf	(??_setMotorPWM+5)^0,f,c
   983  000FCE  EFEB  F007         	goto	u444
   984  000FD2                     u445:
   985  000FD2  90D8               	bcf	status,0,c
   986  000FD4  3617               	rlcf	(??_setMotorPWM+6)^0,f,c
   987  000FD6                     u444:
   988  000FD6  2E16               	decfsz	(??_setMotorPWM+5)^0,f,c
   989  000FD8  EFE9  F007         	goto	u445
   990  000FDC  5017               	movf	(??_setMotorPWM+6)^0,w,c
   991  000FDE  0AFF               	xorlw	255
   992  000FE0  1415               	andwf	(??_setMotorPWM+4)^0,w,c
   993  000FE2  6EDF               	movwf	indf2,c
   994  000FE4                     l197:
   995  000FE4  0012               	return		;funcret
   996  000FE6                     __end_of_setMotorPWM:
   997                           	callstack 0
   998                           
   999 ;; *************** function ___wmul *****************
  1000 ;; Defined at:
  1001 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\Umul16.c"
  1002 ;; Parameters:    Size  Location     Type
  1003 ;;  multiplier      2    0[COMRAM] unsigned int 
  1004 ;;  multiplicand    2    2[COMRAM] unsigned int 
  1005 ;; Auto vars:     Size  Location     Type
  1006 ;;  product         2    4[COMRAM] unsigned int 
  1007 ;; Return value:  Size  Location     Type
  1008 ;;                  2    0[COMRAM] unsigned int 
  1009 ;; Registers used:
  1010 ;;		wreg, status,2, status,0, prodl, prodh
  1011 ;; Tracked objects:
  1012 ;;		On entry : 0/0
  1013 ;;		On exit  : 0/0
  1014 ;;		Unchanged: 0/0
  1015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1016 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1017 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1018 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1019 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1020 ;;Total ram usage:        6 bytes
  1021 ;; Hardware stack levels used: 1
  1022 ;; This function calls:
  1023 ;;		Nothing
  1024 ;; This function is called by:
  1025 ;;		_setMotorPWM
  1026 ;; This function uses a non-reentrant model
  1027 ;;
  1028                           
  1029                           	psect	text5
  1030  00143C                     __ptext5:
  1031                           	callstack 0
  1032  00143C                     ___wmul:
  1033                           	callstack 27
  1034  00143C  5001               	movf	___wmul@multiplier^0,w,c
  1035  00143E  0203               	mulwf	___wmul@multiplicand^0,c
  1036  001440  CFF3 F005          	movff	prodl,___wmul@product
  1037  001444  CFF4 F006          	movff	prodh,___wmul@product+1
  1038  001448  5001               	movf	___wmul@multiplier^0,w,c
  1039  00144A  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  1040  00144C  50F3               	movf	243,w,c
  1041  00144E  2606               	addwf	(___wmul@product+1)^0,f,c
  1042  001450  5002               	movf	(___wmul@multiplier+1)^0,w,c
  1043  001452  0203               	mulwf	___wmul@multiplicand^0,c
  1044  001454  50F3               	movf	243,w,c
  1045  001456  2606               	addwf	(___wmul@product+1)^0,f,c
  1046  001458  C005  F001         	movff	___wmul@product,?___wmul
  1047  00145C  C006  F002         	movff	___wmul@product+1,?___wmul+1
  1048  001460  0012               	return		;funcret
  1049  001462                     __end_of___wmul:
  1050                           	callstack 0
  1051                           
  1052 ;; *************** function ___awdiv *****************
  1053 ;; Defined at:
  1054 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\awdiv.c"
  1055 ;; Parameters:    Size  Location     Type
  1056 ;;  dividend        2    6[COMRAM] int 
  1057 ;;  divisor         2    8[COMRAM] int 
  1058 ;; Auto vars:     Size  Location     Type
  1059 ;;  quotient        2   12[COMRAM] int 
  1060 ;;  sign            1   11[COMRAM] unsigned char 
  1061 ;;  counter         1   10[COMRAM] unsigned char 
  1062 ;; Return value:  Size  Location     Type
  1063 ;;                  2    6[COMRAM] int 
  1064 ;; Registers used:
  1065 ;;		wreg, status,2, status,0
  1066 ;; Tracked objects:
  1067 ;;		On entry : 0/0
  1068 ;;		On exit  : 0/0
  1069 ;;		Unchanged: 0/0
  1070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1071 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1072 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1073 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1074 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1075 ;;Total ram usage:        8 bytes
  1076 ;; Hardware stack levels used: 1
  1077 ;; This function calls:
  1078 ;;		Nothing
  1079 ;; This function is called by:
  1080 ;;		_setMotorPWM
  1081 ;; This function uses a non-reentrant model
  1082 ;;
  1083                           
  1084                           	psect	text6
  1085  0010B8                     __ptext6:
  1086                           	callstack 0
  1087  0010B8                     ___awdiv:
  1088                           	callstack 27
  1089  0010B8  0E00               	movlw	0
  1090  0010BA  6E0C               	movwf	___awdiv@sign^0,c
  1091  0010BC  BE0A               	btfsc	(___awdiv@divisor+1)^0,7,c
  1092  0010BE  EF65  F008         	goto	u350
  1093  0010C2  EF63  F008         	goto	u351
  1094  0010C6                     u351:
  1095  0010C6  EF6B  F008         	goto	l1526
  1096  0010CA                     u350:
  1097  0010CA  6C09               	negf	___awdiv@divisor^0,c
  1098  0010CC  1E0A               	comf	(___awdiv@divisor+1)^0,f,c
  1099  0010CE  B0D8               	btfsc	status,0,c
  1100  0010D0  2A0A               	incf	(___awdiv@divisor+1)^0,f,c
  1101  0010D2  0E01               	movlw	1
  1102  0010D4  6E0C               	movwf	___awdiv@sign^0,c
  1103  0010D6                     l1526:
  1104  0010D6  BE08               	btfsc	(___awdiv@dividend+1)^0,7,c
  1105  0010D8  EF72  F008         	goto	u360
  1106  0010DC  EF70  F008         	goto	u361
  1107  0010E0                     u361:
  1108  0010E0  EF78  F008         	goto	l1532
  1109  0010E4                     u360:
  1110  0010E4  6C07               	negf	___awdiv@dividend^0,c
  1111  0010E6  1E08               	comf	(___awdiv@dividend+1)^0,f,c
  1112  0010E8  B0D8               	btfsc	status,0,c
  1113  0010EA  2A08               	incf	(___awdiv@dividend+1)^0,f,c
  1114  0010EC  0E01               	movlw	1
  1115  0010EE  1A0C               	xorwf	___awdiv@sign^0,f,c
  1116  0010F0                     l1532:
  1117  0010F0  0E00               	movlw	0
  1118  0010F2  6E0E               	movwf	(___awdiv@quotient+1)^0,c
  1119  0010F4  0E00               	movlw	0
  1120  0010F6  6E0D               	movwf	___awdiv@quotient^0,c
  1121  0010F8  5009               	movf	___awdiv@divisor^0,w,c
  1122  0010FA  100A               	iorwf	(___awdiv@divisor+1)^0,w,c
  1123  0010FC  B4D8               	btfsc	status,2,c
  1124  0010FE  EF83  F008         	goto	u371
  1125  001102  EF85  F008         	goto	u370
  1126  001106                     u371:
  1127  001106  EFAD  F008         	goto	l1554
  1128  00110A                     u370:
  1129  00110A  0E01               	movlw	1
  1130  00110C  6E0B               	movwf	___awdiv@counter^0,c
  1131  00110E  EF8D  F008         	goto	l1540
  1132  001112                     l1538:
  1133  001112  90D8               	bcf	status,0,c
  1134  001114  3609               	rlcf	___awdiv@divisor^0,f,c
  1135  001116  360A               	rlcf	(___awdiv@divisor+1)^0,f,c
  1136  001118  2A0B               	incf	___awdiv@counter^0,f,c
  1137  00111A                     l1540:
  1138  00111A  AE0A               	btfss	(___awdiv@divisor+1)^0,7,c
  1139  00111C  EF92  F008         	goto	u381
  1140  001120  EF94  F008         	goto	u380
  1141  001124                     u381:
  1142  001124  EF89  F008         	goto	l1538
  1143  001128                     u380:
  1144  001128                     l1542:
  1145  001128  90D8               	bcf	status,0,c
  1146  00112A  360D               	rlcf	___awdiv@quotient^0,f,c
  1147  00112C  360E               	rlcf	(___awdiv@quotient+1)^0,f,c
  1148  00112E  5009               	movf	___awdiv@divisor^0,w,c
  1149  001130  5C07               	subwf	___awdiv@dividend^0,w,c
  1150  001132  500A               	movf	(___awdiv@divisor+1)^0,w,c
  1151  001134  5808               	subwfb	(___awdiv@dividend+1)^0,w,c
  1152  001136  A0D8               	btfss	status,0,c
  1153  001138  EFA0  F008         	goto	u391
  1154  00113C  EFA2  F008         	goto	u390
  1155  001140                     u391:
  1156  001140  EFA7  F008         	goto	l1550
  1157  001144                     u390:
  1158  001144  5009               	movf	___awdiv@divisor^0,w,c
  1159  001146  5E07               	subwf	___awdiv@dividend^0,f,c
  1160  001148  500A               	movf	(___awdiv@divisor+1)^0,w,c
  1161  00114A  5A08               	subwfb	(___awdiv@dividend+1)^0,f,c
  1162  00114C  800D               	bsf	___awdiv@quotient^0,0,c
  1163  00114E                     l1550:
  1164  00114E  90D8               	bcf	status,0,c
  1165  001150  320A               	rrcf	(___awdiv@divisor+1)^0,f,c
  1166  001152  3209               	rrcf	___awdiv@divisor^0,f,c
  1167  001154  2E0B               	decfsz	___awdiv@counter^0,f,c
  1168  001156  EF94  F008         	goto	l1542
  1169  00115A                     l1554:
  1170  00115A  500C               	movf	___awdiv@sign^0,w,c
  1171  00115C  B4D8               	btfsc	status,2,c
  1172  00115E  EFB3  F008         	goto	u401
  1173  001162  EFB5  F008         	goto	u400
  1174  001166                     u401:
  1175  001166  EFB9  F008         	goto	l1558
  1176  00116A                     u400:
  1177  00116A  6C0D               	negf	___awdiv@quotient^0,c
  1178  00116C  1E0E               	comf	(___awdiv@quotient+1)^0,f,c
  1179  00116E  B0D8               	btfsc	status,0,c
  1180  001170  2A0E               	incf	(___awdiv@quotient+1)^0,f,c
  1181  001172                     l1558:
  1182  001172  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  1183  001176  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  1184  00117A  0012               	return		;funcret
  1185  00117C                     __end_of___awdiv:
  1186                           	callstack 0
  1187                           
  1188 ;; *************** function _initUSART4 *****************
  1189 ;; Defined at:
  1190 ;;		line 4 in file "serial.c"
  1191 ;; Parameters:    Size  Location     Type
  1192 ;;		None
  1193 ;; Auto vars:     Size  Location     Type
  1194 ;;		None
  1195 ;; Return value:  Size  Location     Type
  1196 ;;                  1    wreg      void 
  1197 ;; Registers used:
  1198 ;;		wreg, status,2
  1199 ;; Tracked objects:
  1200 ;;		On entry : 0/0
  1201 ;;		On exit  : 0/0
  1202 ;;		Unchanged: 0/0
  1203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1204 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1205 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1207 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1208 ;;Total ram usage:        0 bytes
  1209 ;; Hardware stack levels used: 1
  1210 ;; This function calls:
  1211 ;;		Nothing
  1212 ;; This function is called by:
  1213 ;;		_main
  1214 ;; This function uses a non-reentrant model
  1215 ;;
  1216                           
  1217                           	psect	text7
  1218  001482                     __ptext7:
  1219                           	callstack 0
  1220  001482                     _initUSART4:
  1221                           	callstack 30
  1222  001482                     
  1223                           ;serial.c: 8:     RC0PPS = 0x12;
  1224  001482  0E12               	movlw	18
  1225  001484  010E               	movlb	14	; () banked
  1226  001486  6F62               	movwf	98,b	;volatile
  1227                           
  1228                           ;serial.c: 9:     RX4PPS = 0x11;
  1229  001488  0E11               	movlw	17
  1230  00148A  6F15               	movwf	21,b	;volatile
  1231  00148C                     
  1232                           ; BSR set to: 14
  1233                           ;serial.c: 11:     BAUD4CONbits.BRG16 = 0;
  1234  00148C  97E9               	bcf	233,3,b	;volatile
  1235  00148E                     
  1236                           ; BSR set to: 14
  1237                           ;serial.c: 12:     TX4STAbits.BRGH = 0;
  1238  00148E  95E8               	bcf	232,2,b	;volatile
  1239                           
  1240                           ;serial.c: 13:     SP4BRGL = 51;
  1241  001490  0E33               	movlw	51
  1242  001492  6FE5               	movwf	229,b	;volatile
  1243                           
  1244                           ;serial.c: 15:     SP4BRGH = 0;
  1245  001494  0E00               	movlw	0
  1246  001496  6FE6               	movwf	230,b	;volatile
  1247  001498                     
  1248                           ; BSR set to: 14
  1249                           ;serial.c: 17:     RC4STAbits.CREN = 1;
  1250  001498  89E7               	bsf	231,4,b	;volatile
  1251  00149A                     
  1252                           ; BSR set to: 14
  1253                           ;serial.c: 18:     TX4STAbits.TXEN = 1;
  1254  00149A  8BE8               	bsf	232,5,b	;volatile
  1255  00149C                     
  1256                           ; BSR set to: 14
  1257                           ;serial.c: 19:     RC4STAbits.SPEN = 1;
  1258  00149C  8FE7               	bsf	231,7,b	;volatile
  1259  00149E                     
  1260                           ; BSR set to: 14
  1261  00149E  0012               	return		;funcret
  1262  0014A0                     __end_of_initUSART4:
  1263                           	callstack 0
  1264                           
  1265 ;; *************** function _initDCmotors_parameter *****************
  1266 ;; Defined at:
  1267 ;;		line 37 in file "dc_motor.c"
  1268 ;; Parameters:    Size  Location     Type
  1269 ;;  motorL          2    0[COMRAM] PTR struct DC_motor
  1270 ;;		 -> main@motorL(10), 
  1271 ;;  motorR          2    2[COMRAM] PTR struct DC_motor
  1272 ;;		 -> main@motorR(10), 
  1273 ;; Auto vars:     Size  Location     Type
  1274 ;;		None
  1275 ;; Return value:  Size  Location     Type
  1276 ;;                  1    wreg      void 
  1277 ;; Registers used:
  1278 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1279 ;; Tracked objects:
  1280 ;;		On entry : 0/0
  1281 ;;		On exit  : 0/0
  1282 ;;		Unchanged: 0/0
  1283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1284 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1285 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1286 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1287 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1288 ;;Total ram usage:        4 bytes
  1289 ;; Hardware stack levels used: 1
  1290 ;; This function calls:
  1291 ;;		Nothing
  1292 ;; This function is called by:
  1293 ;;		_main
  1294 ;; This function uses a non-reentrant model
  1295 ;;
  1296                           
  1297                           	psect	text8
  1298  000FE6                     __ptext8:
  1299                           	callstack 0
  1300  000FE6                     _initDCmotors_parameter:
  1301                           	callstack 30
  1302  000FE6                     
  1303                           ;dc_motor.c: 39:     motorL->power = 0;
  1304  000FE6  C001  FFD9         	movff	initDCmotors_parameter@motorL,fsr2l
  1305  000FEA  C002  FFDA         	movff	initDCmotors_parameter@motorL+1,fsr2h
  1306  000FEE  0E00               	movlw	0
  1307  000FF0  6EDF               	movwf	indf2,c
  1308  000FF2                     
  1309                           ;dc_motor.c: 40:     motorL->direction = 1;
  1310  000FF2  EE20 F001          	lfsr	2,1
  1311  000FF6  5001               	movf	initDCmotors_parameter@motorL^0,w,c
  1312  000FF8  26D9               	addwf	fsr2l,f,c
  1313  000FFA  5002               	movf	(initDCmotors_parameter@motorL+1)^0,w,c
  1314  000FFC  22DA               	addwfc	fsr2h,f,c
  1315  000FFE  0E01               	movlw	1
  1316  001000  6EDF               	movwf	indf2,c
  1317  001002                     
  1318                           ;dc_motor.c: 41:     motorL->dutyHighByte = (unsigned char *)(&PWM6DCH);
  1319  001002  EE20 F002          	lfsr	2,2
  1320  001006  5001               	movf	initDCmotors_parameter@motorL^0,w,c
  1321  001008  26D9               	addwf	fsr2l,f,c
  1322  00100A  5002               	movf	(initDCmotors_parameter@motorL+1)^0,w,c
  1323  00100C  22DA               	addwfc	fsr2h,f,c
  1324  00100E  0EA3               	movlw	163
  1325  001010  6EDE               	movwf	postinc2,c
  1326  001012  0E0F               	movlw	15
  1327  001014  6EDD               	movwf	postdec2,c
  1328  001016                     
  1329                           ;dc_motor.c: 42:     motorL->dir_LAT = (unsigned char *)(&LATE);
  1330  001016  EE20 F004          	lfsr	2,4
  1331  00101A  5001               	movf	initDCmotors_parameter@motorL^0,w,c
  1332  00101C  26D9               	addwf	fsr2l,f,c
  1333  00101E  5002               	movf	(initDCmotors_parameter@motorL+1)^0,w,c
  1334  001020  22DA               	addwfc	fsr2h,f,c
  1335  001022  0E7D               	movlw	125
  1336  001024  6EDE               	movwf	postinc2,c
  1337  001026  0E0F               	movlw	15
  1338  001028  6EDD               	movwf	postdec2,c
  1339  00102A                     
  1340                           ;dc_motor.c: 43:     motorL->dir_pin = 4;
  1341  00102A  EE20 F006          	lfsr	2,6
  1342  00102E  5001               	movf	initDCmotors_parameter@motorL^0,w,c
  1343  001030  26D9               	addwf	fsr2l,f,c
  1344  001032  5002               	movf	(initDCmotors_parameter@motorL+1)^0,w,c
  1345  001034  22DA               	addwfc	fsr2h,f,c
  1346  001036  0E04               	movlw	4
  1347  001038  6EDF               	movwf	indf2,c
  1348  00103A                     
  1349                           ;dc_motor.c: 44:     motorL->PWMperiod = 199;
  1350  00103A  EE20 F007          	lfsr	2,7
  1351  00103E  5001               	movf	initDCmotors_parameter@motorL^0,w,c
  1352  001040  26D9               	addwf	fsr2l,f,c
  1353  001042  5002               	movf	(initDCmotors_parameter@motorL+1)^0,w,c
  1354  001044  22DA               	addwfc	fsr2h,f,c
  1355  001046  0EC7               	movlw	199
  1356  001048  6EDE               	movwf	postinc2,c
  1357  00104A  0E00               	movlw	0
  1358  00104C  6EDD               	movwf	postdec2,c
  1359  00104E                     
  1360                           ;dc_motor.c: 47:     motorR->power = 0;
  1361  00104E  C003  FFD9         	movff	initDCmotors_parameter@motorR,fsr2l
  1362  001052  C004  FFDA         	movff	initDCmotors_parameter@motorR+1,fsr2h
  1363  001056  0E00               	movlw	0
  1364  001058  6EDF               	movwf	indf2,c
  1365                           
  1366                           ;dc_motor.c: 48:     motorR->direction = 1;
  1367  00105A  EE20 F001          	lfsr	2,1
  1368  00105E  5003               	movf	initDCmotors_parameter@motorR^0,w,c
  1369  001060  26D9               	addwf	fsr2l,f,c
  1370  001062  5004               	movf	(initDCmotors_parameter@motorR+1)^0,w,c
  1371  001064  22DA               	addwfc	fsr2h,f,c
  1372  001066  0E01               	movlw	1
  1373  001068  6EDF               	movwf	indf2,c
  1374                           
  1375                           ;dc_motor.c: 49:     motorR->dutyHighByte = (unsigned char *)(&PWM7DCH);
  1376  00106A  EE20 F002          	lfsr	2,2
  1377  00106E  5003               	movf	initDCmotors_parameter@motorR^0,w,c
  1378  001070  26D9               	addwf	fsr2l,f,c
  1379  001072  5004               	movf	(initDCmotors_parameter@motorR+1)^0,w,c
  1380  001074  22DA               	addwfc	fsr2h,f,c
  1381  001076  0EA0               	movlw	160
  1382  001078  6EDE               	movwf	postinc2,c
  1383  00107A  0E0F               	movlw	15
  1384  00107C  6EDD               	movwf	postdec2,c
  1385                           
  1386                           ;dc_motor.c: 50:     motorR->dir_LAT = (unsigned char *)(&LATG);
  1387  00107E  EE20 F004          	lfsr	2,4
  1388  001082  5003               	movf	initDCmotors_parameter@motorR^0,w,c
  1389  001084  26D9               	addwf	fsr2l,f,c
  1390  001086  5004               	movf	(initDCmotors_parameter@motorR+1)^0,w,c
  1391  001088  22DA               	addwfc	fsr2h,f,c
  1392  00108A  0E7F               	movlw	127
  1393  00108C  6EDE               	movwf	postinc2,c
  1394  00108E  0E0F               	movlw	15
  1395  001090  6EDD               	movwf	postdec2,c
  1396                           
  1397                           ;dc_motor.c: 51:     motorR->dir_pin = 6;
  1398  001092  EE20 F006          	lfsr	2,6
  1399  001096  5003               	movf	initDCmotors_parameter@motorR^0,w,c
  1400  001098  26D9               	addwf	fsr2l,f,c
  1401  00109A  5004               	movf	(initDCmotors_parameter@motorR+1)^0,w,c
  1402  00109C  22DA               	addwfc	fsr2h,f,c
  1403  00109E  0E06               	movlw	6
  1404  0010A0  6EDF               	movwf	indf2,c
  1405                           
  1406                           ;dc_motor.c: 52:     motorR->PWMperiod = 199;
  1407  0010A2  EE20 F007          	lfsr	2,7
  1408  0010A6  5003               	movf	initDCmotors_parameter@motorR^0,w,c
  1409  0010A8  26D9               	addwf	fsr2l,f,c
  1410  0010AA  5004               	movf	(initDCmotors_parameter@motorR+1)^0,w,c
  1411  0010AC  22DA               	addwfc	fsr2h,f,c
  1412  0010AE  0EC7               	movlw	199
  1413  0010B0  6EDE               	movwf	postinc2,c
  1414  0010B2  0E00               	movlw	0
  1415  0010B4  6EDD               	movwf	postdec2,c
  1416  0010B6  0012               	return		;funcret
  1417  0010B8                     __end_of_initDCmotors_parameter:
  1418                           	callstack 0
  1419                           
  1420 ;; *************** function _initDCmotorsPWM *****************
  1421 ;; Defined at:
  1422 ;;		line 7 in file "dc_motor.c"
  1423 ;; Parameters:    Size  Location     Type
  1424 ;;  PWMperiod       2    0[COMRAM] int 
  1425 ;; Auto vars:     Size  Location     Type
  1426 ;;		None
  1427 ;; Return value:  Size  Location     Type
  1428 ;;                  1    wreg      void 
  1429 ;; Registers used:
  1430 ;;		wreg, status,2
  1431 ;; Tracked objects:
  1432 ;;		On entry : 0/0
  1433 ;;		On exit  : 0/0
  1434 ;;		Unchanged: 0/0
  1435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1436 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1437 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1439 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1440 ;;Total ram usage:        2 bytes
  1441 ;; Hardware stack levels used: 1
  1442 ;; This function calls:
  1443 ;;		Nothing
  1444 ;; This function is called by:
  1445 ;;		_main
  1446 ;; This function uses a non-reentrant model
  1447 ;;
  1448                           
  1449                           	psect	text9
  1450  00134E                     __ptext9:
  1451                           	callstack 0
  1452  00134E                     _initDCmotorsPWM:
  1453                           	callstack 30
  1454  00134E                     
  1455                           ;dc_motor.c: 10:     TRISEbits.TRISE2=0;
  1456  00134E  9485               	bcf	133,2,c	;volatile
  1457                           
  1458                           ;dc_motor.c: 11:     TRISCbits.TRISC7=0;
  1459  001350  9E83               	bcf	131,7,c	;volatile
  1460                           
  1461                           ;dc_motor.c: 12:     TRISGbits.TRISG6=0;
  1462  001352  9C87               	bcf	135,6,c	;volatile
  1463                           
  1464                           ;dc_motor.c: 13:     TRISEbits.TRISE4=0;
  1465  001354  9885               	bcf	133,4,c	;volatile
  1466                           
  1467                           ;dc_motor.c: 14:     LATEbits.LATE2=0;
  1468  001356  947D               	bcf	125,2,c	;volatile
  1469                           
  1470                           ;dc_motor.c: 15:     LATCbits.LATC7=0;
  1471  001358  9E7B               	bcf	123,7,c	;volatile
  1472                           
  1473                           ;dc_motor.c: 16:     LATGbits.LATG6=0;
  1474  00135A  9C7F               	bcf	127,6,c	;volatile
  1475                           
  1476                           ;dc_motor.c: 17:     LATEbits.LATE4=0;
  1477  00135C  987D               	bcf	125,4,c	;volatile
  1478  00135E                     
  1479                           ;dc_motor.c: 20:     T2CONbits.CKPS=0b011;
  1480  00135E  50BD               	movf	189,w,c	;volatile
  1481  001360  0B8F               	andlw	-113
  1482  001362  0930               	iorlw	48
  1483  001364  6EBD               	movwf	189,c	;volatile
  1484                           
  1485                           ;dc_motor.c: 21:     T2HLTbits.MODE=0b00000;
  1486  001366  0EE0               	movlw	-32
  1487  001368  16BE               	andwf	190,f,c	;volatile
  1488                           
  1489                           ;dc_motor.c: 22:     T2CLKCONbits.CS=0b0001;
  1490  00136A  50BF               	movf	191,w,c	;volatile
  1491  00136C  0BF0               	andlw	-16
  1492  00136E  0901               	iorlw	1
  1493  001370  6EBF               	movwf	191,c	;volatile
  1494                           
  1495                           ;dc_motor.c: 25:     T2PR=200-1;
  1496  001372  0EC7               	movlw	199
  1497  001374  6EBC               	movwf	188,c	;volatile
  1498  001376                     
  1499                           ;dc_motor.c: 26:     T2CONbits.ON=1;
  1500  001376  8EBD               	bsf	189,7,c	;volatile
  1501                           
  1502                           ;dc_motor.c: 28:     RE2PPS=0x0A;
  1503  001378  0E0A               	movlw	10
  1504  00137A  010E               	movlb	14	; () banked
  1505  00137C  6F74               	movwf	116,b	;volatile
  1506                           
  1507                           ;dc_motor.c: 29:     RC7PPS=0x0B;
  1508  00137E  0E0B               	movlw	11
  1509  001380  6F69               	movwf	105,b	;volatile
  1510                           
  1511                           ;dc_motor.c: 31:     PWM6DCH=0;
  1512  001382  0E00               	movlw	0
  1513  001384  6EA3               	movwf	163,c	;volatile
  1514                           
  1515                           ;dc_motor.c: 32:     PWM7DCH=0;
  1516  001386  0E00               	movlw	0
  1517  001388  6EA0               	movwf	160,c	;volatile
  1518  00138A                     
  1519                           ; BSR set to: 14
  1520                           ;dc_motor.c: 34:     PWM6CONbits.EN = 1;
  1521  00138A  8EA4               	bsf	164,7,c	;volatile
  1522  00138C                     
  1523                           ; BSR set to: 14
  1524                           ;dc_motor.c: 35:     PWM7CONbits.EN = 1;
  1525  00138C  8EA1               	bsf	161,7,c	;volatile
  1526  00138E                     
  1527                           ; BSR set to: 14
  1528  00138E  0012               	return		;funcret
  1529  001390                     __end_of_initDCmotorsPWM:
  1530                           	callstack 0
  1531                           
  1532 ;; *************** function _color_click_init *****************
  1533 ;; Defined at:
  1534 ;;		line 8 in file "color.c"
  1535 ;; Parameters:    Size  Location     Type
  1536 ;;		None
  1537 ;; Auto vars:     Size  Location     Type
  1538 ;;		None
  1539 ;; Return value:  Size  Location     Type
  1540 ;;                  1    wreg      void 
  1541 ;; Registers used:
  1542 ;;		wreg, status,2, status,0, cstack
  1543 ;; Tracked objects:
  1544 ;;		On entry : 0/0
  1545 ;;		On exit  : 0/0
  1546 ;;		Unchanged: 0/0
  1547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1548 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1549 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1550 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1551 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1552 ;;Total ram usage:        1 bytes
  1553 ;; Hardware stack levels used: 1
  1554 ;; Hardware stack levels required when called: 3
  1555 ;; This function calls:
  1556 ;;		_I2C_2_Master_Init
  1557 ;;		_color_writetoaddr
  1558 ;; This function is called by:
  1559 ;;		_main
  1560 ;; This function uses a non-reentrant model
  1561 ;;
  1562                           
  1563                           	psect	text10
  1564  001390                     __ptext10:
  1565                           	callstack 0
  1566  001390                     _color_click_init:
  1567                           	callstack 27
  1568  001390                     
  1569                           ;color.c: 11:     I2C_2_Master_Init();
  1570  001390  ECE2  F009         	call	_I2C_2_Master_Init	;wreg free
  1571  001394                     
  1572                           ;color.c: 14:   color_writetoaddr(0x00, 0x01);
  1573  001394  0E01               	movlw	1
  1574  001396  6E03               	movwf	color_writetoaddr@value^0,c
  1575  001398  0E00               	movlw	0
  1576  00139A  EC31  F00A         	call	_color_writetoaddr
  1577  00139E                     
  1578                           ;color.c: 15:     _delay((unsigned long)((3)*(64000000/4000.0)));
  1579  00139E  0E3F               	movlw	63
  1580  0013A0  6E05               	movwf	??_color_click_init^0,c
  1581  0013A2  0E55               	movlw	85
  1582  0013A4                     u607:
  1583  0013A4  2EE8               	decfsz	wreg,f,c
  1584  0013A6  D7FE               	bra	u607
  1585  0013A8  2E05               	decfsz	??_color_click_init^0,f,c
  1586  0013AA  D7FC               	bra	u607
  1587  0013AC  F000               	nop	
  1588  0013AE                     
  1589                           ;color.c: 18:  color_writetoaddr(0x00, 0x03);
  1590  0013AE  0E03               	movlw	3
  1591  0013B0  6E03               	movwf	color_writetoaddr@value^0,c
  1592  0013B2  0E00               	movlw	0
  1593  0013B4  EC31  F00A         	call	_color_writetoaddr
  1594  0013B8                     
  1595                           ;color.c: 21:  color_writetoaddr(0x01, 0xD5);
  1596  0013B8  0ED5               	movlw	213
  1597  0013BA  6E03               	movwf	color_writetoaddr@value^0,c
  1598  0013BC  0E01               	movlw	1
  1599  0013BE  EC31  F00A         	call	_color_writetoaddr
  1600  0013C2  0012               	return		;funcret
  1601  0013C4                     __end_of_color_click_init:
  1602                           	callstack 0
  1603                           
  1604 ;; *************** function _color_writetoaddr *****************
  1605 ;; Defined at:
  1606 ;;		line 24 in file "color.c"
  1607 ;; Parameters:    Size  Location     Type
  1608 ;;  address         1    wreg     unsigned char 
  1609 ;;  value           1    2[COMRAM] unsigned char 
  1610 ;; Auto vars:     Size  Location     Type
  1611 ;;  address         1    3[COMRAM] unsigned char 
  1612 ;; Return value:  Size  Location     Type
  1613 ;;                  1    wreg      void 
  1614 ;; Registers used:
  1615 ;;		wreg, status,2, status,0, cstack
  1616 ;; Tracked objects:
  1617 ;;		On entry : 0/0
  1618 ;;		On exit  : 0/0
  1619 ;;		Unchanged: 0/0
  1620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1621 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1622 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1623 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1624 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1625 ;;Total ram usage:        2 bytes
  1626 ;; Hardware stack levels used: 1
  1627 ;; Hardware stack levels required when called: 2
  1628 ;; This function calls:
  1629 ;;		_I2C_2_Master_Start
  1630 ;;		_I2C_2_Master_Stop
  1631 ;;		_I2C_2_Master_Write
  1632 ;; This function is called by:
  1633 ;;		_color_click_init
  1634 ;; This function uses a non-reentrant model
  1635 ;;
  1636                           
  1637                           	psect	text11
  1638  001462                     __ptext11:
  1639                           	callstack 0
  1640  001462                     _color_writetoaddr:
  1641                           	callstack 27
  1642                           
  1643                           ;incstack = 0
  1644                           ;color_writetoaddr@address stored from wreg
  1645  001462  6E04               	movwf	color_writetoaddr@address^0,c
  1646  001464                     
  1647                           ;color.c: 25:     I2C_2_Master_Start();
  1648  001464  EC5B  F00A         	call	_I2C_2_Master_Start	;wreg free
  1649                           
  1650                           ;color.c: 26:     I2C_2_Master_Write(0x52 | 0x00);
  1651  001468  0E52               	movlw	82
  1652  00146A  EC50  F00A         	call	_I2C_2_Master_Write
  1653                           
  1654                           ;color.c: 27:     I2C_2_Master_Write(0x80 | address);
  1655  00146E  5004               	movf	color_writetoaddr@address^0,w,c
  1656  001470  0980               	iorlw	128
  1657  001472  EC50  F00A         	call	_I2C_2_Master_Write
  1658                           
  1659                           ;color.c: 28:     I2C_2_Master_Write(value);
  1660  001476  5003               	movf	color_writetoaddr@value^0,w,c
  1661  001478  EC50  F00A         	call	_I2C_2_Master_Write
  1662                           
  1663                           ;color.c: 29:     I2C_2_Master_Stop();
  1664  00147C  EC56  F00A         	call	_I2C_2_Master_Stop	;wreg free
  1665  001480  0012               	return		;funcret
  1666  001482                     __end_of_color_writetoaddr:
  1667                           	callstack 0
  1668                           
  1669 ;; *************** function _I2C_2_Master_Write *****************
  1670 ;; Defined at:
  1671 ;;		line 45 in file "i2c.c"
  1672 ;; Parameters:    Size  Location     Type
  1673 ;;  data_byte       1    wreg     unsigned char 
  1674 ;; Auto vars:     Size  Location     Type
  1675 ;;  data_byte       1    1[COMRAM] unsigned char 
  1676 ;; Return value:  Size  Location     Type
  1677 ;;                  1    wreg      void 
  1678 ;; Registers used:
  1679 ;;		wreg, status,2, status,0, cstack
  1680 ;; Tracked objects:
  1681 ;;		On entry : 0/0
  1682 ;;		On exit  : 0/0
  1683 ;;		Unchanged: 0/0
  1684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1685 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1686 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1687 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1688 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1689 ;;Total ram usage:        1 bytes
  1690 ;; Hardware stack levels used: 1
  1691 ;; Hardware stack levels required when called: 1
  1692 ;; This function calls:
  1693 ;;		_I2C_2_Master_Idle
  1694 ;; This function is called by:
  1695 ;;		_color_writetoaddr
  1696 ;;		_color_read_Red
  1697 ;;		_color_read_Blue
  1698 ;;		_color_read_Green
  1699 ;;		_color_read_Clear
  1700 ;; This function uses a non-reentrant model
  1701 ;;
  1702                           
  1703                           	psect	text12
  1704  0014A0                     __ptext12:
  1705                           	callstack 0
  1706  0014A0                     _I2C_2_Master_Write:
  1707                           	callstack 27
  1708                           
  1709                           ;incstack = 0
  1710                           ;I2C_2_Master_Write@data_byte stored from wreg
  1711  0014A0  6E02               	movwf	I2C_2_Master_Write@data_byte^0,c
  1712  0014A2                     
  1713                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  1714  0014A2  ECF7  F009         	call	_I2C_2_Master_Idle	;wreg free
  1715  0014A6                     
  1716                           ;i2c.c: 48:   SSP2BUF = data_byte;
  1717  0014A6  C002  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  1718  0014AA  0012               	return		;funcret
  1719  0014AC                     __end_of_I2C_2_Master_Write:
  1720                           	callstack 0
  1721                           
  1722 ;; *************** function _I2C_2_Master_Stop *****************
  1723 ;; Defined at:
  1724 ;;		line 39 in file "i2c.c"
  1725 ;; Parameters:    Size  Location     Type
  1726 ;;		None
  1727 ;; Auto vars:     Size  Location     Type
  1728 ;;		None
  1729 ;; Return value:  Size  Location     Type
  1730 ;;                  1    wreg      void 
  1731 ;; Registers used:
  1732 ;;		wreg, status,2, status,0, cstack
  1733 ;; Tracked objects:
  1734 ;;		On entry : 0/0
  1735 ;;		On exit  : 0/0
  1736 ;;		Unchanged: 0/0
  1737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1738 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1739 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1740 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1741 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1742 ;;Total ram usage:        0 bytes
  1743 ;; Hardware stack levels used: 1
  1744 ;; Hardware stack levels required when called: 1
  1745 ;; This function calls:
  1746 ;;		_I2C_2_Master_Idle
  1747 ;; This function is called by:
  1748 ;;		_color_writetoaddr
  1749 ;;		_color_read_Red
  1750 ;;		_color_read_Blue
  1751 ;;		_color_read_Green
  1752 ;;		_color_read_Clear
  1753 ;; This function uses a non-reentrant model
  1754 ;;
  1755                           
  1756                           	psect	text13
  1757  0014AC                     __ptext13:
  1758                           	callstack 0
  1759  0014AC                     _I2C_2_Master_Stop:
  1760                           	callstack 27
  1761  0014AC                     
  1762                           ;i2c.c: 41:   I2C_2_Master_Idle();
  1763  0014AC  ECF7  F009         	call	_I2C_2_Master_Idle	;wreg free
  1764  0014B0                     
  1765                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  1766  0014B0  010E               	movlb	14	; () banked
  1767  0014B2  85DA               	bsf	218,2,b	;volatile
  1768  0014B4                     
  1769                           ; BSR set to: 14
  1770  0014B4  0012               	return		;funcret
  1771  0014B6                     __end_of_I2C_2_Master_Stop:
  1772                           	callstack 0
  1773                           
  1774 ;; *************** function _I2C_2_Master_Start *****************
  1775 ;; Defined at:
  1776 ;;		line 27 in file "i2c.c"
  1777 ;; Parameters:    Size  Location     Type
  1778 ;;		None
  1779 ;; Auto vars:     Size  Location     Type
  1780 ;;		None
  1781 ;; Return value:  Size  Location     Type
  1782 ;;                  1    wreg      void 
  1783 ;; Registers used:
  1784 ;;		wreg, status,2, status,0, cstack
  1785 ;; Tracked objects:
  1786 ;;		On entry : 0/0
  1787 ;;		On exit  : 0/0
  1788 ;;		Unchanged: 0/0
  1789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1790 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1791 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1793 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1794 ;;Total ram usage:        0 bytes
  1795 ;; Hardware stack levels used: 1
  1796 ;; Hardware stack levels required when called: 1
  1797 ;; This function calls:
  1798 ;;		_I2C_2_Master_Idle
  1799 ;; This function is called by:
  1800 ;;		_color_writetoaddr
  1801 ;;		_color_read_Red
  1802 ;;		_color_read_Blue
  1803 ;;		_color_read_Green
  1804 ;;		_color_read_Clear
  1805 ;; This function uses a non-reentrant model
  1806 ;;
  1807                           
  1808                           	psect	text14
  1809  0014B6                     __ptext14:
  1810                           	callstack 0
  1811  0014B6                     _I2C_2_Master_Start:
  1812                           	callstack 27
  1813  0014B6                     
  1814                           ;i2c.c: 29:   I2C_2_Master_Idle();
  1815  0014B6  ECF7  F009         	call	_I2C_2_Master_Idle	;wreg free
  1816  0014BA                     
  1817                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  1818  0014BA  010E               	movlb	14	; () banked
  1819  0014BC  81DA               	bsf	218,0,b	;volatile
  1820  0014BE                     
  1821                           ; BSR set to: 14
  1822  0014BE  0012               	return		;funcret
  1823  0014C0                     __end_of_I2C_2_Master_Start:
  1824                           	callstack 0
  1825                           
  1826 ;; *************** function _I2C_2_Master_Idle *****************
  1827 ;; Defined at:
  1828 ;;		line 22 in file "i2c.c"
  1829 ;; Parameters:    Size  Location     Type
  1830 ;;		None
  1831 ;; Auto vars:     Size  Location     Type
  1832 ;;		None
  1833 ;; Return value:  Size  Location     Type
  1834 ;;                  1    wreg      void 
  1835 ;; Registers used:
  1836 ;;		wreg, status,2, status,0
  1837 ;; Tracked objects:
  1838 ;;		On entry : 0/0
  1839 ;;		On exit  : 0/0
  1840 ;;		Unchanged: 0/0
  1841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1843 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1844 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1845 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1846 ;;Total ram usage:        1 bytes
  1847 ;; Hardware stack levels used: 1
  1848 ;; This function calls:
  1849 ;;		Nothing
  1850 ;; This function is called by:
  1851 ;;		_I2C_2_Master_Start
  1852 ;;		_I2C_2_Master_Stop
  1853 ;;		_I2C_2_Master_Write
  1854 ;;		_I2C_2_Master_RepStart
  1855 ;;		_I2C_2_Master_Read
  1856 ;; This function uses a non-reentrant model
  1857 ;;
  1858                           
  1859                           	psect	text15
  1860  0013EE                     __ptext15:
  1861                           	callstack 0
  1862  0013EE                     _I2C_2_Master_Idle:
  1863                           	callstack 27
  1864  0013EE                     l110:
  1865  0013EE  010E               	movlb	14	; () banked
  1866  0013F0  B5D8               	btfsc	216,2,b	;volatile
  1867  0013F2  EFFD  F009         	goto	u11
  1868  0013F6  EFFF  F009         	goto	u10
  1869  0013FA                     u11:
  1870  0013FA  EFF7  F009         	goto	l110
  1871  0013FE                     u10:
  1872  0013FE                     
  1873                           ; BSR set to: 14
  1874  0013FE  CEDA F001          	movff	3802,??_I2C_2_Master_Idle	;volatile
  1875  001402  0E1F               	movlw	31
  1876  001404  1601               	andwf	??_I2C_2_Master_Idle^0,f,c
  1877  001406  A4D8               	btfss	status,2,c
  1878  001408  EF08  F00A         	goto	u21
  1879  00140C  EF0A  F00A         	goto	u20
  1880  001410                     u21:
  1881  001410  EFF7  F009         	goto	l110
  1882  001414                     u20:
  1883  001414                     
  1884                           ; BSR set to: 14
  1885  001414  0012               	return		;funcret
  1886  001416                     __end_of_I2C_2_Master_Idle:
  1887                           	callstack 0
  1888                           
  1889 ;; *************** function _I2C_2_Master_Init *****************
  1890 ;; Defined at:
  1891 ;;		line 4 in file "i2c.c"
  1892 ;; Parameters:    Size  Location     Type
  1893 ;;		None
  1894 ;; Auto vars:     Size  Location     Type
  1895 ;;		None
  1896 ;; Return value:  Size  Location     Type
  1897 ;;                  1    wreg      void 
  1898 ;; Registers used:
  1899 ;;		wreg, status,2
  1900 ;; Tracked objects:
  1901 ;;		On entry : 0/0
  1902 ;;		On exit  : 0/0
  1903 ;;		Unchanged: 0/0
  1904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1906 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1907 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1908 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1909 ;;Total ram usage:        0 bytes
  1910 ;; Hardware stack levels used: 1
  1911 ;; This function calls:
  1912 ;;		Nothing
  1913 ;; This function is called by:
  1914 ;;		_color_click_init
  1915 ;;		_main
  1916 ;; This function uses a non-reentrant model
  1917 ;;
  1918                           
  1919                           	psect	text16
  1920  0013C4                     __ptext16:
  1921                           	callstack 0
  1922  0013C4                     _I2C_2_Master_Init:
  1923                           	callstack 29
  1924  0013C4                     
  1925                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  1926  0013C4  010E               	movlb	14	; () banked
  1927  0013C6  51D9               	movf	217,w,b	;volatile
  1928  0013C8  0BF0               	andlw	-16
  1929  0013CA  0908               	iorlw	8
  1930  0013CC  6FD9               	movwf	217,b	;volatile
  1931  0013CE                     
  1932                           ; BSR set to: 14
  1933                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  1934  0013CE  8BD9               	bsf	217,5,b	;volatile
  1935                           
  1936                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  1937  0013D0  0E9F               	movlw	159
  1938  0013D2  6FD6               	movwf	214,b	;volatile
  1939  0013D4                     
  1940                           ; BSR set to: 14
  1941                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  1942  0013D4  8A84               	bsf	132,5,c	;volatile
  1943  0013D6                     
  1944                           ; BSR set to: 14
  1945                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  1946  0013D6  8C84               	bsf	132,6,c	;volatile
  1947  0013D8                     
  1948                           ; BSR set to: 14
  1949                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  1950  0013D8  9BA7               	bcf	167,5,b	;volatile
  1951  0013DA                     
  1952                           ; BSR set to: 14
  1953                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  1954  0013DA  9DA7               	bcf	167,6,b	;volatile
  1955                           
  1956                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  1957  0013DC  0E1D               	movlw	29
  1958  0013DE  6F1D               	movwf	29,b	;volatile
  1959                           
  1960                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  1961  0013E0  0E1E               	movlw	30
  1962  0013E2  6F1C               	movwf	28,b	;volatile
  1963                           
  1964                           ;i2c.c: 18:   RD5PPS=0x1C;
  1965  0013E4  0E1C               	movlw	28
  1966  0013E6  6F6F               	movwf	111,b	;volatile
  1967                           
  1968                           ;i2c.c: 19:   RD6PPS=0x1B;
  1969  0013E8  0E1B               	movlw	27
  1970  0013EA  6F70               	movwf	112,b	;volatile
  1971  0013EC                     
  1972                           ; BSR set to: 14
  1973  0013EC  0012               	return		;funcret
  1974  0013EE                     __end_of_I2C_2_Master_Init:
  1975                           	callstack 0
  1976                           
  1977                           	psect	rparam
  1978  0000                     
  1979                           	psect	idloc
  1980                           
  1981                           ;Config register IDLOC0 @ 0x200000
  1982                           ;	unspecified, using default values
  1983  200000                     	org	2097152
  1984  200000  0FFF               	dw	4095
  1985                           
  1986                           ;Config register IDLOC1 @ 0x200002
  1987                           ;	unspecified, using default values
  1988  200002                     	org	2097154
  1989  200002  0FFF               	dw	4095
  1990                           
  1991                           ;Config register IDLOC2 @ 0x200004
  1992                           ;	unspecified, using default values
  1993  200004                     	org	2097156
  1994  200004  0FFF               	dw	4095
  1995                           
  1996                           ;Config register IDLOC3 @ 0x200006
  1997                           ;	unspecified, using default values
  1998  200006                     	org	2097158
  1999  200006  0FFF               	dw	4095
  2000                           
  2001                           ;Config register IDLOC4 @ 0x200008
  2002                           ;	unspecified, using default values
  2003  200008                     	org	2097160
  2004  200008  0FFF               	dw	4095
  2005                           
  2006                           ;Config register IDLOC5 @ 0x20000A
  2007                           ;	unspecified, using default values
  2008  20000A                     	org	2097162
  2009  20000A  0FFF               	dw	4095
  2010                           
  2011                           ;Config register IDLOC6 @ 0x20000C
  2012                           ;	unspecified, using default values
  2013  20000C                     	org	2097164
  2014  20000C  0FFF               	dw	4095
  2015                           
  2016                           ;Config register IDLOC7 @ 0x20000E
  2017                           ;	unspecified, using default values
  2018  20000E                     	org	2097166
  2019  20000E  0FFF               	dw	4095
  2020                           
  2021                           	psect	config
  2022                           
  2023                           ;Config register CONFIG1L @ 0x300000
  2024                           ;	External Oscillator mode Selection bits
  2025                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  2026                           ;	Power-up default value for COSC bits
  2027                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  2028  300000                     	org	3145728
  2029  300000  AA                 	db	170
  2030                           
  2031                           ;Config register CONFIG1H @ 0x300001
  2032                           ;	unspecified, using default values
  2033                           ;	Clock Out Enable bit
  2034                           ;	CLKOUTEN = 0x1, unprogrammed default
  2035                           ;	Clock Switch Enable bit
  2036                           ;	CSWEN = 0x1, unprogrammed default
  2037                           ;	Fail-Safe Clock Monitor Enable bit
  2038                           ;	FCMEN = 0x1, unprogrammed default
  2039  300001                     	org	3145729
  2040  300001  FF                 	db	255
  2041                           
  2042                           ;Config register CONFIG2L @ 0x300002
  2043                           ;	unspecified, using default values
  2044                           ;	Master Clear Enable bit
  2045                           ;	MCLRE = 0x1, unprogrammed default
  2046                           ;	Power-up Timer Enable bit
  2047                           ;	PWRTE = 0x1, unprogrammed default
  2048                           ;	Low-power BOR enable bit
  2049                           ;	LPBOREN = 0x1, unprogrammed default
  2050                           ;	Brown-out Reset Enable bits
  2051                           ;	BOREN = 0x3, unprogrammed default
  2052  300002                     	org	3145730
  2053  300002  FF                 	db	255
  2054                           
  2055                           ;Config register CONFIG2H @ 0x300003
  2056                           ;	unspecified, using default values
  2057                           ;	Brown Out Reset Voltage selection bits
  2058                           ;	BORV = 0x3, unprogrammed default
  2059                           ;	ZCD Disable bit
  2060                           ;	ZCD = 0x1, unprogrammed default
  2061                           ;	PPSLOCK bit One-Way Set Enable bit
  2062                           ;	PPS1WAY = 0x1, unprogrammed default
  2063                           ;	Stack Full/Underflow Reset Enable bit
  2064                           ;	STVREN = 0x1, unprogrammed default
  2065                           ;	Debugger Enable bit
  2066                           ;	DEBUG = 0x1, unprogrammed default
  2067                           ;	Extended Instruction Set Enable bit
  2068                           ;	XINST = 0x1, unprogrammed default
  2069  300003                     	org	3145731
  2070  300003  FF                 	db	255
  2071                           
  2072                           ;Config register CONFIG3L @ 0x300004
  2073                           ;	WDT Period Select bits
  2074                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  2075                           ;	WDT operating mode
  2076                           ;	WDTE = OFF, WDT Disabled
  2077  300004                     	org	3145732
  2078  300004  9F                 	db	159
  2079                           
  2080                           ;Config register CONFIG3H @ 0x300005
  2081                           ;	unspecified, using default values
  2082                           ;	WDT Window Select bits
  2083                           ;	WDTCWS = 0x7, unprogrammed default
  2084                           ;	WDT input clock selector
  2085                           ;	WDTCCS = 0x7, unprogrammed default
  2086  300005                     	org	3145733
  2087  300005  FF                 	db	255
  2088                           
  2089                           ;Config register CONFIG4L @ 0x300006
  2090                           ;	unspecified, using default values
  2091                           ;	Write Protection Block 0
  2092                           ;	WRT0 = 0x1, unprogrammed default
  2093                           ;	Write Protection Block 1
  2094                           ;	WRT1 = 0x1, unprogrammed default
  2095                           ;	Write Protection Block 2
  2096                           ;	WRT2 = 0x1, unprogrammed default
  2097                           ;	Write Protection Block 3
  2098                           ;	WRT3 = 0x1, unprogrammed default
  2099                           ;	Write Protection Block 3
  2100                           ;	WRT4 = 0x1, unprogrammed default
  2101                           ;	Write Protection Block 3
  2102                           ;	WRT5 = 0x1, unprogrammed default
  2103                           ;	Write Protection Block 3
  2104                           ;	WRT6 = 0x1, unprogrammed default
  2105                           ;	Write Protection Block 3
  2106                           ;	WRT7 = 0x1, unprogrammed default
  2107  300006                     	org	3145734
  2108  300006  FF                 	db	255
  2109                           
  2110                           ;Config register CONFIG4H @ 0x300007
  2111                           ;	unspecified, using default values
  2112                           ;	Configuration Register Write Protection bit
  2113                           ;	WRTC = 0x1, unprogrammed default
  2114                           ;	Boot Block Write Protection bit
  2115                           ;	WRTB = 0x1, unprogrammed default
  2116                           ;	Data EEPROM Write Protection bit
  2117                           ;	WRTD = 0x1, unprogrammed default
  2118                           ;	Scanner Enable bit
  2119                           ;	SCANE = 0x1, unprogrammed default
  2120                           ;	Low Voltage Programming Enable bit
  2121                           ;	LVP = 0x1, unprogrammed default
  2122  300007                     	org	3145735
  2123  300007  FF                 	db	255
  2124                           
  2125                           ;Config register CONFIG5L @ 0x300008
  2126                           ;	unspecified, using default values
  2127                           ;	UserNVM Program Memory Code Protection bit
  2128                           ;	CP = 0x1, unprogrammed default
  2129                           ;	DataNVM Memory Code Protection bit
  2130                           ;	CPD = 0x1, unprogrammed default
  2131  300008                     	org	3145736
  2132  300008  FF                 	db	255
  2133                           
  2134                           ;Config register CONFIG5H @ 0x300009
  2135                           ;	unspecified, using default values
  2136  300009                     	org	3145737
  2137  300009  FF                 	db	255
  2138                           
  2139                           ;Config register CONFIG6L @ 0x30000A
  2140                           ;	unspecified, using default values
  2141                           ;	Table Read Protection Block 0
  2142                           ;	EBTR0 = 0x1, unprogrammed default
  2143                           ;	Table Read Protection Block 1
  2144                           ;	EBTR1 = 0x1, unprogrammed default
  2145                           ;	Table Read Protection Block 2
  2146                           ;	EBTR2 = 0x1, unprogrammed default
  2147                           ;	Table Read Protection Block 3
  2148                           ;	EBTR3 = 0x1, unprogrammed default
  2149                           ;	Table Read Protection Block 4
  2150                           ;	EBTR4 = 0x1, unprogrammed default
  2151                           ;	Table Read Protection Block 5
  2152                           ;	EBTR5 = 0x1, unprogrammed default
  2153                           ;	Table Read Protection Block 6
  2154                           ;	EBTR6 = 0x1, unprogrammed default
  2155                           ;	Table Read Protection Block 7
  2156                           ;	EBTR7 = 0x1, unprogrammed default
  2157  30000A                     	org	3145738
  2158  30000A  FF                 	db	255
  2159                           
  2160                           ;Config register CONFIG6H @ 0x30000B
  2161                           ;	unspecified, using default values
  2162                           ;	Boot Block Table Read Protection bit
  2163                           ;	EBTRB = 0x1, unprogrammed default
  2164  30000B                     	org	3145739
  2165  30000B  FF                 	db	255
  2166                           tosu	equ	0xFFF
  2167                           tosh	equ	0xFFE
  2168                           tosl	equ	0xFFD
  2169                           stkptr	equ	0xFFC
  2170                           pclatu	equ	0xFFB
  2171                           pclath	equ	0xFFA
  2172                           pcl	equ	0xFF9
  2173                           tblptru	equ	0xFF8
  2174                           tblptrh	equ	0xFF7
  2175                           tblptrl	equ	0xFF6
  2176                           tablat	equ	0xFF5
  2177                           prodh	equ	0xFF4
  2178                           prodl	equ	0xFF3
  2179                           indf0	equ	0xFEF
  2180                           postinc0	equ	0xFEE
  2181                           postdec0	equ	0xFED
  2182                           preinc0	equ	0xFEC
  2183                           plusw0	equ	0xFEB
  2184                           fsr0h	equ	0xFEA
  2185                           fsr0l	equ	0xFE9
  2186                           wreg	equ	0xFE8
  2187                           indf1	equ	0xFE7
  2188                           postinc1	equ	0xFE6
  2189                           postdec1	equ	0xFE5
  2190                           preinc1	equ	0xFE4
  2191                           plusw1	equ	0xFE3
  2192                           fsr1h	equ	0xFE2
  2193                           fsr1l	equ	0xFE1
  2194                           bsr	equ	0xFE0
  2195                           indf2	equ	0xFDF
  2196                           postinc2	equ	0xFDE
  2197                           postdec2	equ	0xFDD
  2198                           preinc2	equ	0xFDC
  2199                           plusw2	equ	0xFDB
  2200                           fsr2h	equ	0xFDA
  2201                           fsr2l	equ	0xFD9
  2202                           status	equ	0xFD8

Data Sizes:
    Strings     15
    Constant    0
    Data        0
    BSS         84
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     56      80
    BANK0           160      0      60
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    vfprintf$2	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), 

    vfprintf$1	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_2(CODE[5]), STR_1(CODE[15]), 

    vfprintf$0	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    S2007$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S2007$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    movement@mR	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(COMRAM[10]), 

    movement@mL	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(COMRAM[10]), 

    motorR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhlll[1]), PWM6DCH(BITBIGSFRhhhlll[1]), 

    motorL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhlll[1]), PWM6DCH(BITBIGSFRhhhlll[1]), 

    voltage_display@m.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    voltage_display@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhlll[1]), PWM6DCH(BITBIGSFRhhhlll[1]), 

    voltage_read@m.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    voltage_read@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhlll[1]), PWM6DCH(BITBIGSFRhhhlll[1]), 

    turn180@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    turn180@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhlll[1]), PWM6DCH(BITBIGSFRhhhlll[1]), 

    turn180@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    turn180@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhlll[1]), PWM6DCH(BITBIGSFRhhhlll[1]), 

    fullSpeedAhead@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    fullSpeedAhead@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhlll[1]), PWM6DCH(BITBIGSFRhhhlll[1]), 

    fullSpeedAhead@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    fullSpeedAhead@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhlll[1]), PWM6DCH(BITBIGSFRhhhlll[1]), 

    turnRight@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhlll[1]), PWM6DCH(BITBIGSFRhhhlll[1]), 

    turnRight@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhlll[1]), PWM6DCH(BITBIGSFRhhhlll[1]), 

    turnLeft@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhlll[1]), PWM6DCH(BITBIGSFRhhhlll[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(COMRAM[10]), 

    turnLeft@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhlll[1]), PWM6DCH(BITBIGSFRhhhlll[1]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(COMRAM[10]), 

    stop@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhlll[1]), PWM6DCH(BITBIGSFRhhhlll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(COMRAM[10]), 

    stop@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhlll[1]), PWM6DCH(BITBIGSFRhhhlll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(COMRAM[10]), 

    setMotorPWM@m.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhlll[1]), PWM6DCH(BITBIGSFRhhhlll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(COMRAM[10]), main@motorL(COMRAM[10]), 

    initDCmotors_parameter@motorR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    initDCmotors_parameter@motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhlll[1]), PWM6DCH(BITBIGSFRhhhlll[1]), 

    initDCmotors_parameter@motorR	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(COMRAM[10]), 

    S842DC_motor$dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    initDCmotors_parameter@motorL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    S842DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhlll[1]), PWM6DCH(BITBIGSFRhhhlll[1]), 

    initDCmotors_parameter@motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhlll[1]), PWM6DCH(BITBIGSFRhhhlll[1]), 

    initDCmotors_parameter@motorL	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(COMRAM[10]), 


Critical Paths under _main in COMRAM

    _main->_movement
    _movement->_stop
    _movement->_turnLeft
    _turnLeft->_setMotorPWM
    _stop->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                25    25      0    5697
                                             36 COMRAM    20    20      0
                  _I2C_2_Master_Init
                   _color_click_init
                    _initDCmotorsPWM
             _initDCmotors_parameter
                         _initUSART4
                           _movement
 ---------------------------------------------------------------------------------
 (1) _movement                                             6     2      4    4760
                                             30 COMRAM     6     2      4
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (2) _turnLeft                                             5     1      4    2249
                                             25 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _stop                                                 5     1      4    2271
                                             25 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                         11     9      2    1943
                                             14 COMRAM    11     9      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     355
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     496
                                              6 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotors_parameter                               4     0      4     416
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      76
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     287
                                              4 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     287
                                              2 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      15
                                              1 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_2_Master_Init
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
   _initDCmotorsPWM
   _initDCmotors_parameter
   _initUSART4
   _movement
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _setMotorPWM

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      58        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      3C       5       37.5%
BITBIGSFRllhhl      6E      0       0      43        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     38      50       1       84.2%
BITBIGSFRhhhh       40      0       0      32        0.0%
BITBIGSFRlllllh     32      0       0      48        0.0%
BITBIGSFRlllllh     2A      0       0      52        0.0%
BITBIGSFRllllll     26      0       0      56        0.0%
BITBIGSFRllllhh     20      0       0      46        0.0%
BITBIGSFRhhhlll     18      0       0      35        0.0%
BITBIGSFRhhhlh      17      0       0      33        0.0%
BITBIGSFRllhhhh     14      0       0      40        0.0%
BITBIGSFRlllllh      F      0       0      54        0.0%
BITBIGSFRllllhl      C      0       0      47        0.0%
BITBIGSFRlllllh      9      0       0      53        0.0%
BITBIGSFRllhlll      8      0       0      44        0.0%
BITBIGSFRllhhhl      6      0       0      42        0.0%
BITBIGSFRllllll      6      0       0      55        0.0%
BITBIGSFRlllllh      6      0       0      51        0.0%
BITBIGSFRlllllh      5      0       0      50        0.0%
BITBIGSFRllhhhh      3      0       0      41        0.0%
BITBIGSFRlllllh      3      0       0      49        0.0%
BITBIGSFRhlh         1      0       0      36        0.0%
BITBIGSFRhhhllh      1      0       0      34        0.0%
BITBIGSFRlhh         1      0       0      38        0.0%
BITBIGSFRlllh        1      0       0      45        0.0%
BITBIGSFRlhl         1      0       0      39        0.0%
BITBIGSFRhll         1      0       0      37        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      8C      57        0.0%
DATA                 0      0      8C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.35 build 20211206165544 
Symbol Table                                                                                   Sun Mar 06 23:29:07 2022

                            l41 13C2                              l44 1480                              u10 13FE  
                            u11 13FA                              u20 1414                              u21 1410  
                  ___awdiv@sign 000C             ___wmul@multiplicand 0003                             l110 13EE  
                           l113 1414                             l122 14B4                             l107 13EC  
                           l211 129A                             l116 14BE                             l125 14AA  
                           l205 121E                             l410 1460                             l190 10B6  
                           l407 12F4                             l274 149E                             l187 138E  
                           l197 0FE4                             l641 117A                             u400 116A  
                           u401 1166                             u410 0E2E                             u411 0E2A  
                           u420 0F12                             u421 0F0E                             u350 10CA  
                           u351 10C6                             u360 10E4                             u361 10E0  
                           u370 110A                             u434 0F6C                             u450 1198  
                           u371 1106                             u435 0F68                             u451 1194  
                           u380 1128                             u444 0FD6                             u460 11BC  
                           u381 1124                             u445 0FD2                             u461 11B8  
                           u390 1144                             u470 1206                             u607 13A4  
                           u391 1140                             u471 1202                             u480 121E  
                           u481 121A                             u490 129A                             u491 1296  
                           u567 12BA                             u577 12E6                             u587 127A  
                           u597 11E6                             wreg 000FE8                            l1300 1482  
                          l1150 14A6                            l1310 149C                            l1302 148C  
                          l1144 14B6                            l1152 14AC                            l1304 148E  
                          l1170 13C4                            l1090 13EE                            l1146 14BA  
                          l1154 14B0                            l1306 1498                            l1180 13DA  
                          l1172 13CE                            l1092 13FE                            l1148 14A2  
                          l1308 149A                            l1174 13D4                            l1176 13D6  
                          l1520 10BC                            l1512 143C                            l1600 1244  
                          l1178 13D8                            l1610 1390                            l1530 10EC  
                          l1522 10CA                            l1514 1458                            l1602 125C  
                          l1612 1394                            l1620 134E                            l1540 111A  
                          l1532 10F0                            l1524 10D2                            l1604 1268  
                          l1700 130A                            l1614 139E                            l1622 135E  
                          l1630 0FE6                            l1550 114E                            l1542 1128  
                          l1534 10F8                            l1526 10D6                            l1518 10B8  
                          l1606 1274                            l1710 1328                            l1702 130E  
                          l1616 13AE                            l1624 1376                            l1640 103A  
                          l1632 0FF2                            l1552 1154                            l1544 112E  
                          l1536 110A                            l1528 10E4                            l1608 1282  
                          l1720 1332                            l1712 132A                            l1704 1322  
                          l1618 13B8                            l1626 138A                            l1642 104E  
                          l1634 1002                            l1546 1144                            l1538 1112  
                          l1554 115A                            l1570 0EF6                            l1562 0E12  
                          l1722 1332                            l1714 132C                            l1706 1324  
                          l1628 138C                            l1636 1016                            l1556 116A  
                          l1548 114C                            l1572 0F12                            l1564 0E2E  
                          l1580 1180                            l1644 129C                            l1716 132E  
                          l1708 1326                            l1638 102A                            l1558 1172  
                          l1574 0F7C                            l1566 0E90                            l1590 11D4  
                          l1582 1198                            l1646 12B0                            l1718 1330  
                          l1576 1464                            l1568 0ED6                            l1592 11E0  
                          l1584 11A4                            l1648 12C8                            l1586 11BC  
                          l1594 11EE                            l1578 117C                            l1596 1206  
                          l1588 11C8                            l1598 1220                            l1694 12F6  
                          l1696 12FA                            l1698 12FE                            STR_1 0E01  
                  _BAUD4CONbits 000EE9                            _LATE 000F7D                            _LATG 000F7F  
                          _T2PR 000FBC                            _main 12F6                            fsr1h 000FE2  
                          fsr2h 000FDA                            indf1 000FE7                            indf2 000FDF  
                          fsr1l 000FE1                            fsr2l 000FD9                            _stop 117C  
                          prodh 000FF4                            prodl 000FF3                            start 0000  
                  ___param_bank 000000                           ?_main 0001                           _ADPCH 000F5F  
               __end_of___awdiv 117C                           ?_stop 001A                 ___awdiv@divisor 0009  
               ___awdiv@counter 000B      __end_of_I2C_2_Master_Start 14C0      __end_of_I2C_2_Master_Write 14AC  
                         status 000FD8                 __initialization 1416                    __end_of_main 134E  
                  __end_of_stop 1220                          ??_main 0025                          ??_stop 001E  
                 __activetblptr 000001          _initDCmotors_parameter 0FE6                    ?_setMotorPWM 000F  
                        _ADRESH 000F64                ___awdiv@dividend 0007                          _RC0PPS 000E62  
                        _RC4REG 000EE3                          _RE2PPS 000E74                          _RD5PPS 000E6F  
                        _RC7PPS 000E69                          _RD6PPS 000E70        __end_of_color_click_init 13C4  
                        _RX4PPS 000E15                          _TX4REG 000EE4                          ___wmul 143C  
                     ??___awdiv 000B                          clear_0 141C                          clear_1 1428  
              ___awdiv@quotient 000D                          isa$std 000001                __end_of_movement 12F6  
                  __mediumconst 0000                          tblptrh 000FF7                          tblptru 000FF8  
                        stop@mL 001A                          stop@mR 001C               ??_initDCmotorsPWM 0003  
              __end_of_turnLeft 129C                      __accesstop 0060         __end_of__initialization 142E  
  initDCmotors_parameter@motorL 0001    initDCmotors_parameter@motorR 0003                   ___rparam_used 000001  
                __pcstackCOMRAM 0001                      __pbssBANK0 0060               _color_writetoaddr 1462  
                  _T2CLKCONbits 000FBF              ?_color_writetoaddr 0003                         ?___wmul 0001  
           ??_color_writetoaddr 0004                         _SP4BRGH 000EE6                         _SP4BRGL 000EE5  
                       _PWM6DCH 000FA3                         _PWM7DCH 000FA0                         _SSP2ADD 000ED6  
                       _SSP2BUF 000ED5          color_writetoaddr@value 0003       __end_of_color_writetoaddr 1482  
                     _ADREFbits 000F58              _I2C_2_Master_Start 14B6                      _initUSART4 1482  
            _I2C_2_Master_Write 14A0                         __Hparam 0000                         __Lparam 0000  
                     ?_movement 001F                         ___awdiv 10B8             ?_I2C_2_Master_Start 0001  
           ?_I2C_2_Master_Write 0001                    __psmallconst 0E00                         __pcinit 1416  
                       __ramtop 0E00                       ?_turnLeft 001A                         __ptext0 12F6  
                       __ptext1 129C                         __ptext2 1220                         __ptext3 117C  
                       __ptext4 0E12                         __ptext5 143C                         __ptext6 10B8  
                       __ptext7 1482                         __ptext8 0FE6                         __ptext9 134E  
       ?_initDCmotors_parameter 0001                       _T2CONbits 000FBD                       _T2HLTbits 000FBE  
                 _RxBufWriteCnt 0050            ??_I2C_2_Master_Start 0002            ??_I2C_2_Master_Write 0002  
          end_of_initialization 142E              setMotorPWM@PWMduty 0018               ?_color_click_init 0001  
            ??_color_click_init 0005                      ??_movement 0023                         postdec1 000FE5  
                       postdec2 000FDD                         postinc0 000FEE                         postinc1 000FE6  
                       postinc2 000FDE                 _initDCmotorsPWM 134E                      ??_turnLeft 001E  
__end_of_initDCmotors_parameter 10B8                       _TRISAbits 000F81                       _TRISCbits 000F83  
                     _TRISDbits 000F84                       _TRISEbits 000F85                       _TRISFbits 000F86  
                     _TRISGbits 000F87        color_writetoaddr@address 0004                    _EUSART4RXbuf 0039  
                  _EUSART4TXbuf 0060                     ?_initUSART4 0001                      main@motorL 0025  
                    main@motorR 002F                  __end_of___wmul 1462             start_initialization 1416  
                 _TxBufWriteCnt 004E         __end_of_initDCmotorsPWM 1390                        ??___wmul 0005  
                   __pbssCOMRAM 0039                        ?___awdiv 0007                     __smallconst 0E00  
             _I2C_2_Master_Idle 13EE               _I2C_2_Master_Init 13C4               _I2C_2_Master_Stop 14AC  
                  _RxBufReadCnt 004F              ?_I2C_2_Master_Idle 0001              ?_I2C_2_Master_Init 0001  
                 ??_setMotorPWM 0011              ?_I2C_2_Master_Stop 0001        initDCmotorsPWM@PWMperiod 0001  
           ??_I2C_2_Master_Idle 0001             ??_I2C_2_Master_Init 0001                  ___wmul@product 0005  
                      _LATAbits 000F79             ??_I2C_2_Master_Stop 0002                        _LATCbits 000F7B  
                    movement@mL 001F                        _LATEbits 000F7D                      movement@mR 0021  
                      _LATFbits 000F7E                        _LATGbits 000F7F                        _PIE4bits 000E2D  
                      _PIR4bits 000E37                ?_initDCmotorsPWM 0001                        _SSP2CON2 000EDA  
                      _SSP2STAT 000ED8                      _ADCON0bits 000F60       __end_of_I2C_2_Master_Idle 1416  
     __end_of_I2C_2_Master_Init 13EE               ___wmul@multiplier 0001       __end_of_I2C_2_Master_Stop 14B6  
                  setMotorPWM@m 000F     I2C_2_Master_Write@data_byte 0002                    _TxBufReadCnt 004D  
           __end_of_setMotorPWM 0FE6                    ??_initUSART4 0001                        __Hrparam 0000  
                      __Lrparam 0000                    __Lsmallconst 0E00                      _ANSELDbits 000EA7  
                    _ANSELFbits 000EB4              __end_of_initUSART4 14A0                        __ptext10 1390  
                      __ptext11 1462                        __ptext12 14A0                        __ptext13 14AC  
                      __ptext14 14B6                        __ptext15 13EE                        __ptext16 13C4  
                  _SSP2CON1bits 000ED9                    _SSP2CON2bits 000EDA                      turnLeft@mL 001A  
                    turnLeft@mR 001C                        _movement 129C                        isa$xinst 000000  
                    _RC4STAbits 000EE7                        _turnLeft 1220                     _setMotorPWM 0E12  
                   _PWM6CONbits 000FA4                     _PWM7CONbits 000FA1        ??_initDCmotors_parameter 0005  
              _color_click_init 1390                      _SSP2DATPPS 000E1D                      _SSP2CLKPPS 000E1C  
                    _TX4STAbits 000EE8  
