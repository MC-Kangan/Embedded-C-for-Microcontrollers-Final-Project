

Microchip MPLAB XC8 Assembler V2.35 build 20211206165544 
                                                                                               Wed Mar 09 09:51:04 2022

Microchip MPLAB XC8 C Compiler v2.35 (Free license) build 20211206165544 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=3
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=3
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=3
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=3
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=3
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=3
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=2
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=2
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=2
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=2
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    60                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    61                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    62                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    63  0000                     
    64                           ; Version 2.35
    65                           ; Generated 05/05/2021 GMT
    66                           ; 
    67                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    68                           ; All rights reserved.
    69                           ; 
    70                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    71                           ; 
    72                           ; Redistribution and use in source and binary forms, with or without modification, are
    73                           ; permitted provided that the following conditions are met:
    74                           ; 
    75                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    76                           ;        conditions and the following disclaimer.
    77                           ; 
    78                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    79                           ;        of conditions and the following disclaimer in the documentation and/or other
    80                           ;        materials provided with the distribution. Publication is not required when
    81                           ;        this file is used in an embedded application.
    82                           ; 
    83                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    84                           ;        software without specific prior written permission.
    85                           ; 
    86                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    87                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    88                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    89                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    90                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    91                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    92                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    93                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    94                           ; 
    95                           ; 
    96                           ; Code-generator required, PIC18F67K40 Definitions
    97                           ; 
    98                           ; SFR Addresses
    99  0000                     
   100                           	psect	idataBANK0
   101  0027BA                     __pidataBANK0:
   102                           	callstack 0
   103                           
   104                           ;initializer for _color
   105  0027BA  02                 	db	2
   106  0000                     _TRISFbits	set	3974
   107  0000                     _TX4REG	set	3812
   108  0000                     _RC4STAbits	set	3815
   109  0000                     _SP4BRGH	set	3814
   110  0000                     _TRISGbits	set	3975
   111  0000                     _TRISEbits	set	3973
   112  0000                     _SSP2CON2bits	set	3802
   113  0000                     _LATG	set	3967
   114  0000                     _LATE	set	3965
   115  0000                     _RX4PPS	set	3605
   116  0000                     _SSP2CLKPPS	set	3612
   117  0000                     _SSP2DATPPS	set	3613
   118  0000                     _ANSELDbits	set	3751
   119  0000                     _SSP2ADD	set	3798
   120  0000                     _SSP2CON1bits	set	3801
   121  0000                     _LATAbits	set	3961
   122  0000                     _LATFbits	set	3966
   123  0000                     _LATGbits	set	3967
   124  0000                     _TRISAbits	set	3969
   125  0000                     _TRISCbits	set	3971
   126  0000                     _TRISDbits	set	3972
   127  0000                     _LATCbits	set	3963
   128  0000                     _LATEbits	set	3965
   129  0000                     _RC4REG	set	3811
   130  0000                     _SP4BRGL	set	3813
   131  0000                     _TX4STAbits	set	3816
   132  0000                     _BAUD4CONbits	set	3817
   133  0000                     _SSP2CON2	set	3802
   134  0000                     _SSP2STAT	set	3800
   135  0000                     _ANSELFbits	set	3764
   136  0000                     _SSP2BUF	set	3797
   137  0000                     _PIE4bits	set	3629
   138  0000                     _PIR4bits	set	3639
   139  0000                     _RC0PPS	set	3682
   140  0000                     _RC7PPS	set	3689
   141  0000                     _RD5PPS	set	3695
   142  0000                     _RE2PPS	set	3700
   143  0000                     _RD6PPS	set	3696
   144  0000                     _T2PR	set	4028
   145  0000                     _T2CONbits	set	4029
   146  0000                     _PWM7DCH	set	4000
   147  0000                     _PWM6DCH	set	4003
   148  0000                     _T2CLKCONbits	set	4031
   149  0000                     _T2HLTbits	set	4030
   150  0000                     _PWM6CONbits	set	4004
   151  0000                     _PWM7CONbits	set	4001
   152  0000                     _ADREFbits	set	3928
   153  0000                     _ADPCH	set	3935
   154  0000                     _ADRESH	set	3940
   155  0000                     _ADCON0bits	set	3936
   156                           
   157                           	psect	smallconst
   158  000E00                     __psmallconst:
   159                           	callstack 0
   160  000E00  00                 	db	0
   161  000E01                     STR_1:
   162  000E01  09                 	db	9
   163  000E02  25                 	db	37
   164  000E03  64                 	db	100	;'d'
   165  000E04  09                 	db	9
   166  000E05  25                 	db	37
   167  000E06  64                 	db	100	;'d'
   168  000E07  09                 	db	9
   169  000E08  25                 	db	37
   170  000E09  64                 	db	100	;'d'
   171  000E0A  09                 	db	9
   172  000E0B  25                 	db	37
   173  000E0C  64                 	db	100	;'d'
   174  000E0D  0D                 	db	13
   175  000E0E  0A                 	db	10
   176  000E0F  00                 	db	0
   177  000E10  4C                 	db	76	;'L'
   178  000E11  69                 	db	105	;'i'
   179  000E12  67                 	db	103	;'g'
   180  000E13  68                 	db	104	;'h'
   181  000E14  74                 	db	116	;'t'
   182  000E15  20                 	db	32
   183  000E16  62                 	db	98	;'b'
   184  000E17  6C                 	db	108	;'l'
   185  000E18  75                 	db	117	;'u'
   186  000E19  65                 	db	101	;'e'
   187  000E1A  00                 	db	0
   188  000E1B  4F                 	db	79	;'O'
   189  000E1C  72                 	db	114	;'r'
   190  000E1D  61                 	db	97	;'a'
   191  000E1E  6E                 	db	110	;'n'
   192  000E1F  67                 	db	103	;'g'
   193  000E20  65                 	db	101	;'e'
   194  000E21  00                 	db	0
   195  000E22  59                 	db	89	;'Y'
   196  000E23  65                 	db	101	;'e'
   197  000E24  6C                 	db	108	;'l'
   198  000E25  6C                 	db	108	;'l'
   199  000E26  6F                 	db	111	;'o'
   200  000E27  77                 	db	119	;'w'
   201  000E28  00                 	db	0
   202  000E29  57                 	db	87	;'W'
   203  000E2A  68                 	db	104	;'h'
   204  000E2B  69                 	db	105	;'i'
   205  000E2C  74                 	db	116	;'t'
   206  000E2D  65                 	db	101	;'e'
   207  000E2E  00                 	db	0
   208  000E2F  42                 	db	66	;'B'
   209  000E30  6C                 	db	108	;'l'
   210  000E31  61                 	db	97	;'a'
   211  000E32  63                 	db	99	;'c'
   212  000E33  6B                 	db	107	;'k'
   213  000E34  00                 	db	0
   214  000E35  47                 	db	71	;'G'
   215  000E36  72                 	db	114	;'r'
   216  000E37  65                 	db	101	;'e'
   217  000E38  65                 	db	101	;'e'
   218  000E39  6E                 	db	110	;'n'
   219  000E3A  00                 	db	0
   220  000E3B  45                 	db	69	;'E'
   221  000E3C  72                 	db	114	;'r'
   222  000E3D  72                 	db	114	;'r'
   223  000E3E  6F                 	db	111	;'o'
   224  000E3F  72                 	db	114	;'r'
   225  000E40  00                 	db	0
   226  000E41  42                 	db	66	;'B'
   227  000E42  6C                 	db	108	;'l'
   228  000E43  75                 	db	117	;'u'
   229  000E44  65                 	db	101	;'e'
   230  000E45  00                 	db	0
   231  000E46  50                 	db	80	;'P'
   232  000E47  69                 	db	105	;'i'
   233  000E48  6E                 	db	110	;'n'
   234  000E49  6B                 	db	107	;'k'
   235  000E4A  00                 	db	0
   236  000E4B  52                 	db	82	;'R'
   237  000E4C  65                 	db	101	;'e'
   238  000E4D  64                 	db	100	;'d'
   239  000E4E  00                 	db	0
   240  000E4F  00                 	db	0	; dummy byte at the end
   241  0000                     
   242                           ; #config settings
   243                           
   244                           	psect	cinit
   245  002532                     __pcinit:
   246                           	callstack 0
   247  002532                     start_initialization:
   248                           	callstack 0
   249  002532                     __initialization:
   250                           	callstack 0
   251                           
   252                           ; Initialize objects allocated to BANK0 (1 bytes)
   253                           ; load TBLPTR registers with __pidataBANK0
   254  002532  0EBA               	movlw	low __pidataBANK0
   255  002534  6EF6               	movwf	tblptrl,c
   256  002536  0E27               	movlw	high __pidataBANK0
   257  002538  6EF7               	movwf	tblptrh,c
   258  00253A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   259  00253C  6EF8               	movwf	tblptru,c
   260  00253E  0009               	tblrd		*+	;fetch initializer
   261  002540  CFF5 F0FC          	movff	tablat,__pdataBANK0
   262                           
   263                           ; Clear objects allocated to BANK1 (92 bytes)
   264  002544  EE01  F000         	lfsr	0,__pbssBANK1
   265  002548  0E5C               	movlw	92
   266  00254A                     clear_0:
   267  00254A  6AEE               	clrf	postinc0,c
   268  00254C  06E8               	decf	wreg,f,c
   269  00254E  E1FD               	bnz	clear_0
   270                           
   271                           ; Clear objects allocated to BANK0 (30 bytes)
   272  002550  EE00  F0DE         	lfsr	0,__pbssBANK0
   273  002554  0E1E               	movlw	30
   274  002556                     clear_1:
   275  002556  6AEE               	clrf	postinc0,c
   276  002558  06E8               	decf	wreg,f,c
   277  00255A  E1FD               	bnz	clear_1
   278                           
   279                           ; Clear objects allocated to COMRAM (2 bytes)
   280  00255C  6A5F               	clrf	(__pbssCOMRAM+1)& (0+255),c
   281  00255E  6A5E               	clrf	__pbssCOMRAM& (0+255),c
   282  002560                     end_of_initialization:
   283                           	callstack 0
   284  002560                     __end_of__initialization:
   285                           	callstack 0
   286  002560  0E00               	movlw	low (__Lsmallconst shr (0+16))
   287  002562  6EF8               	movwf	tblptru,c
   288  002564  0E0E               	movlw	high __Lsmallconst
   289  002566  6EF7               	movwf	tblptrh,c
   290  002568  0100               	movlb	0
   291  00256A  EFD8  F00F         	goto	_main	;jump to C main() function
   292                           
   293                           	psect	bssCOMRAM
   294  00005E                     __pbssCOMRAM:
   295                           	callstack 0
   296  00005E                     _TxBufReadCnt:
   297                           	callstack 0
   298  00005E                     	ds	1
   299  00005F                     _TxBufWriteCnt:
   300                           	callstack 0
   301  00005F                     	ds	1
   302                           
   303                           	psect	bssBANK0
   304  0000DE                     __pbssBANK0:
   305                           	callstack 0
   306  0000DE                     _EUSART4RXbuf:
   307                           	callstack 0
   308  0000DE                     	ds	20
   309  0000F2                     _nout:
   310                           	callstack 0
   311  0000F2                     	ds	2
   312  0000F4                     _width:
   313                           	callstack 0
   314  0000F4                     	ds	2
   315  0000F6                     _prec:
   316                           	callstack 0
   317  0000F6                     	ds	2
   318  0000F8                     _flags:
   319                           	callstack 0
   320  0000F8                     	ds	2
   321  0000FA                     _RxBufReadCnt:
   322                           	callstack 0
   323  0000FA                     	ds	1
   324  0000FB                     _RxBufWriteCnt:
   325                           	callstack 0
   326  0000FB                     	ds	1
   327                           
   328                           	psect	dataBANK0
   329  0000FC                     __pdataBANK0:
   330                           	callstack 0
   331  0000FC                     _color:
   332                           	callstack 0
   333  0000FC                     	ds	1
   334                           
   335                           	psect	bssBANK1
   336  000100                     __pbssBANK1:
   337                           	callstack 0
   338  000100                     _EUSART4TXbuf:
   339                           	callstack 0
   340  000100                     	ds	60
   341  00013C                     _dbuf:
   342                           	callstack 0
   343  00013C                     	ds	32
   344                           
   345                           	psect	cstackBANK1
   346  00015C                     __pcstackBANK1:
   347                           	callstack 0
   348  00015C                     main@motorL:
   349                           	callstack 0
   350                           
   351                           ; 10 bytes @ 0x0
   352  00015C                     	ds	10
   353  000166                     main@motorR:
   354                           	callstack 0
   355                           
   356                           ; 10 bytes @ 0xA
   357  000166                     	ds	10
   358  000170                     main@white:
   359                           	callstack 0
   360                           
   361                           ; 18 bytes @ 0x14
   362  000170                     	ds	18
   363  000182                     main@rgb:
   364                           	callstack 0
   365                           
   366                           ; 8 bytes @ 0x26
   367  000182                     	ds	8
   368                           
   369                           	psect	cstackBANK0
   370  000060                     __pcstackBANK0:
   371                           	callstack 0
   372  000060                     ?_sprintf:
   373                           	callstack 0
   374  000060                     sprintf@s:
   375                           	callstack 0
   376                           
   377                           ; 2 bytes @ 0x0
   378  000060                     	ds	2
   379  000062                     sprintf@fmt:
   380                           	callstack 0
   381                           
   382                           ; 2 bytes @ 0x2
   383  000062                     	ds	10
   384  00006C                     sprintf@ap:
   385                           	callstack 0
   386                           
   387                           ; 2 bytes @ 0xC
   388  00006C                     	ds	2
   389  00006E                     sprintf@f:
   390                           	callstack 0
   391                           
   392                           ; 11 bytes @ 0xE
   393  00006E                     	ds	11
   394  000079                     color_display@buf:
   395                           	callstack 0
   396  000079                     check_color_reading@buf:
   397                           	callstack 0
   398  000079                     color_predict@buf:
   399                           	callstack 0
   400                           
   401                           ; 100 bytes @ 0x19
   402  000079                     	ds	100
   403  0000DD                     color_predict@color:
   404                           	callstack 0
   405                           
   406                           ; 1 bytes @ 0x7D
   407  0000DD                     	ds	1
   408                           
   409                           	psect	cstackCOMRAM
   410  000001                     __pcstackCOMRAM:
   411                           	callstack 0
   412  000001                     ??_LED_R:
   413  000001                     ??_LED_C:
   414  000001                     ??_LED_B:
   415  000001                     ??_LED_G:
   416  000001                     ??_I2C_2_Master_Idle:
   417  000001                     ?_strlen:
   418                           	callstack 0
   419  000001                     ?___wmul:
   420                           	callstack 0
   421  000001                     ?___aodiv:
   422                           	callstack 0
   423  000001                     ?___aomod:
   424                           	callstack 0
   425  000001                     sendCharSerial4@charToSend:
   426                           	callstack 0
   427  000001                     initDCmotorsPWM@PWMperiod:
   428                           	callstack 0
   429  000001                     initDCmotors_parameter@motorL:
   430                           	callstack 0
   431  000001                     ___wmul@multiplier:
   432                           	callstack 0
   433  000001                     fputc@c:
   434                           	callstack 0
   435  000001                     strlen@s:
   436                           	callstack 0
   437  000001                     ___aodiv@dividend:
   438                           	callstack 0
   439  000001                     ___aomod@dividend:
   440                           	callstack 0
   441                           
   442                           ; 8 bytes @ 0x0
   443  000001                     	ds	1
   444  000002                     ??_I2C_2_Master_Read:
   445  000002                     I2C_2_Master_Write@data_byte:
   446                           	callstack 0
   447  000002                     sendStringSerial4@string:
   448                           	callstack 0
   449                           
   450                           ; 2 bytes @ 0x1
   451  000002                     	ds	1
   452  000003                     color_writetoaddr@value:
   453                           	callstack 0
   454  000003                     I2C_2_Master_Read@ack:
   455                           	callstack 0
   456  000003                     initDCmotors_parameter@motorR:
   457                           	callstack 0
   458  000003                     ___wmul@multiplicand:
   459                           	callstack 0
   460  000003                     fputc@fp:
   461                           	callstack 0
   462  000003                     strlen@a:
   463                           	callstack 0
   464                           
   465                           ; 2 bytes @ 0x2
   466  000003                     	ds	1
   467  000004                     color_writetoaddr@address:
   468                           	callstack 0
   469  000004                     I2C_2_Master_Read@tmp:
   470                           	callstack 0
   471                           
   472                           ; 1 bytes @ 0x3
   473  000004                     	ds	1
   474  000005                     ??_fputc:
   475  000005                     ??_color_click_init:
   476  000005                     ?_color_read_Red:
   477                           	callstack 0
   478  000005                     ?_color_read_Blue:
   479                           	callstack 0
   480  000005                     ?_color_read_Green:
   481                           	callstack 0
   482  000005                     ?_color_read_Clear:
   483                           	callstack 0
   484  000005                     ___wmul@product:
   485                           	callstack 0
   486                           
   487                           ; 2 bytes @ 0x4
   488  000005                     	ds	2
   489  000007                     ??_color_read_Red:
   490  000007                     ??_color_read_Blue:
   491  000007                     ??_color_read_Green:
   492  000007                     ??_color_read_Clear:
   493  000007                     ?___lwdiv:
   494                           	callstack 0
   495  000007                     ___lwdiv@dividend:
   496                           	callstack 0
   497                           
   498                           ; 2 bytes @ 0x6
   499  000007                     	ds	2
   500  000009                     ___lwdiv@divisor:
   501                           	callstack 0
   502  000009                     ___aodiv@divisor:
   503                           	callstack 0
   504  000009                     ___aomod@divisor:
   505                           	callstack 0
   506                           
   507                           ; 8 bytes @ 0x8
   508  000009                     	ds	1
   509  00000A                     color_read_Red@tmp:
   510                           	callstack 0
   511  00000A                     color_read_Blue@tmp:
   512                           	callstack 0
   513  00000A                     color_read_Green@tmp:
   514                           	callstack 0
   515  00000A                     color_read_Clear@tmp:
   516                           	callstack 0
   517  00000A                     fputs@s:
   518                           	callstack 0
   519                           
   520                           ; 2 bytes @ 0x9
   521  00000A                     	ds	1
   522  00000B                     ___lwdiv@quotient:
   523                           	callstack 0
   524                           
   525                           ; 2 bytes @ 0xA
   526  00000B                     	ds	1
   527  00000C                     read_color@m:
   528                           	callstack 0
   529  00000C                     fputs@fp:
   530                           	callstack 0
   531                           
   532                           ; 2 bytes @ 0xB
   533  00000C                     	ds	1
   534  00000D                     ___lwdiv@counter:
   535                           	callstack 0
   536                           
   537                           ; 1 bytes @ 0xC
   538  00000D                     	ds	1
   539  00000E                     fputs@c:
   540                           	callstack 0
   541  00000E                     calibrate_white@w:
   542                           	callstack 0
   543  00000E                     compare@lower:
   544                           	callstack 0
   545                           
   546                           ; 2 bytes @ 0xD
   547  00000E                     	ds	1
   548  00000F                     fputs@i:
   549                           	callstack 0
   550                           
   551                           ; 2 bytes @ 0xE
   552  00000F                     	ds	1
   553  000010                     ??_calibrate_white:
   554  000010                     compare@value2compare:
   555                           	callstack 0
   556                           
   557                           ; 2 bytes @ 0xF
   558  000010                     	ds	1
   559  000011                     ?_pad:
   560                           	callstack 0
   561  000011                     ___aodiv@counter:
   562                           	callstack 0
   563  000011                     ___aomod@counter:
   564                           	callstack 0
   565  000011                     pad@fp:
   566                           	callstack 0
   567                           
   568                           ; 2 bytes @ 0x10
   569  000011                     	ds	1
   570  000012                     ___aodiv@sign:
   571                           	callstack 0
   572  000012                     ___aomod@sign:
   573                           	callstack 0
   574  000012                     compare@upper:
   575                           	callstack 0
   576                           
   577                           ; 2 bytes @ 0x11
   578  000012                     	ds	1
   579  000013                     ?_abs:
   580                           	callstack 0
   581  000013                     pad@buf:
   582                           	callstack 0
   583  000013                     abs@a:
   584                           	callstack 0
   585  000013                     ___aodiv@quotient:
   586                           	callstack 0
   587                           
   588                           ; 8 bytes @ 0x12
   589  000013                     	ds	1
   590  000014                     compare@result:
   591                           	callstack 0
   592                           
   593                           ; 1 bytes @ 0x13
   594  000014                     	ds	1
   595  000015                     ??_abs:
   596  000015                     detect_color@m:
   597                           	callstack 0
   598  000015                     pad@p:
   599                           	callstack 0
   600                           
   601                           ; 2 bytes @ 0x14
   602  000015                     	ds	2
   603  000017                     ??_pad:
   604  000017                     detect_color@w:
   605                           	callstack 0
   606                           
   607                           ; 2 bytes @ 0x16
   608  000017                     	ds	1
   609  000018                     pad@i:
   610                           	callstack 0
   611                           
   612                           ; 2 bytes @ 0x17
   613  000018                     	ds	1
   614  000019                     ??_detect_color:
   615                           
   616                           ; 1 bytes @ 0x18
   617  000019                     	ds	1
   618  00001A                     pad@w:
   619                           	callstack 0
   620                           
   621                           ; 2 bytes @ 0x19
   622  00001A                     	ds	1
   623  00001B                     detect_color@RB:
   624                           	callstack 0
   625                           
   626                           ; 2 bytes @ 0x1A
   627  00001B                     	ds	1
   628  00001C                     ?_dtoa:
   629                           	callstack 0
   630  00001C                     dtoa@fp:
   631                           	callstack 0
   632                           
   633                           ; 2 bytes @ 0x1B
   634  00001C                     	ds	1
   635  00001D                     detect_color@GR:
   636                           	callstack 0
   637                           
   638                           ; 2 bytes @ 0x1C
   639  00001D                     	ds	1
   640  00001E                     dtoa@d:
   641                           	callstack 0
   642                           
   643                           ; 8 bytes @ 0x1D
   644  00001E                     	ds	1
   645  00001F                     detect_color@GB:
   646                           	callstack 0
   647                           
   648                           ; 2 bytes @ 0x1E
   649  00001F                     	ds	2
   650  000021                     detect_color@RG:
   651                           	callstack 0
   652                           
   653                           ; 2 bytes @ 0x20
   654  000021                     	ds	2
   655  000023                     detect_color@GG:
   656                           	callstack 0
   657                           
   658                           ; 2 bytes @ 0x22
   659  000023                     	ds	2
   660  000025                     detect_color@BB:
   661                           	callstack 0
   662                           
   663                           ; 2 bytes @ 0x24
   664  000025                     	ds	1
   665  000026                     ??_dtoa:
   666                           
   667                           ; 1 bytes @ 0x25
   668  000026                     	ds	1
   669  000027                     detect_color@RR:
   670                           	callstack 0
   671                           
   672                           ; 2 bytes @ 0x26
   673  000027                     	ds	2
   674  000029                     detect_color@BR:
   675                           	callstack 0
   676                           
   677                           ; 2 bytes @ 0x28
   678  000029                     	ds	2
   679  00002B                     detect_color@BG:
   680                           	callstack 0
   681                           
   682                           ; 2 bytes @ 0x2A
   683  00002B                     	ds	2
   684  00002D                     detect_color@color:
   685                           	callstack 0
   686                           
   687                           ; 1 bytes @ 0x2C
   688  00002D                     	ds	1
   689  00002E                     _dtoa$2238:
   690                           	callstack 0
   691                           
   692                           ; 2 bytes @ 0x2D
   693  00002E                     	ds	2
   694  000030                     dtoa@p:
   695                           	callstack 0
   696                           
   697                           ; 2 bytes @ 0x2F
   698  000030                     	ds	2
   699  000032                     dtoa@w:
   700                           	callstack 0
   701                           
   702                           ; 2 bytes @ 0x31
   703  000032                     	ds	2
   704  000034                     dtoa@s:
   705                           	callstack 0
   706                           
   707                           ; 2 bytes @ 0x33
   708  000034                     	ds	2
   709  000036                     dtoa@n:
   710                           	callstack 0
   711                           
   712                           ; 8 bytes @ 0x35
   713  000036                     	ds	8
   714  00003E                     dtoa@i:
   715                           	callstack 0
   716                           
   717                           ; 2 bytes @ 0x3D
   718  00003E                     	ds	2
   719  000040                     ?_vfpfcnvrt:
   720                           	callstack 0
   721  000040                     vfpfcnvrt@fp:
   722                           	callstack 0
   723                           
   724                           ; 2 bytes @ 0x3F
   725  000040                     	ds	2
   726  000042                     vfpfcnvrt@fmt:
   727                           	callstack 0
   728                           
   729                           ; 2 bytes @ 0x41
   730  000042                     	ds	2
   731  000044                     vfpfcnvrt@ap:
   732                           	callstack 0
   733                           
   734                           ; 2 bytes @ 0x43
   735  000044                     	ds	2
   736  000046                     ??_vfpfcnvrt:
   737                           
   738                           ; 1 bytes @ 0x45
   739  000046                     	ds	2
   740  000048                     vfpfcnvrt@ll:
   741                           	callstack 0
   742                           
   743                           ; 8 bytes @ 0x47
   744  000048                     	ds	8
   745  000050                     ?_vfprintf:
   746                           	callstack 0
   747  000050                     vfprintf@fp:
   748                           	callstack 0
   749                           
   750                           ; 2 bytes @ 0x4F
   751  000050                     	ds	2
   752  000052                     vfprintf@fmt:
   753                           	callstack 0
   754                           
   755                           ; 2 bytes @ 0x51
   756  000052                     	ds	2
   757  000054                     vfprintf@ap:
   758                           	callstack 0
   759                           
   760                           ; 2 bytes @ 0x53
   761  000054                     	ds	2
   762  000056                     vfprintf@cfmt:
   763                           	callstack 0
   764                           
   765                           ; 2 bytes @ 0x55
   766  000056                     	ds	2
   767  000058                     color_display@m:
   768                           	callstack 0
   769  000058                     check_color_reading@m:
   770                           	callstack 0
   771                           
   772                           ; 2 bytes @ 0x57
   773  000058                     	ds	2
   774  00005A                     check_color_reading@w:
   775                           	callstack 0
   776                           
   777                           ; 2 bytes @ 0x59
   778  00005A                     	ds	2
   779  00005C                     ??_main:
   780                           
   781                           ; 1 bytes @ 0x5B
   782  00005C                     	ds	2
   783                           
   784 ;;
   785 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   786 ;;
   787 ;; *************** function _main *****************
   788 ;; Defined at:
   789 ;;		line 30 in file "main.c"
   790 ;; Parameters:    Size  Location     Type
   791 ;;		None
   792 ;; Auto vars:     Size  Location     Type
   793 ;;  white          18   20[BANK1 ] struct white_card
   794 ;;  motorR         10   10[BANK1 ] struct DC_motor
   795 ;;  motorL         10    0[BANK1 ] struct DC_motor
   796 ;;  rgb             8   38[BANK1 ] struct color_rgb
   797 ;;  x               2    0        int 
   798 ;;  k               2    0        int 
   799 ;;  j               2    0        int 
   800 ;;  i               2    0        int 
   801 ;;  complete        1    0        unsigned char 
   802 ;;  color           1    0        unsigned char 
   803 ;; Return value:  Size  Location     Type
   804 ;;                  1    wreg      void 
   805 ;; Registers used:
   806 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   807 ;; Tracked objects:
   808 ;;		On entry : 0/0
   809 ;;		On exit  : 0/0
   810 ;;		Unchanged: 0/0
   811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   812 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   813 ;;      Locals:         0       0      46       0       0       0       0       0       0       0       0       0       
      +0       0       0
   814 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   815 ;;      Totals:         2       0      46       0       0       0       0       0       0       0       0       0       
      +0       0       0
   816 ;;Total ram usage:       48 bytes
   817 ;; Hardware stack levels required when called: 9
   818 ;; This function calls:
   819 ;;		_I2C_2_Master_Init
   820 ;;		_LED_B
   821 ;;		_LED_C
   822 ;;		_LED_G
   823 ;;		_LED_R
   824 ;;		_calibrate_white
   825 ;;		_check_color_reading
   826 ;;		_color_click_init
   827 ;;		_color_display
   828 ;;		_color_predict
   829 ;;		_detect_color
   830 ;;		_initDCmotorsPWM
   831 ;;		_initDCmotors_parameter
   832 ;;		_initUSART4
   833 ;;		_read_color
   834 ;; This function is called by:
   835 ;;		Startup code after reset
   836 ;; This function uses a non-reentrant model
   837 ;;
   838                           
   839                           	psect	text0
   840  001FB0                     __ptext0:
   841                           	callstack 0
   842  001FB0                     _main:
   843                           	callstack 22
   844  001FB0                     
   845                           ;main.c: 31:     I2C_2_Master_Init();
   846  001FB0  EC20  F013         	call	_I2C_2_Master_Init	;wreg free
   847  001FB4                     
   848                           ;main.c: 32:     color_click_init();
   849  001FB4  ECEE  F012         	call	_color_click_init	;wreg free
   850  001FB8                     
   851                           ;main.c: 33:     initDCmotorsPWM(199);
   852  001FB8  0E00               	movlw	0
   853  001FBA  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   854  001FBC  0EC7               	movlw	199
   855  001FBE  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
   856  001FC0  EC37  F012         	call	_initDCmotorsPWM	;wreg free
   857  001FC4                     
   858                           ;main.c: 35:     initUSART4();
   859  001FC4  ECAC  F013         	call	_initUSART4	;wreg free
   860  001FC8                     
   861                           ;main.c: 37:     struct color_rgb rgb;;main.c: 38:     struct white_card white;;main.c: 
      +                          42:     struct DC_motor motorL, motorR;;main.c: 44:     initDCmotors_parameter(&motorL, 
      +                          &motorR);
   862  001FC8  0E5C               	movlw	low main@motorL
   863  001FCA  6E01               	movwf	initDCmotors_parameter@motorL^0,c
   864  001FCC  0E01               	movlw	high main@motorL
   865  001FCE  6E02               	movwf	(initDCmotors_parameter@motorL+1)^0,c
   866  001FD0  0E66               	movlw	low main@motorR
   867  001FD2  6E03               	movwf	initDCmotors_parameter@motorR^0,c
   868  001FD4  0E01               	movlw	high main@motorR
   869  001FD6  6E04               	movwf	(initDCmotors_parameter@motorR+1)^0,c
   870  001FD8  ECA7  F00E         	call	_initDCmotors_parameter	;wreg free
   871  001FDC                     
   872                           ;main.c: 46:     TRISFbits.TRISF6 = 0;
   873  001FDC  9C86               	bcf	134,6,c	;volatile
   874  001FDE                     
   875                           ;main.c: 47:     LATFbits.LATF6 = 0;
   876  001FDE  9C7E               	bcf	126,6,c	;volatile
   877  001FE0                     
   878                           ;main.c: 49:     TRISGbits.TRISG1 = 0;
   879  001FE0  9287               	bcf	135,1,c	;volatile
   880  001FE2                     
   881                           ;main.c: 50:     TRISFbits.TRISF7 = 0;
   882  001FE2  9E86               	bcf	134,7,c	;volatile
   883  001FE4                     
   884                           ;main.c: 51:     TRISAbits.TRISA4 = 0;
   885  001FE4  9881               	bcf	129,4,c	;volatile
   886  001FE6                     
   887                           ;main.c: 52:     LATGbits.LATG1 = 1;
   888  001FE6  827F               	bsf	127,1,c	;volatile
   889  001FE8                     
   890                           ;main.c: 53:     LATFbits.LATF7 = 1;
   891  001FE8  8E7E               	bsf	126,7,c	;volatile
   892  001FEA                     
   893                           ;main.c: 54:     LATAbits.LATA4 = 1;
   894  001FEA  8879               	bsf	121,4,c	;volatile
   895  001FEC                     
   896                           ;main.c: 63:     _delay((unsigned long)((3000)*(64000000/4000.0)));
   897  001FEC  0EF4               	movlw	244
   898  001FEE  6E5D               	movwf	(??_main+1)^0,c
   899  001FF0  0E82               	movlw	130
   900  001FF2  6E5C               	movwf	??_main^0,c
   901  001FF4  0E05               	movlw	5
   902  001FF6                     u1867:
   903  001FF6  2EE8               	decfsz	wreg,f,c
   904  001FF8  D7FE               	bra	u1867
   905  001FFA  2E5C               	decfsz	??_main^0,f,c
   906  001FFC  D7FC               	bra	u1867
   907  001FFE  2E5D               	decfsz	(??_main+1)^0,f,c
   908  002000  D7FA               	bra	u1867
   909  002002  F000               	nop	
   910  002004                     
   911                           ;main.c: 64:     calibrate_white(&white);
   912  002004  0E70               	movlw	low main@white
   913  002006  6E0E               	movwf	calibrate_white@w^0,c
   914  002008  0E01               	movlw	high main@white
   915  00200A  6E0F               	movwf	(calibrate_white@w+1)^0,c
   916  00200C  EC91  F00D         	call	_calibrate_white	;wreg free
   917  002010                     
   918                           ;main.c: 65:     _delay((unsigned long)((3000)*(64000000/4000.0)));
   919  002010  0EF4               	movlw	244
   920  002012  6E5D               	movwf	(??_main+1)^0,c
   921  002014  0E82               	movlw	130
   922  002016  6E5C               	movwf	??_main^0,c
   923  002018  0E05               	movlw	5
   924  00201A                     u1877:
   925  00201A  2EE8               	decfsz	wreg,f,c
   926  00201C  D7FE               	bra	u1877
   927  00201E  2E5C               	decfsz	??_main^0,f,c
   928  002020  D7FC               	bra	u1877
   929  002022  2E5D               	decfsz	(??_main+1)^0,f,c
   930  002024  D7FA               	bra	u1877
   931  002026  F000               	nop	
   932  002028                     l2980:
   933  002028  0E82               	movlw	low main@rgb
   934  00202A  6E15               	movwf	detect_color@m^0,c
   935  00202C  0E01               	movlw	high main@rgb
   936  00202E  6E16               	movwf	(detect_color@m+1)^0,c
   937  002030  0E70               	movlw	low main@white
   938  002032  6E17               	movwf	detect_color@w^0,c
   939  002034  0E01               	movlw	high main@white
   940  002036  6E18               	movwf	(detect_color@w+1)^0,c
   941  002038  EC28  F007         	call	_detect_color	;wreg free
   942  00203C                     
   943                           ;main.c: 71:             check_color_reading(&rgb, &white);
   944  00203C  0E82               	movlw	low main@rgb
   945  00203E  6E58               	movwf	check_color_reading@m^0,c
   946  002040  0E01               	movlw	high main@rgb
   947  002042  6E59               	movwf	(check_color_reading@m+1)^0,c
   948  002044  0E70               	movlw	low main@white
   949  002046  6E5A               	movwf	check_color_reading@w^0,c
   950  002048  0E01               	movlw	high main@white
   951  00204A  6E5B               	movwf	(check_color_reading@w+1)^0,c
   952  00204C  EC38  F010         	call	_check_color_reading	;wreg free
   953  002050                     
   954                           ;main.c: 73:             _delay((unsigned long)((200)*(64000000/4000.0)));
   955  002050  0E11               	movlw	17
   956  002052  6E5D               	movwf	(??_main+1)^0,c
   957  002054  0E3C               	movlw	60
   958  002056  6E5C               	movwf	??_main^0,c
   959  002058  0ECB               	movlw	203
   960  00205A                     u1887:
   961  00205A  2EE8               	decfsz	wreg,f,c
   962  00205C  D7FE               	bra	u1887
   963  00205E  2E5C               	decfsz	??_main^0,f,c
   964  002060  D7FC               	bra	u1887
   965  002062  2E5D               	decfsz	(??_main+1)^0,f,c
   966  002064  D7FA               	bra	u1887
   967  002066  F000               	nop	
   968  002068  EF14  F010         	goto	l2980
   969  00206C  EF00  F000         	goto	start
   970  002070                     __end_of_main:
   971                           	callstack 0
   972                           
   973 ;; *************** function _initUSART4 *****************
   974 ;; Defined at:
   975 ;;		line 4 in file "serial.c"
   976 ;; Parameters:    Size  Location     Type
   977 ;;		None
   978 ;; Auto vars:     Size  Location     Type
   979 ;;		None
   980 ;; Return value:  Size  Location     Type
   981 ;;                  1    wreg      void 
   982 ;; Registers used:
   983 ;;		wreg, status,2
   984 ;; Tracked objects:
   985 ;;		On entry : 0/0
   986 ;;		On exit  : 0/0
   987 ;;		Unchanged: 0/0
   988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   989 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   990 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   991 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   992 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   993 ;;Total ram usage:        0 bytes
   994 ;; Hardware stack levels used: 1
   995 ;; This function calls:
   996 ;;		Nothing
   997 ;; This function is called by:
   998 ;;		_main
   999 ;; This function uses a non-reentrant model
  1000 ;;
  1001                           
  1002                           	psect	text1
  1003  002758                     __ptext1:
  1004                           	callstack 0
  1005  002758                     _initUSART4:
  1006                           	callstack 30
  1007  002758                     
  1008                           ;serial.c: 8:     RC0PPS = 0x12;
  1009  002758  0E12               	movlw	18
  1010  00275A  010E               	movlb	14	; () banked
  1011  00275C  6F62               	movwf	98,b	;volatile
  1012                           
  1013                           ;serial.c: 9:     RX4PPS = 0x11;
  1014  00275E  0E11               	movlw	17
  1015  002760  6F15               	movwf	21,b	;volatile
  1016  002762                     
  1017                           ; BSR set to: 14
  1018                           ;serial.c: 11:     BAUD4CONbits.BRG16 = 0;
  1019  002762  97E9               	bcf	233,3,b	;volatile
  1020  002764                     
  1021                           ; BSR set to: 14
  1022                           ;serial.c: 12:     TX4STAbits.BRGH = 0;
  1023  002764  95E8               	bcf	232,2,b	;volatile
  1024                           
  1025                           ;serial.c: 13:     SP4BRGL = 51;
  1026  002766  0E33               	movlw	51
  1027  002768  6FE5               	movwf	229,b	;volatile
  1028                           
  1029                           ;serial.c: 15:     SP4BRGH = 0;
  1030  00276A  0E00               	movlw	0
  1031  00276C  6FE6               	movwf	230,b	;volatile
  1032  00276E                     
  1033                           ; BSR set to: 14
  1034                           ;serial.c: 17:     RC4STAbits.CREN = 1;
  1035  00276E  89E7               	bsf	231,4,b	;volatile
  1036  002770                     
  1037                           ; BSR set to: 14
  1038                           ;serial.c: 18:     TX4STAbits.TXEN = 1;
  1039  002770  8BE8               	bsf	232,5,b	;volatile
  1040  002772                     
  1041                           ; BSR set to: 14
  1042                           ;serial.c: 19:     RC4STAbits.SPEN = 1;
  1043  002772  8FE7               	bsf	231,7,b	;volatile
  1044  002774                     
  1045                           ; BSR set to: 14
  1046  002774  0012               	return		;funcret
  1047  002776                     __end_of_initUSART4:
  1048                           	callstack 0
  1049                           
  1050 ;; *************** function _initDCmotors_parameter *****************
  1051 ;; Defined at:
  1052 ;;		line 37 in file "dc_motor.c"
  1053 ;; Parameters:    Size  Location     Type
  1054 ;;  motorL          2    0[COMRAM] PTR struct DC_motor
  1055 ;;		 -> main@motorL(10), 
  1056 ;;  motorR          2    2[COMRAM] PTR struct DC_motor
  1057 ;;		 -> main@motorR(10), 
  1058 ;; Auto vars:     Size  Location     Type
  1059 ;;		None
  1060 ;; Return value:  Size  Location     Type
  1061 ;;                  1    wreg      void 
  1062 ;; Registers used:
  1063 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1064 ;; Tracked objects:
  1065 ;;		On entry : 0/0
  1066 ;;		On exit  : 0/0
  1067 ;;		Unchanged: 0/0
  1068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1069 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1070 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1071 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1072 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1073 ;;Total ram usage:        4 bytes
  1074 ;; Hardware stack levels used: 1
  1075 ;; This function calls:
  1076 ;;		Nothing
  1077 ;; This function is called by:
  1078 ;;		_main
  1079 ;; This function uses a non-reentrant model
  1080 ;;
  1081                           
  1082                           	psect	text2
  1083  001D4E                     __ptext2:
  1084                           	callstack 0
  1085  001D4E                     _initDCmotors_parameter:
  1086                           	callstack 30
  1087  001D4E                     
  1088                           ;dc_motor.c: 39:     motorL->power = 0;
  1089  001D4E  C001  FFD9         	movff	initDCmotors_parameter@motorL,fsr2l
  1090  001D52  C002  FFDA         	movff	initDCmotors_parameter@motorL+1,fsr2h
  1091  001D56  0E00               	movlw	0
  1092  001D58  6EDF               	movwf	indf2,c
  1093  001D5A                     
  1094                           ;dc_motor.c: 40:     motorL->direction = 1;
  1095  001D5A  EE20 F001          	lfsr	2,1
  1096  001D5E  5001               	movf	initDCmotors_parameter@motorL^0,w,c
  1097  001D60  26D9               	addwf	fsr2l,f,c
  1098  001D62  5002               	movf	(initDCmotors_parameter@motorL+1)^0,w,c
  1099  001D64  22DA               	addwfc	fsr2h,f,c
  1100  001D66  0E01               	movlw	1
  1101  001D68  6EDF               	movwf	indf2,c
  1102  001D6A                     
  1103                           ;dc_motor.c: 41:     motorL->dutyHighByte = (unsigned char *)(&PWM6DCH);
  1104  001D6A  EE20 F002          	lfsr	2,2
  1105  001D6E  5001               	movf	initDCmotors_parameter@motorL^0,w,c
  1106  001D70  26D9               	addwf	fsr2l,f,c
  1107  001D72  5002               	movf	(initDCmotors_parameter@motorL+1)^0,w,c
  1108  001D74  22DA               	addwfc	fsr2h,f,c
  1109  001D76  0EA3               	movlw	163
  1110  001D78  6EDE               	movwf	postinc2,c
  1111  001D7A  0E0F               	movlw	15
  1112  001D7C  6EDD               	movwf	postdec2,c
  1113  001D7E                     
  1114                           ;dc_motor.c: 42:     motorL->dir_LAT = (unsigned char *)(&LATE);
  1115  001D7E  EE20 F004          	lfsr	2,4
  1116  001D82  5001               	movf	initDCmotors_parameter@motorL^0,w,c
  1117  001D84  26D9               	addwf	fsr2l,f,c
  1118  001D86  5002               	movf	(initDCmotors_parameter@motorL+1)^0,w,c
  1119  001D88  22DA               	addwfc	fsr2h,f,c
  1120  001D8A  0E7D               	movlw	125
  1121  001D8C  6EDE               	movwf	postinc2,c
  1122  001D8E  0E0F               	movlw	15
  1123  001D90  6EDD               	movwf	postdec2,c
  1124  001D92                     
  1125                           ;dc_motor.c: 43:     motorL->dir_pin = 4;
  1126  001D92  EE20 F006          	lfsr	2,6
  1127  001D96  5001               	movf	initDCmotors_parameter@motorL^0,w,c
  1128  001D98  26D9               	addwf	fsr2l,f,c
  1129  001D9A  5002               	movf	(initDCmotors_parameter@motorL+1)^0,w,c
  1130  001D9C  22DA               	addwfc	fsr2h,f,c
  1131  001D9E  0E04               	movlw	4
  1132  001DA0  6EDF               	movwf	indf2,c
  1133  001DA2                     
  1134                           ;dc_motor.c: 44:     motorL->PWMperiod = 199;
  1135  001DA2  EE20 F007          	lfsr	2,7
  1136  001DA6  5001               	movf	initDCmotors_parameter@motorL^0,w,c
  1137  001DA8  26D9               	addwf	fsr2l,f,c
  1138  001DAA  5002               	movf	(initDCmotors_parameter@motorL+1)^0,w,c
  1139  001DAC  22DA               	addwfc	fsr2h,f,c
  1140  001DAE  0EC7               	movlw	199
  1141  001DB0  6EDE               	movwf	postinc2,c
  1142  001DB2  0E00               	movlw	0
  1143  001DB4  6EDD               	movwf	postdec2,c
  1144  001DB6                     
  1145                           ;dc_motor.c: 47:     motorR->power = 0;
  1146  001DB6  C003  FFD9         	movff	initDCmotors_parameter@motorR,fsr2l
  1147  001DBA  C004  FFDA         	movff	initDCmotors_parameter@motorR+1,fsr2h
  1148  001DBE  0E00               	movlw	0
  1149  001DC0  6EDF               	movwf	indf2,c
  1150                           
  1151                           ;dc_motor.c: 48:     motorR->direction = 1;
  1152  001DC2  EE20 F001          	lfsr	2,1
  1153  001DC6  5003               	movf	initDCmotors_parameter@motorR^0,w,c
  1154  001DC8  26D9               	addwf	fsr2l,f,c
  1155  001DCA  5004               	movf	(initDCmotors_parameter@motorR+1)^0,w,c
  1156  001DCC  22DA               	addwfc	fsr2h,f,c
  1157  001DCE  0E01               	movlw	1
  1158  001DD0  6EDF               	movwf	indf2,c
  1159                           
  1160                           ;dc_motor.c: 49:     motorR->dutyHighByte = (unsigned char *)(&PWM7DCH);
  1161  001DD2  EE20 F002          	lfsr	2,2
  1162  001DD6  5003               	movf	initDCmotors_parameter@motorR^0,w,c
  1163  001DD8  26D9               	addwf	fsr2l,f,c
  1164  001DDA  5004               	movf	(initDCmotors_parameter@motorR+1)^0,w,c
  1165  001DDC  22DA               	addwfc	fsr2h,f,c
  1166  001DDE  0EA0               	movlw	160
  1167  001DE0  6EDE               	movwf	postinc2,c
  1168  001DE2  0E0F               	movlw	15
  1169  001DE4  6EDD               	movwf	postdec2,c
  1170                           
  1171                           ;dc_motor.c: 50:     motorR->dir_LAT = (unsigned char *)(&LATG);
  1172  001DE6  EE20 F004          	lfsr	2,4
  1173  001DEA  5003               	movf	initDCmotors_parameter@motorR^0,w,c
  1174  001DEC  26D9               	addwf	fsr2l,f,c
  1175  001DEE  5004               	movf	(initDCmotors_parameter@motorR+1)^0,w,c
  1176  001DF0  22DA               	addwfc	fsr2h,f,c
  1177  001DF2  0E7F               	movlw	127
  1178  001DF4  6EDE               	movwf	postinc2,c
  1179  001DF6  0E0F               	movlw	15
  1180  001DF8  6EDD               	movwf	postdec2,c
  1181                           
  1182                           ;dc_motor.c: 51:     motorR->dir_pin = 6;
  1183  001DFA  EE20 F006          	lfsr	2,6
  1184  001DFE  5003               	movf	initDCmotors_parameter@motorR^0,w,c
  1185  001E00  26D9               	addwf	fsr2l,f,c
  1186  001E02  5004               	movf	(initDCmotors_parameter@motorR+1)^0,w,c
  1187  001E04  22DA               	addwfc	fsr2h,f,c
  1188  001E06  0E06               	movlw	6
  1189  001E08  6EDF               	movwf	indf2,c
  1190                           
  1191                           ;dc_motor.c: 52:     motorR->PWMperiod = 199;
  1192  001E0A  EE20 F007          	lfsr	2,7
  1193  001E0E  5003               	movf	initDCmotors_parameter@motorR^0,w,c
  1194  001E10  26D9               	addwf	fsr2l,f,c
  1195  001E12  5004               	movf	(initDCmotors_parameter@motorR+1)^0,w,c
  1196  001E14  22DA               	addwfc	fsr2h,f,c
  1197  001E16  0EC7               	movlw	199
  1198  001E18  6EDE               	movwf	postinc2,c
  1199  001E1A  0E00               	movlw	0
  1200  001E1C  6EDD               	movwf	postdec2,c
  1201  001E1E  0012               	return		;funcret
  1202  001E20                     __end_of_initDCmotors_parameter:
  1203                           	callstack 0
  1204                           
  1205 ;; *************** function _initDCmotorsPWM *****************
  1206 ;; Defined at:
  1207 ;;		line 7 in file "dc_motor.c"
  1208 ;; Parameters:    Size  Location     Type
  1209 ;;  PWMperiod       2    0[COMRAM] int 
  1210 ;; Auto vars:     Size  Location     Type
  1211 ;;		None
  1212 ;; Return value:  Size  Location     Type
  1213 ;;                  1    wreg      void 
  1214 ;; Registers used:
  1215 ;;		wreg, status,2
  1216 ;; Tracked objects:
  1217 ;;		On entry : 0/0
  1218 ;;		On exit  : 0/0
  1219 ;;		Unchanged: 0/0
  1220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1221 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1222 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1223 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1224 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1225 ;;Total ram usage:        2 bytes
  1226 ;; Hardware stack levels used: 1
  1227 ;; This function calls:
  1228 ;;		Nothing
  1229 ;; This function is called by:
  1230 ;;		_main
  1231 ;; This function uses a non-reentrant model
  1232 ;;
  1233                           
  1234                           	psect	text3
  1235  00246E                     __ptext3:
  1236                           	callstack 0
  1237  00246E                     _initDCmotorsPWM:
  1238                           	callstack 30
  1239  00246E                     
  1240                           ;dc_motor.c: 10:     TRISEbits.TRISE2=0;
  1241  00246E  9485               	bcf	133,2,c	;volatile
  1242                           
  1243                           ;dc_motor.c: 11:     TRISCbits.TRISC7=0;
  1244  002470  9E83               	bcf	131,7,c	;volatile
  1245                           
  1246                           ;dc_motor.c: 12:     TRISGbits.TRISG6=0;
  1247  002472  9C87               	bcf	135,6,c	;volatile
  1248                           
  1249                           ;dc_motor.c: 13:     TRISEbits.TRISE4=0;
  1250  002474  9885               	bcf	133,4,c	;volatile
  1251                           
  1252                           ;dc_motor.c: 14:     LATEbits.LATE2=0;
  1253  002476  947D               	bcf	125,2,c	;volatile
  1254                           
  1255                           ;dc_motor.c: 15:     LATCbits.LATC7=0;
  1256  002478  9E7B               	bcf	123,7,c	;volatile
  1257                           
  1258                           ;dc_motor.c: 16:     LATGbits.LATG6=0;
  1259  00247A  9C7F               	bcf	127,6,c	;volatile
  1260                           
  1261                           ;dc_motor.c: 17:     LATEbits.LATE4=0;
  1262  00247C  987D               	bcf	125,4,c	;volatile
  1263  00247E                     
  1264                           ;dc_motor.c: 20:     T2CONbits.CKPS=0b011;
  1265  00247E  50BD               	movf	189,w,c	;volatile
  1266  002480  0B8F               	andlw	-113
  1267  002482  0930               	iorlw	48
  1268  002484  6EBD               	movwf	189,c	;volatile
  1269                           
  1270                           ;dc_motor.c: 21:     T2HLTbits.MODE=0b00000;
  1271  002486  0EE0               	movlw	-32
  1272  002488  16BE               	andwf	190,f,c	;volatile
  1273                           
  1274                           ;dc_motor.c: 22:     T2CLKCONbits.CS=0b0001;
  1275  00248A  50BF               	movf	191,w,c	;volatile
  1276  00248C  0BF0               	andlw	-16
  1277  00248E  0901               	iorlw	1
  1278  002490  6EBF               	movwf	191,c	;volatile
  1279                           
  1280                           ;dc_motor.c: 25:     T2PR=200-1;
  1281  002492  0EC7               	movlw	199
  1282  002494  6EBC               	movwf	188,c	;volatile
  1283  002496                     
  1284                           ;dc_motor.c: 26:     T2CONbits.ON=1;
  1285  002496  8EBD               	bsf	189,7,c	;volatile
  1286                           
  1287                           ;dc_motor.c: 28:     RE2PPS=0x0A;
  1288  002498  0E0A               	movlw	10
  1289  00249A  010E               	movlb	14	; () banked
  1290  00249C  6F74               	movwf	116,b	;volatile
  1291                           
  1292                           ;dc_motor.c: 29:     RC7PPS=0x0B;
  1293  00249E  0E0B               	movlw	11
  1294  0024A0  6F69               	movwf	105,b	;volatile
  1295                           
  1296                           ;dc_motor.c: 31:     PWM6DCH=0;
  1297  0024A2  0E00               	movlw	0
  1298  0024A4  6EA3               	movwf	163,c	;volatile
  1299                           
  1300                           ;dc_motor.c: 32:     PWM7DCH=0;
  1301  0024A6  0E00               	movlw	0
  1302  0024A8  6EA0               	movwf	160,c	;volatile
  1303  0024AA                     
  1304                           ; BSR set to: 14
  1305                           ;dc_motor.c: 34:     PWM6CONbits.EN = 1;
  1306  0024AA  8EA4               	bsf	164,7,c	;volatile
  1307  0024AC                     
  1308                           ; BSR set to: 14
  1309                           ;dc_motor.c: 35:     PWM7CONbits.EN = 1;
  1310  0024AC  8EA1               	bsf	161,7,c	;volatile
  1311  0024AE                     
  1312                           ; BSR set to: 14
  1313  0024AE  0012               	return		;funcret
  1314  0024B0                     __end_of_initDCmotorsPWM:
  1315                           	callstack 0
  1316                           
  1317 ;; *************** function _detect_color *****************
  1318 ;; Defined at:
  1319 ;;		line 187 in file "color.c"
  1320 ;; Parameters:    Size  Location     Type
  1321 ;;  m               2   20[COMRAM] PTR struct color_rgb
  1322 ;;		 -> main@rgb(8), 
  1323 ;;  w               2   22[COMRAM] PTR struct white_card
  1324 ;;		 -> main@white(18), 
  1325 ;; Auto vars:     Size  Location     Type
  1326 ;;  BG              2   42[COMRAM] unsigned int 
  1327 ;;  BR              2   40[COMRAM] unsigned int 
  1328 ;;  RR              2   38[COMRAM] unsigned int 
  1329 ;;  BB              2   36[COMRAM] unsigned int 
  1330 ;;  GG              2   34[COMRAM] unsigned int 
  1331 ;;  RG              2   32[COMRAM] unsigned int 
  1332 ;;  GB              2   30[COMRAM] unsigned int 
  1333 ;;  GR              2   28[COMRAM] unsigned int 
  1334 ;;  RB              2   26[COMRAM] unsigned int 
  1335 ;;  color           1   44[COMRAM] unsigned char 
  1336 ;; Return value:  Size  Location     Type
  1337 ;;                  1    wreg      unsigned char 
  1338 ;; Registers used:
  1339 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1340 ;; Tracked objects:
  1341 ;;		On entry : 0/0
  1342 ;;		On exit  : 0/0
  1343 ;;		Unchanged: 0/0
  1344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1345 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1346 ;;      Locals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1347 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1348 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1349 ;;Total ram usage:       25 bytes
  1350 ;; Hardware stack levels used: 1
  1351 ;; Hardware stack levels required when called: 4
  1352 ;; This function calls:
  1353 ;;		_LED_B
  1354 ;;		_LED_G
  1355 ;;		_LED_R
  1356 ;;		___lwdiv
  1357 ;;		___wmul
  1358 ;;		_compare
  1359 ;;		_read_color
  1360 ;; This function is called by:
  1361 ;;		_main
  1362 ;; This function uses a non-reentrant model
  1363 ;;
  1364                           
  1365                           	psect	text4
  1366  000E50                     __ptext4:
  1367                           	callstack 0
  1368  000E50                     _detect_color:
  1369                           	callstack 26
  1370  000E50  0E00               	movlw	0
  1371  000E52  6E22               	movwf	(detect_color@RG+1)^0,c
  1372  000E54  0E00               	movlw	0
  1373  000E56  6E21               	movwf	detect_color@RG^0,c
  1374  000E58  0E00               	movlw	0
  1375  000E5A  6E1C               	movwf	(detect_color@RB+1)^0,c
  1376  000E5C  0E00               	movlw	0
  1377  000E5E  6E1B               	movwf	detect_color@RB^0,c
  1378  000E60  0E00               	movlw	0
  1379  000E62  6E1E               	movwf	(detect_color@GR+1)^0,c
  1380  000E64  0E00               	movlw	0
  1381  000E66  6E1D               	movwf	detect_color@GR^0,c
  1382  000E68  0E00               	movlw	0
  1383  000E6A  6E24               	movwf	(detect_color@GG+1)^0,c
  1384  000E6C  0E00               	movlw	0
  1385  000E6E  6E23               	movwf	detect_color@GG^0,c
  1386  000E70  0E00               	movlw	0
  1387  000E72  6E20               	movwf	(detect_color@GB+1)^0,c
  1388  000E74  0E00               	movlw	0
  1389  000E76  6E1F               	movwf	detect_color@GB^0,c
  1390  000E78  0E00               	movlw	0
  1391  000E7A  6E2A               	movwf	(detect_color@BR+1)^0,c
  1392  000E7C  0E00               	movlw	0
  1393  000E7E  6E29               	movwf	detect_color@BR^0,c
  1394  000E80  0E00               	movlw	0
  1395  000E82  6E2C               	movwf	(detect_color@BG+1)^0,c
  1396  000E84  0E00               	movlw	0
  1397  000E86  6E2B               	movwf	detect_color@BG^0,c
  1398  000E88  0E00               	movlw	0
  1399  000E8A  6E26               	movwf	(detect_color@BB+1)^0,c
  1400  000E8C  0E00               	movlw	0
  1401  000E8E  6E25               	movwf	detect_color@BB^0,c
  1402                           
  1403                           ;color.c: 192:     unsigned char color = 0;
  1404  000E90  0E00               	movlw	0
  1405  000E92  6E2D               	movwf	detect_color@color^0,c
  1406  000E94                     
  1407                           ;color.c: 194:     LED_R();
  1408  000E94  EC6C  F013         	call	_LED_R	;wreg free
  1409  000E98                     
  1410                           ;color.c: 195:     read_color(m);
  1411  000E98  C015  F00C         	movff	detect_color@m,read_color@m
  1412  000E9C  C016  F00D         	movff	detect_color@m+1,read_color@m+1
  1413  000EA0  EC1D  F011         	call	_read_color	;wreg free
  1414  000EA4                     
  1415                           ;color.c: 196:     RR = 100*(m->R)/(w->RR); RG = 100*(m->G)/(w->RG); RB = 100*(m->B)/(w-
      +                          >RB);
  1416  000EA4  C015  FFD9         	movff	detect_color@m,fsr2l
  1417  000EA8  C016  FFDA         	movff	detect_color@m+1,fsr2h
  1418  000EAC  CFDE F001          	movff	postinc2,___wmul@multiplier
  1419  000EB0  CFDD F002          	movff	postdec2,___wmul@multiplier+1
  1420  000EB4  0E00               	movlw	0
  1421  000EB6  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1422  000EB8  0E64               	movlw	100
  1423  000EBA  6E03               	movwf	___wmul@multiplicand^0,c
  1424  000EBC  EC49  F013         	call	___wmul	;wreg free
  1425  000EC0  C001  F007         	movff	?___wmul,___lwdiv@dividend
  1426  000EC4  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  1427  000EC8  C017  FFD9         	movff	detect_color@w,fsr2l
  1428  000ECC  C018  FFDA         	movff	detect_color@w+1,fsr2h
  1429  000ED0  CFDE F009          	movff	postinc2,___lwdiv@divisor
  1430  000ED4  CFDD F00A          	movff	postdec2,___lwdiv@divisor+1
  1431  000ED8  EC7A  F010         	call	___lwdiv	;wreg free
  1432  000EDC  C007  F027         	movff	?___lwdiv,detect_color@RR
  1433  000EE0  C008  F028         	movff	?___lwdiv+1,detect_color@RR+1
  1434  000EE4  EE20 F002          	lfsr	2,2
  1435  000EE8  5015               	movf	detect_color@m^0,w,c
  1436  000EEA  26D9               	addwf	fsr2l,f,c
  1437  000EEC  5016               	movf	(detect_color@m+1)^0,w,c
  1438  000EEE  22DA               	addwfc	fsr2h,f,c
  1439  000EF0  CFDE F001          	movff	postinc2,___wmul@multiplier
  1440  000EF4  CFDD F002          	movff	postdec2,___wmul@multiplier+1
  1441  000EF8  0E00               	movlw	0
  1442  000EFA  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1443  000EFC  0E64               	movlw	100
  1444  000EFE  6E03               	movwf	___wmul@multiplicand^0,c
  1445  000F00  EC49  F013         	call	___wmul	;wreg free
  1446  000F04  C001  F007         	movff	?___wmul,___lwdiv@dividend
  1447  000F08  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  1448  000F0C  EE20 F002          	lfsr	2,2
  1449  000F10  5017               	movf	detect_color@w^0,w,c
  1450  000F12  26D9               	addwf	fsr2l,f,c
  1451  000F14  5018               	movf	(detect_color@w+1)^0,w,c
  1452  000F16  22DA               	addwfc	fsr2h,f,c
  1453  000F18  CFDE F009          	movff	postinc2,___lwdiv@divisor
  1454  000F1C  CFDD F00A          	movff	postdec2,___lwdiv@divisor+1
  1455  000F20  EC7A  F010         	call	___lwdiv	;wreg free
  1456  000F24  C007  F021         	movff	?___lwdiv,detect_color@RG
  1457  000F28  C008  F022         	movff	?___lwdiv+1,detect_color@RG+1
  1458  000F2C  EE20 F004          	lfsr	2,4
  1459  000F30  5015               	movf	detect_color@m^0,w,c
  1460  000F32  26D9               	addwf	fsr2l,f,c
  1461  000F34  5016               	movf	(detect_color@m+1)^0,w,c
  1462  000F36  22DA               	addwfc	fsr2h,f,c
  1463  000F38  CFDE F001          	movff	postinc2,___wmul@multiplier
  1464  000F3C  CFDD F002          	movff	postdec2,___wmul@multiplier+1
  1465  000F40  0E00               	movlw	0
  1466  000F42  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1467  000F44  0E64               	movlw	100
  1468  000F46  6E03               	movwf	___wmul@multiplicand^0,c
  1469  000F48  EC49  F013         	call	___wmul	;wreg free
  1470  000F4C  C001  F007         	movff	?___wmul,___lwdiv@dividend
  1471  000F50  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  1472  000F54  EE20 F004          	lfsr	2,4
  1473  000F58  5017               	movf	detect_color@w^0,w,c
  1474  000F5A  26D9               	addwf	fsr2l,f,c
  1475  000F5C  5018               	movf	(detect_color@w+1)^0,w,c
  1476  000F5E  22DA               	addwfc	fsr2h,f,c
  1477  000F60  CFDE F009          	movff	postinc2,___lwdiv@divisor
  1478  000F64  CFDD F00A          	movff	postdec2,___lwdiv@divisor+1
  1479  000F68  EC7A  F010         	call	___lwdiv	;wreg free
  1480  000F6C                     
  1481                           ;color.c: 197:     _delay((unsigned long)((50)*(64000000/4000.0)));
  1482  000F6C  0E05               	movlw	5
  1483  000F6E  6E1A               	movwf	(??_detect_color+1)^0,c
  1484  000F70  0E0F               	movlw	15
  1485  000F72  6E19               	movwf	??_detect_color^0,c
  1486  000F74  0EF1               	movlw	241
  1487  000F76                     u1897:
  1488  000F76  2EE8               	decfsz	wreg,f,c
  1489  000F78  D7FE               	bra	u1897
  1490  000F7A  2E19               	decfsz	??_detect_color^0,f,c
  1491  000F7C  D7FC               	bra	u1897
  1492  000F7E  2E1A               	decfsz	(??_detect_color+1)^0,f,c
  1493  000F80  D7FA               	bra	u1897
  1494  000F82  F000               	nop	
  1495  000F84                     
  1496                           ;color.c: 199:     LED_G();
  1497  000F84  EC7C  F013         	call	_LED_G	;wreg free
  1498  000F88                     
  1499                           ;color.c: 200:     read_color(m);
  1500  000F88  C015  F00C         	movff	detect_color@m,read_color@m
  1501  000F8C  C016  F00D         	movff	detect_color@m+1,read_color@m+1
  1502  000F90  EC1D  F011         	call	_read_color	;wreg free
  1503  000F94  C015  FFD9         	movff	detect_color@m,fsr2l
  1504  000F98  C016  FFDA         	movff	detect_color@m+1,fsr2h
  1505  000F9C  CFDE F001          	movff	postinc2,___wmul@multiplier
  1506  000FA0  CFDD F002          	movff	postdec2,___wmul@multiplier+1
  1507  000FA4  0E00               	movlw	0
  1508  000FA6  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1509  000FA8  0E64               	movlw	100
  1510  000FAA  6E03               	movwf	___wmul@multiplicand^0,c
  1511  000FAC  EC49  F013         	call	___wmul	;wreg free
  1512  000FB0  C001  F007         	movff	?___wmul,___lwdiv@dividend
  1513  000FB4  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  1514  000FB8  EE20 F006          	lfsr	2,6
  1515  000FBC  5017               	movf	detect_color@w^0,w,c
  1516  000FBE  26D9               	addwf	fsr2l,f,c
  1517  000FC0  5018               	movf	(detect_color@w+1)^0,w,c
  1518  000FC2  22DA               	addwfc	fsr2h,f,c
  1519  000FC4  CFDE F009          	movff	postinc2,___lwdiv@divisor
  1520  000FC8  CFDD F00A          	movff	postdec2,___lwdiv@divisor+1
  1521  000FCC  EC7A  F010         	call	___lwdiv	;wreg free
  1522  000FD0  EE20 F002          	lfsr	2,2
  1523  000FD4  5015               	movf	detect_color@m^0,w,c
  1524  000FD6  26D9               	addwf	fsr2l,f,c
  1525  000FD8  5016               	movf	(detect_color@m+1)^0,w,c
  1526  000FDA  22DA               	addwfc	fsr2h,f,c
  1527  000FDC  CFDE F001          	movff	postinc2,___wmul@multiplier
  1528  000FE0  CFDD F002          	movff	postdec2,___wmul@multiplier+1
  1529  000FE4  0E00               	movlw	0
  1530  000FE6  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1531  000FE8  0E64               	movlw	100
  1532  000FEA  6E03               	movwf	___wmul@multiplicand^0,c
  1533  000FEC  EC49  F013         	call	___wmul	;wreg free
  1534  000FF0  C001  F007         	movff	?___wmul,___lwdiv@dividend
  1535  000FF4  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  1536  000FF8  EE20 F008          	lfsr	2,8
  1537  000FFC  5017               	movf	detect_color@w^0,w,c
  1538  000FFE  26D9               	addwf	fsr2l,f,c
  1539  001000  5018               	movf	(detect_color@w+1)^0,w,c
  1540  001002  22DA               	addwfc	fsr2h,f,c
  1541  001004  CFDE F009          	movff	postinc2,___lwdiv@divisor
  1542  001008  CFDD F00A          	movff	postdec2,___lwdiv@divisor+1
  1543  00100C  EC7A  F010         	call	___lwdiv	;wreg free
  1544  001010  C007  F023         	movff	?___lwdiv,detect_color@GG
  1545  001014  C008  F024         	movff	?___lwdiv+1,detect_color@GG+1
  1546  001018  EE20 F004          	lfsr	2,4
  1547  00101C  5015               	movf	detect_color@m^0,w,c
  1548  00101E  26D9               	addwf	fsr2l,f,c
  1549  001020  5016               	movf	(detect_color@m+1)^0,w,c
  1550  001022  22DA               	addwfc	fsr2h,f,c
  1551  001024  CFDE F001          	movff	postinc2,___wmul@multiplier
  1552  001028  CFDD F002          	movff	postdec2,___wmul@multiplier+1
  1553  00102C  0E00               	movlw	0
  1554  00102E  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1555  001030  0E64               	movlw	100
  1556  001032  6E03               	movwf	___wmul@multiplicand^0,c
  1557  001034  EC49  F013         	call	___wmul	;wreg free
  1558  001038  C001  F007         	movff	?___wmul,___lwdiv@dividend
  1559  00103C  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  1560  001040  EE20 F00A          	lfsr	2,10
  1561  001044  5017               	movf	detect_color@w^0,w,c
  1562  001046  26D9               	addwf	fsr2l,f,c
  1563  001048  5018               	movf	(detect_color@w+1)^0,w,c
  1564  00104A  22DA               	addwfc	fsr2h,f,c
  1565  00104C  CFDE F009          	movff	postinc2,___lwdiv@divisor
  1566  001050  CFDD F00A          	movff	postdec2,___lwdiv@divisor+1
  1567  001054  EC7A  F010         	call	___lwdiv	;wreg free
  1568  001058                     
  1569                           ;color.c: 202:     _delay((unsigned long)((50)*(64000000/4000.0)));
  1570  001058  0E05               	movlw	5
  1571  00105A  6E1A               	movwf	(??_detect_color+1)^0,c
  1572  00105C  0E0F               	movlw	15
  1573  00105E  6E19               	movwf	??_detect_color^0,c
  1574  001060  0EF1               	movlw	241
  1575  001062                     u1907:
  1576  001062  2EE8               	decfsz	wreg,f,c
  1577  001064  D7FE               	bra	u1907
  1578  001066  2E19               	decfsz	??_detect_color^0,f,c
  1579  001068  D7FC               	bra	u1907
  1580  00106A  2E1A               	decfsz	(??_detect_color+1)^0,f,c
  1581  00106C  D7FA               	bra	u1907
  1582  00106E  F000               	nop	
  1583  001070                     
  1584                           ;color.c: 204:     LED_B();
  1585  001070  EC8C  F013         	call	_LED_B	;wreg free
  1586  001074                     
  1587                           ;color.c: 205:     read_color(m);
  1588  001074  C015  F00C         	movff	detect_color@m,read_color@m
  1589  001078  C016  F00D         	movff	detect_color@m+1,read_color@m+1
  1590  00107C  EC1D  F011         	call	_read_color	;wreg free
  1591  001080                     
  1592                           ;color.c: 206:     BR = 100*(m->R)/(w->BR); BG = 100*(m->G)/(w->BG); BB = 100*(m->B)/(w-
      +                          >BB);
  1593  001080  C015  FFD9         	movff	detect_color@m,fsr2l
  1594  001084  C016  FFDA         	movff	detect_color@m+1,fsr2h
  1595  001088  CFDE F001          	movff	postinc2,___wmul@multiplier
  1596  00108C  CFDD F002          	movff	postdec2,___wmul@multiplier+1
  1597  001090  0E00               	movlw	0
  1598  001092  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1599  001094  0E64               	movlw	100
  1600  001096  6E03               	movwf	___wmul@multiplicand^0,c
  1601  001098  EC49  F013         	call	___wmul	;wreg free
  1602  00109C  C001  F007         	movff	?___wmul,___lwdiv@dividend
  1603  0010A0  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  1604  0010A4  EE20 F00C          	lfsr	2,12
  1605  0010A8  5017               	movf	detect_color@w^0,w,c
  1606  0010AA  26D9               	addwf	fsr2l,f,c
  1607  0010AC  5018               	movf	(detect_color@w+1)^0,w,c
  1608  0010AE  22DA               	addwfc	fsr2h,f,c
  1609  0010B0  CFDE F009          	movff	postinc2,___lwdiv@divisor
  1610  0010B4  CFDD F00A          	movff	postdec2,___lwdiv@divisor+1
  1611  0010B8  EC7A  F010         	call	___lwdiv	;wreg free
  1612  0010BC  C007  F029         	movff	?___lwdiv,detect_color@BR
  1613  0010C0  C008  F02A         	movff	?___lwdiv+1,detect_color@BR+1
  1614  0010C4  EE20 F002          	lfsr	2,2
  1615  0010C8  5015               	movf	detect_color@m^0,w,c
  1616  0010CA  26D9               	addwf	fsr2l,f,c
  1617  0010CC  5016               	movf	(detect_color@m+1)^0,w,c
  1618  0010CE  22DA               	addwfc	fsr2h,f,c
  1619  0010D0  CFDE F001          	movff	postinc2,___wmul@multiplier
  1620  0010D4  CFDD F002          	movff	postdec2,___wmul@multiplier+1
  1621  0010D8  0E00               	movlw	0
  1622  0010DA  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1623  0010DC  0E64               	movlw	100
  1624  0010DE  6E03               	movwf	___wmul@multiplicand^0,c
  1625  0010E0  EC49  F013         	call	___wmul	;wreg free
  1626  0010E4  C001  F007         	movff	?___wmul,___lwdiv@dividend
  1627  0010E8  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  1628  0010EC  EE20 F00E          	lfsr	2,14
  1629  0010F0  5017               	movf	detect_color@w^0,w,c
  1630  0010F2  26D9               	addwf	fsr2l,f,c
  1631  0010F4  5018               	movf	(detect_color@w+1)^0,w,c
  1632  0010F6  22DA               	addwfc	fsr2h,f,c
  1633  0010F8  CFDE F009          	movff	postinc2,___lwdiv@divisor
  1634  0010FC  CFDD F00A          	movff	postdec2,___lwdiv@divisor+1
  1635  001100  EC7A  F010         	call	___lwdiv	;wreg free
  1636  001104  C007  F02B         	movff	?___lwdiv,detect_color@BG
  1637  001108  C008  F02C         	movff	?___lwdiv+1,detect_color@BG+1
  1638  00110C  EE20 F004          	lfsr	2,4
  1639  001110  5015               	movf	detect_color@m^0,w,c
  1640  001112  26D9               	addwf	fsr2l,f,c
  1641  001114  5016               	movf	(detect_color@m+1)^0,w,c
  1642  001116  22DA               	addwfc	fsr2h,f,c
  1643  001118  CFDE F001          	movff	postinc2,___wmul@multiplier
  1644  00111C  CFDD F002          	movff	postdec2,___wmul@multiplier+1
  1645  001120  0E00               	movlw	0
  1646  001122  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1647  001124  0E64               	movlw	100
  1648  001126  6E03               	movwf	___wmul@multiplicand^0,c
  1649  001128  EC49  F013         	call	___wmul	;wreg free
  1650  00112C  C001  F007         	movff	?___wmul,___lwdiv@dividend
  1651  001130  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  1652  001134  EE20 F010          	lfsr	2,16
  1653  001138  5017               	movf	detect_color@w^0,w,c
  1654  00113A  26D9               	addwf	fsr2l,f,c
  1655  00113C  5018               	movf	(detect_color@w+1)^0,w,c
  1656  00113E  22DA               	addwfc	fsr2h,f,c
  1657  001140  CFDE F009          	movff	postinc2,___lwdiv@divisor
  1658  001144  CFDD F00A          	movff	postdec2,___lwdiv@divisor+1
  1659  001148  EC7A  F010         	call	___lwdiv	;wreg free
  1660  00114C  C007  F025         	movff	?___lwdiv,detect_color@BB
  1661  001150  C008  F026         	movff	?___lwdiv+1,detect_color@BB+1
  1662  001154                     
  1663                           ;color.c: 207:     _delay((unsigned long)((50)*(64000000/4000.0)));
  1664  001154  0E05               	movlw	5
  1665  001156  6E1A               	movwf	(??_detect_color+1)^0,c
  1666  001158  0E0F               	movlw	15
  1667  00115A  6E19               	movwf	??_detect_color^0,c
  1668  00115C  0EF1               	movlw	241
  1669  00115E                     u1917:
  1670  00115E  2EE8               	decfsz	wreg,f,c
  1671  001160  D7FE               	bra	u1917
  1672  001162  2E19               	decfsz	??_detect_color^0,f,c
  1673  001164  D7FC               	bra	u1917
  1674  001166  2E1A               	decfsz	(??_detect_color+1)^0,f,c
  1675  001168  D7FA               	bra	u1917
  1676  00116A  F000               	nop	
  1677  00116C                     
  1678                           ;color.c: 210:     if (compare(0, RR, 90)){
  1679  00116C  0E00               	movlw	0
  1680  00116E  6E0F               	movwf	(compare@lower+1)^0,c
  1681  001170  0E00               	movlw	0
  1682  001172  6E0E               	movwf	compare@lower^0,c
  1683  001174  C027  F010         	movff	detect_color@RR,compare@value2compare
  1684  001178  C028  F011         	movff	detect_color@RR+1,compare@value2compare+1
  1685  00117C  0E00               	movlw	0
  1686  00117E  6E13               	movwf	(compare@upper+1)^0,c
  1687  001180  0E5A               	movlw	90
  1688  001182  6E12               	movwf	compare@upper^0,c
  1689  001184  ECB7  F012         	call	_compare	;wreg free
  1690  001188  0900               	iorlw	0
  1691  00118A  B4D8               	btfsc	status,2,c
  1692  00118C  EFCA  F008         	goto	u1641
  1693  001190  EFCC  F008         	goto	u1640
  1694  001194                     u1641:
  1695  001194  EFFE  F008         	goto	l2768
  1696  001198                     u1640:
  1697  001198                     
  1698                           ;color.c: 211:         if (compare(0, GG/BB*200, 228)){color = 3;}
  1699  001198  0E00               	movlw	0
  1700  00119A  6E0F               	movwf	(compare@lower+1)^0,c
  1701  00119C  0E00               	movlw	0
  1702  00119E  6E0E               	movwf	compare@lower^0,c
  1703  0011A0  C025  F009         	movff	detect_color@BB,___lwdiv@divisor
  1704  0011A4  C026  F00A         	movff	detect_color@BB+1,___lwdiv@divisor+1
  1705  0011A8  C023  F007         	movff	detect_color@GG,___lwdiv@dividend
  1706  0011AC  C024  F008         	movff	detect_color@GG+1,___lwdiv@dividend+1
  1707  0011B0  EC7A  F010         	call	___lwdiv	;wreg free
  1708  0011B4  C007  F001         	movff	?___lwdiv,___wmul@multiplier
  1709  0011B8  C008  F002         	movff	?___lwdiv+1,___wmul@multiplier+1
  1710  0011BC  0E00               	movlw	0
  1711  0011BE  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1712  0011C0  0EC8               	movlw	200
  1713  0011C2  6E03               	movwf	___wmul@multiplicand^0,c
  1714  0011C4  EC49  F013         	call	___wmul	;wreg free
  1715  0011C8  C001  F010         	movff	?___wmul,compare@value2compare
  1716  0011CC  C002  F011         	movff	?___wmul+1,compare@value2compare+1
  1717  0011D0  0E00               	movlw	0
  1718  0011D2  6E13               	movwf	(compare@upper+1)^0,c
  1719  0011D4  0EE4               	movlw	228
  1720  0011D6  6E12               	movwf	compare@upper^0,c
  1721  0011D8  ECB7  F012         	call	_compare	;wreg free
  1722  0011DC  0900               	iorlw	0
  1723  0011DE  B4D8               	btfsc	status,2,c
  1724  0011E0  EFF4  F008         	goto	u1651
  1725  0011E4  EFF6  F008         	goto	u1650
  1726  0011E8                     u1651:
  1727  0011E8  EFFA  F008         	goto	l2766
  1728  0011EC                     u1650:
  1729  0011EC  0E03               	movlw	3
  1730  0011EE  6E2D               	movwf	detect_color@color^0,c
  1731  0011F0  EF71  F009         	goto	l2786
  1732  0011F4                     l2766:
  1733  0011F4  0E02               	movlw	2
  1734  0011F6  6E2D               	movwf	detect_color@color^0,c
  1735  0011F8  EF71  F009         	goto	l2786
  1736  0011FC                     l2768:
  1737                           
  1738                           ;color.c: 215:         if (compare(0,RG,80)){
  1739  0011FC  0E00               	movlw	0
  1740  0011FE  6E0F               	movwf	(compare@lower+1)^0,c
  1741  001200  0E00               	movlw	0
  1742  001202  6E0E               	movwf	compare@lower^0,c
  1743  001204  C021  F010         	movff	detect_color@RG,compare@value2compare
  1744  001208  C022  F011         	movff	detect_color@RG+1,compare@value2compare+1
  1745  00120C  0E00               	movlw	0
  1746  00120E  6E13               	movwf	(compare@upper+1)^0,c
  1747  001210  0E50               	movlw	80
  1748  001212  6E12               	movwf	compare@upper^0,c
  1749  001214  ECB7  F012         	call	_compare	;wreg free
  1750  001218  0900               	iorlw	0
  1751  00121A  B4D8               	btfsc	status,2,c
  1752  00121C  EF12  F009         	goto	u1661
  1753  001220  EF14  F009         	goto	u1660
  1754  001224                     u1661:
  1755  001224  EF46  F009         	goto	l2776
  1756  001228                     u1660:
  1757  001228                     
  1758                           ;color.c: 216:             if (compare(0, RR/BG*200, 319)){color = 6;}
  1759  001228  0E00               	movlw	0
  1760  00122A  6E0F               	movwf	(compare@lower+1)^0,c
  1761  00122C  0E00               	movlw	0
  1762  00122E  6E0E               	movwf	compare@lower^0,c
  1763  001230  C02B  F009         	movff	detect_color@BG,___lwdiv@divisor
  1764  001234  C02C  F00A         	movff	detect_color@BG+1,___lwdiv@divisor+1
  1765  001238  C027  F007         	movff	detect_color@RR,___lwdiv@dividend
  1766  00123C  C028  F008         	movff	detect_color@RR+1,___lwdiv@dividend+1
  1767  001240  EC7A  F010         	call	___lwdiv	;wreg free
  1768  001244  C007  F001         	movff	?___lwdiv,___wmul@multiplier
  1769  001248  C008  F002         	movff	?___lwdiv+1,___wmul@multiplier+1
  1770  00124C  0E00               	movlw	0
  1771  00124E  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1772  001250  0EC8               	movlw	200
  1773  001252  6E03               	movwf	___wmul@multiplicand^0,c
  1774  001254  EC49  F013         	call	___wmul	;wreg free
  1775  001258  C001  F010         	movff	?___wmul,compare@value2compare
  1776  00125C  C002  F011         	movff	?___wmul+1,compare@value2compare+1
  1777  001260  0E01               	movlw	1
  1778  001262  6E13               	movwf	(compare@upper+1)^0,c
  1779  001264  0E3F               	movlw	63
  1780  001266  6E12               	movwf	compare@upper^0,c
  1781  001268  ECB7  F012         	call	_compare	;wreg free
  1782  00126C  0900               	iorlw	0
  1783  00126E  B4D8               	btfsc	status,2,c
  1784  001270  EF3C  F009         	goto	u1671
  1785  001274  EF3E  F009         	goto	u1670
  1786  001278                     u1671:
  1787  001278  EF42  F009         	goto	l2774
  1788  00127C                     u1670:
  1789  00127C  0E06               	movlw	6
  1790  00127E  6E2D               	movwf	detect_color@color^0,c
  1791  001280  EF71  F009         	goto	l2786
  1792  001284                     l2774:
  1793  001284  0E01               	movlw	1
  1794  001286  6E2D               	movwf	detect_color@color^0,c
  1795  001288  EF71  F009         	goto	l2786
  1796  00128C                     l2776:
  1797                           
  1798                           ;color.c: 220:             if (compare(0, BR, 95)){color = 7;}
  1799  00128C  0E00               	movlw	0
  1800  00128E  6E0F               	movwf	(compare@lower+1)^0,c
  1801  001290  0E00               	movlw	0
  1802  001292  6E0E               	movwf	compare@lower^0,c
  1803  001294  C029  F010         	movff	detect_color@BR,compare@value2compare
  1804  001298  C02A  F011         	movff	detect_color@BR+1,compare@value2compare+1
  1805  00129C  0E00               	movlw	0
  1806  00129E  6E13               	movwf	(compare@upper+1)^0,c
  1807  0012A0  0E5F               	movlw	95
  1808  0012A2  6E12               	movwf	compare@upper^0,c
  1809  0012A4  ECB7  F012         	call	_compare	;wreg free
  1810  0012A8  0900               	iorlw	0
  1811  0012AA  B4D8               	btfsc	status,2,c
  1812  0012AC  EF5A  F009         	goto	u1681
  1813  0012B0  EF5C  F009         	goto	u1680
  1814  0012B4                     u1681:
  1815  0012B4  EF60  F009         	goto	l2780
  1816  0012B8                     u1680:
  1817  0012B8  0E07               	movlw	7
  1818  0012BA  6E2D               	movwf	detect_color@color^0,c
  1819  0012BC  EF71  F009         	goto	l2786
  1820  0012C0                     l2780:
  1821                           
  1822                           ;color.c: 222:                 if (BG < BB){color = 5;}
  1823  0012C0  5025               	movf	detect_color@BB^0,w,c
  1824  0012C2  5C2B               	subwf	detect_color@BG^0,w,c
  1825  0012C4  5026               	movf	(detect_color@BB+1)^0,w,c
  1826  0012C6  582C               	subwfb	(detect_color@BG+1)^0,w,c
  1827  0012C8  B0D8               	btfsc	status,0,c
  1828  0012CA  EF69  F009         	goto	u1691
  1829  0012CE  EF6B  F009         	goto	u1690
  1830  0012D2                     u1691:
  1831  0012D2  EF6F  F009         	goto	l2784
  1832  0012D6                     u1690:
  1833  0012D6  0E05               	movlw	5
  1834  0012D8  6E2D               	movwf	detect_color@color^0,c
  1835  0012DA  EF71  F009         	goto	l2786
  1836  0012DE                     l2784:
  1837  0012DE  0E04               	movlw	4
  1838  0012E0  6E2D               	movwf	detect_color@color^0,c
  1839  0012E2                     l2786:
  1840                           
  1841                           ;color.c: 228:     if (compare(95, BR, 105) && compare(95,BG,105)){color = 8;}
  1842  0012E2  0E00               	movlw	0
  1843  0012E4  6E0F               	movwf	(compare@lower+1)^0,c
  1844  0012E6  0E5F               	movlw	95
  1845  0012E8  6E0E               	movwf	compare@lower^0,c
  1846  0012EA  C029  F010         	movff	detect_color@BR,compare@value2compare
  1847  0012EE  C02A  F011         	movff	detect_color@BR+1,compare@value2compare+1
  1848  0012F2  0E00               	movlw	0
  1849  0012F4  6E13               	movwf	(compare@upper+1)^0,c
  1850  0012F6  0E69               	movlw	105
  1851  0012F8  6E12               	movwf	compare@upper^0,c
  1852  0012FA  ECB7  F012         	call	_compare	;wreg free
  1853  0012FE  0900               	iorlw	0
  1854  001300  B4D8               	btfsc	status,2,c
  1855  001302  EF85  F009         	goto	u1701
  1856  001306  EF87  F009         	goto	u1700
  1857  00130A                     u1701:
  1858  00130A  EF9F  F009         	goto	l2792
  1859  00130E                     u1700:
  1860  00130E  0E00               	movlw	0
  1861  001310  6E0F               	movwf	(compare@lower+1)^0,c
  1862  001312  0E5F               	movlw	95
  1863  001314  6E0E               	movwf	compare@lower^0,c
  1864  001316  C02B  F010         	movff	detect_color@BG,compare@value2compare
  1865  00131A  C02C  F011         	movff	detect_color@BG+1,compare@value2compare+1
  1866  00131E  0E00               	movlw	0
  1867  001320  6E13               	movwf	(compare@upper+1)^0,c
  1868  001322  0E69               	movlw	105
  1869  001324  6E12               	movwf	compare@upper^0,c
  1870  001326  ECB7  F012         	call	_compare	;wreg free
  1871  00132A  0900               	iorlw	0
  1872  00132C  B4D8               	btfsc	status,2,c
  1873  00132E  EF9B  F009         	goto	u1711
  1874  001332  EF9D  F009         	goto	u1710
  1875  001336                     u1711:
  1876  001336  EF9F  F009         	goto	l2792
  1877  00133A                     u1710:
  1878  00133A  0E08               	movlw	8
  1879  00133C  6E2D               	movwf	detect_color@color^0,c
  1880  00133E                     l2792:
  1881                           
  1882                           ;color.c: 229:     if (compare(0, BR, 20) && compare(0,RR,90)){color = 9;}
  1883  00133E  0E00               	movlw	0
  1884  001340  6E0F               	movwf	(compare@lower+1)^0,c
  1885  001342  0E00               	movlw	0
  1886  001344  6E0E               	movwf	compare@lower^0,c
  1887  001346  C029  F010         	movff	detect_color@BR,compare@value2compare
  1888  00134A  C02A  F011         	movff	detect_color@BR+1,compare@value2compare+1
  1889  00134E  0E00               	movlw	0
  1890  001350  6E13               	movwf	(compare@upper+1)^0,c
  1891  001352  0E14               	movlw	20
  1892  001354  6E12               	movwf	compare@upper^0,c
  1893  001356  ECB7  F012         	call	_compare	;wreg free
  1894  00135A  0900               	iorlw	0
  1895  00135C  B4D8               	btfsc	status,2,c
  1896  00135E  EFB3  F009         	goto	u1721
  1897  001362  EFB5  F009         	goto	u1720
  1898  001366                     u1721:
  1899  001366  EFCD  F009         	goto	l113
  1900  00136A                     u1720:
  1901  00136A  0E00               	movlw	0
  1902  00136C  6E0F               	movwf	(compare@lower+1)^0,c
  1903  00136E  0E00               	movlw	0
  1904  001370  6E0E               	movwf	compare@lower^0,c
  1905  001372  C027  F010         	movff	detect_color@RR,compare@value2compare
  1906  001376  C028  F011         	movff	detect_color@RR+1,compare@value2compare+1
  1907  00137A  0E00               	movlw	0
  1908  00137C  6E13               	movwf	(compare@upper+1)^0,c
  1909  00137E  0E5A               	movlw	90
  1910  001380  6E12               	movwf	compare@upper^0,c
  1911  001382  ECB7  F012         	call	_compare	;wreg free
  1912  001386  0900               	iorlw	0
  1913  001388  B4D8               	btfsc	status,2,c
  1914  00138A  EFC9  F009         	goto	u1731
  1915  00138E  EFCB  F009         	goto	u1730
  1916  001392                     u1731:
  1917  001392  EFCD  F009         	goto	l113
  1918  001396                     u1730:
  1919  001396  0E09               	movlw	9
  1920  001398  6E2D               	movwf	detect_color@color^0,c
  1921  00139A                     l113:
  1922                           
  1923                           ;color.c: 230:     return color;
  1924  00139A  502D               	movf	detect_color@color^0,w,c
  1925  00139C  0012               	return		;funcret
  1926  00139E                     __end_of_detect_color:
  1927                           	callstack 0
  1928                           
  1929 ;; *************** function _compare *****************
  1930 ;; Defined at:
  1931 ;;		line 233 in file "color.c"
  1932 ;; Parameters:    Size  Location     Type
  1933 ;;  lower           2   13[COMRAM] unsigned int 
  1934 ;;  value2compar    2   15[COMRAM] unsigned int 
  1935 ;;  upper           2   17[COMRAM] unsigned int 
  1936 ;; Auto vars:     Size  Location     Type
  1937 ;;  result          1   19[COMRAM] unsigned char 
  1938 ;; Return value:  Size  Location     Type
  1939 ;;                  1    wreg      unsigned char 
  1940 ;; Registers used:
  1941 ;;		wreg, status,2, status,0
  1942 ;; Tracked objects:
  1943 ;;		On entry : 0/0
  1944 ;;		On exit  : 0/0
  1945 ;;		Unchanged: 0/0
  1946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1947 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1948 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1949 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1950 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1951 ;;Total ram usage:        7 bytes
  1952 ;; Hardware stack levels used: 1
  1953 ;; This function calls:
  1954 ;;		Nothing
  1955 ;; This function is called by:
  1956 ;;		_detect_color
  1957 ;; This function uses a non-reentrant model
  1958 ;;
  1959                           
  1960                           	psect	text5
  1961  00256E                     __ptext5:
  1962                           	callstack 0
  1963  00256E                     _compare:
  1964                           	callstack 29
  1965  00256E                     
  1966                           ;color.c: 233: unsigned char compare(unsigned int lower, unsigned int value2compare, uns
      +                          igned int upper);color.c: 234: {;color.c: 235:     unsigned char result = 0;
  1967  00256E  0E00               	movlw	0
  1968  002570  6E14               	movwf	compare@result^0,c
  1969  002572                     
  1970                           ;color.c: 236:     if (lower < value2compare && value2compare <= upper){result = 1;}
  1971  002572  5010               	movf	compare@value2compare^0,w,c
  1972  002574  5C0E               	subwf	compare@lower^0,w,c
  1973  002576  5011               	movf	(compare@value2compare+1)^0,w,c
  1974  002578  580F               	subwfb	(compare@lower+1)^0,w,c
  1975  00257A  B0D8               	btfsc	status,0,c
  1976  00257C  EFC2  F012         	goto	u1471
  1977  002580  EFC4  F012         	goto	u1470
  1978  002584                     u1471:
  1979  002584  EFD1  F012         	goto	l117
  1980  002588                     u1470:
  1981  002588  5010               	movf	compare@value2compare^0,w,c
  1982  00258A  5C12               	subwf	compare@upper^0,w,c
  1983  00258C  5011               	movf	(compare@value2compare+1)^0,w,c
  1984  00258E  5813               	subwfb	(compare@upper+1)^0,w,c
  1985  002590  A0D8               	btfss	status,0,c
  1986  002592  EFCD  F012         	goto	u1481
  1987  002596  EFCF  F012         	goto	u1480
  1988  00259A                     u1481:
  1989  00259A  EFD1  F012         	goto	l117
  1990  00259E                     u1480:
  1991  00259E  0E01               	movlw	1
  1992  0025A0  6E14               	movwf	compare@result^0,c
  1993  0025A2                     l117:
  1994                           
  1995                           ;color.c: 237:     return result;
  1996  0025A2  5014               	movf	compare@result^0,w,c
  1997  0025A4  0012               	return		;funcret
  1998  0025A6                     __end_of_compare:
  1999                           	callstack 0
  2000                           
  2001 ;; *************** function _color_predict *****************
  2002 ;; Defined at:
  2003 ;;		line 148 in file "color.c"
  2004 ;; Parameters:    Size  Location     Type
  2005 ;;  color           1    wreg     unsigned char 
  2006 ;; Auto vars:     Size  Location     Type
  2007 ;;  color           1  125[BANK0 ] unsigned char 
  2008 ;;  buf           100   25[BANK0 ] unsigned char [100]
  2009 ;;  color_name      1    0        unsigned char 
  2010 ;; Return value:  Size  Location     Type
  2011 ;;                  1    wreg      void 
  2012 ;; Registers used:
  2013 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2014 ;; Tracked objects:
  2015 ;;		On entry : 0/0
  2016 ;;		On exit  : 0/0
  2017 ;;		Unchanged: 0/0
  2018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2019 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2020 ;;      Locals:         0     101       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2021 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2022 ;;      Totals:         0     101       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2023 ;;Total ram usage:      101 bytes
  2024 ;; Hardware stack levels used: 1
  2025 ;; Hardware stack levels required when called: 8
  2026 ;; This function calls:
  2027 ;;		_sendStringSerial4
  2028 ;;		_sprintf
  2029 ;; This function is called by:
  2030 ;;		_main
  2031 ;; This function uses a non-reentrant model
  2032 ;;
  2033                           
  2034                           	psect	text6
  2035  001C70                     __ptext6:
  2036                           	callstack 0
  2037  001C70                     _color_predict:
  2038                           	callstack 22
  2039                           
  2040                           ;incstack = 0
  2041                           ;color_predict@color stored from wreg
  2042  001C70  0100               	movlb	0	; () banked
  2043  001C72  6FDD               	movwf	color_predict@color& (0+255),b
  2044  001C74                     
  2045                           ;color.c: 148: void color_predict(unsigned char color);color.c: 149: {;color.c: 150:    
      +                           char buf[100];;color.c: 151:     char color_name;;color.c: 152:     if (color == 0){col
      +                          or_name = "Error";}
  2046  001C74  0100               	movlb	0	; () banked
  2047  001C76  51DD               	movf	color_predict@color& (0+255),w,b
  2048  001C78  A4D8               	btfss	status,2,c
  2049  001C7A  EF41  F00E         	goto	u1541
  2050  001C7E  EF43  F00E         	goto	u1540
  2051  001C82                     u1541:
  2052  001C82  EF43  F00E         	goto	l2648
  2053  001C86                     u1540:
  2054  001C86                     l2648:
  2055                           
  2056                           ; BSR set to: 0
  2057                           ;color.c: 153:     if (color == 1){color_name = "Red";}
  2058  001C86  05DD               	decf	color_predict@color& (0+255),w,b
  2059  001C88  A4D8               	btfss	status,2,c
  2060  001C8A  EF49  F00E         	goto	u1551
  2061  001C8E  EF4B  F00E         	goto	u1550
  2062  001C92                     u1551:
  2063  001C92  EF4B  F00E         	goto	l2652
  2064  001C96                     u1550:
  2065  001C96                     l2652:
  2066                           
  2067                           ; BSR set to: 0
  2068                           ;color.c: 154:     if (color == 2){color_name = "Green";}
  2069  001C96  0E02               	movlw	2
  2070  001C98  19DD               	xorwf	color_predict@color& (0+255),w,b
  2071  001C9A  A4D8               	btfss	status,2,c
  2072  001C9C  EF52  F00E         	goto	u1561
  2073  001CA0  EF54  F00E         	goto	u1560
  2074  001CA4                     u1561:
  2075  001CA4  EF54  F00E         	goto	l2656
  2076  001CA8                     u1560:
  2077  001CA8                     l2656:
  2078                           
  2079                           ; BSR set to: 0
  2080                           ;color.c: 155:     if (color == 3){color_name = "Blue";}
  2081  001CA8  0E03               	movlw	3
  2082  001CAA  19DD               	xorwf	color_predict@color& (0+255),w,b
  2083  001CAC  A4D8               	btfss	status,2,c
  2084  001CAE  EF5B  F00E         	goto	u1571
  2085  001CB2  EF5D  F00E         	goto	u1570
  2086  001CB6                     u1571:
  2087  001CB6  EF5D  F00E         	goto	l2660
  2088  001CBA                     u1570:
  2089  001CBA                     l2660:
  2090                           
  2091                           ; BSR set to: 0
  2092                           ;color.c: 156:     if (color == 4){color_name = "Yellow";}
  2093  001CBA  0E04               	movlw	4
  2094  001CBC  19DD               	xorwf	color_predict@color& (0+255),w,b
  2095  001CBE  A4D8               	btfss	status,2,c
  2096  001CC0  EF64  F00E         	goto	u1581
  2097  001CC4  EF66  F00E         	goto	u1580
  2098  001CC8                     u1581:
  2099  001CC8  EF66  F00E         	goto	l2664
  2100  001CCC                     u1580:
  2101  001CCC                     l2664:
  2102                           
  2103                           ; BSR set to: 0
  2104                           ;color.c: 157:     if (color == 5){color_name = "Pink";}
  2105  001CCC  0E05               	movlw	5
  2106  001CCE  19DD               	xorwf	color_predict@color& (0+255),w,b
  2107  001CD0  A4D8               	btfss	status,2,c
  2108  001CD2  EF6D  F00E         	goto	u1591
  2109  001CD6  EF6F  F00E         	goto	u1590
  2110  001CDA                     u1591:
  2111  001CDA  EF6F  F00E         	goto	l2668
  2112  001CDE                     u1590:
  2113  001CDE                     l2668:
  2114                           
  2115                           ; BSR set to: 0
  2116                           ;color.c: 158:     if (color == 6){color_name = "Orange";}
  2117  001CDE  0E06               	movlw	6
  2118  001CE0  19DD               	xorwf	color_predict@color& (0+255),w,b
  2119  001CE2  A4D8               	btfss	status,2,c
  2120  001CE4  EF76  F00E         	goto	u1601
  2121  001CE8  EF78  F00E         	goto	u1600
  2122  001CEC                     u1601:
  2123  001CEC  EF78  F00E         	goto	l2672
  2124  001CF0                     u1600:
  2125  001CF0                     l2672:
  2126                           
  2127                           ; BSR set to: 0
  2128                           ;color.c: 159:     if (color == 7){color_name = "Light blue";}
  2129  001CF0  0E07               	movlw	7
  2130  001CF2  19DD               	xorwf	color_predict@color& (0+255),w,b
  2131  001CF4  A4D8               	btfss	status,2,c
  2132  001CF6  EF7F  F00E         	goto	u1611
  2133  001CFA  EF81  F00E         	goto	u1610
  2134  001CFE                     u1611:
  2135  001CFE  EF81  F00E         	goto	l2676
  2136  001D02                     u1610:
  2137  001D02                     l2676:
  2138                           
  2139                           ; BSR set to: 0
  2140                           ;color.c: 160:     if (color == 8){color_name = "White";}
  2141  001D02  0E08               	movlw	8
  2142  001D04  19DD               	xorwf	color_predict@color& (0+255),w,b
  2143  001D06  A4D8               	btfss	status,2,c
  2144  001D08  EF88  F00E         	goto	u1621
  2145  001D0C  EF8A  F00E         	goto	u1620
  2146  001D10                     u1621:
  2147  001D10  EF8A  F00E         	goto	l2680
  2148  001D14                     u1620:
  2149  001D14                     l2680:
  2150                           
  2151                           ; BSR set to: 0
  2152                           ;color.c: 161:     if (color == 9){color_name = "Black";}
  2153  001D14  0E09               	movlw	9
  2154  001D16  19DD               	xorwf	color_predict@color& (0+255),w,b
  2155  001D18  A4D8               	btfss	status,2,c
  2156  001D1A  EF91  F00E         	goto	u1631
  2157  001D1E  EF93  F00E         	goto	u1630
  2158  001D22                     u1631:
  2159  001D22  EF93  F00E         	goto	l2684
  2160  001D26                     u1630:
  2161  001D26                     l2684:
  2162                           
  2163                           ; BSR set to: 0
  2164                           ;color.c: 163:     sprintf(buf,"\t%d\r\n", color);
  2165  001D26  0E79               	movlw	low color_predict@buf
  2166  001D28  6F60               	movwf	sprintf@s& (0+255),b
  2167  001D2A  0E00               	movlw	high color_predict@buf
  2168  001D2C  6F61               	movwf	(sprintf@s+1)& (0+255),b
  2169  001D2E  0E0A               	movlw	low (STR_1+9)
  2170  001D30  6F62               	movwf	sprintf@fmt& (0+255),b
  2171  001D32  0E0E               	movlw	high (STR_1+9)
  2172  001D34  6F63               	movwf	(sprintf@fmt+1)& (0+255),b
  2173  001D36  C0DD  F064         	movff	color_predict@color,?_sprintf+4
  2174  001D3A  6B65               	clrf	(?_sprintf+5)& (0+255),b
  2175  001D3C  EC4C  F011         	call	_sprintf	;wreg free
  2176  001D40                     
  2177                           ;color.c: 164:     sendStringSerial4(buf);
  2178  001D40  0E79               	movlw	low color_predict@buf
  2179  001D42  6E02               	movwf	sendStringSerial4@string^0,c
  2180  001D44  0E00               	movlw	high color_predict@buf
  2181  001D46  6E03               	movwf	(sendStringSerial4@string+1)^0,c
  2182  001D48  EC08  F013         	call	_sendStringSerial4	;wreg free
  2183  001D4C  0012               	return		;funcret
  2184  001D4E                     __end_of_color_predict:
  2185                           	callstack 0
  2186                           
  2187 ;; *************** function _color_display *****************
  2188 ;; Defined at:
  2189 ;;		line 133 in file "color.c"
  2190 ;; Parameters:    Size  Location     Type
  2191 ;;  m               2   87[COMRAM] PTR struct color_rgb
  2192 ;;		 -> main@rgb(8), 
  2193 ;; Auto vars:     Size  Location     Type
  2194 ;;  buf           100   25[BANK0 ] unsigned char [100]
  2195 ;; Return value:  Size  Location     Type
  2196 ;;                  1    wreg      void 
  2197 ;; Registers used:
  2198 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2199 ;; Tracked objects:
  2200 ;;		On entry : 0/0
  2201 ;;		On exit  : 0/0
  2202 ;;		Unchanged: 0/0
  2203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2204 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2205 ;;      Locals:         0     100       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2207 ;;      Totals:         2     100       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2208 ;;Total ram usage:      102 bytes
  2209 ;; Hardware stack levels used: 1
  2210 ;; Hardware stack levels required when called: 8
  2211 ;; This function calls:
  2212 ;;		_sendStringSerial4
  2213 ;;		_sprintf
  2214 ;; This function is called by:
  2215 ;;		_main
  2216 ;; This function uses a non-reentrant model
  2217 ;;
  2218                           
  2219                           	psect	text7
  2220  002168                     __ptext7:
  2221                           	callstack 0
  2222  002168                     _color_display:
  2223                           	callstack 22
  2224  002168                     
  2225                           ;color.c: 133: void color_display(struct color_rgb *m);color.c: 134: {;color.c: 135:    
      +                           char buf[100];;color.c: 136:     sprintf(buf,"\t%d\t%d\t%d\t%d\r\n", m->R, m->G, m->B, 
      +                          m->C);
  2226  002168  0E79               	movlw	low color_display@buf
  2227  00216A  0100               	movlb	0	; () banked
  2228  00216C  6F60               	movwf	sprintf@s& (0+255),b
  2229  00216E  0E00               	movlw	high color_display@buf
  2230  002170  6F61               	movwf	(sprintf@s+1)& (0+255),b
  2231  002172  0E01               	movlw	low STR_1
  2232  002174  6F62               	movwf	sprintf@fmt& (0+255),b
  2233  002176  0E0E               	movlw	high STR_1
  2234  002178  6F63               	movwf	(sprintf@fmt+1)& (0+255),b
  2235  00217A  C058  FFD9         	movff	color_display@m,fsr2l
  2236  00217E  C059  FFDA         	movff	color_display@m+1,fsr2h
  2237  002182  CFDE F064          	movff	postinc2,?_sprintf+4
  2238  002186  CFDD F065          	movff	postdec2,?_sprintf+5
  2239  00218A  EE20 F002          	lfsr	2,2
  2240  00218E  5058               	movf	color_display@m^0,w,c
  2241  002190  26D9               	addwf	fsr2l,f,c
  2242  002192  5059               	movf	(color_display@m+1)^0,w,c
  2243  002194  22DA               	addwfc	fsr2h,f,c
  2244  002196  CFDE F066          	movff	postinc2,?_sprintf+6
  2245  00219A  CFDD F067          	movff	postdec2,?_sprintf+7
  2246  00219E  EE20 F004          	lfsr	2,4
  2247  0021A2  5058               	movf	color_display@m^0,w,c
  2248  0021A4  26D9               	addwf	fsr2l,f,c
  2249  0021A6  5059               	movf	(color_display@m+1)^0,w,c
  2250  0021A8  22DA               	addwfc	fsr2h,f,c
  2251  0021AA  CFDE F068          	movff	postinc2,?_sprintf+8
  2252  0021AE  CFDD F069          	movff	postdec2,?_sprintf+9
  2253  0021B2  EE20 F006          	lfsr	2,6
  2254  0021B6  5058               	movf	color_display@m^0,w,c
  2255  0021B8  26D9               	addwf	fsr2l,f,c
  2256  0021BA  5059               	movf	(color_display@m+1)^0,w,c
  2257  0021BC  22DA               	addwfc	fsr2h,f,c
  2258  0021BE  CFDE F06A          	movff	postinc2,?_sprintf+10
  2259  0021C2  CFDD F06B          	movff	postdec2,?_sprintf+11
  2260  0021C6  EC4C  F011         	call	_sprintf	;wreg free
  2261  0021CA                     
  2262                           ;color.c: 137:     sendStringSerial4(buf);
  2263  0021CA  0E79               	movlw	low color_display@buf
  2264  0021CC  6E02               	movwf	sendStringSerial4@string^0,c
  2265  0021CE  0E00               	movlw	high color_display@buf
  2266  0021D0  6E03               	movwf	(sendStringSerial4@string+1)^0,c
  2267  0021D2  EC08  F013         	call	_sendStringSerial4	;wreg free
  2268  0021D6  0012               	return		;funcret
  2269  0021D8                     __end_of_color_display:
  2270                           	callstack 0
  2271                           
  2272 ;; *************** function _color_click_init *****************
  2273 ;; Defined at:
  2274 ;;		line 9 in file "color.c"
  2275 ;; Parameters:    Size  Location     Type
  2276 ;;		None
  2277 ;; Auto vars:     Size  Location     Type
  2278 ;;		None
  2279 ;; Return value:  Size  Location     Type
  2280 ;;                  1    wreg      void 
  2281 ;; Registers used:
  2282 ;;		wreg, status,2, status,0, cstack
  2283 ;; Tracked objects:
  2284 ;;		On entry : 0/0
  2285 ;;		On exit  : 0/0
  2286 ;;		Unchanged: 0/0
  2287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2288 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2289 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2290 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2291 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2292 ;;Total ram usage:        1 bytes
  2293 ;; Hardware stack levels used: 1
  2294 ;; Hardware stack levels required when called: 3
  2295 ;; This function calls:
  2296 ;;		_I2C_2_Master_Init
  2297 ;;		_color_writetoaddr
  2298 ;; This function is called by:
  2299 ;;		_main
  2300 ;; This function uses a non-reentrant model
  2301 ;;
  2302                           
  2303                           	psect	text8
  2304  0025DC                     __ptext8:
  2305                           	callstack 0
  2306  0025DC                     _color_click_init:
  2307                           	callstack 27
  2308  0025DC                     
  2309                           ;color.c: 12:     I2C_2_Master_Init();
  2310  0025DC  EC20  F013         	call	_I2C_2_Master_Init	;wreg free
  2311  0025E0                     
  2312                           ;color.c: 15:   color_writetoaddr(0x00, 0x01);
  2313  0025E0  0E01               	movlw	1
  2314  0025E2  6E03               	movwf	color_writetoaddr@value^0,c
  2315  0025E4  0E00               	movlw	0
  2316  0025E6  EC5C  F013         	call	_color_writetoaddr
  2317  0025EA                     
  2318                           ;color.c: 16:     _delay((unsigned long)((3)*(64000000/4000.0)));
  2319  0025EA  0E3F               	movlw	63
  2320  0025EC  6E05               	movwf	??_color_click_init^0,c
  2321  0025EE  0E55               	movlw	85
  2322  0025F0                     u1927:
  2323  0025F0  2EE8               	decfsz	wreg,f,c
  2324  0025F2  D7FE               	bra	u1927
  2325  0025F4  2E05               	decfsz	??_color_click_init^0,f,c
  2326  0025F6  D7FC               	bra	u1927
  2327  0025F8  F000               	nop	
  2328  0025FA                     
  2329                           ;color.c: 19:  color_writetoaddr(0x00, 0x03);
  2330  0025FA  0E03               	movlw	3
  2331  0025FC  6E03               	movwf	color_writetoaddr@value^0,c
  2332  0025FE  0E00               	movlw	0
  2333  002600  EC5C  F013         	call	_color_writetoaddr
  2334  002604                     
  2335                           ;color.c: 22:  color_writetoaddr(0x01, 0xD5);
  2336  002604  0ED5               	movlw	213
  2337  002606  6E03               	movwf	color_writetoaddr@value^0,c
  2338  002608  0E01               	movlw	1
  2339  00260A  EC5C  F013         	call	_color_writetoaddr
  2340  00260E  0012               	return		;funcret
  2341  002610                     __end_of_color_click_init:
  2342                           	callstack 0
  2343                           
  2344 ;; *************** function _color_writetoaddr *****************
  2345 ;; Defined at:
  2346 ;;		line 25 in file "color.c"
  2347 ;; Parameters:    Size  Location     Type
  2348 ;;  address         1    wreg     unsigned char 
  2349 ;;  value           1    2[COMRAM] unsigned char 
  2350 ;; Auto vars:     Size  Location     Type
  2351 ;;  address         1    3[COMRAM] unsigned char 
  2352 ;; Return value:  Size  Location     Type
  2353 ;;                  1    wreg      void 
  2354 ;; Registers used:
  2355 ;;		wreg, status,2, status,0, cstack
  2356 ;; Tracked objects:
  2357 ;;		On entry : 0/0
  2358 ;;		On exit  : 0/0
  2359 ;;		Unchanged: 0/0
  2360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2361 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2362 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2363 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2364 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2365 ;;Total ram usage:        2 bytes
  2366 ;; Hardware stack levels used: 1
  2367 ;; Hardware stack levels required when called: 2
  2368 ;; This function calls:
  2369 ;;		_I2C_2_Master_Start
  2370 ;;		_I2C_2_Master_Stop
  2371 ;;		_I2C_2_Master_Write
  2372 ;; This function is called by:
  2373 ;;		_color_click_init
  2374 ;; This function uses a non-reentrant model
  2375 ;;
  2376                           
  2377                           	psect	text9
  2378  0026B8                     __ptext9:
  2379                           	callstack 0
  2380  0026B8                     _color_writetoaddr:
  2381                           	callstack 27
  2382                           
  2383                           ;incstack = 0
  2384                           ;color_writetoaddr@address stored from wreg
  2385  0026B8  6E04               	movwf	color_writetoaddr@address^0,c
  2386  0026BA                     
  2387                           ;color.c: 26:     I2C_2_Master_Start();
  2388  0026BA  ECD2  F013         	call	_I2C_2_Master_Start	;wreg free
  2389                           
  2390                           ;color.c: 27:     I2C_2_Master_Write(0x52 | 0x00);
  2391  0026BE  0E52               	movlw	82
  2392  0026C0  ECC7  F013         	call	_I2C_2_Master_Write
  2393                           
  2394                           ;color.c: 28:     I2C_2_Master_Write(0x80 | address);
  2395  0026C4  5004               	movf	color_writetoaddr@address^0,w,c
  2396  0026C6  0980               	iorlw	128
  2397  0026C8  ECC7  F013         	call	_I2C_2_Master_Write
  2398                           
  2399                           ;color.c: 29:     I2C_2_Master_Write(value);
  2400  0026CC  5003               	movf	color_writetoaddr@value^0,w,c
  2401  0026CE  ECC7  F013         	call	_I2C_2_Master_Write
  2402                           
  2403                           ;color.c: 30:     I2C_2_Master_Stop();
  2404  0026D2  ECCD  F013         	call	_I2C_2_Master_Stop	;wreg free
  2405  0026D6  0012               	return		;funcret
  2406  0026D8                     __end_of_color_writetoaddr:
  2407                           	callstack 0
  2408                           
  2409 ;; *************** function _I2C_2_Master_Init *****************
  2410 ;; Defined at:
  2411 ;;		line 4 in file "i2c.c"
  2412 ;; Parameters:    Size  Location     Type
  2413 ;;		None
  2414 ;; Auto vars:     Size  Location     Type
  2415 ;;		None
  2416 ;; Return value:  Size  Location     Type
  2417 ;;                  1    wreg      void 
  2418 ;; Registers used:
  2419 ;;		wreg, status,2
  2420 ;; Tracked objects:
  2421 ;;		On entry : 0/0
  2422 ;;		On exit  : 0/0
  2423 ;;		Unchanged: 0/0
  2424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2425 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2426 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2427 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2428 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2429 ;;Total ram usage:        0 bytes
  2430 ;; Hardware stack levels used: 1
  2431 ;; This function calls:
  2432 ;;		Nothing
  2433 ;; This function is called by:
  2434 ;;		_color_click_init
  2435 ;;		_main
  2436 ;; This function uses a non-reentrant model
  2437 ;;
  2438                           
  2439                           	psect	text10
  2440  002640                     __ptext10:
  2441                           	callstack 0
  2442  002640                     _I2C_2_Master_Init:
  2443                           	callstack 29
  2444  002640                     
  2445                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  2446  002640  010E               	movlb	14	; () banked
  2447  002642  51D9               	movf	217,w,b	;volatile
  2448  002644  0BF0               	andlw	-16
  2449  002646  0908               	iorlw	8
  2450  002648  6FD9               	movwf	217,b	;volatile
  2451  00264A                     
  2452                           ; BSR set to: 14
  2453                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  2454  00264A  8BD9               	bsf	217,5,b	;volatile
  2455                           
  2456                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  2457  00264C  0E9F               	movlw	159
  2458  00264E  6FD6               	movwf	214,b	;volatile
  2459  002650                     
  2460                           ; BSR set to: 14
  2461                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  2462  002650  8A84               	bsf	132,5,c	;volatile
  2463  002652                     
  2464                           ; BSR set to: 14
  2465                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  2466  002652  8C84               	bsf	132,6,c	;volatile
  2467  002654                     
  2468                           ; BSR set to: 14
  2469                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  2470  002654  9BA7               	bcf	167,5,b	;volatile
  2471  002656                     
  2472                           ; BSR set to: 14
  2473                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  2474  002656  9DA7               	bcf	167,6,b	;volatile
  2475                           
  2476                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  2477  002658  0E1D               	movlw	29
  2478  00265A  6F1D               	movwf	29,b	;volatile
  2479                           
  2480                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  2481  00265C  0E1E               	movlw	30
  2482  00265E  6F1C               	movwf	28,b	;volatile
  2483                           
  2484                           ;i2c.c: 18:   RD5PPS=0x1C;
  2485  002660  0E1C               	movlw	28
  2486  002662  6F6F               	movwf	111,b	;volatile
  2487                           
  2488                           ;i2c.c: 19:   RD6PPS=0x1B;
  2489  002664  0E1B               	movlw	27
  2490  002666  6F70               	movwf	112,b	;volatile
  2491  002668                     
  2492                           ; BSR set to: 14
  2493  002668  0012               	return		;funcret
  2494  00266A                     __end_of_I2C_2_Master_Init:
  2495                           	callstack 0
  2496                           
  2497 ;; *************** function _check_color_reading *****************
  2498 ;; Defined at:
  2499 ;;		line 140 in file "color.c"
  2500 ;; Parameters:    Size  Location     Type
  2501 ;;  m               2   87[COMRAM] PTR struct color_rgb
  2502 ;;		 -> main@rgb(8), 
  2503 ;;  w               2   89[COMRAM] PTR struct white_card
  2504 ;;		 -> main@white(18), 
  2505 ;; Auto vars:     Size  Location     Type
  2506 ;;  buf           100   25[BANK0 ] unsigned char [100]
  2507 ;; Return value:  Size  Location     Type
  2508 ;;                  1    wreg      void 
  2509 ;; Registers used:
  2510 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2511 ;; Tracked objects:
  2512 ;;		On entry : 0/0
  2513 ;;		On exit  : 0/0
  2514 ;;		Unchanged: 0/0
  2515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2516 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2517 ;;      Locals:         0     100       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2518 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2519 ;;      Totals:         4     100       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2520 ;;Total ram usage:      104 bytes
  2521 ;; Hardware stack levels used: 1
  2522 ;; Hardware stack levels required when called: 8
  2523 ;; This function calls:
  2524 ;;		___lwdiv
  2525 ;;		___wmul
  2526 ;;		_sendStringSerial4
  2527 ;;		_sprintf
  2528 ;; This function is called by:
  2529 ;;		_main
  2530 ;; This function uses a non-reentrant model
  2531 ;;
  2532                           
  2533                           	psect	text11
  2534  002070                     __ptext11:
  2535                           	callstack 0
  2536  002070                     _check_color_reading:
  2537                           	callstack 22
  2538  002070                     
  2539                           ;color.c: 140: void check_color_reading(struct color_rgb *m, struct white_card *w);color
      +                          .c: 141: {;color.c: 142:     char buf[100];;color.c: 143:     sprintf(buf,"\t%d\t%d\t%d\
      +                          r\n", m->R, w->RR, 100*(m->R)/(w->RR));
  2540  002070  0E79               	movlw	low check_color_reading@buf
  2541  002072  0100               	movlb	0	; () banked
  2542  002074  6F60               	movwf	sprintf@s& (0+255),b
  2543  002076  0E00               	movlw	high check_color_reading@buf
  2544  002078  6F61               	movwf	(sprintf@s+1)& (0+255),b
  2545  00207A  0E04               	movlw	low (STR_1+3)
  2546  00207C  6F62               	movwf	sprintf@fmt& (0+255),b
  2547  00207E  0E0E               	movlw	high (STR_1+3)
  2548  002080  6F63               	movwf	(sprintf@fmt+1)& (0+255),b
  2549  002082  C058  FFD9         	movff	check_color_reading@m,fsr2l
  2550  002086  C059  FFDA         	movff	check_color_reading@m+1,fsr2h
  2551  00208A  CFDE F064          	movff	postinc2,?_sprintf+4
  2552  00208E  CFDD F065          	movff	postdec2,?_sprintf+5
  2553  002092  C05A  FFD9         	movff	check_color_reading@w,fsr2l
  2554  002096  C05B  FFDA         	movff	check_color_reading@w+1,fsr2h
  2555  00209A  CFDE F066          	movff	postinc2,?_sprintf+6
  2556  00209E  CFDD F067          	movff	postdec2,?_sprintf+7
  2557  0020A2  C058  FFD9         	movff	check_color_reading@m,fsr2l
  2558  0020A6  C059  FFDA         	movff	check_color_reading@m+1,fsr2h
  2559  0020AA  CFDE F001          	movff	postinc2,___wmul@multiplier
  2560  0020AE  CFDD F002          	movff	postdec2,___wmul@multiplier+1
  2561  0020B2  0E00               	movlw	0
  2562  0020B4  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  2563  0020B6  0E64               	movlw	100
  2564  0020B8  6E03               	movwf	___wmul@multiplicand^0,c
  2565  0020BA  EC49  F013         	call	___wmul	;wreg free
  2566  0020BE  C001  F007         	movff	?___wmul,___lwdiv@dividend
  2567  0020C2  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  2568  0020C6  C05A  FFD9         	movff	check_color_reading@w,fsr2l
  2569  0020CA  C05B  FFDA         	movff	check_color_reading@w+1,fsr2h
  2570  0020CE  CFDE F009          	movff	postinc2,___lwdiv@divisor
  2571  0020D2  CFDD F00A          	movff	postdec2,___lwdiv@divisor+1
  2572  0020D6  EC7A  F010         	call	___lwdiv	;wreg free
  2573  0020DA  C007  F068         	movff	?___lwdiv,?_sprintf+8
  2574  0020DE  C008  F069         	movff	?___lwdiv+1,?_sprintf+9
  2575  0020E2  EC4C  F011         	call	_sprintf	;wreg free
  2576  0020E6                     
  2577                           ;color.c: 144:     sendStringSerial4(buf);
  2578  0020E6  0E79               	movlw	low check_color_reading@buf
  2579  0020E8  6E02               	movwf	sendStringSerial4@string^0,c
  2580  0020EA  0E00               	movlw	high check_color_reading@buf
  2581  0020EC  6E03               	movwf	(sendStringSerial4@string+1)^0,c
  2582  0020EE  EC08  F013         	call	_sendStringSerial4	;wreg free
  2583  0020F2  0012               	return		;funcret
  2584  0020F4                     __end_of_check_color_reading:
  2585                           	callstack 0
  2586                           
  2587 ;; *************** function _sprintf *****************
  2588 ;; Defined at:
  2589 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\nf_sprintf.c"
  2590 ;; Parameters:    Size  Location     Type
  2591 ;;  s               2    0[BANK0 ] PTR unsigned char 
  2592 ;;		 -> voltage_display@buf(80), color_predict@buf(100), check_color_reading@buf(100), color_display@buf(100), 
  2593 ;;  fmt             2    2[BANK0 ] PTR const unsigned char 
  2594 ;;		 -> STR_14(5), STR_13(6), STR_2(12), STR_1(15), 
  2595 ;; Auto vars:     Size  Location     Type
  2596 ;;  f              11   14[BANK0 ] struct _IO_FILE
  2597 ;;  ap              2   12[BANK0 ] PTR void [1]
  2598 ;;		 -> ?_sprintf(2), 
  2599 ;;  ret             2    0        int 
  2600 ;; Return value:  Size  Location     Type
  2601 ;;                  2    0[BANK0 ] int 
  2602 ;; Registers used:
  2603 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2604 ;; Tracked objects:
  2605 ;;		On entry : 0/0
  2606 ;;		On exit  : 0/0
  2607 ;;		Unchanged: 0/0
  2608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2609 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2610 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2611 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2612 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2613 ;;Total ram usage:       25 bytes
  2614 ;; Hardware stack levels used: 1
  2615 ;; Hardware stack levels required when called: 7
  2616 ;; This function calls:
  2617 ;;		_vfprintf
  2618 ;; This function is called by:
  2619 ;;		_color_display
  2620 ;;		_check_color_reading
  2621 ;;		_color_predict
  2622 ;;		_voltage_display
  2623 ;; This function uses a non-reentrant model
  2624 ;;
  2625                           
  2626                           	psect	text12
  2627  002298                     __ptext12:
  2628                           	callstack 0
  2629  002298                     _sprintf:
  2630                           	callstack 22
  2631  002298  0E64               	movlw	low (?_sprintf+4)
  2632  00229A  0100               	movlb	0	; () banked
  2633  00229C  6F6C               	movwf	sprintf@ap& (0+255),b
  2634  00229E  0E00               	movlw	high (?_sprintf+4)
  2635  0022A0  6F6D               	movwf	(sprintf@ap+1)& (0+255),b
  2636  0022A2  C060  F06E         	movff	sprintf@s,sprintf@f
  2637  0022A6  C061  F06F         	movff	sprintf@s+1,sprintf@f+1
  2638  0022AA                     
  2639                           ; BSR set to: 0
  2640  0022AA  0E00               	movlw	0
  2641  0022AC  6F72               	movwf	(sprintf@f+4)& (0+255),b
  2642  0022AE  0E00               	movlw	0
  2643  0022B0  6F71               	movwf	(sprintf@f+3)& (0+255),b
  2644  0022B2                     
  2645                           ; BSR set to: 0
  2646  0022B2  0E00               	movlw	0
  2647  0022B4  6F78               	movwf	(sprintf@f+10)& (0+255),b
  2648  0022B6  0E00               	movlw	0
  2649  0022B8  6F77               	movwf	(sprintf@f+9)& (0+255),b
  2650  0022BA                     
  2651                           ; BSR set to: 0
  2652  0022BA  0E6E               	movlw	low sprintf@f
  2653  0022BC  6E50               	movwf	vfprintf@fp^0,c
  2654  0022BE  0E00               	movlw	high sprintf@f
  2655  0022C0  6E51               	movwf	(vfprintf@fp+1)^0,c
  2656  0022C2  C062  F052         	movff	sprintf@fmt,vfprintf@fmt
  2657  0022C6  C063  F053         	movff	sprintf@fmt+1,vfprintf@fmt+1
  2658  0022CA  0E6C               	movlw	low sprintf@ap
  2659  0022CC  6E54               	movwf	vfprintf@ap^0,c
  2660  0022CE  0E00               	movlw	high sprintf@ap
  2661  0022D0  6E55               	movwf	(vfprintf@ap+1)^0,c
  2662  0022D2  ECEC  F010         	call	_vfprintf	;wreg free
  2663  0022D6  0100               	movlb	0	; () banked
  2664  0022D8  5171               	movf	(sprintf@f+3)& (0+255),w,b
  2665  0022DA  2560               	addwf	sprintf@s& (0+255),w,b
  2666  0022DC  6ED9               	movwf	fsr2l,c
  2667  0022DE  5172               	movf	(sprintf@f+4)& (0+255),w,b
  2668  0022E0  2161               	addwfc	(sprintf@s+1)& (0+255),w,b
  2669  0022E2  6EDA               	movwf	fsr2h,c
  2670  0022E4  0E00               	movlw	0
  2671  0022E6  6EDF               	movwf	indf2,c
  2672  0022E8                     
  2673                           ; BSR set to: 0
  2674  0022E8  0012               	return		;funcret
  2675  0022EA                     __end_of_sprintf:
  2676                           	callstack 0
  2677                           
  2678 ;; *************** function _vfprintf *****************
  2679 ;; Defined at:
  2680 ;;		line 1390 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c"
  2681 ;; Parameters:    Size  Location     Type
  2682 ;;  fp              2   79[COMRAM] PTR struct _IO_FILE
  2683 ;;		 -> sprintf@f(11), 
  2684 ;;  fmt             2   81[COMRAM] PTR const unsigned char 
  2685 ;;		 -> STR_14(5), STR_13(6), STR_2(12), STR_1(15), 
  2686 ;;  ap              2   83[COMRAM] PTR PTR void 
  2687 ;;		 -> sprintf@ap(2), 
  2688 ;; Auto vars:     Size  Location     Type
  2689 ;;  cfmt            2   85[COMRAM] PTR unsigned char 
  2690 ;;		 -> STR_14(5), STR_13(6), STR_2(12), STR_1(15), 
  2691 ;; Return value:  Size  Location     Type
  2692 ;;                  2   79[COMRAM] int 
  2693 ;; Registers used:
  2694 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2695 ;; Tracked objects:
  2696 ;;		On entry : 0/0
  2697 ;;		On exit  : 0/0
  2698 ;;		Unchanged: 0/0
  2699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2700 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2701 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2702 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2703 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2704 ;;Total ram usage:        8 bytes
  2705 ;; Hardware stack levels used: 1
  2706 ;; Hardware stack levels required when called: 6
  2707 ;; This function calls:
  2708 ;;		_vfpfcnvrt
  2709 ;; This function is called by:
  2710 ;;		_sprintf
  2711 ;; This function uses a non-reentrant model
  2712 ;;
  2713                           
  2714                           	psect	text13
  2715  0021D8                     __ptext13:
  2716                           	callstack 0
  2717  0021D8                     _vfprintf:
  2718                           	callstack 22
  2719  0021D8                     
  2720                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 1390: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.35\pic\source
      +                          s\c99\common\doprnt.c: 1391: {;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\comm
      +                          on\doprnt.c: 1393:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\
      +                          common\doprnt.c: 1395:     cfmt = (char *)fmt;
  2721  0021D8  C052  F056         	movff	vfprintf@fmt,vfprintf@cfmt
  2722  0021DC  C053  F057         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  2723  0021E0                     
  2724                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 1396:     nout = 
      +                          0;
  2725  0021E0  0E00               	movlw	0
  2726  0021E2  0100               	movlb	0	; () banked
  2727  0021E4  6FF3               	movwf	(_nout+1)& (0+255),b
  2728  0021E6  0E00               	movlw	0
  2729  0021E8  6FF2               	movwf	_nout& (0+255),b
  2730                           
  2731                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 1397:     while (
      +                          *cfmt) {
  2732  0021EA  EF0A  F011         	goto	l2518
  2733  0021EE                     l2516:
  2734                           
  2735                           ; BSR set to: 0
  2736                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 1398:         nou
      +                          t += vfpfcnvrt(fp, &cfmt, ap);
  2737  0021EE  C050  F040         	movff	vfprintf@fp,vfpfcnvrt@fp
  2738  0021F2  C051  F041         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  2739  0021F6  0E56               	movlw	low vfprintf@cfmt
  2740  0021F8  6E42               	movwf	vfpfcnvrt@fmt^0,c
  2741  0021FA  0E00               	movlw	high vfprintf@cfmt
  2742  0021FC  6E43               	movwf	(vfpfcnvrt@fmt+1)^0,c
  2743  0021FE  C054  F044         	movff	vfprintf@ap,vfpfcnvrt@ap
  2744  002202  C055  F045         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  2745  002206  EC41  F00B         	call	_vfpfcnvrt	;wreg free
  2746  00220A  5040               	movf	?_vfpfcnvrt^0,w,c
  2747  00220C  0100               	movlb	0	; () banked
  2748  00220E  27F2               	addwf	_nout& (0+255),f,b
  2749  002210  5041               	movf	(?_vfpfcnvrt+1)^0,w,c
  2750  002212  23F3               	addwfc	(_nout+1)& (0+255),f,b
  2751  002214                     l2518:
  2752                           
  2753                           ; BSR set to: 0
  2754                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 1397:     while (
      +                          *cfmt) {
  2755  002214  C056  FFF6         	movff	vfprintf@cfmt,tblptrl
  2756  002218  C057  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  2757  00221C                     	if	0	;tblptru may be non-zero
  2758  00221C                     	endif
  2759  00221C                     	if	0	;tblptru may be non-zero
  2760  00221C                     	endif
  2761  00221C  0008               	tblrd		*
  2762  00221E  50F5               	movf	tablat,w,c
  2763  002220  0900               	iorlw	0
  2764  002222  A4D8               	btfss	status,2,c
  2765  002224  EF16  F011         	goto	u1451
  2766  002228  EF18  F011         	goto	u1450
  2767  00222C                     u1451:
  2768  00222C  EFF7  F010         	goto	l2516
  2769  002230                     u1450:
  2770  002230                     
  2771                           ; BSR set to: 0
  2772                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 1400:     return 
      +                          nout;
  2773  002230  C0F2  F050         	movff	_nout,?_vfprintf
  2774  002234  C0F3  F051         	movff	_nout+1,?_vfprintf+1
  2775  002238                     
  2776                           ; BSR set to: 0
  2777  002238  0012               	return		;funcret
  2778  00223A                     __end_of_vfprintf:
  2779                           	callstack 0
  2780                           
  2781 ;; *************** function _vfpfcnvrt *****************
  2782 ;; Defined at:
  2783 ;;		line 692 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c"
  2784 ;; Parameters:    Size  Location     Type
  2785 ;;  fp              2   63[COMRAM] PTR struct _IO_FILE
  2786 ;;		 -> sprintf@f(11), 
  2787 ;;  fmt             2   65[COMRAM] PTR PTR unsigned char 
  2788 ;;		 -> vfprintf@cfmt(2), 
  2789 ;;  ap              2   67[COMRAM] PTR PTR void 
  2790 ;;		 -> sprintf@ap(2), 
  2791 ;; Auto vars:     Size  Location     Type
  2792 ;;  ll              8   71[COMRAM] long long 
  2793 ;;  llu             8    0        unsigned long long 
  2794 ;;  f               4    0        unsigned long long 
  2795 ;;  vp              3    0        PTR void 
  2796 ;;  ct              3    0        unsigned char [3]
  2797 ;;  cp              3    0        PTR unsigned char 
  2798 ;;  i               2    0        int 
  2799 ;;  done            2    0        int 
  2800 ;;  c               1    0        unsigned char 
  2801 ;; Return value:  Size  Location     Type
  2802 ;;                  2   63[COMRAM] int 
  2803 ;; Registers used:
  2804 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2805 ;; Tracked objects:
  2806 ;;		On entry : 0/0
  2807 ;;		On exit  : 0/0
  2808 ;;		Unchanged: 0/0
  2809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2810 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2811 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2812 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2813 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2814 ;;Total ram usage:       16 bytes
  2815 ;; Hardware stack levels used: 1
  2816 ;; Hardware stack levels required when called: 5
  2817 ;; This function calls:
  2818 ;;		_dtoa
  2819 ;;		_fputc
  2820 ;; This function is called by:
  2821 ;;		_vfprintf
  2822 ;; This function uses a non-reentrant model
  2823 ;;
  2824                           
  2825                           	psect	text14
  2826  001682                     __ptext14:
  2827                           	callstack 0
  2828  001682                     _vfpfcnvrt:
  2829                           	callstack 22
  2830  001682                     
  2831                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 692: static int v
      +                          fpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.35\pic\sou
      +                          rces\c99\common\doprnt.c: 693: {;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\co
      +                          mmon\doprnt.c: 694:     char c, *cp, ct[3];;C:\Program Files\Microchip\xc8\v2.35\pic\sou
      +                          rces\c99\common\doprnt.c: 695:     int done, i;;C:\Program Files\Microchip\xc8\v2.35\pic
      +                          \sources\c99\common\doprnt.c: 696:     long long ll;;C:\Program Files\Microchip\xc8\v2.3
      +                          5\pic\sources\c99\common\doprnt.c: 697:     unsigned long long llu;
  2832  001682  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2833  001686  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2834  00168A  CFDE FFF6          	movff	postinc2,tblptrl
  2835  00168E  CFDD FFF7          	movff	postdec2,tblptrh
  2836  001692                     	if	0	;tblptru may be non-zero
  2837  001692                     	endif
  2838  001692                     	if	0	;tblptru may be non-zero
  2839  001692                     	endif
  2840  001692  0008               	tblrd		*
  2841  001694  50F5               	movf	tablat,w,c
  2842  001696  0A25               	xorlw	37
  2843  001698  A4D8               	btfss	status,2,c
  2844  00169A  EF51  F00B         	goto	u1391
  2845  00169E  EF53  F00B         	goto	u1390
  2846  0016A2                     u1391:
  2847  0016A2  EFFF  F00B         	goto	l2466
  2848  0016A6                     u1390:
  2849  0016A6                     
  2850                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 703:         ++*f
      +                          mt;
  2851  0016A6  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2852  0016AA  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2853  0016AE  2ADE               	incf	postinc2,f,c
  2854  0016B0  0E00               	movlw	0
  2855  0016B2  22DD               	addwfc	postdec2,f,c
  2856  0016B4                     
  2857                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 705:         flag
      +                          s = width = 0;
  2858  0016B4  0E00               	movlw	0
  2859  0016B6  0100               	movlb	0	; () banked
  2860  0016B8  6FF5               	movwf	(_width+1)& (0+255),b
  2861  0016BA  0E00               	movlw	0
  2862  0016BC  6FF4               	movwf	_width& (0+255),b
  2863  0016BE  C0F4  F0F8         	movff	_width,_flags
  2864  0016C2  C0F5  F0F9         	movff	_width+1,_flags+1
  2865  0016C6                     
  2866                           ; BSR set to: 0
  2867                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 706:         prec
      +                           = -1;
  2868  0016C6  69F6               	setf	_prec& (0+255),b
  2869  0016C8  69F7               	setf	(_prec+1)& (0+255),b
  2870  0016CA                     
  2871                           ; BSR set to: 0
  2872                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 847:         if (
      +                          (*fmt[0] == 'd') || (*fmt[0] == 'i')) {
  2873  0016CA  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2874  0016CE  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2875  0016D2  CFDE FFF6          	movff	postinc2,tblptrl
  2876  0016D6  CFDD FFF7          	movff	postdec2,tblptrh
  2877  0016DA                     	if	0	;tblptru may be non-zero
  2878  0016DA                     	endif
  2879  0016DA                     	if	0	;tblptru may be non-zero
  2880  0016DA                     	endif
  2881  0016DA  0008               	tblrd		*
  2882  0016DC  50F5               	movf	tablat,w,c
  2883  0016DE  0A64               	xorlw	100
  2884  0016E0  B4D8               	btfsc	status,2,c
  2885  0016E2  EF75  F00B         	goto	u1401
  2886  0016E6  EF77  F00B         	goto	u1400
  2887  0016EA                     u1401:
  2888  0016EA  EF89  F00B         	goto	l2444
  2889  0016EE                     u1400:
  2890  0016EE                     
  2891                           ; BSR set to: 0
  2892  0016EE  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2893  0016F2  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2894  0016F6  CFDE FFF6          	movff	postinc2,tblptrl
  2895  0016FA  CFDD FFF7          	movff	postdec2,tblptrh
  2896  0016FE                     	if	0	;tblptru may be non-zero
  2897  0016FE                     	endif
  2898  0016FE                     	if	0	;tblptru may be non-zero
  2899  0016FE                     	endif
  2900  0016FE  0008               	tblrd		*
  2901  001700  50F5               	movf	tablat,w,c
  2902  001702  0A69               	xorlw	105
  2903  001704  A4D8               	btfss	status,2,c
  2904  001706  EF87  F00B         	goto	u1411
  2905  00170A  EF89  F00B         	goto	u1410
  2906  00170E                     u1411:
  2907  00170E  EFC9  F00B         	goto	l2450
  2908  001712                     u1410:
  2909  001712                     l2444:
  2910                           
  2911                           ; BSR set to: 0
  2912                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 849:             
      +                          ++*fmt;
  2913  001712  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2914  001716  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2915  00171A  2ADE               	incf	postinc2,f,c
  2916  00171C  0E00               	movlw	0
  2917  00171E  22DD               	addwfc	postdec2,f,c
  2918                           
  2919                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 850:             
      +                          ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
  2920  001720  C044  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  2921  001724  C045  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  2922  001728  CFDF F046          	movff	indf2,??_vfpfcnvrt
  2923  00172C  0E02               	movlw	2
  2924  00172E  26DE               	addwf	postinc2,f,c
  2925  001730  CFDF F047          	movff	indf2,??_vfpfcnvrt+1
  2926  001734  0E00               	movlw	0
  2927  001736  22DD               	addwfc	postdec2,f,c
  2928  001738  C046  FFD9         	movff	??_vfpfcnvrt,fsr2l
  2929  00173C  C047  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  2930  001740  CFDE F048          	movff	postinc2,vfpfcnvrt@ll
  2931  001744  CFDD F049          	movff	postdec2,vfpfcnvrt@ll+1
  2932  001748  0E00               	movlw	0
  2933  00174A  BE49               	btfsc	(vfpfcnvrt@ll+1)^0,7,c
  2934  00174C  0EFF               	movlw	-1
  2935  00174E  6E4A               	movwf	(vfpfcnvrt@ll+2)^0,c
  2936  001750  6E4B               	movwf	(vfpfcnvrt@ll+3)^0,c
  2937  001752  6E4C               	movwf	(vfpfcnvrt@ll+4)^0,c
  2938  001754  6E4D               	movwf	(vfpfcnvrt@ll+5)^0,c
  2939  001756  6E4E               	movwf	(vfpfcnvrt@ll+6)^0,c
  2940  001758  6E4F               	movwf	(vfpfcnvrt@ll+7)^0,c
  2941  00175A                     
  2942                           ; BSR set to: 0
  2943                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 852:             
      +                          return dtoa(fp, ll);
  2944  00175A  C040  F01C         	movff	vfpfcnvrt@fp,dtoa@fp
  2945  00175E  C041  F01D         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  2946  001762  C048  F01E         	movff	vfpfcnvrt@ll,dtoa@d
  2947  001766  C049  F01F         	movff	vfpfcnvrt@ll+1,dtoa@d+1
  2948  00176A  C04A  F020         	movff	vfpfcnvrt@ll+2,dtoa@d+2
  2949  00176E  C04B  F021         	movff	vfpfcnvrt@ll+3,dtoa@d+3
  2950  001772  C04C  F022         	movff	vfpfcnvrt@ll+4,dtoa@d+4
  2951  001776  C04D  F023         	movff	vfpfcnvrt@ll+5,dtoa@d+5
  2952  00177A  C04E  F024         	movff	vfpfcnvrt@ll+6,dtoa@d+6
  2953  00177E  C04F  F025         	movff	vfpfcnvrt@ll+7,dtoa@d+7
  2954  001782  ECCF  F009         	call	_dtoa	;wreg free
  2955  001786  C01C  F040         	movff	?_dtoa,?_vfpfcnvrt
  2956  00178A  C01D  F041         	movff	?_dtoa+1,?_vfpfcnvrt+1
  2957  00178E  EF1A  F00C         	goto	l1237
  2958  001792                     l2450:
  2959                           
  2960                           ; BSR set to: 0
  2961                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 1372:         if 
      +                          ((*fmt)[0] == '%') {
  2962  001792  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2963  001796  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2964  00179A  CFDE FFF6          	movff	postinc2,tblptrl
  2965  00179E  CFDD FFF7          	movff	postdec2,tblptrh
  2966  0017A2                     	if	0	;tblptru may be non-zero
  2967  0017A2                     	endif
  2968  0017A2                     	if	0	;tblptru may be non-zero
  2969  0017A2                     	endif
  2970  0017A2  0008               	tblrd		*
  2971  0017A4  50F5               	movf	tablat,w,c
  2972  0017A6  0A25               	xorlw	37
  2973  0017A8  A4D8               	btfss	status,2,c
  2974  0017AA  EFD9  F00B         	goto	u1421
  2975  0017AE  EFDB  F00B         	goto	u1420
  2976  0017B2                     u1421:
  2977  0017B2  EFF2  F00B         	goto	l2460
  2978  0017B6                     u1420:
  2979  0017B6                     
  2980                           ; BSR set to: 0
  2981                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 1373:            
      +                           ++*fmt;
  2982  0017B6  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2983  0017BA  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2984  0017BE  2ADE               	incf	postinc2,f,c
  2985  0017C0  0E00               	movlw	0
  2986  0017C2  22DD               	addwfc	postdec2,f,c
  2987  0017C4                     
  2988                           ; BSR set to: 0
  2989                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 1374:            
      +                           fputc((int)'%', fp);
  2990  0017C4  0E00               	movlw	0
  2991  0017C6  6E02               	movwf	(fputc@c+1)^0,c
  2992  0017C8  0E25               	movlw	37
  2993  0017CA  6E01               	movwf	fputc@c^0,c
  2994  0017CC  C040  F003         	movff	vfpfcnvrt@fp,fputc@fp
  2995  0017D0  C041  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  2996  0017D4  EC10  F00F         	call	_fputc	;wreg free
  2997  0017D8                     l2456:
  2998                           
  2999                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 1375:            
      +                           return 1;
  3000  0017D8  0E00               	movlw	0
  3001  0017DA  6E41               	movwf	(?_vfpfcnvrt+1)^0,c
  3002  0017DC  0E01               	movlw	1
  3003  0017DE  6E40               	movwf	?_vfpfcnvrt^0,c
  3004  0017E0  EF1A  F00C         	goto	l1237
  3005  0017E4                     l2460:
  3006                           
  3007                           ; BSR set to: 0
  3008                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 1379:         ++*
      +                          fmt;
  3009  0017E4  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3010  0017E8  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3011  0017EC  2ADE               	incf	postinc2,f,c
  3012  0017EE  0E00               	movlw	0
  3013  0017F0  22DD               	addwfc	postdec2,f,c
  3014  0017F2                     
  3015                           ; BSR set to: 0
  3016                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 1380:         ret
      +                          urn 0;
  3017  0017F2  0E00               	movlw	0
  3018  0017F4  6E41               	movwf	(?_vfpfcnvrt+1)^0,c
  3019  0017F6  0E00               	movlw	0
  3020  0017F8  6E40               	movwf	?_vfpfcnvrt^0,c
  3021  0017FA  EF1A  F00C         	goto	l1237
  3022  0017FE                     l2466:
  3023                           
  3024                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 1384:     fputc((
      +                          int)(*fmt)[0], fp);
  3025  0017FE  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3026  001802  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3027  001806  CFDE FFF6          	movff	postinc2,tblptrl
  3028  00180A  CFDD FFF7          	movff	postdec2,tblptrh
  3029  00180E                     	if	0	;tblptru may be non-zero
  3030  00180E                     	endif
  3031  00180E                     	if	0	;tblptru may be non-zero
  3032  00180E                     	endif
  3033  00180E  0008               	tblrd		*
  3034  001810  50F5               	movf	tablat,w,c
  3035  001812  6E01               	movwf	fputc@c^0,c
  3036  001814  6A02               	clrf	(fputc@c+1)^0,c
  3037  001816  C040  F003         	movff	vfpfcnvrt@fp,fputc@fp
  3038  00181A  C041  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  3039  00181E  EC10  F00F         	call	_fputc	;wreg free
  3040  001822                     
  3041                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 1385:     ++*fmt;
  3042  001822  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3043  001826  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3044  00182A  2ADE               	incf	postinc2,f,c
  3045  00182C  0E00               	movlw	0
  3046  00182E  22DD               	addwfc	postdec2,f,c
  3047  001830  EFEC  F00B         	goto	l2456
  3048  001834                     l1237:
  3049  001834  0012               	return		;funcret
  3050  001836                     __end_of_vfpfcnvrt:
  3051                           	callstack 0
  3052                           
  3053 ;; *************** function _dtoa *****************
  3054 ;; Defined at:
  3055 ;;		line 287 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c"
  3056 ;; Parameters:    Size  Location     Type
  3057 ;;  fp              2   27[COMRAM] PTR struct _IO_FILE
  3058 ;;		 -> sprintf@f(11), 
  3059 ;;  d               8   29[COMRAM] long long 
  3060 ;; Auto vars:     Size  Location     Type
  3061 ;;  n               8   53[COMRAM] long long 
  3062 ;;  i               2   61[COMRAM] int 
  3063 ;;  s               2   51[COMRAM] int 
  3064 ;;  w               2   49[COMRAM] int 
  3065 ;;  p               2   47[COMRAM] int 
  3066 ;; Return value:  Size  Location     Type
  3067 ;;                  2   27[COMRAM] int 
  3068 ;; Registers used:
  3069 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3070 ;; Tracked objects:
  3071 ;;		On entry : 0/0
  3072 ;;		On exit  : 0/0
  3073 ;;		Unchanged: 0/0
  3074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3075 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3076 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3077 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3078 ;;      Totals:        36       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3079 ;;Total ram usage:       36 bytes
  3080 ;; Hardware stack levels used: 1
  3081 ;; Hardware stack levels required when called: 4
  3082 ;; This function calls:
  3083 ;;		___aodiv
  3084 ;;		___aomod
  3085 ;;		_abs
  3086 ;;		_pad
  3087 ;; This function is called by:
  3088 ;;		_vfpfcnvrt
  3089 ;; This function uses a non-reentrant model
  3090 ;;
  3091                           
  3092                           	psect	text15
  3093  00139E                     __ptext15:
  3094                           	callstack 0
  3095  00139E                     _dtoa:
  3096                           	callstack 22
  3097  00139E                     
  3098                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 287: static int d
      +                          toa(FILE *fp, long long d);C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\d
      +                          oprnt.c: 288: {;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 28
      +                          9:     int i, p, s, w;;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprn
      +                          t.c: 290:     long long n;;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\d
      +                          oprnt.c: 293:     n = d;
  3099  00139E  C01E  F036         	movff	dtoa@d,dtoa@n
  3100  0013A2  C01F  F037         	movff	dtoa@d+1,dtoa@n+1
  3101  0013A6  C020  F038         	movff	dtoa@d+2,dtoa@n+2
  3102  0013AA  C021  F039         	movff	dtoa@d+3,dtoa@n+3
  3103  0013AE  C022  F03A         	movff	dtoa@d+4,dtoa@n+4
  3104  0013B2  C023  F03B         	movff	dtoa@d+5,dtoa@n+5
  3105  0013B6  C024  F03C         	movff	dtoa@d+6,dtoa@n+6
  3106  0013BA  C025  F03D         	movff	dtoa@d+7,dtoa@n+7
  3107  0013BE                     
  3108                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 294:     s = n < 
      +                          0 ? 1 : 0;
  3109  0013BE  BE3D               	btfsc	(dtoa@n+7)^0,7,c
  3110  0013C0  EFE4  F009         	goto	u1221
  3111  0013C4  EFE7  F009         	goto	u1220
  3112  0013C8                     u1221:
  3113  0013C8  0E01               	movlw	1
  3114  0013CA  EFE8  F009         	goto	u1230
  3115  0013CE                     u1220:
  3116  0013CE  0E00               	movlw	0
  3117  0013D0                     u1230:
  3118  0013D0  6E34               	movwf	dtoa@s^0,c
  3119  0013D2  6A35               	clrf	(dtoa@s+1)^0,c
  3120                           
  3121                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 295:     if (s) {
  3122  0013D4  5034               	movf	dtoa@s^0,w,c
  3123  0013D6  1035               	iorwf	(dtoa@s+1)^0,w,c
  3124  0013D8  B4D8               	btfsc	status,2,c
  3125  0013DA  EFF1  F009         	goto	u1241
  3126  0013DE  EFF3  F009         	goto	u1240
  3127  0013E2                     u1241:
  3128  0013E2  EF03  F00A         	goto	l2346
  3129  0013E6                     u1240:
  3130  0013E6                     
  3131                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 296:         n = 
      +                          -n;
  3132  0013E6  1E3D               	comf	(dtoa@n+7)^0,f,c
  3133  0013E8  1E3C               	comf	(dtoa@n+6)^0,f,c
  3134  0013EA  1E3B               	comf	(dtoa@n+5)^0,f,c
  3135  0013EC  1E3A               	comf	(dtoa@n+4)^0,f,c
  3136  0013EE  1E39               	comf	(dtoa@n+3)^0,f,c
  3137  0013F0  1E38               	comf	(dtoa@n+2)^0,f,c
  3138  0013F2  1E37               	comf	(dtoa@n+1)^0,f,c
  3139  0013F4  6C36               	negf	dtoa@n^0,c
  3140  0013F6  0E00               	movlw	0
  3141  0013F8  2237               	addwfc	(dtoa@n+1)^0,f,c
  3142  0013FA  2238               	addwfc	(dtoa@n+2)^0,f,c
  3143  0013FC  2239               	addwfc	(dtoa@n+3)^0,f,c
  3144  0013FE  223A               	addwfc	(dtoa@n+4)^0,f,c
  3145  001400  223B               	addwfc	(dtoa@n+5)^0,f,c
  3146  001402  223C               	addwfc	(dtoa@n+6)^0,f,c
  3147  001404  223D               	addwfc	(dtoa@n+7)^0,f,c
  3148  001406                     l2346:
  3149                           
  3150                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 300:     if (!(pr
      +                          ec < 0)) {
  3151  001406  0100               	movlb	0	; () banked
  3152  001408  BFF7               	btfsc	(_prec+1)& (0+255),7,b
  3153  00140A  EF09  F00A         	goto	u1251
  3154  00140E  EF0B  F00A         	goto	u1250
  3155  001412                     u1251:
  3156  001412  EF0C  F00A         	goto	l2350
  3157  001416                     u1250:
  3158  001416                     
  3159                           ; BSR set to: 0
  3160                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 301:         flag
      +                          s &= ~(1 << 1);
  3161  001416  93F8               	bcf	_flags& (0+255),1,b
  3162  001418                     l2350:
  3163                           
  3164                           ; BSR set to: 0
  3165                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 303:     p = (0 <
      +                           prec) ? prec : 1;
  3166  001418  BFF7               	btfsc	(_prec+1)& (0+255),7,b
  3167  00141A  EF19  F00A         	goto	u1260
  3168  00141E  51F7               	movf	(_prec+1)& (0+255),w,b
  3169  001420  E106               	bnz	u1261
  3170  001422  05F6               	decf	_prec& (0+255),w,b
  3171  001424  B0D8               	btfsc	status,0,c
  3172  001426  EF17  F00A         	goto	u1261
  3173  00142A  EF19  F00A         	goto	u1260
  3174  00142E                     u1261:
  3175  00142E  EF1F  F00A         	goto	l1210
  3176  001432                     u1260:
  3177  001432                     
  3178                           ; BSR set to: 0
  3179  001432  0E00               	movlw	0
  3180  001434  6E31               	movwf	(dtoa@p+1)^0,c
  3181  001436  0E01               	movlw	1
  3182  001438  6E30               	movwf	dtoa@p^0,c
  3183  00143A  EF23  F00A         	goto	l1212
  3184  00143E                     l1210:
  3185                           
  3186                           ; BSR set to: 0
  3187  00143E  C0F6  F030         	movff	_prec,dtoa@p
  3188  001442  C0F7  F031         	movff	_prec+1,dtoa@p+1
  3189  001446                     l1212:
  3190                           
  3191                           ; BSR set to: 0
  3192                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 304:     w = widt
      +                          h;
  3193  001446  C0F4  F032         	movff	_width,dtoa@w
  3194  00144A  C0F5  F033         	movff	_width+1,dtoa@w+1
  3195  00144E                     
  3196                           ; BSR set to: 0
  3197                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 305:     if (s ||
      +                           (flags & (1 << 2))) {
  3198  00144E  5034               	movf	dtoa@s^0,w,c
  3199  001450  1035               	iorwf	(dtoa@s+1)^0,w,c
  3200  001452  A4D8               	btfss	status,2,c
  3201  001454  EF2E  F00A         	goto	u1271
  3202  001458  EF30  F00A         	goto	u1270
  3203  00145C                     u1271:
  3204  00145C  EF37  F00A         	goto	l2358
  3205  001460                     u1270:
  3206  001460                     
  3207                           ; BSR set to: 0
  3208  001460  A5F8               	btfss	_flags& (0+255),2,b
  3209  001462  EF35  F00A         	goto	u1281
  3210  001466  EF37  F00A         	goto	u1280
  3211  00146A                     u1281:
  3212  00146A  EF3A  F00A         	goto	l2360
  3213  00146E                     u1280:
  3214  00146E                     l2358:
  3215                           
  3216                           ; BSR set to: 0
  3217                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 306:         --w;
  3218  00146E  0632               	decf	dtoa@w^0,f,c
  3219  001470  A0D8               	btfss	status,0,c
  3220  001472  0633               	decf	(dtoa@w+1)^0,f,c
  3221  001474                     l2360:
  3222                           
  3223                           ; BSR set to: 0
  3224                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 310:     i = size
      +                          of(dbuf) - 1;
  3225  001474  0E00               	movlw	0
  3226  001476  6E3F               	movwf	(dtoa@i+1)^0,c
  3227  001478  0E1F               	movlw	31
  3228  00147A  6E3E               	movwf	dtoa@i^0,c
  3229  00147C                     
  3230                           ; BSR set to: 0
  3231                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 311:     dbuf[i] 
      +                          = '\0';
  3232  00147C  0E00               	movlw	0
  3233  00147E  0101               	movlb	1	; () banked
  3234  001480  6F5B               	movwf	(_dbuf+31)& (0+255),b
  3235                           
  3236                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 312:     while (!
      +                          (i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  3237  001482  EFBF  F00A         	goto	l2374
  3238  001486                     l2364:
  3239                           
  3240                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 313:         --i;
  3241  001486  063E               	decf	dtoa@i^0,f,c
  3242  001488  A0D8               	btfss	status,0,c
  3243  00148A  063F               	decf	(dtoa@i+1)^0,f,c
  3244  00148C                     
  3245                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 314:         dbuf
      +                          [i] = (char)((int)'0' + abs(n % 10));
  3246  00148C  0E3C               	movlw	low _dbuf
  3247  00148E  243E               	addwf	dtoa@i^0,w,c
  3248  001490  6ED9               	movwf	fsr2l,c
  3249  001492  0E01               	movlw	high _dbuf
  3250  001494  203F               	addwfc	(dtoa@i+1)^0,w,c
  3251  001496  6EDA               	movwf	fsr2h,c
  3252  001498  C036  F001         	movff	dtoa@n,___aomod@dividend
  3253  00149C  C037  F002         	movff	dtoa@n+1,___aomod@dividend+1
  3254  0014A0  C038  F003         	movff	dtoa@n+2,___aomod@dividend+2
  3255  0014A4  C039  F004         	movff	dtoa@n+3,___aomod@dividend+3
  3256  0014A8  C03A  F005         	movff	dtoa@n+4,___aomod@dividend+4
  3257  0014AC  C03B  F006         	movff	dtoa@n+5,___aomod@dividend+5
  3258  0014B0  C03C  F007         	movff	dtoa@n+6,___aomod@dividend+6
  3259  0014B4  C03D  F008         	movff	dtoa@n+7,___aomod@dividend+7
  3260  0014B8  0E0A               	movlw	10
  3261  0014BA  6E09               	movwf	___aomod@divisor^0,c
  3262  0014BC  0E00               	movlw	0
  3263  0014BE  6E0A               	movwf	(___aomod@divisor+1)^0,c
  3264  0014C0  0E00               	movlw	0
  3265  0014C2  6E0B               	movwf	(___aomod@divisor+2)^0,c
  3266  0014C4  0E00               	movlw	0
  3267  0014C6  6E0C               	movwf	(___aomod@divisor+3)^0,c
  3268  0014C8  0E00               	movlw	0
  3269  0014CA  6E0D               	movwf	(___aomod@divisor+4)^0,c
  3270  0014CC  0E00               	movlw	0
  3271  0014CE  6E0E               	movwf	(___aomod@divisor+5)^0,c
  3272  0014D0  0E00               	movlw	0
  3273  0014D2  6E0F               	movwf	(___aomod@divisor+6)^0,c
  3274  0014D4  0E00               	movlw	0
  3275  0014D6  6E10               	movwf	(___aomod@divisor+7)^0,c
  3276  0014D8  ECDF  F00C         	call	___aomod	;wreg free
  3277  0014DC  C001  F026         	movff	?___aomod,??_dtoa
  3278  0014E0  C002  F027         	movff	?___aomod+1,??_dtoa+1
  3279  0014E4  C003  F028         	movff	?___aomod+2,??_dtoa+2
  3280  0014E8  C004  F029         	movff	?___aomod+3,??_dtoa+3
  3281  0014EC  C005  F02A         	movff	?___aomod+4,??_dtoa+4
  3282  0014F0  C006  F02B         	movff	?___aomod+5,??_dtoa+5
  3283  0014F4  C007  F02C         	movff	?___aomod+6,??_dtoa+6
  3284  0014F8  C008  F02D         	movff	?___aomod+7,??_dtoa+7
  3285  0014FC  C026  F013         	movff	??_dtoa,abs@a
  3286  001500  C028  F014         	movff	??_dtoa+2,abs@a+1
  3287  001504  EC79  F012         	call	_abs	;wreg free
  3288  001508  5013               	movf	?_abs^0,w,c
  3289  00150A  0F30               	addlw	48
  3290  00150C  6EDF               	movwf	indf2,c
  3291  00150E                     
  3292                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 315:         --p;
  3293  00150E  0630               	decf	dtoa@p^0,f,c
  3294  001510  A0D8               	btfss	status,0,c
  3295  001512  0631               	decf	(dtoa@p+1)^0,f,c
  3296  001514                     
  3297                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 316:         --w;
  3298  001514  0632               	decf	dtoa@w^0,f,c
  3299  001516  A0D8               	btfss	status,0,c
  3300  001518  0633               	decf	(dtoa@w+1)^0,f,c
  3301  00151A                     
  3302                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 317:         n = 
      +                          n / 10;
  3303  00151A  C036  F001         	movff	dtoa@n,___aodiv@dividend
  3304  00151E  C037  F002         	movff	dtoa@n+1,___aodiv@dividend+1
  3305  001522  C038  F003         	movff	dtoa@n+2,___aodiv@dividend+2
  3306  001526  C039  F004         	movff	dtoa@n+3,___aodiv@dividend+3
  3307  00152A  C03A  F005         	movff	dtoa@n+4,___aodiv@dividend+4
  3308  00152E  C03B  F006         	movff	dtoa@n+5,___aodiv@dividend+5
  3309  001532  C03C  F007         	movff	dtoa@n+6,___aodiv@dividend+6
  3310  001536  C03D  F008         	movff	dtoa@n+7,___aodiv@dividend+7
  3311  00153A  0E0A               	movlw	10
  3312  00153C  6E09               	movwf	___aodiv@divisor^0,c
  3313  00153E  0E00               	movlw	0
  3314  001540  6E0A               	movwf	(___aodiv@divisor+1)^0,c
  3315  001542  0E00               	movlw	0
  3316  001544  6E0B               	movwf	(___aodiv@divisor+2)^0,c
  3317  001546  0E00               	movlw	0
  3318  001548  6E0C               	movwf	(___aodiv@divisor+3)^0,c
  3319  00154A  0E00               	movlw	0
  3320  00154C  6E0D               	movwf	(___aodiv@divisor+4)^0,c
  3321  00154E  0E00               	movlw	0
  3322  001550  6E0E               	movwf	(___aodiv@divisor+5)^0,c
  3323  001552  0E00               	movlw	0
  3324  001554  6E0F               	movwf	(___aodiv@divisor+6)^0,c
  3325  001556  0E00               	movlw	0
  3326  001558  6E10               	movwf	(___aodiv@divisor+7)^0,c
  3327  00155A  EC1B  F00C         	call	___aodiv	;wreg free
  3328  00155E  C001  F036         	movff	?___aodiv,dtoa@n
  3329  001562  C002  F037         	movff	?___aodiv+1,dtoa@n+1
  3330  001566  C003  F038         	movff	?___aodiv+2,dtoa@n+2
  3331  00156A  C004  F039         	movff	?___aodiv+3,dtoa@n+3
  3332  00156E  C005  F03A         	movff	?___aodiv+4,dtoa@n+4
  3333  001572  C006  F03B         	movff	?___aodiv+5,dtoa@n+5
  3334  001576  C007  F03C         	movff	?___aodiv+6,dtoa@n+6
  3335  00157A  C008  F03D         	movff	?___aodiv+7,dtoa@n+7
  3336  00157E                     l2374:
  3337                           
  3338                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 312:     while (!
      +                          (i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  3339  00157E  BE3F               	btfsc	(dtoa@i+1)^0,7,c
  3340  001580  EFCA  F00A         	goto	u1291
  3341  001584  503F               	movf	(dtoa@i+1)^0,w,c
  3342  001586  E108               	bnz	u1290
  3343  001588  043E               	decf	dtoa@i^0,w,c
  3344  00158A  A0D8               	btfss	status,0,c
  3345  00158C  EFCA  F00A         	goto	u1291
  3346  001590  EFCC  F00A         	goto	u1290
  3347  001594                     u1291:
  3348  001594  EFFD  F00A         	goto	l2384
  3349  001598                     u1290:
  3350  001598  5036               	movf	dtoa@n^0,w,c
  3351  00159A  1037               	iorwf	(dtoa@n+1)^0,w,c
  3352  00159C  1038               	iorwf	(dtoa@n+2)^0,w,c
  3353  00159E  1039               	iorwf	(dtoa@n+3)^0,w,c
  3354  0015A0  103A               	iorwf	(dtoa@n+4)^0,w,c
  3355  0015A2  103B               	iorwf	(dtoa@n+5)^0,w,c
  3356  0015A4  103C               	iorwf	(dtoa@n+6)^0,w,c
  3357  0015A6  103D               	iorwf	(dtoa@n+7)^0,w,c
  3358  0015A8  A4D8               	btfss	status,2,c
  3359  0015AA  EFD9  F00A         	goto	u1301
  3360  0015AE  EFDB  F00A         	goto	u1300
  3361  0015B2                     u1301:
  3362  0015B2  EF43  F00A         	goto	l2364
  3363  0015B6                     u1300:
  3364  0015B6  BE31               	btfsc	(dtoa@p+1)^0,7,c
  3365  0015B8  EFE8  F00A         	goto	u1310
  3366  0015BC  5031               	movf	(dtoa@p+1)^0,w,c
  3367  0015BE  E106               	bnz	u1311
  3368  0015C0  0430               	decf	dtoa@p^0,w,c
  3369  0015C2  B0D8               	btfsc	status,0,c
  3370  0015C4  EFE6  F00A         	goto	u1311
  3371  0015C8  EFE8  F00A         	goto	u1310
  3372  0015CC                     u1311:
  3373  0015CC  EF43  F00A         	goto	l2364
  3374  0015D0                     u1310:
  3375  0015D0  BE33               	btfsc	(dtoa@w+1)^0,7,c
  3376  0015D2  EFF3  F00A         	goto	u1321
  3377  0015D6  5033               	movf	(dtoa@w+1)^0,w,c
  3378  0015D8  E108               	bnz	u1320
  3379  0015DA  0432               	decf	dtoa@w^0,w,c
  3380  0015DC  A0D8               	btfss	status,0,c
  3381  0015DE  EFF3  F00A         	goto	u1321
  3382  0015E2  EFF5  F00A         	goto	u1320
  3383  0015E6                     u1321:
  3384  0015E6  EFFD  F00A         	goto	l2384
  3385  0015EA                     u1320:
  3386  0015EA  0100               	movlb	0	; () banked
  3387  0015EC  B3F8               	btfsc	_flags& (0+255),1,b
  3388  0015EE  EFFB  F00A         	goto	u1331
  3389  0015F2  EFFD  F00A         	goto	u1330
  3390  0015F6                     u1331:
  3391  0015F6  EF43  F00A         	goto	l2364
  3392  0015FA                     u1330:
  3393  0015FA                     l2384:
  3394                           
  3395                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 321:     if (s ||
      +                           (flags & (1 << 2))) {
  3396  0015FA  5034               	movf	dtoa@s^0,w,c
  3397  0015FC  1035               	iorwf	(dtoa@s+1)^0,w,c
  3398  0015FE  A4D8               	btfss	status,2,c
  3399  001600  EF04  F00B         	goto	u1341
  3400  001604  EF06  F00B         	goto	u1340
  3401  001608                     u1341:
  3402  001608  EF0E  F00B         	goto	l2388
  3403  00160C                     u1340:
  3404  00160C  0100               	movlb	0	; () banked
  3405  00160E  A5F8               	btfss	_flags& (0+255),2,b
  3406  001610  EF0C  F00B         	goto	u1351
  3407  001614  EF0E  F00B         	goto	u1350
  3408  001618                     u1351:
  3409  001618  EF2C  F00B         	goto	l2398
  3410  00161C                     u1350:
  3411  00161C                     l2388:
  3412                           
  3413                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 322:         --i;
  3414  00161C  063E               	decf	dtoa@i^0,f,c
  3415  00161E  A0D8               	btfss	status,0,c
  3416  001620  063F               	decf	(dtoa@i+1)^0,f,c
  3417  001622                     
  3418                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 323:         dbuf
      +                          [i] = s ? '-' : '+';
  3419  001622  5034               	movf	dtoa@s^0,w,c
  3420  001624  1035               	iorwf	(dtoa@s+1)^0,w,c
  3421  001626  A4D8               	btfss	status,2,c
  3422  001628  EF18  F00B         	goto	u1361
  3423  00162C  EF1A  F00B         	goto	u1360
  3424  001630                     u1361:
  3425  001630  EF20  F00B         	goto	l2394
  3426  001634                     u1360:
  3427  001634  0E00               	movlw	0
  3428  001636  6E2F               	movwf	(_dtoa$2238+1)^0,c
  3429  001638  0E2B               	movlw	43
  3430  00163A  6E2E               	movwf	_dtoa$2238^0,c
  3431  00163C  EF24  F00B         	goto	l2396
  3432  001640                     l2394:
  3433  001640  0E00               	movlw	0
  3434  001642  6E2F               	movwf	(_dtoa$2238+1)^0,c
  3435  001644  0E2D               	movlw	45
  3436  001646  6E2E               	movwf	_dtoa$2238^0,c
  3437  001648                     l2396:
  3438  001648  0E3C               	movlw	low _dbuf
  3439  00164A  243E               	addwf	dtoa@i^0,w,c
  3440  00164C  6ED9               	movwf	fsr2l,c
  3441  00164E  0E01               	movlw	high _dbuf
  3442  001650  203F               	addwfc	(dtoa@i+1)^0,w,c
  3443  001652  6EDA               	movwf	fsr2h,c
  3444  001654  C02E  FFDF         	movff	_dtoa$2238,indf2
  3445  001658                     l2398:
  3446                           
  3447                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 327:     return p
      +                          ad(fp, &dbuf[i], w);
  3448  001658  C01C  F011         	movff	dtoa@fp,pad@fp
  3449  00165C  C01D  F012         	movff	dtoa@fp+1,pad@fp+1
  3450  001660  0E3C               	movlw	low _dbuf
  3451  001662  243E               	addwf	dtoa@i^0,w,c
  3452  001664  6E13               	movwf	pad@buf^0,c
  3453  001666  0E01               	movlw	high _dbuf
  3454  001668  203F               	addwfc	(dtoa@i+1)^0,w,c
  3455  00166A  6E14               	movwf	(pad@buf+1)^0,c
  3456  00166C  C032  F015         	movff	dtoa@w,pad@p
  3457  001670  C033  F016         	movff	dtoa@w+1,pad@p+1
  3458  001674  EC75  F00F         	call	_pad	;wreg free
  3459  001678  C011  F01C         	movff	?_pad,?_dtoa
  3460  00167C  C012  F01D         	movff	?_pad+1,?_dtoa+1
  3461  001680  0012               	return		;funcret
  3462  001682                     __end_of_dtoa:
  3463                           	callstack 0
  3464                           
  3465 ;; *************** function _pad *****************
  3466 ;; Defined at:
  3467 ;;		line 72 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c"
  3468 ;; Parameters:    Size  Location     Type
  3469 ;;  fp              2   16[COMRAM] PTR struct _IO_FILE
  3470 ;;		 -> sprintf@f(11), 
  3471 ;;  buf             2   18[COMRAM] PTR unsigned char 
  3472 ;;		 -> dbuf(32), 
  3473 ;;  p               2   20[COMRAM] int 
  3474 ;; Auto vars:     Size  Location     Type
  3475 ;;  w               2   25[COMRAM] int 
  3476 ;;  i               2   23[COMRAM] int 
  3477 ;; Return value:  Size  Location     Type
  3478 ;;                  2   16[COMRAM] int 
  3479 ;; Registers used:
  3480 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3481 ;; Tracked objects:
  3482 ;;		On entry : 0/0
  3483 ;;		On exit  : 0/0
  3484 ;;		Unchanged: 0/0
  3485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3486 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3487 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3488 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3489 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3490 ;;Total ram usage:       11 bytes
  3491 ;; Hardware stack levels used: 1
  3492 ;; Hardware stack levels required when called: 3
  3493 ;; This function calls:
  3494 ;;		_fputc
  3495 ;;		_fputs
  3496 ;;		_strlen
  3497 ;; This function is called by:
  3498 ;;		_dtoa
  3499 ;; This function uses a non-reentrant model
  3500 ;;
  3501                           
  3502                           	psect	text16
  3503  001EEA                     __ptext16:
  3504                           	callstack 0
  3505  001EEA                     _pad:
  3506                           	callstack 22
  3507  001EEA                     
  3508                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 72: static int pa
      +                          d(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\commo
      +                          n\doprnt.c: 73: {;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 
      +                          74:     int i, w;;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 
      +                          77:     if (flags & (1 << 0)) {
  3509  001EEA  0100               	movlb	0	; () banked
  3510  001EEC  A1F8               	btfss	_flags& (0+255),0,b
  3511  001EEE  EF7B  F00F         	goto	u1151
  3512  001EF2  EF7D  F00F         	goto	u1150
  3513  001EF6                     u1151:
  3514  001EF6  EF87  F00F         	goto	l2314
  3515  001EFA                     u1150:
  3516  001EFA                     
  3517                           ; BSR set to: 0
  3518                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 78:         fputs
      +                          ((const char *)buf, fp);
  3519  001EFA  C013  F00A         	movff	pad@buf,fputs@s
  3520  001EFE  C014  F00B         	movff	pad@buf+1,fputs@s+1
  3521  001F02  C011  F00C         	movff	pad@fp,fputs@fp
  3522  001F06  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  3523  001F0A  EC15  F012         	call	_fputs	;wreg free
  3524  001F0E                     l2314:
  3525                           
  3526                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 82:     w = (p < 
      +                          0) ? 0 : p;
  3527  001F0E  BE16               	btfsc	(pad@p+1)^0,7,c
  3528  001F10  EF8C  F00F         	goto	u1161
  3529  001F14  EF8E  F00F         	goto	u1160
  3530  001F18                     u1161:
  3531  001F18  EF94  F00F         	goto	l2318
  3532  001F1C                     u1160:
  3533  001F1C  C015  F01A         	movff	pad@p,pad@w
  3534  001F20  C016  F01B         	movff	pad@p+1,pad@w+1
  3535  001F24  EF98  F00F         	goto	l1199
  3536  001F28                     l2318:
  3537  001F28  0E00               	movlw	0
  3538  001F2A  6E1B               	movwf	(pad@w+1)^0,c
  3539  001F2C  0E00               	movlw	0
  3540  001F2E  6E1A               	movwf	pad@w^0,c
  3541  001F30                     l1199:
  3542                           
  3543                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 83:     i = 0;
  3544  001F30  0E00               	movlw	0
  3545  001F32  6E19               	movwf	(pad@i+1)^0,c
  3546  001F34  0E00               	movlw	0
  3547  001F36  6E18               	movwf	pad@i^0,c
  3548                           
  3549                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 84:     while (i 
      +                          < w) {
  3550  001F38  EFAA  F00F         	goto	l2324
  3551  001F3C                     l2320:
  3552                           
  3553                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 85:         fputc
      +                          (' ', fp);
  3554  001F3C  0E00               	movlw	0
  3555  001F3E  6E02               	movwf	(fputc@c+1)^0,c
  3556  001F40  0E20               	movlw	32
  3557  001F42  6E01               	movwf	fputc@c^0,c
  3558  001F44  C011  F003         	movff	pad@fp,fputc@fp
  3559  001F48  C012  F004         	movff	pad@fp+1,fputc@fp+1
  3560  001F4C  EC10  F00F         	call	_fputc	;wreg free
  3561  001F50                     
  3562                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 86:         ++i;
  3563  001F50  4A18               	infsnz	pad@i^0,f,c
  3564  001F52  2A19               	incf	(pad@i+1)^0,f,c
  3565  001F54                     l2324:
  3566                           
  3567                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 84:     while (i 
      +                          < w) {
  3568  001F54  501A               	movf	pad@w^0,w,c
  3569  001F56  5C18               	subwf	pad@i^0,w,c
  3570  001F58  5019               	movf	(pad@i+1)^0,w,c
  3571  001F5A  0A80               	xorlw	128
  3572  001F5C  6E17               	movwf	??_pad^0,c
  3573  001F5E  501B               	movf	(pad@w+1)^0,w,c
  3574  001F60  0A80               	xorlw	128
  3575  001F62  5817               	subwfb	??_pad^0,w,c
  3576  001F64  A0D8               	btfss	status,0,c
  3577  001F66  EFB7  F00F         	goto	u1171
  3578  001F6A  EFB9  F00F         	goto	u1170
  3579  001F6E                     u1171:
  3580  001F6E  EF9E  F00F         	goto	l2320
  3581  001F72                     u1170:
  3582  001F72                     
  3583                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 90:     if (!(fla
      +                          gs & (1 << 0))) {
  3584  001F72  0100               	movlb	0	; () banked
  3585  001F74  B1F8               	btfsc	_flags& (0+255),0,b
  3586  001F76  EFBF  F00F         	goto	u1181
  3587  001F7A  EFC1  F00F         	goto	u1180
  3588  001F7E                     u1181:
  3589  001F7E  EFCB  F00F         	goto	l2328
  3590  001F82                     u1180:
  3591  001F82                     
  3592                           ; BSR set to: 0
  3593                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 91:         fputs
      +                          ((const char *)buf, fp);
  3594  001F82  C013  F00A         	movff	pad@buf,fputs@s
  3595  001F86  C014  F00B         	movff	pad@buf+1,fputs@s+1
  3596  001F8A  C011  F00C         	movff	pad@fp,fputs@fp
  3597  001F8E  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  3598  001F92  EC15  F012         	call	_fputs	;wreg free
  3599  001F96                     l2328:
  3600                           
  3601                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 94:     return (i
      +                          nt)(strlen(buf) + (size_t)w);
  3602  001F96  C013  F001         	movff	pad@buf,strlen@s
  3603  001F9A  C014  F002         	movff	pad@buf+1,strlen@s+1
  3604  001F9E  ECD3  F012         	call	_strlen	;wreg free
  3605  001FA2  501A               	movf	pad@w^0,w,c
  3606  001FA4  2401               	addwf	?_strlen^0,w,c
  3607  001FA6  6E11               	movwf	?_pad^0,c
  3608  001FA8  501B               	movf	(pad@w+1)^0,w,c
  3609  001FAA  2002               	addwfc	(?_strlen+1)^0,w,c
  3610  001FAC  6E12               	movwf	(?_pad+1)^0,c
  3611  001FAE  0012               	return		;funcret
  3612  001FB0                     __end_of_pad:
  3613                           	callstack 0
  3614                           
  3615 ;; *************** function _strlen *****************
  3616 ;; Defined at:
  3617 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\strlen.c"
  3618 ;; Parameters:    Size  Location     Type
  3619 ;;  s               2    0[COMRAM] PTR const unsigned char 
  3620 ;;		 -> dbuf(32), 
  3621 ;; Auto vars:     Size  Location     Type
  3622 ;;  a               2    2[COMRAM] PTR const unsigned char 
  3623 ;;		 -> dbuf(32), 
  3624 ;; Return value:  Size  Location     Type
  3625 ;;                  2    0[COMRAM] unsigned int 
  3626 ;; Registers used:
  3627 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3628 ;; Tracked objects:
  3629 ;;		On entry : 0/0
  3630 ;;		On exit  : 0/0
  3631 ;;		Unchanged: 0/0
  3632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3633 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3634 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3635 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3636 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3637 ;;Total ram usage:        4 bytes
  3638 ;; Hardware stack levels used: 1
  3639 ;; This function calls:
  3640 ;;		Nothing
  3641 ;; This function is called by:
  3642 ;;		_pad
  3643 ;; This function uses a non-reentrant model
  3644 ;;
  3645                           
  3646                           	psect	text17
  3647  0025A6                     __ptext17:
  3648                           	callstack 0
  3649  0025A6                     _strlen:
  3650                           	callstack 24
  3651  0025A6  C001  F003         	movff	strlen@s,strlen@a
  3652  0025AA  C002  F004         	movff	strlen@s+1,strlen@a+1
  3653  0025AE  EFDB  F012         	goto	l2224
  3654  0025B2                     l2222:
  3655  0025B2  4A01               	infsnz	strlen@s^0,f,c
  3656  0025B4  2A02               	incf	(strlen@s+1)^0,f,c
  3657  0025B6                     l2224:
  3658  0025B6  C001  FFD9         	movff	strlen@s,fsr2l
  3659  0025BA  C002  FFDA         	movff	strlen@s+1,fsr2h
  3660  0025BE  50DF               	movf	indf2,w,c
  3661  0025C0  A4D8               	btfss	status,2,c
  3662  0025C2  EFE5  F012         	goto	u1011
  3663  0025C6  EFE7  F012         	goto	u1010
  3664  0025CA                     u1011:
  3665  0025CA  EFD9  F012         	goto	l2222
  3666  0025CE                     u1010:
  3667  0025CE  5003               	movf	strlen@a^0,w,c
  3668  0025D0  5C01               	subwf	strlen@s^0,w,c
  3669  0025D2  6E01               	movwf	?_strlen^0,c
  3670  0025D4  5004               	movf	(strlen@a+1)^0,w,c
  3671  0025D6  5802               	subwfb	(strlen@s+1)^0,w,c
  3672  0025D8  6E02               	movwf	(?_strlen+1)^0,c
  3673  0025DA  0012               	return		;funcret
  3674  0025DC                     __end_of_strlen:
  3675                           	callstack 0
  3676                           
  3677 ;; *************** function _fputs *****************
  3678 ;; Defined at:
  3679 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\nf_fputs.c"
  3680 ;; Parameters:    Size  Location     Type
  3681 ;;  s               2    9[COMRAM] PTR const unsigned char 
  3682 ;;		 -> dbuf(32), 
  3683 ;;  fp              2   11[COMRAM] PTR struct _IO_FILE
  3684 ;;		 -> sprintf@f(11), 
  3685 ;; Auto vars:     Size  Location     Type
  3686 ;;  i               2   14[COMRAM] int 
  3687 ;;  c               1   13[COMRAM] unsigned char 
  3688 ;; Return value:  Size  Location     Type
  3689 ;;                  2    9[COMRAM] int 
  3690 ;; Registers used:
  3691 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3692 ;; Tracked objects:
  3693 ;;		On entry : 0/0
  3694 ;;		On exit  : 0/0
  3695 ;;		Unchanged: 0/0
  3696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3697 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3698 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3699 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3700 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3701 ;;Total ram usage:        7 bytes
  3702 ;; Hardware stack levels used: 1
  3703 ;; Hardware stack levels required when called: 2
  3704 ;; This function calls:
  3705 ;;		_fputc
  3706 ;; This function is called by:
  3707 ;;		_pad
  3708 ;; This function uses a non-reentrant model
  3709 ;;
  3710                           
  3711                           	psect	text18
  3712  00242A                     __ptext18:
  3713                           	callstack 0
  3714  00242A                     _fputs:
  3715                           	callstack 22
  3716  00242A  0E00               	movlw	0
  3717  00242C  6E10               	movwf	(fputs@i+1)^0,c
  3718  00242E  0E00               	movlw	0
  3719  002430  6E0F               	movwf	fputs@i^0,c
  3720  002432  EF26  F012         	goto	l2218
  3721  002436                     l2214:
  3722  002436  C00E  F001         	movff	fputs@c,fputc@c
  3723  00243A  6A02               	clrf	(fputc@c+1)^0,c
  3724  00243C  C00C  F003         	movff	fputs@fp,fputc@fp
  3725  002440  C00D  F004         	movff	fputs@fp+1,fputc@fp+1
  3726  002444  EC10  F00F         	call	_fputc	;wreg free
  3727  002448  4A0F               	infsnz	fputs@i^0,f,c
  3728  00244A  2A10               	incf	(fputs@i+1)^0,f,c
  3729  00244C                     l2218:
  3730  00244C  500F               	movf	fputs@i^0,w,c
  3731  00244E  240A               	addwf	fputs@s^0,w,c
  3732  002450  6ED9               	movwf	fsr2l,c
  3733  002452  5010               	movf	(fputs@i+1)^0,w,c
  3734  002454  200B               	addwfc	(fputs@s+1)^0,w,c
  3735  002456  6EDA               	movwf	fsr2h,c
  3736  002458  50DF               	movf	indf2,w,c
  3737  00245A  6E0E               	movwf	fputs@c^0,c
  3738  00245C  500E               	movf	fputs@c^0,w,c
  3739  00245E  A4D8               	btfss	status,2,c
  3740  002460  EF34  F012         	goto	u1001
  3741  002464  EF36  F012         	goto	u1000
  3742  002468                     u1001:
  3743  002468  EF1B  F012         	goto	l2214
  3744  00246C                     u1000:
  3745  00246C  0012               	return		;funcret
  3746  00246E                     __end_of_fputs:
  3747                           	callstack 0
  3748                           
  3749 ;; *************** function _fputc *****************
  3750 ;; Defined at:
  3751 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\nf_fputc.c"
  3752 ;; Parameters:    Size  Location     Type
  3753 ;;  c               2    0[COMRAM] int 
  3754 ;;  fp              2    2[COMRAM] PTR struct _IO_FILE
  3755 ;;		 -> sprintf@f(11), 
  3756 ;; Auto vars:     Size  Location     Type
  3757 ;;		None
  3758 ;; Return value:  Size  Location     Type
  3759 ;;                  2    0[COMRAM] int 
  3760 ;; Registers used:
  3761 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3762 ;; Tracked objects:
  3763 ;;		On entry : 0/0
  3764 ;;		On exit  : 0/0
  3765 ;;		Unchanged: 0/0
  3766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3767 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3768 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3769 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3770 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3771 ;;Total ram usage:        9 bytes
  3772 ;; Hardware stack levels used: 1
  3773 ;; Hardware stack levels required when called: 1
  3774 ;; This function calls:
  3775 ;;		_putch
  3776 ;; This function is called by:
  3777 ;;		_pad
  3778 ;;		_vfpfcnvrt
  3779 ;;		_fputs
  3780 ;; This function uses a non-reentrant model
  3781 ;;
  3782                           
  3783                           	psect	text19
  3784  001E20                     __ptext19:
  3785                           	callstack 0
  3786  001E20                     _fputc:
  3787                           	callstack 25
  3788  001E20  5003               	movf	fputc@fp^0,w,c
  3789  001E22  1004               	iorwf	(fputc@fp+1)^0,w,c
  3790  001E24  B4D8               	btfsc	status,2,c
  3791  001E26  EF17  F00F         	goto	u961
  3792  001E2A  EF19  F00F         	goto	u960
  3793  001E2E                     u961:
  3794  001E2E  EF22  F00F         	goto	l2202
  3795  001E32                     u960:
  3796  001E32  5003               	movf	fputc@fp^0,w,c
  3797  001E34  1004               	iorwf	(fputc@fp+1)^0,w,c
  3798  001E36  A4D8               	btfss	status,2,c
  3799  001E38  EF20  F00F         	goto	u971
  3800  001E3C  EF22  F00F         	goto	u970
  3801  001E40                     u971:
  3802  001E40  EF27  F00F         	goto	l2204
  3803  001E44                     u970:
  3804  001E44                     l2202:
  3805  001E44  5001               	movf	fputc@c^0,w,c
  3806  001E46  ECDC  F013         	call	_putch
  3807  001E4A  EF74  F00F         	goto	l1263
  3808  001E4E                     l2204:
  3809  001E4E  EE20 F009          	lfsr	2,9
  3810  001E52  5003               	movf	fputc@fp^0,w,c
  3811  001E54  26D9               	addwf	fsr2l,f,c
  3812  001E56  5004               	movf	(fputc@fp+1)^0,w,c
  3813  001E58  22DA               	addwfc	fsr2h,f,c
  3814  001E5A  50DE               	movf	postinc2,w,c
  3815  001E5C  10DE               	iorwf	postinc2,w,c
  3816  001E5E  B4D8               	btfsc	status,2,c
  3817  001E60  EF34  F00F         	goto	u981
  3818  001E64  EF36  F00F         	goto	u980
  3819  001E68                     u981:
  3820  001E68  EF51  F00F         	goto	l2208
  3821  001E6C                     u980:
  3822  001E6C  EE20 F009          	lfsr	2,9
  3823  001E70  5003               	movf	fputc@fp^0,w,c
  3824  001E72  26D9               	addwf	fsr2l,f,c
  3825  001E74  5004               	movf	(fputc@fp+1)^0,w,c
  3826  001E76  22DA               	addwfc	fsr2h,f,c
  3827  001E78  EE10 F003          	lfsr	1,3
  3828  001E7C  5003               	movf	fputc@fp^0,w,c
  3829  001E7E  26E1               	addwf	fsr1l,f,c
  3830  001E80  5004               	movf	(fputc@fp+1)^0,w,c
  3831  001E82  22E2               	addwfc	fsr1h,f,c
  3832  001E84  50DE               	movf	postinc2,w,c
  3833  001E86  5CE6               	subwf	postinc1,w,c
  3834  001E88  50E6               	movf	postinc1,w,c
  3835  001E8A  0A80               	xorlw	128
  3836  001E8C  6E09               	movwf	(??_fputc+4)^0,c
  3837  001E8E  50DE               	movf	postinc2,w,c
  3838  001E90  0A80               	xorlw	128
  3839  001E92  5809               	subwfb	(??_fputc+4)^0,w,c
  3840  001E94  B0D8               	btfsc	status,0,c
  3841  001E96  EF4F  F00F         	goto	u991
  3842  001E9A  EF51  F00F         	goto	u990
  3843  001E9E                     u991:
  3844  001E9E  EF74  F00F         	goto	l1263
  3845  001EA2                     u990:
  3846  001EA2                     l2208:
  3847  001EA2  EE20 F003          	lfsr	2,3
  3848  001EA6  5003               	movf	fputc@fp^0,w,c
  3849  001EA8  26D9               	addwf	fsr2l,f,c
  3850  001EAA  5004               	movf	(fputc@fp+1)^0,w,c
  3851  001EAC  22DA               	addwfc	fsr2h,f,c
  3852  001EAE  CFDE F005          	movff	postinc2,??_fputc
  3853  001EB2  CFDD F006          	movff	postdec2,??_fputc+1
  3854  001EB6  C003  FFD9         	movff	fputc@fp,fsr2l
  3855  001EBA  C004  FFDA         	movff	fputc@fp+1,fsr2h
  3856  001EBE  CFDE F007          	movff	postinc2,??_fputc+2
  3857  001EC2  CFDD F008          	movff	postdec2,??_fputc+3
  3858  001EC6  5005               	movf	??_fputc^0,w,c
  3859  001EC8  2407               	addwf	(??_fputc+2)^0,w,c
  3860  001ECA  6ED9               	movwf	fsr2l,c
  3861  001ECC  5006               	movf	(??_fputc+1)^0,w,c
  3862  001ECE  2008               	addwfc	(??_fputc+3)^0,w,c
  3863  001ED0  6EDA               	movwf	fsr2h,c
  3864  001ED2  C001  FFDF         	movff	fputc@c,indf2
  3865  001ED6  EE20 F003          	lfsr	2,3
  3866  001EDA  5003               	movf	fputc@fp^0,w,c
  3867  001EDC  26D9               	addwf	fsr2l,f,c
  3868  001EDE  5004               	movf	(fputc@fp+1)^0,w,c
  3869  001EE0  22DA               	addwfc	fsr2h,f,c
  3870  001EE2  2ADE               	incf	postinc2,f,c
  3871  001EE4  0E00               	movlw	0
  3872  001EE6  22DD               	addwfc	postdec2,f,c
  3873  001EE8                     l1263:
  3874  001EE8  0012               	return		;funcret
  3875  001EEA                     __end_of_fputc:
  3876                           	callstack 0
  3877                           
  3878 ;; *************** function _putch *****************
  3879 ;; Defined at:
  3880 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\putch.c"
  3881 ;; Parameters:    Size  Location     Type
  3882 ;;  c               1    wreg     unsigned char 
  3883 ;; Auto vars:     Size  Location     Type
  3884 ;;  c               1    0[COMRAM] unsigned char 
  3885 ;; Return value:  Size  Location     Type
  3886 ;;                  1    wreg      void 
  3887 ;; Registers used:
  3888 ;;		wreg
  3889 ;; Tracked objects:
  3890 ;;		On entry : 0/0
  3891 ;;		On exit  : 0/0
  3892 ;;		Unchanged: 0/0
  3893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3895 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3896 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3897 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3898 ;;Total ram usage:        0 bytes
  3899 ;; Hardware stack levels used: 1
  3900 ;; This function calls:
  3901 ;;		Nothing
  3902 ;; This function is called by:
  3903 ;;		_fputc
  3904 ;; This function uses a non-reentrant model
  3905 ;;
  3906                           
  3907                           	psect	text20
  3908  0027B8                     __ptext20:
  3909                           	callstack 0
  3910  0027B8                     _putch:
  3911                           	callstack 25
  3912  0027B8  0012               	return		;funcret
  3913  0027BA                     __end_of_putch:
  3914                           	callstack 0
  3915                           
  3916 ;; *************** function _abs *****************
  3917 ;; Defined at:
  3918 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\abs.c"
  3919 ;; Parameters:    Size  Location     Type
  3920 ;;  a               2   18[COMRAM] int 
  3921 ;; Auto vars:     Size  Location     Type
  3922 ;;		None
  3923 ;; Return value:  Size  Location     Type
  3924 ;;                  2   18[COMRAM] int 
  3925 ;; Registers used:
  3926 ;;		wreg, status,2, status,0
  3927 ;; Tracked objects:
  3928 ;;		On entry : 0/0
  3929 ;;		On exit  : 0/0
  3930 ;;		Unchanged: 0/0
  3931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3932 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3933 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3934 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3935 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3936 ;;Total ram usage:        4 bytes
  3937 ;; Hardware stack levels used: 1
  3938 ;; This function calls:
  3939 ;;		Nothing
  3940 ;; This function is called by:
  3941 ;;		_dtoa
  3942 ;; This function uses a non-reentrant model
  3943 ;;
  3944                           
  3945                           	psect	text21
  3946  0024F2                     __ptext21:
  3947                           	callstack 0
  3948  0024F2                     _abs:
  3949                           	callstack 25
  3950  0024F2  BE14               	btfsc	(abs@a+1)^0,7,c
  3951  0024F4  EF86  F012         	goto	u1190
  3952  0024F8  5014               	movf	(abs@a+1)^0,w,c
  3953  0024FA  E106               	bnz	u1191
  3954  0024FC  0413               	decf	abs@a^0,w,c
  3955  0024FE  B0D8               	btfsc	status,0,c
  3956  002500  EF84  F012         	goto	u1191
  3957  002504  EF86  F012         	goto	u1190
  3958  002508                     u1191:
  3959  002508  EF94  F012         	goto	l1248
  3960  00250C                     u1190:
  3961  00250C  C013  F015         	movff	abs@a,??_abs
  3962  002510  C014  F016         	movff	abs@a+1,??_abs+1
  3963  002514  1E15               	comf	??_abs^0,f,c
  3964  002516  1E16               	comf	(??_abs+1)^0,f,c
  3965  002518  4A15               	infsnz	??_abs^0,f,c
  3966  00251A  2A16               	incf	(??_abs+1)^0,f,c
  3967  00251C  C015  F013         	movff	??_abs,?_abs
  3968  002520  C016  F014         	movff	??_abs+1,?_abs+1
  3969  002524  EF98  F012         	goto	l1251
  3970  002528                     l1248:
  3971  002528  C013  F013         	movff	abs@a,?_abs
  3972  00252C  C014  F014         	movff	abs@a+1,?_abs+1
  3973  002530                     l1251:
  3974  002530  0012               	return		;funcret
  3975  002532                     __end_of_abs:
  3976                           	callstack 0
  3977                           
  3978 ;; *************** function ___aomod *****************
  3979 ;; Defined at:
  3980 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\aomod.c"
  3981 ;; Parameters:    Size  Location     Type
  3982 ;;  dividend        8    0[COMRAM] long long 
  3983 ;;  divisor         8    8[COMRAM] long long 
  3984 ;; Auto vars:     Size  Location     Type
  3985 ;;  sign            1   17[COMRAM] unsigned char 
  3986 ;;  counter         1   16[COMRAM] unsigned char 
  3987 ;; Return value:  Size  Location     Type
  3988 ;;                  8    0[COMRAM] long long 
  3989 ;; Registers used:
  3990 ;;		wreg, status,2, status,0
  3991 ;; Tracked objects:
  3992 ;;		On entry : 0/0
  3993 ;;		On exit  : 0/0
  3994 ;;		Unchanged: 0/0
  3995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3996 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3997 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3998 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3999 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4000 ;;Total ram usage:       18 bytes
  4001 ;; Hardware stack levels used: 1
  4002 ;; This function calls:
  4003 ;;		Nothing
  4004 ;; This function is called by:
  4005 ;;		_dtoa
  4006 ;; This function uses a non-reentrant model
  4007 ;;
  4008                           
  4009                           	psect	text22
  4010  0019BE                     __ptext22:
  4011                           	callstack 0
  4012  0019BE                     ___aomod:
  4013                           	callstack 25
  4014  0019BE  0E00               	movlw	0
  4015  0019C0  6E12               	movwf	___aomod@sign^0,c
  4016  0019C2  BE08               	btfsc	(___aomod@dividend+7)^0,7,c
  4017  0019C4  EFE8  F00C         	goto	u1090
  4018  0019C8  EFE6  F00C         	goto	u1091
  4019  0019CC                     u1091:
  4020  0019CC  EFFA  F00C         	goto	l2282
  4021  0019D0                     u1090:
  4022  0019D0  1E08               	comf	(___aomod@dividend+7)^0,f,c
  4023  0019D2  1E07               	comf	(___aomod@dividend+6)^0,f,c
  4024  0019D4  1E06               	comf	(___aomod@dividend+5)^0,f,c
  4025  0019D6  1E05               	comf	(___aomod@dividend+4)^0,f,c
  4026  0019D8  1E04               	comf	(___aomod@dividend+3)^0,f,c
  4027  0019DA  1E03               	comf	(___aomod@dividend+2)^0,f,c
  4028  0019DC  1E02               	comf	(___aomod@dividend+1)^0,f,c
  4029  0019DE  6C01               	negf	___aomod@dividend^0,c
  4030  0019E0  0E00               	movlw	0
  4031  0019E2  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  4032  0019E4  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  4033  0019E6  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  4034  0019E8  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  4035  0019EA  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  4036  0019EC  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  4037  0019EE  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  4038  0019F0  0E01               	movlw	1
  4039  0019F2  6E12               	movwf	___aomod@sign^0,c
  4040  0019F4                     l2282:
  4041  0019F4  BE10               	btfsc	(___aomod@divisor+7)^0,7,c
  4042  0019F6  EF01  F00D         	goto	u1100
  4043  0019FA  EFFF  F00C         	goto	u1101
  4044  0019FE                     u1101:
  4045  0019FE  EF11  F00D         	goto	l2286
  4046  001A02                     u1100:
  4047  001A02  1E10               	comf	(___aomod@divisor+7)^0,f,c
  4048  001A04  1E0F               	comf	(___aomod@divisor+6)^0,f,c
  4049  001A06  1E0E               	comf	(___aomod@divisor+5)^0,f,c
  4050  001A08  1E0D               	comf	(___aomod@divisor+4)^0,f,c
  4051  001A0A  1E0C               	comf	(___aomod@divisor+3)^0,f,c
  4052  001A0C  1E0B               	comf	(___aomod@divisor+2)^0,f,c
  4053  001A0E  1E0A               	comf	(___aomod@divisor+1)^0,f,c
  4054  001A10  6C09               	negf	___aomod@divisor^0,c
  4055  001A12  0E00               	movlw	0
  4056  001A14  220A               	addwfc	(___aomod@divisor+1)^0,f,c
  4057  001A16  220B               	addwfc	(___aomod@divisor+2)^0,f,c
  4058  001A18  220C               	addwfc	(___aomod@divisor+3)^0,f,c
  4059  001A1A  220D               	addwfc	(___aomod@divisor+4)^0,f,c
  4060  001A1C  220E               	addwfc	(___aomod@divisor+5)^0,f,c
  4061  001A1E  220F               	addwfc	(___aomod@divisor+6)^0,f,c
  4062  001A20  2210               	addwfc	(___aomod@divisor+7)^0,f,c
  4063  001A22                     l2286:
  4064  001A22  5009               	movf	___aomod@divisor^0,w,c
  4065  001A24  100A               	iorwf	(___aomod@divisor+1)^0,w,c
  4066  001A26  100B               	iorwf	(___aomod@divisor+2)^0,w,c
  4067  001A28  100C               	iorwf	(___aomod@divisor+3)^0,w,c
  4068  001A2A  100D               	iorwf	(___aomod@divisor+4)^0,w,c
  4069  001A2C  100E               	iorwf	(___aomod@divisor+5)^0,w,c
  4070  001A2E  100F               	iorwf	(___aomod@divisor+6)^0,w,c
  4071  001A30  1010               	iorwf	(___aomod@divisor+7)^0,w,c
  4072  001A32  B4D8               	btfsc	status,2,c
  4073  001A34  EF1E  F00D         	goto	u1111
  4074  001A38  EF20  F00D         	goto	u1110
  4075  001A3C                     u1111:
  4076  001A3C  EF68  F00D         	goto	l2302
  4077  001A40                     u1110:
  4078  001A40  0E01               	movlw	1
  4079  001A42  6E11               	movwf	___aomod@counter^0,c
  4080  001A44  EF2E  F00D         	goto	l2292
  4081  001A48                     l2290:
  4082  001A48  90D8               	bcf	status,0,c
  4083  001A4A  3609               	rlcf	___aomod@divisor^0,f,c
  4084  001A4C  360A               	rlcf	(___aomod@divisor+1)^0,f,c
  4085  001A4E  360B               	rlcf	(___aomod@divisor+2)^0,f,c
  4086  001A50  360C               	rlcf	(___aomod@divisor+3)^0,f,c
  4087  001A52  360D               	rlcf	(___aomod@divisor+4)^0,f,c
  4088  001A54  360E               	rlcf	(___aomod@divisor+5)^0,f,c
  4089  001A56  360F               	rlcf	(___aomod@divisor+6)^0,f,c
  4090  001A58  3610               	rlcf	(___aomod@divisor+7)^0,f,c
  4091  001A5A  2A11               	incf	___aomod@counter^0,f,c
  4092  001A5C                     l2292:
  4093  001A5C  AE10               	btfss	(___aomod@divisor+7)^0,7,c
  4094  001A5E  EF33  F00D         	goto	u1121
  4095  001A62  EF35  F00D         	goto	u1120
  4096  001A66                     u1121:
  4097  001A66  EF24  F00D         	goto	l2290
  4098  001A6A                     u1120:
  4099  001A6A                     l2294:
  4100  001A6A  5009               	movf	___aomod@divisor^0,w,c
  4101  001A6C  5C01               	subwf	___aomod@dividend^0,w,c
  4102  001A6E  500A               	movf	(___aomod@divisor+1)^0,w,c
  4103  001A70  5802               	subwfb	(___aomod@dividend+1)^0,w,c
  4104  001A72  500B               	movf	(___aomod@divisor+2)^0,w,c
  4105  001A74  5803               	subwfb	(___aomod@dividend+2)^0,w,c
  4106  001A76  500C               	movf	(___aomod@divisor+3)^0,w,c
  4107  001A78  5804               	subwfb	(___aomod@dividend+3)^0,w,c
  4108  001A7A  500D               	movf	(___aomod@divisor+4)^0,w,c
  4109  001A7C  5805               	subwfb	(___aomod@dividend+4)^0,w,c
  4110  001A7E  500E               	movf	(___aomod@divisor+5)^0,w,c
  4111  001A80  5806               	subwfb	(___aomod@dividend+5)^0,w,c
  4112  001A82  500F               	movf	(___aomod@divisor+6)^0,w,c
  4113  001A84  5807               	subwfb	(___aomod@dividend+6)^0,w,c
  4114  001A86  5010               	movf	(___aomod@divisor+7)^0,w,c
  4115  001A88  5808               	subwfb	(___aomod@dividend+7)^0,w,c
  4116  001A8A  A0D8               	btfss	status,0,c
  4117  001A8C  EF4A  F00D         	goto	u1131
  4118  001A90  EF4C  F00D         	goto	u1130
  4119  001A94                     u1131:
  4120  001A94  EF5C  F00D         	goto	l2298
  4121  001A98                     u1130:
  4122  001A98  5009               	movf	___aomod@divisor^0,w,c
  4123  001A9A  5E01               	subwf	___aomod@dividend^0,f,c
  4124  001A9C  500A               	movf	(___aomod@divisor+1)^0,w,c
  4125  001A9E  5A02               	subwfb	(___aomod@dividend+1)^0,f,c
  4126  001AA0  500B               	movf	(___aomod@divisor+2)^0,w,c
  4127  001AA2  5A03               	subwfb	(___aomod@dividend+2)^0,f,c
  4128  001AA4  500C               	movf	(___aomod@divisor+3)^0,w,c
  4129  001AA6  5A04               	subwfb	(___aomod@dividend+3)^0,f,c
  4130  001AA8  500D               	movf	(___aomod@divisor+4)^0,w,c
  4131  001AAA  5A05               	subwfb	(___aomod@dividend+4)^0,f,c
  4132  001AAC  500E               	movf	(___aomod@divisor+5)^0,w,c
  4133  001AAE  5A06               	subwfb	(___aomod@dividend+5)^0,f,c
  4134  001AB0  500F               	movf	(___aomod@divisor+6)^0,w,c
  4135  001AB2  5A07               	subwfb	(___aomod@dividend+6)^0,f,c
  4136  001AB4  5010               	movf	(___aomod@divisor+7)^0,w,c
  4137  001AB6  5A08               	subwfb	(___aomod@dividend+7)^0,f,c
  4138  001AB8                     l2298:
  4139  001AB8  90D8               	bcf	status,0,c
  4140  001ABA  3210               	rrcf	(___aomod@divisor+7)^0,f,c
  4141  001ABC  320F               	rrcf	(___aomod@divisor+6)^0,f,c
  4142  001ABE  320E               	rrcf	(___aomod@divisor+5)^0,f,c
  4143  001AC0  320D               	rrcf	(___aomod@divisor+4)^0,f,c
  4144  001AC2  320C               	rrcf	(___aomod@divisor+3)^0,f,c
  4145  001AC4  320B               	rrcf	(___aomod@divisor+2)^0,f,c
  4146  001AC6  320A               	rrcf	(___aomod@divisor+1)^0,f,c
  4147  001AC8  3209               	rrcf	___aomod@divisor^0,f,c
  4148  001ACA  2E11               	decfsz	___aomod@counter^0,f,c
  4149  001ACC  EF35  F00D         	goto	l2294
  4150  001AD0                     l2302:
  4151  001AD0  5012               	movf	___aomod@sign^0,w,c
  4152  001AD2  B4D8               	btfsc	status,2,c
  4153  001AD4  EF6E  F00D         	goto	u1141
  4154  001AD8  EF70  F00D         	goto	u1140
  4155  001ADC                     u1141:
  4156  001ADC  EF80  F00D         	goto	l2306
  4157  001AE0                     u1140:
  4158  001AE0  1E08               	comf	(___aomod@dividend+7)^0,f,c
  4159  001AE2  1E07               	comf	(___aomod@dividend+6)^0,f,c
  4160  001AE4  1E06               	comf	(___aomod@dividend+5)^0,f,c
  4161  001AE6  1E05               	comf	(___aomod@dividend+4)^0,f,c
  4162  001AE8  1E04               	comf	(___aomod@dividend+3)^0,f,c
  4163  001AEA  1E03               	comf	(___aomod@dividend+2)^0,f,c
  4164  001AEC  1E02               	comf	(___aomod@dividend+1)^0,f,c
  4165  001AEE  6C01               	negf	___aomod@dividend^0,c
  4166  001AF0  0E00               	movlw	0
  4167  001AF2  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  4168  001AF4  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  4169  001AF6  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  4170  001AF8  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  4171  001AFA  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  4172  001AFC  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  4173  001AFE  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  4174  001B00                     l2306:
  4175  001B00  C001  F001         	movff	___aomod@dividend,?___aomod
  4176  001B04  C002  F002         	movff	___aomod@dividend+1,?___aomod+1
  4177  001B08  C003  F003         	movff	___aomod@dividend+2,?___aomod+2
  4178  001B0C  C004  F004         	movff	___aomod@dividend+3,?___aomod+3
  4179  001B10  C005  F005         	movff	___aomod@dividend+4,?___aomod+4
  4180  001B14  C006  F006         	movff	___aomod@dividend+5,?___aomod+5
  4181  001B18  C007  F007         	movff	___aomod@dividend+6,?___aomod+6
  4182  001B1C  C008  F008         	movff	___aomod@dividend+7,?___aomod+7
  4183  001B20  0012               	return		;funcret
  4184  001B22                     __end_of___aomod:
  4185                           	callstack 0
  4186                           
  4187 ;; *************** function ___aodiv *****************
  4188 ;; Defined at:
  4189 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\aodiv.c"
  4190 ;; Parameters:    Size  Location     Type
  4191 ;;  dividend        8    0[COMRAM] long long 
  4192 ;;  divisor         8    8[COMRAM] long long 
  4193 ;; Auto vars:     Size  Location     Type
  4194 ;;  quotient        8   18[COMRAM] long long 
  4195 ;;  sign            1   17[COMRAM] unsigned char 
  4196 ;;  counter         1   16[COMRAM] unsigned char 
  4197 ;; Return value:  Size  Location     Type
  4198 ;;                  8    0[COMRAM] long long 
  4199 ;; Registers used:
  4200 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4201 ;; Tracked objects:
  4202 ;;		On entry : 0/0
  4203 ;;		On exit  : 0/0
  4204 ;;		Unchanged: 0/0
  4205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4206 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4207 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4208 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4209 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4210 ;;Total ram usage:       26 bytes
  4211 ;; Hardware stack levels used: 1
  4212 ;; This function calls:
  4213 ;;		Nothing
  4214 ;; This function is called by:
  4215 ;;		_dtoa
  4216 ;; This function uses a non-reentrant model
  4217 ;;
  4218                           
  4219                           	psect	text23
  4220  001836                     __ptext23:
  4221                           	callstack 0
  4222  001836                     ___aodiv:
  4223                           	callstack 25
  4224  001836  0E00               	movlw	0
  4225  001838  6E12               	movwf	___aodiv@sign^0,c
  4226  00183A  BE10               	btfsc	(___aodiv@divisor+7)^0,7,c
  4227  00183C  EF24  F00C         	goto	u1020
  4228  001840  EF22  F00C         	goto	u1021
  4229  001844                     u1021:
  4230  001844  EF36  F00C         	goto	l2238
  4231  001848                     u1020:
  4232  001848  1E10               	comf	(___aodiv@divisor+7)^0,f,c
  4233  00184A  1E0F               	comf	(___aodiv@divisor+6)^0,f,c
  4234  00184C  1E0E               	comf	(___aodiv@divisor+5)^0,f,c
  4235  00184E  1E0D               	comf	(___aodiv@divisor+4)^0,f,c
  4236  001850  1E0C               	comf	(___aodiv@divisor+3)^0,f,c
  4237  001852  1E0B               	comf	(___aodiv@divisor+2)^0,f,c
  4238  001854  1E0A               	comf	(___aodiv@divisor+1)^0,f,c
  4239  001856  6C09               	negf	___aodiv@divisor^0,c
  4240  001858  0E00               	movlw	0
  4241  00185A  220A               	addwfc	(___aodiv@divisor+1)^0,f,c
  4242  00185C  220B               	addwfc	(___aodiv@divisor+2)^0,f,c
  4243  00185E  220C               	addwfc	(___aodiv@divisor+3)^0,f,c
  4244  001860  220D               	addwfc	(___aodiv@divisor+4)^0,f,c
  4245  001862  220E               	addwfc	(___aodiv@divisor+5)^0,f,c
  4246  001864  220F               	addwfc	(___aodiv@divisor+6)^0,f,c
  4247  001866  2210               	addwfc	(___aodiv@divisor+7)^0,f,c
  4248  001868  0E01               	movlw	1
  4249  00186A  6E12               	movwf	___aodiv@sign^0,c
  4250  00186C                     l2238:
  4251  00186C  BE08               	btfsc	(___aodiv@dividend+7)^0,7,c
  4252  00186E  EF3D  F00C         	goto	u1030
  4253  001872  EF3B  F00C         	goto	u1031
  4254  001876                     u1031:
  4255  001876  EF4F  F00C         	goto	l2244
  4256  00187A                     u1030:
  4257  00187A  1E08               	comf	(___aodiv@dividend+7)^0,f,c
  4258  00187C  1E07               	comf	(___aodiv@dividend+6)^0,f,c
  4259  00187E  1E06               	comf	(___aodiv@dividend+5)^0,f,c
  4260  001880  1E05               	comf	(___aodiv@dividend+4)^0,f,c
  4261  001882  1E04               	comf	(___aodiv@dividend+3)^0,f,c
  4262  001884  1E03               	comf	(___aodiv@dividend+2)^0,f,c
  4263  001886  1E02               	comf	(___aodiv@dividend+1)^0,f,c
  4264  001888  6C01               	negf	___aodiv@dividend^0,c
  4265  00188A  0E00               	movlw	0
  4266  00188C  2202               	addwfc	(___aodiv@dividend+1)^0,f,c
  4267  00188E  2203               	addwfc	(___aodiv@dividend+2)^0,f,c
  4268  001890  2204               	addwfc	(___aodiv@dividend+3)^0,f,c
  4269  001892  2205               	addwfc	(___aodiv@dividend+4)^0,f,c
  4270  001894  2206               	addwfc	(___aodiv@dividend+5)^0,f,c
  4271  001896  2207               	addwfc	(___aodiv@dividend+6)^0,f,c
  4272  001898  2208               	addwfc	(___aodiv@dividend+7)^0,f,c
  4273  00189A  0E01               	movlw	1
  4274  00189C  1A12               	xorwf	___aodiv@sign^0,f,c
  4275  00189E                     l2244:
  4276  00189E  EE20  F013         	lfsr	2,___aodiv@quotient
  4277  0018A2  0E07               	movlw	7
  4278  0018A4                     u1041:
  4279  0018A4  6ADE               	clrf	postinc2,c
  4280  0018A6  06E8               	decf	wreg,f,c
  4281  0018A8  E2FD               	bc	u1041
  4282  0018AA  5009               	movf	___aodiv@divisor^0,w,c
  4283  0018AC  100A               	iorwf	(___aodiv@divisor+1)^0,w,c
  4284  0018AE  100B               	iorwf	(___aodiv@divisor+2)^0,w,c
  4285  0018B0  100C               	iorwf	(___aodiv@divisor+3)^0,w,c
  4286  0018B2  100D               	iorwf	(___aodiv@divisor+4)^0,w,c
  4287  0018B4  100E               	iorwf	(___aodiv@divisor+5)^0,w,c
  4288  0018B6  100F               	iorwf	(___aodiv@divisor+6)^0,w,c
  4289  0018B8  1010               	iorwf	(___aodiv@divisor+7)^0,w,c
  4290  0018BA  B4D8               	btfsc	status,2,c
  4291  0018BC  EF62  F00C         	goto	u1051
  4292  0018C0  EF64  F00C         	goto	u1050
  4293  0018C4                     u1051:
  4294  0018C4  EFB6  F00C         	goto	l2266
  4295  0018C8                     u1050:
  4296  0018C8  0E01               	movlw	1
  4297  0018CA  6E11               	movwf	___aodiv@counter^0,c
  4298  0018CC  EF72  F00C         	goto	l2252
  4299  0018D0                     l2250:
  4300  0018D0  90D8               	bcf	status,0,c
  4301  0018D2  3609               	rlcf	___aodiv@divisor^0,f,c
  4302  0018D4  360A               	rlcf	(___aodiv@divisor+1)^0,f,c
  4303  0018D6  360B               	rlcf	(___aodiv@divisor+2)^0,f,c
  4304  0018D8  360C               	rlcf	(___aodiv@divisor+3)^0,f,c
  4305  0018DA  360D               	rlcf	(___aodiv@divisor+4)^0,f,c
  4306  0018DC  360E               	rlcf	(___aodiv@divisor+5)^0,f,c
  4307  0018DE  360F               	rlcf	(___aodiv@divisor+6)^0,f,c
  4308  0018E0  3610               	rlcf	(___aodiv@divisor+7)^0,f,c
  4309  0018E2  2A11               	incf	___aodiv@counter^0,f,c
  4310  0018E4                     l2252:
  4311  0018E4  AE10               	btfss	(___aodiv@divisor+7)^0,7,c
  4312  0018E6  EF77  F00C         	goto	u1061
  4313  0018EA  EF79  F00C         	goto	u1060
  4314  0018EE                     u1061:
  4315  0018EE  EF68  F00C         	goto	l2250
  4316  0018F2                     u1060:
  4317  0018F2                     l2254:
  4318  0018F2  90D8               	bcf	status,0,c
  4319  0018F4  3613               	rlcf	___aodiv@quotient^0,f,c
  4320  0018F6  3614               	rlcf	(___aodiv@quotient+1)^0,f,c
  4321  0018F8  3615               	rlcf	(___aodiv@quotient+2)^0,f,c
  4322  0018FA  3616               	rlcf	(___aodiv@quotient+3)^0,f,c
  4323  0018FC  3617               	rlcf	(___aodiv@quotient+4)^0,f,c
  4324  0018FE  3618               	rlcf	(___aodiv@quotient+5)^0,f,c
  4325  001900  3619               	rlcf	(___aodiv@quotient+6)^0,f,c
  4326  001902  361A               	rlcf	(___aodiv@quotient+7)^0,f,c
  4327  001904  5009               	movf	___aodiv@divisor^0,w,c
  4328  001906  5C01               	subwf	___aodiv@dividend^0,w,c
  4329  001908  500A               	movf	(___aodiv@divisor+1)^0,w,c
  4330  00190A  5802               	subwfb	(___aodiv@dividend+1)^0,w,c
  4331  00190C  500B               	movf	(___aodiv@divisor+2)^0,w,c
  4332  00190E  5803               	subwfb	(___aodiv@dividend+2)^0,w,c
  4333  001910  500C               	movf	(___aodiv@divisor+3)^0,w,c
  4334  001912  5804               	subwfb	(___aodiv@dividend+3)^0,w,c
  4335  001914  500D               	movf	(___aodiv@divisor+4)^0,w,c
  4336  001916  5805               	subwfb	(___aodiv@dividend+4)^0,w,c
  4337  001918  500E               	movf	(___aodiv@divisor+5)^0,w,c
  4338  00191A  5806               	subwfb	(___aodiv@dividend+5)^0,w,c
  4339  00191C  500F               	movf	(___aodiv@divisor+6)^0,w,c
  4340  00191E  5807               	subwfb	(___aodiv@dividend+6)^0,w,c
  4341  001920  5010               	movf	(___aodiv@divisor+7)^0,w,c
  4342  001922  5808               	subwfb	(___aodiv@dividend+7)^0,w,c
  4343  001924  A0D8               	btfss	status,0,c
  4344  001926  EF97  F00C         	goto	u1071
  4345  00192A  EF99  F00C         	goto	u1070
  4346  00192E                     u1071:
  4347  00192E  EFAA  F00C         	goto	l2262
  4348  001932                     u1070:
  4349  001932  5009               	movf	___aodiv@divisor^0,w,c
  4350  001934  5E01               	subwf	___aodiv@dividend^0,f,c
  4351  001936  500A               	movf	(___aodiv@divisor+1)^0,w,c
  4352  001938  5A02               	subwfb	(___aodiv@dividend+1)^0,f,c
  4353  00193A  500B               	movf	(___aodiv@divisor+2)^0,w,c
  4354  00193C  5A03               	subwfb	(___aodiv@dividend+2)^0,f,c
  4355  00193E  500C               	movf	(___aodiv@divisor+3)^0,w,c
  4356  001940  5A04               	subwfb	(___aodiv@dividend+3)^0,f,c
  4357  001942  500D               	movf	(___aodiv@divisor+4)^0,w,c
  4358  001944  5A05               	subwfb	(___aodiv@dividend+4)^0,f,c
  4359  001946  500E               	movf	(___aodiv@divisor+5)^0,w,c
  4360  001948  5A06               	subwfb	(___aodiv@dividend+5)^0,f,c
  4361  00194A  500F               	movf	(___aodiv@divisor+6)^0,w,c
  4362  00194C  5A07               	subwfb	(___aodiv@dividend+6)^0,f,c
  4363  00194E  5010               	movf	(___aodiv@divisor+7)^0,w,c
  4364  001950  5A08               	subwfb	(___aodiv@dividend+7)^0,f,c
  4365  001952  8013               	bsf	___aodiv@quotient^0,0,c
  4366  001954                     l2262:
  4367  001954  90D8               	bcf	status,0,c
  4368  001956  3210               	rrcf	(___aodiv@divisor+7)^0,f,c
  4369  001958  320F               	rrcf	(___aodiv@divisor+6)^0,f,c
  4370  00195A  320E               	rrcf	(___aodiv@divisor+5)^0,f,c
  4371  00195C  320D               	rrcf	(___aodiv@divisor+4)^0,f,c
  4372  00195E  320C               	rrcf	(___aodiv@divisor+3)^0,f,c
  4373  001960  320B               	rrcf	(___aodiv@divisor+2)^0,f,c
  4374  001962  320A               	rrcf	(___aodiv@divisor+1)^0,f,c
  4375  001964  3209               	rrcf	___aodiv@divisor^0,f,c
  4376  001966  2E11               	decfsz	___aodiv@counter^0,f,c
  4377  001968  EF79  F00C         	goto	l2254
  4378  00196C                     l2266:
  4379  00196C  5012               	movf	___aodiv@sign^0,w,c
  4380  00196E  B4D8               	btfsc	status,2,c
  4381  001970  EFBC  F00C         	goto	u1081
  4382  001974  EFBE  F00C         	goto	u1080
  4383  001978                     u1081:
  4384  001978  EFCE  F00C         	goto	l2270
  4385  00197C                     u1080:
  4386  00197C  1E1A               	comf	(___aodiv@quotient+7)^0,f,c
  4387  00197E  1E19               	comf	(___aodiv@quotient+6)^0,f,c
  4388  001980  1E18               	comf	(___aodiv@quotient+5)^0,f,c
  4389  001982  1E17               	comf	(___aodiv@quotient+4)^0,f,c
  4390  001984  1E16               	comf	(___aodiv@quotient+3)^0,f,c
  4391  001986  1E15               	comf	(___aodiv@quotient+2)^0,f,c
  4392  001988  1E14               	comf	(___aodiv@quotient+1)^0,f,c
  4393  00198A  6C13               	negf	___aodiv@quotient^0,c
  4394  00198C  0E00               	movlw	0
  4395  00198E  2214               	addwfc	(___aodiv@quotient+1)^0,f,c
  4396  001990  2215               	addwfc	(___aodiv@quotient+2)^0,f,c
  4397  001992  2216               	addwfc	(___aodiv@quotient+3)^0,f,c
  4398  001994  2217               	addwfc	(___aodiv@quotient+4)^0,f,c
  4399  001996  2218               	addwfc	(___aodiv@quotient+5)^0,f,c
  4400  001998  2219               	addwfc	(___aodiv@quotient+6)^0,f,c
  4401  00199A  221A               	addwfc	(___aodiv@quotient+7)^0,f,c
  4402  00199C                     l2270:
  4403  00199C  C013  F001         	movff	___aodiv@quotient,?___aodiv
  4404  0019A0  C014  F002         	movff	___aodiv@quotient+1,?___aodiv+1
  4405  0019A4  C015  F003         	movff	___aodiv@quotient+2,?___aodiv+2
  4406  0019A8  C016  F004         	movff	___aodiv@quotient+3,?___aodiv+3
  4407  0019AC  C017  F005         	movff	___aodiv@quotient+4,?___aodiv+4
  4408  0019B0  C018  F006         	movff	___aodiv@quotient+5,?___aodiv+5
  4409  0019B4  C019  F007         	movff	___aodiv@quotient+6,?___aodiv+6
  4410  0019B8  C01A  F008         	movff	___aodiv@quotient+7,?___aodiv+7
  4411  0019BC  0012               	return		;funcret
  4412  0019BE                     __end_of___aodiv:
  4413                           	callstack 0
  4414                           
  4415 ;; *************** function _sendStringSerial4 *****************
  4416 ;; Defined at:
  4417 ;;		line 36 in file "serial.c"
  4418 ;; Parameters:    Size  Location     Type
  4419 ;;  string          2    1[COMRAM] PTR unsigned char 
  4420 ;;		 -> voltage_display@buf(80), color_predict@buf(100), check_color_reading@buf(100), color_display@buf(100), 
  4421 ;; Auto vars:     Size  Location     Type
  4422 ;;		None
  4423 ;; Return value:  Size  Location     Type
  4424 ;;                  1    wreg      void 
  4425 ;; Registers used:
  4426 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4427 ;; Tracked objects:
  4428 ;;		On entry : 0/0
  4429 ;;		On exit  : 0/0
  4430 ;;		Unchanged: 0/0
  4431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4432 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4433 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4434 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4435 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4436 ;;Total ram usage:        2 bytes
  4437 ;; Hardware stack levels used: 1
  4438 ;; Hardware stack levels required when called: 1
  4439 ;; This function calls:
  4440 ;;		_sendCharSerial4
  4441 ;; This function is called by:
  4442 ;;		_color_display
  4443 ;;		_check_color_reading
  4444 ;;		_color_predict
  4445 ;;		_voltage_display
  4446 ;; This function uses a non-reentrant model
  4447 ;;
  4448                           
  4449                           	psect	text24
  4450  002610                     __ptext24:
  4451                           	callstack 0
  4452  002610                     _sendStringSerial4:
  4453                           	callstack 28
  4454  002610                     
  4455                           ;serial.c: 38:     while(*string != 0){
  4456  002610  EF13  F013         	goto	l2566
  4457  002614                     l2562:
  4458                           
  4459                           ;serial.c: 39:   sendCharSerial4(*string++);}
  4460  002614  C002  FFD9         	movff	sendStringSerial4@string,fsr2l
  4461  002618  C003  FFDA         	movff	sendStringSerial4@string+1,fsr2h
  4462  00261C  50DF               	movf	indf2,w,c
  4463  00261E  ECBB  F013         	call	_sendCharSerial4
  4464  002622  4A02               	infsnz	sendStringSerial4@string^0,f,c
  4465  002624  2A03               	incf	(sendStringSerial4@string+1)^0,f,c
  4466  002626                     l2566:
  4467                           
  4468                           ;serial.c: 38:     while(*string != 0){
  4469  002626  C002  FFD9         	movff	sendStringSerial4@string,fsr2l
  4470  00262A  C003  FFDA         	movff	sendStringSerial4@string+1,fsr2h
  4471  00262E  50DF               	movf	indf2,w,c
  4472  002630  A4D8               	btfss	status,2,c
  4473  002632  EF1D  F013         	goto	u1461
  4474  002636  EF1F  F013         	goto	u1460
  4475  00263A                     u1461:
  4476  00263A  EF0A  F013         	goto	l2562
  4477  00263E                     u1460:
  4478  00263E  0012               	return		;funcret
  4479  002640                     __end_of_sendStringSerial4:
  4480                           	callstack 0
  4481                           
  4482 ;; *************** function _sendCharSerial4 *****************
  4483 ;; Defined at:
  4484 ;;		line 29 in file "serial.c"
  4485 ;; Parameters:    Size  Location     Type
  4486 ;;  charToSend      1    wreg     unsigned char 
  4487 ;; Auto vars:     Size  Location     Type
  4488 ;;  charToSend      1    0[COMRAM] unsigned char 
  4489 ;; Return value:  Size  Location     Type
  4490 ;;                  1    wreg      void 
  4491 ;; Registers used:
  4492 ;;		wreg
  4493 ;; Tracked objects:
  4494 ;;		On entry : 0/0
  4495 ;;		On exit  : 0/0
  4496 ;;		Unchanged: 0/0
  4497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4499 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4500 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4501 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4502 ;;Total ram usage:        1 bytes
  4503 ;; Hardware stack levels used: 1
  4504 ;; This function calls:
  4505 ;;		Nothing
  4506 ;; This function is called by:
  4507 ;;		_sendStringSerial4
  4508 ;; This function uses a non-reentrant model
  4509 ;;
  4510                           
  4511                           	psect	text25
  4512  002776                     __ptext25:
  4513                           	callstack 0
  4514  002776                     _sendCharSerial4:
  4515                           	callstack 28
  4516                           
  4517                           ;incstack = 0
  4518                           ;sendCharSerial4@charToSend stored from wreg
  4519  002776  6E01               	movwf	sendCharSerial4@charToSend^0,c
  4520  002778                     l334:
  4521  002778  010E               	movlb	14	; () banked
  4522  00277A  A537               	btfss	55,2,b	;volatile
  4523  00277C  EFC2  F013         	goto	u1441
  4524  002780  EFC4  F013         	goto	u1440
  4525  002784                     u1441:
  4526  002784  EFBC  F013         	goto	l334
  4527  002788                     u1440:
  4528  002788                     
  4529                           ; BSR set to: 14
  4530                           ;serial.c: 31:     TX4REG = charToSend;
  4531  002788  C001  FEE4         	movff	sendCharSerial4@charToSend,3812	;volatile
  4532  00278C                     
  4533                           ; BSR set to: 14
  4534  00278C  0012               	return		;funcret
  4535  00278E                     __end_of_sendCharSerial4:
  4536                           	callstack 0
  4537                           
  4538 ;; *************** function ___wmul *****************
  4539 ;; Defined at:
  4540 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\Umul16.c"
  4541 ;; Parameters:    Size  Location     Type
  4542 ;;  multiplier      2    0[COMRAM] unsigned int 
  4543 ;;  multiplicand    2    2[COMRAM] unsigned int 
  4544 ;; Auto vars:     Size  Location     Type
  4545 ;;  product         2    4[COMRAM] unsigned int 
  4546 ;; Return value:  Size  Location     Type
  4547 ;;                  2    0[COMRAM] unsigned int 
  4548 ;; Registers used:
  4549 ;;		wreg, status,2, status,0, prodl, prodh
  4550 ;; Tracked objects:
  4551 ;;		On entry : 0/0
  4552 ;;		On exit  : 0/0
  4553 ;;		Unchanged: 0/0
  4554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4555 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4556 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4557 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4558 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4559 ;;Total ram usage:        6 bytes
  4560 ;; Hardware stack levels used: 1
  4561 ;; This function calls:
  4562 ;;		Nothing
  4563 ;; This function is called by:
  4564 ;;		_check_color_reading
  4565 ;;		_detect_color
  4566 ;;		_setMotorPWM
  4567 ;; This function uses a non-reentrant model
  4568 ;;
  4569                           
  4570                           	psect	text26
  4571  002692                     __ptext26:
  4572                           	callstack 0
  4573  002692                     ___wmul:
  4574                           	callstack 29
  4575  002692  5001               	movf	___wmul@multiplier^0,w,c
  4576  002694  0203               	mulwf	___wmul@multiplicand^0,c
  4577  002696  CFF3 F005          	movff	prodl,___wmul@product
  4578  00269A  CFF4 F006          	movff	prodh,___wmul@product+1
  4579  00269E  5001               	movf	___wmul@multiplier^0,w,c
  4580  0026A0  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  4581  0026A2  50F3               	movf	243,w,c
  4582  0026A4  2606               	addwf	(___wmul@product+1)^0,f,c
  4583  0026A6  5002               	movf	(___wmul@multiplier+1)^0,w,c
  4584  0026A8  0203               	mulwf	___wmul@multiplicand^0,c
  4585  0026AA  50F3               	movf	243,w,c
  4586  0026AC  2606               	addwf	(___wmul@product+1)^0,f,c
  4587  0026AE  C005  F001         	movff	___wmul@product,?___wmul
  4588  0026B2  C006  F002         	movff	___wmul@product+1,?___wmul+1
  4589  0026B6  0012               	return		;funcret
  4590  0026B8                     __end_of___wmul:
  4591                           	callstack 0
  4592                           
  4593 ;; *************** function ___lwdiv *****************
  4594 ;; Defined at:
  4595 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\lwdiv.c"
  4596 ;; Parameters:    Size  Location     Type
  4597 ;;  dividend        2    6[COMRAM] unsigned int 
  4598 ;;  divisor         2    8[COMRAM] unsigned int 
  4599 ;; Auto vars:     Size  Location     Type
  4600 ;;  quotient        2   10[COMRAM] unsigned int 
  4601 ;;  counter         1   12[COMRAM] unsigned char 
  4602 ;; Return value:  Size  Location     Type
  4603 ;;                  2    6[COMRAM] unsigned int 
  4604 ;; Registers used:
  4605 ;;		wreg, status,2, status,0
  4606 ;; Tracked objects:
  4607 ;;		On entry : 0/0
  4608 ;;		On exit  : 0/0
  4609 ;;		Unchanged: 0/0
  4610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4611 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4612 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4613 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4614 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4615 ;;Total ram usage:        7 bytes
  4616 ;; Hardware stack levels used: 1
  4617 ;; This function calls:
  4618 ;;		Nothing
  4619 ;; This function is called by:
  4620 ;;		_check_color_reading
  4621 ;;		_detect_color
  4622 ;; This function uses a non-reentrant model
  4623 ;;
  4624                           
  4625                           	psect	text27
  4626  0020F4                     __ptext27:
  4627                           	callstack 0
  4628  0020F4                     ___lwdiv:
  4629                           	callstack 29
  4630  0020F4  0E00               	movlw	0
  4631  0020F6  6E0C               	movwf	(___lwdiv@quotient+1)^0,c
  4632  0020F8  0E00               	movlw	0
  4633  0020FA  6E0B               	movwf	___lwdiv@quotient^0,c
  4634  0020FC  5009               	movf	___lwdiv@divisor^0,w,c
  4635  0020FE  100A               	iorwf	(___lwdiv@divisor+1)^0,w,c
  4636  002100  B4D8               	btfsc	status,2,c
  4637  002102  EF85  F010         	goto	u1511
  4638  002106  EF87  F010         	goto	u1510
  4639  00210A                     u1511:
  4640  00210A  EFAF  F010         	goto	l985
  4641  00210E                     u1510:
  4642  00210E  0E01               	movlw	1
  4643  002110  6E0D               	movwf	___lwdiv@counter^0,c
  4644  002112  EF8F  F010         	goto	l2608
  4645  002116                     l2606:
  4646  002116  90D8               	bcf	status,0,c
  4647  002118  3609               	rlcf	___lwdiv@divisor^0,f,c
  4648  00211A  360A               	rlcf	(___lwdiv@divisor+1)^0,f,c
  4649  00211C  2A0D               	incf	___lwdiv@counter^0,f,c
  4650  00211E                     l2608:
  4651  00211E  AE0A               	btfss	(___lwdiv@divisor+1)^0,7,c
  4652  002120  EF94  F010         	goto	u1521
  4653  002124  EF96  F010         	goto	u1520
  4654  002128                     u1521:
  4655  002128  EF8B  F010         	goto	l2606
  4656  00212C                     u1520:
  4657  00212C                     l2610:
  4658  00212C  90D8               	bcf	status,0,c
  4659  00212E  360B               	rlcf	___lwdiv@quotient^0,f,c
  4660  002130  360C               	rlcf	(___lwdiv@quotient+1)^0,f,c
  4661  002132  5009               	movf	___lwdiv@divisor^0,w,c
  4662  002134  5C07               	subwf	___lwdiv@dividend^0,w,c
  4663  002136  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  4664  002138  5808               	subwfb	(___lwdiv@dividend+1)^0,w,c
  4665  00213A  A0D8               	btfss	status,0,c
  4666  00213C  EFA2  F010         	goto	u1531
  4667  002140  EFA4  F010         	goto	u1530
  4668  002144                     u1531:
  4669  002144  EFA9  F010         	goto	l2618
  4670  002148                     u1530:
  4671  002148  5009               	movf	___lwdiv@divisor^0,w,c
  4672  00214A  5E07               	subwf	___lwdiv@dividend^0,f,c
  4673  00214C  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  4674  00214E  5A08               	subwfb	(___lwdiv@dividend+1)^0,f,c
  4675  002150  800B               	bsf	___lwdiv@quotient^0,0,c
  4676  002152                     l2618:
  4677  002152  90D8               	bcf	status,0,c
  4678  002154  320A               	rrcf	(___lwdiv@divisor+1)^0,f,c
  4679  002156  3209               	rrcf	___lwdiv@divisor^0,f,c
  4680  002158  2E0D               	decfsz	___lwdiv@counter^0,f,c
  4681  00215A  EF96  F010         	goto	l2610
  4682  00215E                     l985:
  4683  00215E  C00B  F007         	movff	___lwdiv@quotient,?___lwdiv
  4684  002162  C00C  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4685  002166  0012               	return		;funcret
  4686  002168                     __end_of___lwdiv:
  4687                           	callstack 0
  4688                           
  4689 ;; *************** function _calibrate_white *****************
  4690 ;; Defined at:
  4691 ;;		line 168 in file "color.c"
  4692 ;; Parameters:    Size  Location     Type
  4693 ;;  w               2   13[COMRAM] PTR struct white_card
  4694 ;;		 -> main@white(18), 
  4695 ;; Auto vars:     Size  Location     Type
  4696 ;;		None
  4697 ;; Return value:  Size  Location     Type
  4698 ;;                  1    wreg      void 
  4699 ;; Registers used:
  4700 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4701 ;; Tracked objects:
  4702 ;;		On entry : 0/0
  4703 ;;		On exit  : 0/0
  4704 ;;		Unchanged: 0/0
  4705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4706 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4707 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4708 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4709 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4710 ;;Total ram usage:        4 bytes
  4711 ;; Hardware stack levels used: 1
  4712 ;; Hardware stack levels required when called: 4
  4713 ;; This function calls:
  4714 ;;		_LED_B
  4715 ;;		_LED_G
  4716 ;;		_LED_R
  4717 ;;		_color_read_Blue
  4718 ;;		_color_read_Green
  4719 ;;		_color_read_Red
  4720 ;;		_read_color
  4721 ;; This function is called by:
  4722 ;;		_main
  4723 ;; This function uses a non-reentrant model
  4724 ;;
  4725                           
  4726                           	psect	text28
  4727  001B22                     __ptext28:
  4728                           	callstack 0
  4729  001B22                     _calibrate_white:
  4730                           	callstack 26
  4731  001B22                     
  4732                           ;color.c: 168: void calibrate_white(struct white_card *w);color.c: 169: {;color.c: 170: 
      +                              LED_R();
  4733  001B22  EC6C  F013         	call	_LED_R	;wreg free
  4734  001B26                     
  4735                           ;color.c: 171:     read_color(w);
  4736  001B26  C00E  F00C         	movff	calibrate_white@w,read_color@m
  4737  001B2A  C00F  F00D         	movff	calibrate_white@w+1,read_color@m+1
  4738  001B2E  EC1D  F011         	call	_read_color	;wreg free
  4739  001B32                     
  4740                           ;color.c: 172:     w->RR = color_read_Red(); w->RG = color_read_Green(); w->RB = color_r
      +                          ead_Blue();
  4741  001B32  EC75  F011         	call	_color_read_Red	;wreg free
  4742  001B36  C00E  FFD9         	movff	calibrate_white@w,fsr2l
  4743  001B3A  C00F  FFDA         	movff	calibrate_white@w+1,fsr2h
  4744  001B3E  C005  FFDE         	movff	?_color_read_Red,postinc2
  4745  001B42  C006  FFDD         	movff	?_color_read_Red+1,postdec2
  4746  001B46  EC9D  F011         	call	_color_read_Green	;wreg free
  4747  001B4A  EE20 F002          	lfsr	2,2
  4748  001B4E  500E               	movf	calibrate_white@w^0,w,c
  4749  001B50  26D9               	addwf	fsr2l,f,c
  4750  001B52  500F               	movf	(calibrate_white@w+1)^0,w,c
  4751  001B54  22DA               	addwfc	fsr2h,f,c
  4752  001B56  C005  FFDE         	movff	?_color_read_Green,postinc2
  4753  001B5A  C006  FFDD         	movff	?_color_read_Green+1,postdec2
  4754  001B5E  ECED  F011         	call	_color_read_Blue	;wreg free
  4755  001B62  EE20 F004          	lfsr	2,4
  4756  001B66  500E               	movf	calibrate_white@w^0,w,c
  4757  001B68  26D9               	addwf	fsr2l,f,c
  4758  001B6A  500F               	movf	(calibrate_white@w+1)^0,w,c
  4759  001B6C  22DA               	addwfc	fsr2h,f,c
  4760  001B6E  C005  FFDE         	movff	?_color_read_Blue,postinc2
  4761  001B72  C006  FFDD         	movff	?_color_read_Blue+1,postdec2
  4762  001B76                     
  4763                           ;color.c: 173:     _delay((unsigned long)((50)*(64000000/4000.0)));
  4764  001B76  0E05               	movlw	5
  4765  001B78  6E11               	movwf	(??_calibrate_white+1)^0,c
  4766  001B7A  0E0F               	movlw	15
  4767  001B7C  6E10               	movwf	??_calibrate_white^0,c
  4768  001B7E  0EF1               	movlw	241
  4769  001B80                     u1937:
  4770  001B80  2EE8               	decfsz	wreg,f,c
  4771  001B82  D7FE               	bra	u1937
  4772  001B84  2E10               	decfsz	??_calibrate_white^0,f,c
  4773  001B86  D7FC               	bra	u1937
  4774  001B88  2E11               	decfsz	(??_calibrate_white+1)^0,f,c
  4775  001B8A  D7FA               	bra	u1937
  4776  001B8C  F000               	nop	
  4777  001B8E                     
  4778                           ;color.c: 175:     LED_G();
  4779  001B8E  EC7C  F013         	call	_LED_G	;wreg free
  4780  001B92                     
  4781                           ;color.c: 176:     read_color(w);
  4782  001B92  C00E  F00C         	movff	calibrate_white@w,read_color@m
  4783  001B96  C00F  F00D         	movff	calibrate_white@w+1,read_color@m+1
  4784  001B9A  EC1D  F011         	call	_read_color	;wreg free
  4785  001B9E                     
  4786                           ;color.c: 177:     w->GR = color_read_Red(); w->GG = color_read_Green(); w->GB = color_r
      +                          ead_Blue();
  4787  001B9E  EC75  F011         	call	_color_read_Red	;wreg free
  4788  001BA2  EE20 F006          	lfsr	2,6
  4789  001BA6  500E               	movf	calibrate_white@w^0,w,c
  4790  001BA8  26D9               	addwf	fsr2l,f,c
  4791  001BAA  500F               	movf	(calibrate_white@w+1)^0,w,c
  4792  001BAC  22DA               	addwfc	fsr2h,f,c
  4793  001BAE  C005  FFDE         	movff	?_color_read_Red,postinc2
  4794  001BB2  C006  FFDD         	movff	?_color_read_Red+1,postdec2
  4795  001BB6  EC9D  F011         	call	_color_read_Green	;wreg free
  4796  001BBA  EE20 F008          	lfsr	2,8
  4797  001BBE  500E               	movf	calibrate_white@w^0,w,c
  4798  001BC0  26D9               	addwf	fsr2l,f,c
  4799  001BC2  500F               	movf	(calibrate_white@w+1)^0,w,c
  4800  001BC4  22DA               	addwfc	fsr2h,f,c
  4801  001BC6  C005  FFDE         	movff	?_color_read_Green,postinc2
  4802  001BCA  C006  FFDD         	movff	?_color_read_Green+1,postdec2
  4803  001BCE  ECED  F011         	call	_color_read_Blue	;wreg free
  4804  001BD2  EE20 F00A          	lfsr	2,10
  4805  001BD6  500E               	movf	calibrate_white@w^0,w,c
  4806  001BD8  26D9               	addwf	fsr2l,f,c
  4807  001BDA  500F               	movf	(calibrate_white@w+1)^0,w,c
  4808  001BDC  22DA               	addwfc	fsr2h,f,c
  4809  001BDE  C005  FFDE         	movff	?_color_read_Blue,postinc2
  4810  001BE2  C006  FFDD         	movff	?_color_read_Blue+1,postdec2
  4811                           
  4812                           ;color.c: 178:     _delay((unsigned long)((50)*(64000000/4000.0)));
  4813  001BE6  0E05               	movlw	5
  4814  001BE8  6E11               	movwf	(??_calibrate_white+1)^0,c
  4815  001BEA  0E0F               	movlw	15
  4816  001BEC  6E10               	movwf	??_calibrate_white^0,c
  4817  001BEE  0EF1               	movlw	241
  4818  001BF0                     u1947:
  4819  001BF0  2EE8               	decfsz	wreg,f,c
  4820  001BF2  D7FE               	bra	u1947
  4821  001BF4  2E10               	decfsz	??_calibrate_white^0,f,c
  4822  001BF6  D7FC               	bra	u1947
  4823  001BF8  2E11               	decfsz	(??_calibrate_white+1)^0,f,c
  4824  001BFA  D7FA               	bra	u1947
  4825  001BFC  F000               	nop	
  4826  001BFE                     
  4827                           ;color.c: 180:     LED_B();
  4828  001BFE  EC8C  F013         	call	_LED_B	;wreg free
  4829  001C02                     
  4830                           ;color.c: 181:     read_color(w);
  4831  001C02  C00E  F00C         	movff	calibrate_white@w,read_color@m
  4832  001C06  C00F  F00D         	movff	calibrate_white@w+1,read_color@m+1
  4833  001C0A  EC1D  F011         	call	_read_color	;wreg free
  4834  001C0E                     
  4835                           ;color.c: 182:     w->BR = color_read_Red(); w->BG = color_read_Green(); w->BB = color_r
      +                          ead_Blue();
  4836  001C0E  EC75  F011         	call	_color_read_Red	;wreg free
  4837  001C12  EE20 F00C          	lfsr	2,12
  4838  001C16  500E               	movf	calibrate_white@w^0,w,c
  4839  001C18  26D9               	addwf	fsr2l,f,c
  4840  001C1A  500F               	movf	(calibrate_white@w+1)^0,w,c
  4841  001C1C  22DA               	addwfc	fsr2h,f,c
  4842  001C1E  C005  FFDE         	movff	?_color_read_Red,postinc2
  4843  001C22  C006  FFDD         	movff	?_color_read_Red+1,postdec2
  4844  001C26  EC9D  F011         	call	_color_read_Green	;wreg free
  4845  001C2A  EE20 F00E          	lfsr	2,14
  4846  001C2E  500E               	movf	calibrate_white@w^0,w,c
  4847  001C30  26D9               	addwf	fsr2l,f,c
  4848  001C32  500F               	movf	(calibrate_white@w+1)^0,w,c
  4849  001C34  22DA               	addwfc	fsr2h,f,c
  4850  001C36  C005  FFDE         	movff	?_color_read_Green,postinc2
  4851  001C3A  C006  FFDD         	movff	?_color_read_Green+1,postdec2
  4852  001C3E  ECED  F011         	call	_color_read_Blue	;wreg free
  4853  001C42  EE20 F010          	lfsr	2,16
  4854  001C46  500E               	movf	calibrate_white@w^0,w,c
  4855  001C48  26D9               	addwf	fsr2l,f,c
  4856  001C4A  500F               	movf	(calibrate_white@w+1)^0,w,c
  4857  001C4C  22DA               	addwfc	fsr2h,f,c
  4858  001C4E  C005  FFDE         	movff	?_color_read_Blue,postinc2
  4859  001C52  C006  FFDD         	movff	?_color_read_Blue+1,postdec2
  4860  001C56                     
  4861                           ;color.c: 183:     _delay((unsigned long)((50)*(64000000/4000.0)));
  4862  001C56  0E05               	movlw	5
  4863  001C58  6E11               	movwf	(??_calibrate_white+1)^0,c
  4864  001C5A  0E0F               	movlw	15
  4865  001C5C  6E10               	movwf	??_calibrate_white^0,c
  4866  001C5E  0EF1               	movlw	241
  4867  001C60                     u1957:
  4868  001C60  2EE8               	decfsz	wreg,f,c
  4869  001C62  D7FE               	bra	u1957
  4870  001C64  2E10               	decfsz	??_calibrate_white^0,f,c
  4871  001C66  D7FC               	bra	u1957
  4872  001C68  2E11               	decfsz	(??_calibrate_white+1)^0,f,c
  4873  001C6A  D7FA               	bra	u1957
  4874  001C6C  F000               	nop	
  4875  001C6E  0012               	return		;funcret
  4876  001C70                     __end_of_calibrate_white:
  4877                           	callstack 0
  4878                           
  4879 ;; *************** function _read_color *****************
  4880 ;; Defined at:
  4881 ;;		line 89 in file "color.c"
  4882 ;; Parameters:    Size  Location     Type
  4883 ;;  m               2   11[COMRAM] PTR struct color_rgb
  4884 ;;		 -> main@rgb(8), main@white(18), 
  4885 ;; Auto vars:     Size  Location     Type
  4886 ;;		None
  4887 ;; Return value:  Size  Location     Type
  4888 ;;                  1    wreg      void 
  4889 ;; Registers used:
  4890 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4891 ;; Tracked objects:
  4892 ;;		On entry : 0/0
  4893 ;;		On exit  : 0/0
  4894 ;;		Unchanged: 0/0
  4895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4896 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4897 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4898 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4899 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4900 ;;Total ram usage:        2 bytes
  4901 ;; Hardware stack levels used: 1
  4902 ;; Hardware stack levels required when called: 3
  4903 ;; This function calls:
  4904 ;;		_color_read_Blue
  4905 ;;		_color_read_Clear
  4906 ;;		_color_read_Green
  4907 ;;		_color_read_Red
  4908 ;; This function is called by:
  4909 ;;		_calibrate_white
  4910 ;;		_detect_color
  4911 ;;		_main
  4912 ;; This function uses a non-reentrant model
  4913 ;;
  4914                           
  4915                           	psect	text29
  4916  00223A                     __ptext29:
  4917                           	callstack 0
  4918  00223A                     _read_color:
  4919                           	callstack 27
  4920  00223A                     
  4921                           ;color.c: 89: void read_color (struct color_rgb *m);color.c: 90: {;color.c: 91:     m->R
      +                           = color_read_Red();
  4922  00223A  EC75  F011         	call	_color_read_Red	;wreg free
  4923  00223E  C00C  FFD9         	movff	read_color@m,fsr2l
  4924  002242  C00D  FFDA         	movff	read_color@m+1,fsr2h
  4925  002246  C005  FFDE         	movff	?_color_read_Red,postinc2
  4926  00224A  C006  FFDD         	movff	?_color_read_Red+1,postdec2
  4927                           
  4928                           ;color.c: 92:     m->B = color_read_Blue();
  4929  00224E  ECED  F011         	call	_color_read_Blue	;wreg free
  4930  002252  EE20 F004          	lfsr	2,4
  4931  002256  500C               	movf	read_color@m^0,w,c
  4932  002258  26D9               	addwf	fsr2l,f,c
  4933  00225A  500D               	movf	(read_color@m+1)^0,w,c
  4934  00225C  22DA               	addwfc	fsr2h,f,c
  4935  00225E  C005  FFDE         	movff	?_color_read_Blue,postinc2
  4936  002262  C006  FFDD         	movff	?_color_read_Blue+1,postdec2
  4937                           
  4938                           ;color.c: 93:     m->G = color_read_Green();
  4939  002266  EC9D  F011         	call	_color_read_Green	;wreg free
  4940  00226A  EE20 F002          	lfsr	2,2
  4941  00226E  500C               	movf	read_color@m^0,w,c
  4942  002270  26D9               	addwf	fsr2l,f,c
  4943  002272  500D               	movf	(read_color@m+1)^0,w,c
  4944  002274  22DA               	addwfc	fsr2h,f,c
  4945  002276  C005  FFDE         	movff	?_color_read_Green,postinc2
  4946  00227A  C006  FFDD         	movff	?_color_read_Green+1,postdec2
  4947                           
  4948                           ;color.c: 94:     m->C = color_read_Clear();
  4949  00227E  ECC5  F011         	call	_color_read_Clear	;wreg free
  4950  002282  EE20 F006          	lfsr	2,6
  4951  002286  500C               	movf	read_color@m^0,w,c
  4952  002288  26D9               	addwf	fsr2l,f,c
  4953  00228A  500D               	movf	(read_color@m+1)^0,w,c
  4954  00228C  22DA               	addwfc	fsr2h,f,c
  4955  00228E  C005  FFDE         	movff	?_color_read_Clear,postinc2
  4956  002292  C006  FFDD         	movff	?_color_read_Clear+1,postdec2
  4957  002296  0012               	return		;funcret
  4958  002298                     __end_of_read_color:
  4959                           	callstack 0
  4960                           
  4961 ;; *************** function _color_read_Red *****************
  4962 ;; Defined at:
  4963 ;;		line 33 in file "color.c"
  4964 ;; Parameters:    Size  Location     Type
  4965 ;;		None
  4966 ;; Auto vars:     Size  Location     Type
  4967 ;;  tmp             2    9[COMRAM] unsigned int 
  4968 ;; Return value:  Size  Location     Type
  4969 ;;                  2    4[COMRAM] unsigned int 
  4970 ;; Registers used:
  4971 ;;		wreg, status,2, status,0, cstack
  4972 ;; Tracked objects:
  4973 ;;		On entry : 0/0
  4974 ;;		On exit  : 0/0
  4975 ;;		Unchanged: 0/0
  4976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4977 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4978 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4979 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4980 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4981 ;;Total ram usage:        7 bytes
  4982 ;; Hardware stack levels used: 1
  4983 ;; Hardware stack levels required when called: 2
  4984 ;; This function calls:
  4985 ;;		_I2C_2_Master_Read
  4986 ;;		_I2C_2_Master_RepStart
  4987 ;;		_I2C_2_Master_Start
  4988 ;;		_I2C_2_Master_Stop
  4989 ;;		_I2C_2_Master_Write
  4990 ;; This function is called by:
  4991 ;;		_read_color
  4992 ;;		_calibrate_white
  4993 ;; This function uses a non-reentrant model
  4994 ;;
  4995                           
  4996                           	psect	text30
  4997  0022EA                     __ptext30:
  4998                           	callstack 0
  4999  0022EA                     _color_read_Red:
  5000                           	callstack 27
  5001  0022EA                     
  5002                           ;color.c: 35:  unsigned int tmp;;color.c: 36:  I2C_2_Master_Start();
  5003  0022EA  ECD2  F013         	call	_I2C_2_Master_Start	;wreg free
  5004                           
  5005                           ;color.c: 37:  I2C_2_Master_Write(0x52 | 0x00);
  5006  0022EE  0E52               	movlw	82
  5007  0022F0  ECC7  F013         	call	_I2C_2_Master_Write
  5008                           
  5009                           ;color.c: 38:  I2C_2_Master_Write(0xA0 | 0x16);
  5010  0022F4  0EB6               	movlw	182
  5011  0022F6  ECC7  F013         	call	_I2C_2_Master_Write
  5012                           
  5013                           ;color.c: 39:  I2C_2_Master_RepStart();
  5014  0022FA  ECD7  F013         	call	_I2C_2_Master_RepStart	;wreg free
  5015                           
  5016                           ;color.c: 40:  I2C_2_Master_Write(0x52 | 0x01);
  5017  0022FE  0E53               	movlw	83
  5018  002300  ECC7  F013         	call	_I2C_2_Master_Write
  5019                           
  5020                           ;color.c: 41:  tmp=I2C_2_Master_Read(1);
  5021  002304  0E01               	movlw	1
  5022  002306  EC58  F012         	call	_I2C_2_Master_Read
  5023  00230A  6E07               	movwf	??_color_read_Red^0,c
  5024  00230C  5007               	movf	??_color_read_Red^0,w,c
  5025  00230E  6E0A               	movwf	color_read_Red@tmp^0,c
  5026  002310  6A0B               	clrf	(color_read_Red@tmp+1)^0,c
  5027                           
  5028                           ;color.c: 42:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5029  002312  0E00               	movlw	0
  5030  002314  EC58  F012         	call	_I2C_2_Master_Read
  5031  002318  6E07               	movwf	??_color_read_Red^0,c
  5032  00231A  5007               	movf	??_color_read_Red^0,w,c
  5033  00231C  6E09               	movwf	(??_color_read_Red+2)^0,c
  5034  00231E  6A08               	clrf	(??_color_read_Red+1)^0,c
  5035  002320  500A               	movf	color_read_Red@tmp^0,w,c
  5036  002322  1008               	iorwf	(??_color_read_Red+1)^0,w,c
  5037  002324  6E0A               	movwf	color_read_Red@tmp^0,c
  5038  002326  500B               	movf	(color_read_Red@tmp+1)^0,w,c
  5039  002328  1009               	iorwf	(??_color_read_Red+2)^0,w,c
  5040  00232A  6E0B               	movwf	(color_read_Red@tmp+1)^0,c
  5041                           
  5042                           ;color.c: 43:  I2C_2_Master_Stop();
  5043  00232C  ECCD  F013         	call	_I2C_2_Master_Stop	;wreg free
  5044  002330                     
  5045                           ;color.c: 44:  return tmp;
  5046  002330  C00A  F005         	movff	color_read_Red@tmp,?_color_read_Red
  5047  002334  C00B  F006         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  5048  002338  0012               	return		;funcret
  5049  00233A                     __end_of_color_read_Red:
  5050                           	callstack 0
  5051                           
  5052 ;; *************** function _color_read_Green *****************
  5053 ;; Defined at:
  5054 ;;		line 61 in file "color.c"
  5055 ;; Parameters:    Size  Location     Type
  5056 ;;		None
  5057 ;; Auto vars:     Size  Location     Type
  5058 ;;  tmp             2    9[COMRAM] unsigned int 
  5059 ;; Return value:  Size  Location     Type
  5060 ;;                  2    4[COMRAM] unsigned int 
  5061 ;; Registers used:
  5062 ;;		wreg, status,2, status,0, cstack
  5063 ;; Tracked objects:
  5064 ;;		On entry : 0/0
  5065 ;;		On exit  : 0/0
  5066 ;;		Unchanged: 0/0
  5067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5068 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5069 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5070 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5071 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5072 ;;Total ram usage:        7 bytes
  5073 ;; Hardware stack levels used: 1
  5074 ;; Hardware stack levels required when called: 2
  5075 ;; This function calls:
  5076 ;;		_I2C_2_Master_Read
  5077 ;;		_I2C_2_Master_RepStart
  5078 ;;		_I2C_2_Master_Start
  5079 ;;		_I2C_2_Master_Stop
  5080 ;;		_I2C_2_Master_Write
  5081 ;; This function is called by:
  5082 ;;		_read_color
  5083 ;;		_calibrate_white
  5084 ;; This function uses a non-reentrant model
  5085 ;;
  5086                           
  5087                           	psect	text31
  5088  00233A                     __ptext31:
  5089                           	callstack 0
  5090  00233A                     _color_read_Green:
  5091                           	callstack 27
  5092  00233A                     
  5093                           ;color.c: 63:  unsigned int tmp;;color.c: 64:  I2C_2_Master_Start();
  5094  00233A  ECD2  F013         	call	_I2C_2_Master_Start	;wreg free
  5095                           
  5096                           ;color.c: 65:  I2C_2_Master_Write(0x52 | 0x00);
  5097  00233E  0E52               	movlw	82
  5098  002340  ECC7  F013         	call	_I2C_2_Master_Write
  5099                           
  5100                           ;color.c: 66:  I2C_2_Master_Write(0xA0 | 0x18);
  5101  002344  0EB8               	movlw	184
  5102  002346  ECC7  F013         	call	_I2C_2_Master_Write
  5103                           
  5104                           ;color.c: 67:  I2C_2_Master_RepStart();
  5105  00234A  ECD7  F013         	call	_I2C_2_Master_RepStart	;wreg free
  5106                           
  5107                           ;color.c: 68:  I2C_2_Master_Write(0x52 | 0x01);
  5108  00234E  0E53               	movlw	83
  5109  002350  ECC7  F013         	call	_I2C_2_Master_Write
  5110                           
  5111                           ;color.c: 69:  tmp=I2C_2_Master_Read(1);
  5112  002354  0E01               	movlw	1
  5113  002356  EC58  F012         	call	_I2C_2_Master_Read
  5114  00235A  6E07               	movwf	??_color_read_Green^0,c
  5115  00235C  5007               	movf	??_color_read_Green^0,w,c
  5116  00235E  6E0A               	movwf	color_read_Green@tmp^0,c
  5117  002360  6A0B               	clrf	(color_read_Green@tmp+1)^0,c
  5118                           
  5119                           ;color.c: 70:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5120  002362  0E00               	movlw	0
  5121  002364  EC58  F012         	call	_I2C_2_Master_Read
  5122  002368  6E07               	movwf	??_color_read_Green^0,c
  5123  00236A  5007               	movf	??_color_read_Green^0,w,c
  5124  00236C  6E09               	movwf	(??_color_read_Green+2)^0,c
  5125  00236E  6A08               	clrf	(??_color_read_Green+1)^0,c
  5126  002370  500A               	movf	color_read_Green@tmp^0,w,c
  5127  002372  1008               	iorwf	(??_color_read_Green+1)^0,w,c
  5128  002374  6E0A               	movwf	color_read_Green@tmp^0,c
  5129  002376  500B               	movf	(color_read_Green@tmp+1)^0,w,c
  5130  002378  1009               	iorwf	(??_color_read_Green+2)^0,w,c
  5131  00237A  6E0B               	movwf	(color_read_Green@tmp+1)^0,c
  5132                           
  5133                           ;color.c: 71:  I2C_2_Master_Stop();
  5134  00237C  ECCD  F013         	call	_I2C_2_Master_Stop	;wreg free
  5135  002380                     
  5136                           ;color.c: 72:  return tmp;
  5137  002380  C00A  F005         	movff	color_read_Green@tmp,?_color_read_Green
  5138  002384  C00B  F006         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  5139  002388  0012               	return		;funcret
  5140  00238A                     __end_of_color_read_Green:
  5141                           	callstack 0
  5142                           
  5143 ;; *************** function _color_read_Clear *****************
  5144 ;; Defined at:
  5145 ;;		line 75 in file "color.c"
  5146 ;; Parameters:    Size  Location     Type
  5147 ;;		None
  5148 ;; Auto vars:     Size  Location     Type
  5149 ;;  tmp             2    9[COMRAM] unsigned int 
  5150 ;; Return value:  Size  Location     Type
  5151 ;;                  2    4[COMRAM] unsigned int 
  5152 ;; Registers used:
  5153 ;;		wreg, status,2, status,0, cstack
  5154 ;; Tracked objects:
  5155 ;;		On entry : 0/0
  5156 ;;		On exit  : 0/0
  5157 ;;		Unchanged: 0/0
  5158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5159 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5160 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5161 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5162 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5163 ;;Total ram usage:        7 bytes
  5164 ;; Hardware stack levels used: 1
  5165 ;; Hardware stack levels required when called: 2
  5166 ;; This function calls:
  5167 ;;		_I2C_2_Master_Read
  5168 ;;		_I2C_2_Master_RepStart
  5169 ;;		_I2C_2_Master_Start
  5170 ;;		_I2C_2_Master_Stop
  5171 ;;		_I2C_2_Master_Write
  5172 ;; This function is called by:
  5173 ;;		_read_color
  5174 ;; This function uses a non-reentrant model
  5175 ;;
  5176                           
  5177                           	psect	text32
  5178  00238A                     __ptext32:
  5179                           	callstack 0
  5180  00238A                     _color_read_Clear:
  5181                           	callstack 27
  5182  00238A                     
  5183                           ;color.c: 77:  unsigned int tmp;;color.c: 78:  I2C_2_Master_Start();
  5184  00238A  ECD2  F013         	call	_I2C_2_Master_Start	;wreg free
  5185                           
  5186                           ;color.c: 79:  I2C_2_Master_Write(0x52 | 0x00);
  5187  00238E  0E52               	movlw	82
  5188  002390  ECC7  F013         	call	_I2C_2_Master_Write
  5189                           
  5190                           ;color.c: 80:  I2C_2_Master_Write(0xA0 | 0x14);
  5191  002394  0EB4               	movlw	180
  5192  002396  ECC7  F013         	call	_I2C_2_Master_Write
  5193                           
  5194                           ;color.c: 81:  I2C_2_Master_RepStart();
  5195  00239A  ECD7  F013         	call	_I2C_2_Master_RepStart	;wreg free
  5196                           
  5197                           ;color.c: 82:  I2C_2_Master_Write(0x52 | 0x01);
  5198  00239E  0E53               	movlw	83
  5199  0023A0  ECC7  F013         	call	_I2C_2_Master_Write
  5200                           
  5201                           ;color.c: 83:  tmp=I2C_2_Master_Read(1);
  5202  0023A4  0E01               	movlw	1
  5203  0023A6  EC58  F012         	call	_I2C_2_Master_Read
  5204  0023AA  6E07               	movwf	??_color_read_Clear^0,c
  5205  0023AC  5007               	movf	??_color_read_Clear^0,w,c
  5206  0023AE  6E0A               	movwf	color_read_Clear@tmp^0,c
  5207  0023B0  6A0B               	clrf	(color_read_Clear@tmp+1)^0,c
  5208                           
  5209                           ;color.c: 84:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5210  0023B2  0E00               	movlw	0
  5211  0023B4  EC58  F012         	call	_I2C_2_Master_Read
  5212  0023B8  6E07               	movwf	??_color_read_Clear^0,c
  5213  0023BA  5007               	movf	??_color_read_Clear^0,w,c
  5214  0023BC  6E09               	movwf	(??_color_read_Clear+2)^0,c
  5215  0023BE  6A08               	clrf	(??_color_read_Clear+1)^0,c
  5216  0023C0  500A               	movf	color_read_Clear@tmp^0,w,c
  5217  0023C2  1008               	iorwf	(??_color_read_Clear+1)^0,w,c
  5218  0023C4  6E0A               	movwf	color_read_Clear@tmp^0,c
  5219  0023C6  500B               	movf	(color_read_Clear@tmp+1)^0,w,c
  5220  0023C8  1009               	iorwf	(??_color_read_Clear+2)^0,w,c
  5221  0023CA  6E0B               	movwf	(color_read_Clear@tmp+1)^0,c
  5222                           
  5223                           ;color.c: 85:  I2C_2_Master_Stop();
  5224  0023CC  ECCD  F013         	call	_I2C_2_Master_Stop	;wreg free
  5225  0023D0                     
  5226                           ;color.c: 86:  return tmp;
  5227  0023D0  C00A  F005         	movff	color_read_Clear@tmp,?_color_read_Clear
  5228  0023D4  C00B  F006         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
  5229  0023D8  0012               	return		;funcret
  5230  0023DA                     __end_of_color_read_Clear:
  5231                           	callstack 0
  5232                           
  5233 ;; *************** function _color_read_Blue *****************
  5234 ;; Defined at:
  5235 ;;		line 47 in file "color.c"
  5236 ;; Parameters:    Size  Location     Type
  5237 ;;		None
  5238 ;; Auto vars:     Size  Location     Type
  5239 ;;  tmp             2    9[COMRAM] unsigned int 
  5240 ;; Return value:  Size  Location     Type
  5241 ;;                  2    4[COMRAM] unsigned int 
  5242 ;; Registers used:
  5243 ;;		wreg, status,2, status,0, cstack
  5244 ;; Tracked objects:
  5245 ;;		On entry : 0/0
  5246 ;;		On exit  : 0/0
  5247 ;;		Unchanged: 0/0
  5248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5249 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5250 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5251 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5252 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5253 ;;Total ram usage:        7 bytes
  5254 ;; Hardware stack levels used: 1
  5255 ;; Hardware stack levels required when called: 2
  5256 ;; This function calls:
  5257 ;;		_I2C_2_Master_Read
  5258 ;;		_I2C_2_Master_RepStart
  5259 ;;		_I2C_2_Master_Start
  5260 ;;		_I2C_2_Master_Stop
  5261 ;;		_I2C_2_Master_Write
  5262 ;; This function is called by:
  5263 ;;		_read_color
  5264 ;;		_calibrate_white
  5265 ;; This function uses a non-reentrant model
  5266 ;;
  5267                           
  5268                           	psect	text33
  5269  0023DA                     __ptext33:
  5270                           	callstack 0
  5271  0023DA                     _color_read_Blue:
  5272                           	callstack 27
  5273  0023DA                     
  5274                           ;color.c: 49:  unsigned int tmp;;color.c: 50:  I2C_2_Master_Start();
  5275  0023DA  ECD2  F013         	call	_I2C_2_Master_Start	;wreg free
  5276                           
  5277                           ;color.c: 51:  I2C_2_Master_Write(0x52 | 0x00);
  5278  0023DE  0E52               	movlw	82
  5279  0023E0  ECC7  F013         	call	_I2C_2_Master_Write
  5280                           
  5281                           ;color.c: 52:  I2C_2_Master_Write(0xA0 | 0x1A);
  5282  0023E4  0EBA               	movlw	186
  5283  0023E6  ECC7  F013         	call	_I2C_2_Master_Write
  5284                           
  5285                           ;color.c: 53:  I2C_2_Master_RepStart();
  5286  0023EA  ECD7  F013         	call	_I2C_2_Master_RepStart	;wreg free
  5287                           
  5288                           ;color.c: 54:  I2C_2_Master_Write(0x52 | 0x01);
  5289  0023EE  0E53               	movlw	83
  5290  0023F0  ECC7  F013         	call	_I2C_2_Master_Write
  5291                           
  5292                           ;color.c: 55:  tmp=I2C_2_Master_Read(1);
  5293  0023F4  0E01               	movlw	1
  5294  0023F6  EC58  F012         	call	_I2C_2_Master_Read
  5295  0023FA  6E07               	movwf	??_color_read_Blue^0,c
  5296  0023FC  5007               	movf	??_color_read_Blue^0,w,c
  5297  0023FE  6E0A               	movwf	color_read_Blue@tmp^0,c
  5298  002400  6A0B               	clrf	(color_read_Blue@tmp+1)^0,c
  5299                           
  5300                           ;color.c: 56:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5301  002402  0E00               	movlw	0
  5302  002404  EC58  F012         	call	_I2C_2_Master_Read
  5303  002408  6E07               	movwf	??_color_read_Blue^0,c
  5304  00240A  5007               	movf	??_color_read_Blue^0,w,c
  5305  00240C  6E09               	movwf	(??_color_read_Blue+2)^0,c
  5306  00240E  6A08               	clrf	(??_color_read_Blue+1)^0,c
  5307  002410  500A               	movf	color_read_Blue@tmp^0,w,c
  5308  002412  1008               	iorwf	(??_color_read_Blue+1)^0,w,c
  5309  002414  6E0A               	movwf	color_read_Blue@tmp^0,c
  5310  002416  500B               	movf	(color_read_Blue@tmp+1)^0,w,c
  5311  002418  1009               	iorwf	(??_color_read_Blue+2)^0,w,c
  5312  00241A  6E0B               	movwf	(color_read_Blue@tmp+1)^0,c
  5313                           
  5314                           ;color.c: 57:  I2C_2_Master_Stop();
  5315  00241C  ECCD  F013         	call	_I2C_2_Master_Stop	;wreg free
  5316  002420                     
  5317                           ;color.c: 58:  return tmp;
  5318  002420  C00A  F005         	movff	color_read_Blue@tmp,?_color_read_Blue
  5319  002424  C00B  F006         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  5320  002428  0012               	return		;funcret
  5321  00242A                     __end_of_color_read_Blue:
  5322                           	callstack 0
  5323                           
  5324 ;; *************** function _I2C_2_Master_Write *****************
  5325 ;; Defined at:
  5326 ;;		line 45 in file "i2c.c"
  5327 ;; Parameters:    Size  Location     Type
  5328 ;;  data_byte       1    wreg     unsigned char 
  5329 ;; Auto vars:     Size  Location     Type
  5330 ;;  data_byte       1    1[COMRAM] unsigned char 
  5331 ;; Return value:  Size  Location     Type
  5332 ;;                  1    wreg      void 
  5333 ;; Registers used:
  5334 ;;		wreg, status,2, status,0, cstack
  5335 ;; Tracked objects:
  5336 ;;		On entry : 0/0
  5337 ;;		On exit  : 0/0
  5338 ;;		Unchanged: 0/0
  5339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5341 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5343 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5344 ;;Total ram usage:        1 bytes
  5345 ;; Hardware stack levels used: 1
  5346 ;; Hardware stack levels required when called: 1
  5347 ;; This function calls:
  5348 ;;		_I2C_2_Master_Idle
  5349 ;; This function is called by:
  5350 ;;		_color_writetoaddr
  5351 ;;		_color_read_Red
  5352 ;;		_color_read_Blue
  5353 ;;		_color_read_Green
  5354 ;;		_color_read_Clear
  5355 ;; This function uses a non-reentrant model
  5356 ;;
  5357                           
  5358                           	psect	text34
  5359  00278E                     __ptext34:
  5360                           	callstack 0
  5361  00278E                     _I2C_2_Master_Write:
  5362                           	callstack 27
  5363                           
  5364                           ;incstack = 0
  5365                           ;I2C_2_Master_Write@data_byte stored from wreg
  5366  00278E  6E02               	movwf	I2C_2_Master_Write@data_byte^0,c
  5367  002790                     
  5368                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  5369  002790  EC35  F013         	call	_I2C_2_Master_Idle	;wreg free
  5370  002794                     
  5371                           ;i2c.c: 48:   SSP2BUF = data_byte;
  5372  002794  C002  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  5373  002798  0012               	return		;funcret
  5374  00279A                     __end_of_I2C_2_Master_Write:
  5375                           	callstack 0
  5376                           
  5377 ;; *************** function _I2C_2_Master_Stop *****************
  5378 ;; Defined at:
  5379 ;;		line 39 in file "i2c.c"
  5380 ;; Parameters:    Size  Location     Type
  5381 ;;		None
  5382 ;; Auto vars:     Size  Location     Type
  5383 ;;		None
  5384 ;; Return value:  Size  Location     Type
  5385 ;;                  1    wreg      void 
  5386 ;; Registers used:
  5387 ;;		wreg, status,2, status,0, cstack
  5388 ;; Tracked objects:
  5389 ;;		On entry : 0/0
  5390 ;;		On exit  : 0/0
  5391 ;;		Unchanged: 0/0
  5392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5394 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5395 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5396 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5397 ;;Total ram usage:        0 bytes
  5398 ;; Hardware stack levels used: 1
  5399 ;; Hardware stack levels required when called: 1
  5400 ;; This function calls:
  5401 ;;		_I2C_2_Master_Idle
  5402 ;; This function is called by:
  5403 ;;		_color_writetoaddr
  5404 ;;		_color_read_Red
  5405 ;;		_color_read_Blue
  5406 ;;		_color_read_Green
  5407 ;;		_color_read_Clear
  5408 ;; This function uses a non-reentrant model
  5409 ;;
  5410                           
  5411                           	psect	text35
  5412  00279A                     __ptext35:
  5413                           	callstack 0
  5414  00279A                     _I2C_2_Master_Stop:
  5415                           	callstack 27
  5416  00279A                     
  5417                           ;i2c.c: 41:   I2C_2_Master_Idle();
  5418  00279A  EC35  F013         	call	_I2C_2_Master_Idle	;wreg free
  5419  00279E                     
  5420                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  5421  00279E  010E               	movlb	14	; () banked
  5422  0027A0  85DA               	bsf	218,2,b	;volatile
  5423  0027A2                     
  5424                           ; BSR set to: 14
  5425  0027A2  0012               	return		;funcret
  5426  0027A4                     __end_of_I2C_2_Master_Stop:
  5427                           	callstack 0
  5428                           
  5429 ;; *************** function _I2C_2_Master_Start *****************
  5430 ;; Defined at:
  5431 ;;		line 27 in file "i2c.c"
  5432 ;; Parameters:    Size  Location     Type
  5433 ;;		None
  5434 ;; Auto vars:     Size  Location     Type
  5435 ;;		None
  5436 ;; Return value:  Size  Location     Type
  5437 ;;                  1    wreg      void 
  5438 ;; Registers used:
  5439 ;;		wreg, status,2, status,0, cstack
  5440 ;; Tracked objects:
  5441 ;;		On entry : 0/0
  5442 ;;		On exit  : 0/0
  5443 ;;		Unchanged: 0/0
  5444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5445 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5446 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5447 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5448 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5449 ;;Total ram usage:        0 bytes
  5450 ;; Hardware stack levels used: 1
  5451 ;; Hardware stack levels required when called: 1
  5452 ;; This function calls:
  5453 ;;		_I2C_2_Master_Idle
  5454 ;; This function is called by:
  5455 ;;		_color_writetoaddr
  5456 ;;		_color_read_Red
  5457 ;;		_color_read_Blue
  5458 ;;		_color_read_Green
  5459 ;;		_color_read_Clear
  5460 ;; This function uses a non-reentrant model
  5461 ;;
  5462                           
  5463                           	psect	text36
  5464  0027A4                     __ptext36:
  5465                           	callstack 0
  5466  0027A4                     _I2C_2_Master_Start:
  5467                           	callstack 27
  5468  0027A4                     
  5469                           ;i2c.c: 29:   I2C_2_Master_Idle();
  5470  0027A4  EC35  F013         	call	_I2C_2_Master_Idle	;wreg free
  5471  0027A8                     
  5472                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  5473  0027A8  010E               	movlb	14	; () banked
  5474  0027AA  81DA               	bsf	218,0,b	;volatile
  5475  0027AC                     
  5476                           ; BSR set to: 14
  5477  0027AC  0012               	return		;funcret
  5478  0027AE                     __end_of_I2C_2_Master_Start:
  5479                           	callstack 0
  5480                           
  5481 ;; *************** function _I2C_2_Master_RepStart *****************
  5482 ;; Defined at:
  5483 ;;		line 33 in file "i2c.c"
  5484 ;; Parameters:    Size  Location     Type
  5485 ;;		None
  5486 ;; Auto vars:     Size  Location     Type
  5487 ;;		None
  5488 ;; Return value:  Size  Location     Type
  5489 ;;                  1    wreg      void 
  5490 ;; Registers used:
  5491 ;;		wreg, status,2, status,0, cstack
  5492 ;; Tracked objects:
  5493 ;;		On entry : 0/0
  5494 ;;		On exit  : 0/0
  5495 ;;		Unchanged: 0/0
  5496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5497 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5498 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5499 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5500 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5501 ;;Total ram usage:        0 bytes
  5502 ;; Hardware stack levels used: 1
  5503 ;; Hardware stack levels required when called: 1
  5504 ;; This function calls:
  5505 ;;		_I2C_2_Master_Idle
  5506 ;; This function is called by:
  5507 ;;		_color_read_Red
  5508 ;;		_color_read_Blue
  5509 ;;		_color_read_Green
  5510 ;;		_color_read_Clear
  5511 ;; This function uses a non-reentrant model
  5512 ;;
  5513                           
  5514                           	psect	text37
  5515  0027AE                     __ptext37:
  5516                           	callstack 0
  5517  0027AE                     _I2C_2_Master_RepStart:
  5518                           	callstack 27
  5519  0027AE                     
  5520                           ;i2c.c: 35:   I2C_2_Master_Idle();
  5521  0027AE  EC35  F013         	call	_I2C_2_Master_Idle	;wreg free
  5522  0027B2                     
  5523                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  5524  0027B2  010E               	movlb	14	; () banked
  5525  0027B4  83DA               	bsf	218,1,b	;volatile
  5526  0027B6                     
  5527                           ; BSR set to: 14
  5528  0027B6  0012               	return		;funcret
  5529  0027B8                     __end_of_I2C_2_Master_RepStart:
  5530                           	callstack 0
  5531                           
  5532 ;; *************** function _I2C_2_Master_Read *****************
  5533 ;; Defined at:
  5534 ;;		line 51 in file "i2c.c"
  5535 ;; Parameters:    Size  Location     Type
  5536 ;;  ack             1    wreg     unsigned char 
  5537 ;; Auto vars:     Size  Location     Type
  5538 ;;  ack             1    2[COMRAM] unsigned char 
  5539 ;;  tmp             1    3[COMRAM] unsigned char 
  5540 ;; Return value:  Size  Location     Type
  5541 ;;                  1    wreg      unsigned char 
  5542 ;; Registers used:
  5543 ;;		wreg, status,2, status,0, cstack
  5544 ;; Tracked objects:
  5545 ;;		On entry : 0/0
  5546 ;;		On exit  : 0/0
  5547 ;;		Unchanged: 0/0
  5548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5550 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5551 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5552 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5553 ;;Total ram usage:        3 bytes
  5554 ;; Hardware stack levels used: 1
  5555 ;; Hardware stack levels required when called: 1
  5556 ;; This function calls:
  5557 ;;		_I2C_2_Master_Idle
  5558 ;; This function is called by:
  5559 ;;		_color_read_Red
  5560 ;;		_color_read_Blue
  5561 ;;		_color_read_Green
  5562 ;;		_color_read_Clear
  5563 ;; This function uses a non-reentrant model
  5564 ;;
  5565                           
  5566                           	psect	text38
  5567  0024B0                     __ptext38:
  5568                           	callstack 0
  5569  0024B0                     _I2C_2_Master_Read:
  5570                           	callstack 27
  5571                           
  5572                           ; BSR set to: 14
  5573                           ;incstack = 0
  5574                           ;I2C_2_Master_Read@ack stored from wreg
  5575  0024B0  6E03               	movwf	I2C_2_Master_Read@ack^0,c
  5576  0024B2                     
  5577                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  5578  0024B2  EC35  F013         	call	_I2C_2_Master_Idle	;wreg free
  5579  0024B6                     
  5580                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  5581  0024B6  010E               	movlb	14	; () banked
  5582  0024B8  87DA               	bsf	218,3,b	;volatile
  5583                           
  5584                           ;i2c.c: 56:   I2C_2_Master_Idle();
  5585  0024BA  EC35  F013         	call	_I2C_2_Master_Idle	;wreg free
  5586  0024BE                     
  5587                           ;i2c.c: 57:   tmp = SSP2BUF;
  5588  0024BE  CED5 F004          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  5589                           
  5590                           ;i2c.c: 58:   I2C_2_Master_Idle();
  5591  0024C2  EC35  F013         	call	_I2C_2_Master_Idle	;wreg free
  5592  0024C6                     
  5593                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  5594  0024C6  5003               	movf	I2C_2_Master_Read@ack^0,w,c
  5595  0024C8  B4D8               	btfsc	status,2,c
  5596  0024CA  EF69  F012         	goto	u1371
  5597  0024CE  EF6D  F012         	goto	u1370
  5598  0024D2                     u1371:
  5599  0024D2  6A02               	clrf	??_I2C_2_Master_Read^0,c
  5600  0024D4  2A02               	incf	??_I2C_2_Master_Read^0,f,c
  5601  0024D6  EF6E  F012         	goto	u1388
  5602  0024DA                     u1370:
  5603  0024DA  6A02               	clrf	??_I2C_2_Master_Read^0,c
  5604  0024DC                     u1388:
  5605  0024DC  3A02               	swapf	??_I2C_2_Master_Read^0,f,c
  5606  0024DE  4602               	rlncf	??_I2C_2_Master_Read^0,f,c
  5607  0024E0  010E               	movlb	14	; () banked
  5608  0024E2  51DA               	movf	218,w,b	;volatile
  5609  0024E4  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  5610  0024E6  0BDF               	andlw	-33
  5611  0024E8  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  5612  0024EA  6FDA               	movwf	218,b	;volatile
  5613  0024EC                     
  5614                           ; BSR set to: 14
  5615                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  5616  0024EC  89DA               	bsf	218,4,b	;volatile
  5617  0024EE                     
  5618                           ; BSR set to: 14
  5619                           ;i2c.c: 61:   return tmp;
  5620  0024EE  5004               	movf	I2C_2_Master_Read@tmp^0,w,c
  5621  0024F0                     
  5622                           ; BSR set to: 14
  5623  0024F0  0012               	return		;funcret
  5624  0024F2                     __end_of_I2C_2_Master_Read:
  5625                           	callstack 0
  5626                           
  5627 ;; *************** function _I2C_2_Master_Idle *****************
  5628 ;; Defined at:
  5629 ;;		line 22 in file "i2c.c"
  5630 ;; Parameters:    Size  Location     Type
  5631 ;;		None
  5632 ;; Auto vars:     Size  Location     Type
  5633 ;;		None
  5634 ;; Return value:  Size  Location     Type
  5635 ;;                  1    wreg      void 
  5636 ;; Registers used:
  5637 ;;		wreg, status,2, status,0
  5638 ;; Tracked objects:
  5639 ;;		On entry : 0/0
  5640 ;;		On exit  : 0/0
  5641 ;;		Unchanged: 0/0
  5642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5643 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5644 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5645 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5646 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5647 ;;Total ram usage:        1 bytes
  5648 ;; Hardware stack levels used: 1
  5649 ;; This function calls:
  5650 ;;		Nothing
  5651 ;; This function is called by:
  5652 ;;		_I2C_2_Master_Start
  5653 ;;		_I2C_2_Master_RepStart
  5654 ;;		_I2C_2_Master_Stop
  5655 ;;		_I2C_2_Master_Write
  5656 ;;		_I2C_2_Master_Read
  5657 ;; This function uses a non-reentrant model
  5658 ;;
  5659                           
  5660                           	psect	text39
  5661  00266A                     __ptext39:
  5662                           	callstack 0
  5663  00266A                     _I2C_2_Master_Idle:
  5664                           	callstack 27
  5665  00266A                     l155:
  5666  00266A  010E               	movlb	14	; () banked
  5667  00266C  B5D8               	btfsc	216,2,b	;volatile
  5668  00266E  EF3B  F013         	goto	u1201
  5669  002672  EF3D  F013         	goto	u1200
  5670  002676                     u1201:
  5671  002676  EF35  F013         	goto	l155
  5672  00267A                     u1200:
  5673  00267A                     
  5674                           ; BSR set to: 14
  5675  00267A  CEDA F001          	movff	3802,??_I2C_2_Master_Idle	;volatile
  5676  00267E  0E1F               	movlw	31
  5677  002680  1601               	andwf	??_I2C_2_Master_Idle^0,f,c
  5678  002682  A4D8               	btfss	status,2,c
  5679  002684  EF46  F013         	goto	u1211
  5680  002688  EF48  F013         	goto	u1210
  5681  00268C                     u1211:
  5682  00268C  EF35  F013         	goto	l155
  5683  002690                     u1210:
  5684  002690                     
  5685                           ; BSR set to: 14
  5686  002690  0012               	return		;funcret
  5687  002692                     __end_of_I2C_2_Master_Idle:
  5688                           	callstack 0
  5689                           
  5690 ;; *************** function _LED_R *****************
  5691 ;; Defined at:
  5692 ;;		line 97 in file "color.c"
  5693 ;; Parameters:    Size  Location     Type
  5694 ;;		None
  5695 ;; Auto vars:     Size  Location     Type
  5696 ;;		None
  5697 ;; Return value:  Size  Location     Type
  5698 ;;                  1    wreg      void 
  5699 ;; Registers used:
  5700 ;;		wreg
  5701 ;; Tracked objects:
  5702 ;;		On entry : 0/0
  5703 ;;		On exit  : 0/0
  5704 ;;		Unchanged: 0/0
  5705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5707 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5708 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5709 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5710 ;;Total ram usage:        2 bytes
  5711 ;; Hardware stack levels used: 1
  5712 ;; This function calls:
  5713 ;;		Nothing
  5714 ;; This function is called by:
  5715 ;;		_calibrate_white
  5716 ;;		_detect_color
  5717 ;;		_main
  5718 ;; This function uses a non-reentrant model
  5719 ;;
  5720                           
  5721                           	psect	text40
  5722  0026D8                     __ptext40:
  5723                           	callstack 0
  5724  0026D8                     _LED_R:
  5725                           	callstack 29
  5726  0026D8                     
  5727                           ;color.c: 99:     LATGbits.LATG1 = 1;
  5728  0026D8  827F               	bsf	127,1,c	;volatile
  5729                           
  5730                           ;color.c: 100:     LATFbits.LATF7 = 0;
  5731  0026DA  9E7E               	bcf	126,7,c	;volatile
  5732                           
  5733                           ;color.c: 101:     LATAbits.LATA4 = 0;
  5734  0026DC  9879               	bcf	121,4,c	;volatile
  5735  0026DE                     
  5736                           ;color.c: 102:     _delay((unsigned long)((200)*(64000000/4000.0)));
  5737  0026DE  0E11               	movlw	17
  5738  0026E0  6E02               	movwf	(??_LED_R+1)^0,c
  5739  0026E2  0E3C               	movlw	60
  5740  0026E4  6E01               	movwf	??_LED_R^0,c
  5741  0026E6  0ECB               	movlw	203
  5742  0026E8                     u1967:
  5743  0026E8  2EE8               	decfsz	wreg,f,c
  5744  0026EA  D7FE               	bra	u1967
  5745  0026EC  2E01               	decfsz	??_LED_R^0,f,c
  5746  0026EE  D7FC               	bra	u1967
  5747  0026F0  2E02               	decfsz	(??_LED_R+1)^0,f,c
  5748  0026F2  D7FA               	bra	u1967
  5749  0026F4  F000               	nop	
  5750  0026F6  0012               	return		;funcret
  5751  0026F8                     __end_of_LED_R:
  5752                           	callstack 0
  5753                           
  5754 ;; *************** function _LED_G *****************
  5755 ;; Defined at:
  5756 ;;		line 124 in file "color.c"
  5757 ;; Parameters:    Size  Location     Type
  5758 ;;		None
  5759 ;; Auto vars:     Size  Location     Type
  5760 ;;		None
  5761 ;; Return value:  Size  Location     Type
  5762 ;;                  1    wreg      void 
  5763 ;; Registers used:
  5764 ;;		wreg
  5765 ;; Tracked objects:
  5766 ;;		On entry : 0/0
  5767 ;;		On exit  : 0/0
  5768 ;;		Unchanged: 0/0
  5769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5770 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5771 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5772 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5773 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5774 ;;Total ram usage:        2 bytes
  5775 ;; Hardware stack levels used: 1
  5776 ;; This function calls:
  5777 ;;		Nothing
  5778 ;; This function is called by:
  5779 ;;		_calibrate_white
  5780 ;;		_detect_color
  5781 ;;		_main
  5782 ;; This function uses a non-reentrant model
  5783 ;;
  5784                           
  5785                           	psect	text41
  5786  0026F8                     __ptext41:
  5787                           	callstack 0
  5788  0026F8                     _LED_G:
  5789                           	callstack 29
  5790  0026F8                     
  5791                           ;color.c: 126:     LATGbits.LATG1 = 0;
  5792  0026F8  927F               	bcf	127,1,c	;volatile
  5793                           
  5794                           ;color.c: 127:     LATFbits.LATF7 = 0;
  5795  0026FA  9E7E               	bcf	126,7,c	;volatile
  5796                           
  5797                           ;color.c: 128:     LATAbits.LATA4 = 1;
  5798  0026FC  8879               	bsf	121,4,c	;volatile
  5799  0026FE                     
  5800                           ;color.c: 129:     _delay((unsigned long)((200)*(64000000/4000.0)));
  5801  0026FE  0E11               	movlw	17
  5802  002700  6E02               	movwf	(??_LED_G+1)^0,c
  5803  002702  0E3C               	movlw	60
  5804  002704  6E01               	movwf	??_LED_G^0,c
  5805  002706  0ECB               	movlw	203
  5806  002708                     u1977:
  5807  002708  2EE8               	decfsz	wreg,f,c
  5808  00270A  D7FE               	bra	u1977
  5809  00270C  2E01               	decfsz	??_LED_G^0,f,c
  5810  00270E  D7FC               	bra	u1977
  5811  002710  2E02               	decfsz	(??_LED_G+1)^0,f,c
  5812  002712  D7FA               	bra	u1977
  5813  002714  F000               	nop	
  5814  002716  0012               	return		;funcret
  5815  002718                     __end_of_LED_G:
  5816                           	callstack 0
  5817                           
  5818 ;; *************** function _LED_B *****************
  5819 ;; Defined at:
  5820 ;;		line 115 in file "color.c"
  5821 ;; Parameters:    Size  Location     Type
  5822 ;;		None
  5823 ;; Auto vars:     Size  Location     Type
  5824 ;;		None
  5825 ;; Return value:  Size  Location     Type
  5826 ;;                  1    wreg      void 
  5827 ;; Registers used:
  5828 ;;		wreg
  5829 ;; Tracked objects:
  5830 ;;		On entry : 0/0
  5831 ;;		On exit  : 0/0
  5832 ;;		Unchanged: 0/0
  5833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5834 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5835 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5836 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5837 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5838 ;;Total ram usage:        2 bytes
  5839 ;; Hardware stack levels used: 1
  5840 ;; This function calls:
  5841 ;;		Nothing
  5842 ;; This function is called by:
  5843 ;;		_calibrate_white
  5844 ;;		_detect_color
  5845 ;;		_main
  5846 ;; This function uses a non-reentrant model
  5847 ;;
  5848                           
  5849                           	psect	text42
  5850  002718                     __ptext42:
  5851                           	callstack 0
  5852  002718                     _LED_B:
  5853                           	callstack 29
  5854  002718                     
  5855                           ;color.c: 117:     LATGbits.LATG1 = 0;
  5856  002718  927F               	bcf	127,1,c	;volatile
  5857                           
  5858                           ;color.c: 118:     LATFbits.LATF7 = 1;
  5859  00271A  8E7E               	bsf	126,7,c	;volatile
  5860                           
  5861                           ;color.c: 119:     LATAbits.LATA4 = 0;
  5862  00271C  9879               	bcf	121,4,c	;volatile
  5863  00271E                     
  5864                           ;color.c: 120:     _delay((unsigned long)((200)*(64000000/4000.0)));
  5865  00271E  0E11               	movlw	17
  5866  002720  6E02               	movwf	(??_LED_B+1)^0,c
  5867  002722  0E3C               	movlw	60
  5868  002724  6E01               	movwf	??_LED_B^0,c
  5869  002726  0ECB               	movlw	203
  5870  002728                     u1987:
  5871  002728  2EE8               	decfsz	wreg,f,c
  5872  00272A  D7FE               	bra	u1987
  5873  00272C  2E01               	decfsz	??_LED_B^0,f,c
  5874  00272E  D7FC               	bra	u1987
  5875  002730  2E02               	decfsz	(??_LED_B+1)^0,f,c
  5876  002732  D7FA               	bra	u1987
  5877  002734  F000               	nop	
  5878  002736  0012               	return		;funcret
  5879  002738                     __end_of_LED_B:
  5880                           	callstack 0
  5881                           
  5882 ;; *************** function _LED_C *****************
  5883 ;; Defined at:
  5884 ;;		line 106 in file "color.c"
  5885 ;; Parameters:    Size  Location     Type
  5886 ;;		None
  5887 ;; Auto vars:     Size  Location     Type
  5888 ;;		None
  5889 ;; Return value:  Size  Location     Type
  5890 ;;                  1    wreg      void 
  5891 ;; Registers used:
  5892 ;;		wreg
  5893 ;; Tracked objects:
  5894 ;;		On entry : 0/0
  5895 ;;		On exit  : 0/0
  5896 ;;		Unchanged: 0/0
  5897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5899 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5900 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5901 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5902 ;;Total ram usage:        2 bytes
  5903 ;; Hardware stack levels used: 1
  5904 ;; This function calls:
  5905 ;;		Nothing
  5906 ;; This function is called by:
  5907 ;;		_main
  5908 ;; This function uses a non-reentrant model
  5909 ;;
  5910                           
  5911                           	psect	text43
  5912  002738                     __ptext43:
  5913                           	callstack 0
  5914  002738                     _LED_C:
  5915                           	callstack 30
  5916  002738                     
  5917                           ;color.c: 108:     LATGbits.LATG1 = 1;
  5918  002738  827F               	bsf	127,1,c	;volatile
  5919                           
  5920                           ;color.c: 109:     LATFbits.LATF7 = 1;
  5921  00273A  8E7E               	bsf	126,7,c	;volatile
  5922                           
  5923                           ;color.c: 110:     LATAbits.LATA4 = 1;
  5924  00273C  8879               	bsf	121,4,c	;volatile
  5925  00273E                     
  5926                           ;color.c: 111:     _delay((unsigned long)((200)*(64000000/4000.0)));
  5927  00273E  0E11               	movlw	17
  5928  002740  6E02               	movwf	(??_LED_C+1)^0,c
  5929  002742  0E3C               	movlw	60
  5930  002744  6E01               	movwf	??_LED_C^0,c
  5931  002746  0ECB               	movlw	203
  5932  002748                     u1997:
  5933  002748  2EE8               	decfsz	wreg,f,c
  5934  00274A  D7FE               	bra	u1997
  5935  00274C  2E01               	decfsz	??_LED_C^0,f,c
  5936  00274E  D7FC               	bra	u1997
  5937  002750  2E02               	decfsz	(??_LED_C+1)^0,f,c
  5938  002752  D7FA               	bra	u1997
  5939  002754  F000               	nop	
  5940  002756  0012               	return		;funcret
  5941  002758                     __end_of_LED_C:
  5942                           	callstack 0
  5943                           
  5944                           	psect	rparam
  5945  0000                     
  5946                           	psect	idloc
  5947                           
  5948                           ;Config register IDLOC0 @ 0x200000
  5949                           ;	unspecified, using default values
  5950  200000                     	org	2097152
  5951  200000  0FFF               	dw	4095
  5952                           
  5953                           ;Config register IDLOC1 @ 0x200002
  5954                           ;	unspecified, using default values
  5955  200002                     	org	2097154
  5956  200002  0FFF               	dw	4095
  5957                           
  5958                           ;Config register IDLOC2 @ 0x200004
  5959                           ;	unspecified, using default values
  5960  200004                     	org	2097156
  5961  200004  0FFF               	dw	4095
  5962                           
  5963                           ;Config register IDLOC3 @ 0x200006
  5964                           ;	unspecified, using default values
  5965  200006                     	org	2097158
  5966  200006  0FFF               	dw	4095
  5967                           
  5968                           ;Config register IDLOC4 @ 0x200008
  5969                           ;	unspecified, using default values
  5970  200008                     	org	2097160
  5971  200008  0FFF               	dw	4095
  5972                           
  5973                           ;Config register IDLOC5 @ 0x20000A
  5974                           ;	unspecified, using default values
  5975  20000A                     	org	2097162
  5976  20000A  0FFF               	dw	4095
  5977                           
  5978                           ;Config register IDLOC6 @ 0x20000C
  5979                           ;	unspecified, using default values
  5980  20000C                     	org	2097164
  5981  20000C  0FFF               	dw	4095
  5982                           
  5983                           ;Config register IDLOC7 @ 0x20000E
  5984                           ;	unspecified, using default values
  5985  20000E                     	org	2097166
  5986  20000E  0FFF               	dw	4095
  5987                           
  5988                           	psect	config
  5989                           
  5990                           ;Config register CONFIG1L @ 0x300000
  5991                           ;	External Oscillator mode Selection bits
  5992                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  5993                           ;	Power-up default value for COSC bits
  5994                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  5995  300000                     	org	3145728
  5996  300000  AA                 	db	170
  5997                           
  5998                           ;Config register CONFIG1H @ 0x300001
  5999                           ;	unspecified, using default values
  6000                           ;	Clock Out Enable bit
  6001                           ;	CLKOUTEN = 0x1, unprogrammed default
  6002                           ;	Clock Switch Enable bit
  6003                           ;	CSWEN = 0x1, unprogrammed default
  6004                           ;	Fail-Safe Clock Monitor Enable bit
  6005                           ;	FCMEN = 0x1, unprogrammed default
  6006  300001                     	org	3145729
  6007  300001  FF                 	db	255
  6008                           
  6009                           ;Config register CONFIG2L @ 0x300002
  6010                           ;	unspecified, using default values
  6011                           ;	Master Clear Enable bit
  6012                           ;	MCLRE = 0x1, unprogrammed default
  6013                           ;	Power-up Timer Enable bit
  6014                           ;	PWRTE = 0x1, unprogrammed default
  6015                           ;	Low-power BOR enable bit
  6016                           ;	LPBOREN = 0x1, unprogrammed default
  6017                           ;	Brown-out Reset Enable bits
  6018                           ;	BOREN = 0x3, unprogrammed default
  6019  300002                     	org	3145730
  6020  300002  FF                 	db	255
  6021                           
  6022                           ;Config register CONFIG2H @ 0x300003
  6023                           ;	unspecified, using default values
  6024                           ;	Brown Out Reset Voltage selection bits
  6025                           ;	BORV = 0x3, unprogrammed default
  6026                           ;	ZCD Disable bit
  6027                           ;	ZCD = 0x1, unprogrammed default
  6028                           ;	PPSLOCK bit One-Way Set Enable bit
  6029                           ;	PPS1WAY = 0x1, unprogrammed default
  6030                           ;	Stack Full/Underflow Reset Enable bit
  6031                           ;	STVREN = 0x1, unprogrammed default
  6032                           ;	Debugger Enable bit
  6033                           ;	DEBUG = 0x1, unprogrammed default
  6034                           ;	Extended Instruction Set Enable bit
  6035                           ;	XINST = 0x1, unprogrammed default
  6036  300003                     	org	3145731
  6037  300003  FF                 	db	255
  6038                           
  6039                           ;Config register CONFIG3L @ 0x300004
  6040                           ;	WDT Period Select bits
  6041                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  6042                           ;	WDT operating mode
  6043                           ;	WDTE = OFF, WDT Disabled
  6044  300004                     	org	3145732
  6045  300004  9F                 	db	159
  6046                           
  6047                           ;Config register CONFIG3H @ 0x300005
  6048                           ;	unspecified, using default values
  6049                           ;	WDT Window Select bits
  6050                           ;	WDTCWS = 0x7, unprogrammed default
  6051                           ;	WDT input clock selector
  6052                           ;	WDTCCS = 0x7, unprogrammed default
  6053  300005                     	org	3145733
  6054  300005  FF                 	db	255
  6055                           
  6056                           ;Config register CONFIG4L @ 0x300006
  6057                           ;	unspecified, using default values
  6058                           ;	Write Protection Block 0
  6059                           ;	WRT0 = 0x1, unprogrammed default
  6060                           ;	Write Protection Block 1
  6061                           ;	WRT1 = 0x1, unprogrammed default
  6062                           ;	Write Protection Block 2
  6063                           ;	WRT2 = 0x1, unprogrammed default
  6064                           ;	Write Protection Block 3
  6065                           ;	WRT3 = 0x1, unprogrammed default
  6066                           ;	Write Protection Block 3
  6067                           ;	WRT4 = 0x1, unprogrammed default
  6068                           ;	Write Protection Block 3
  6069                           ;	WRT5 = 0x1, unprogrammed default
  6070                           ;	Write Protection Block 3
  6071                           ;	WRT6 = 0x1, unprogrammed default
  6072                           ;	Write Protection Block 3
  6073                           ;	WRT7 = 0x1, unprogrammed default
  6074  300006                     	org	3145734
  6075  300006  FF                 	db	255
  6076                           
  6077                           ;Config register CONFIG4H @ 0x300007
  6078                           ;	unspecified, using default values
  6079                           ;	Configuration Register Write Protection bit
  6080                           ;	WRTC = 0x1, unprogrammed default
  6081                           ;	Boot Block Write Protection bit
  6082                           ;	WRTB = 0x1, unprogrammed default
  6083                           ;	Data EEPROM Write Protection bit
  6084                           ;	WRTD = 0x1, unprogrammed default
  6085                           ;	Scanner Enable bit
  6086                           ;	SCANE = 0x1, unprogrammed default
  6087                           ;	Low Voltage Programming Enable bit
  6088                           ;	LVP = 0x1, unprogrammed default
  6089  300007                     	org	3145735
  6090  300007  FF                 	db	255
  6091                           
  6092                           ;Config register CONFIG5L @ 0x300008
  6093                           ;	unspecified, using default values
  6094                           ;	UserNVM Program Memory Code Protection bit
  6095                           ;	CP = 0x1, unprogrammed default
  6096                           ;	DataNVM Memory Code Protection bit
  6097                           ;	CPD = 0x1, unprogrammed default
  6098  300008                     	org	3145736
  6099  300008  FF                 	db	255
  6100                           
  6101                           ;Config register CONFIG5H @ 0x300009
  6102                           ;	unspecified, using default values
  6103  300009                     	org	3145737
  6104  300009  FF                 	db	255
  6105                           
  6106                           ;Config register CONFIG6L @ 0x30000A
  6107                           ;	unspecified, using default values
  6108                           ;	Table Read Protection Block 0
  6109                           ;	EBTR0 = 0x1, unprogrammed default
  6110                           ;	Table Read Protection Block 1
  6111                           ;	EBTR1 = 0x1, unprogrammed default
  6112                           ;	Table Read Protection Block 2
  6113                           ;	EBTR2 = 0x1, unprogrammed default
  6114                           ;	Table Read Protection Block 3
  6115                           ;	EBTR3 = 0x1, unprogrammed default
  6116                           ;	Table Read Protection Block 4
  6117                           ;	EBTR4 = 0x1, unprogrammed default
  6118                           ;	Table Read Protection Block 5
  6119                           ;	EBTR5 = 0x1, unprogrammed default
  6120                           ;	Table Read Protection Block 6
  6121                           ;	EBTR6 = 0x1, unprogrammed default
  6122                           ;	Table Read Protection Block 7
  6123                           ;	EBTR7 = 0x1, unprogrammed default
  6124  30000A                     	org	3145738
  6125  30000A  FF                 	db	255
  6126                           
  6127                           ;Config register CONFIG6H @ 0x30000B
  6128                           ;	unspecified, using default values
  6129                           ;	Boot Block Table Read Protection bit
  6130                           ;	EBTRB = 0x1, unprogrammed default
  6131  30000B                     	org	3145739
  6132  30000B  FF                 	db	255
  6133                           tosu	equ	0xFFF
  6134                           tosh	equ	0xFFE
  6135                           tosl	equ	0xFFD
  6136                           stkptr	equ	0xFFC
  6137                           pclatu	equ	0xFFB
  6138                           pclath	equ	0xFFA
  6139                           pcl	equ	0xFF9
  6140                           tblptru	equ	0xFF8
  6141                           tblptrh	equ	0xFF7
  6142                           tblptrl	equ	0xFF6
  6143                           tablat	equ	0xFF5
  6144                           prodh	equ	0xFF4
  6145                           prodl	equ	0xFF3
  6146                           indf0	equ	0xFEF
  6147                           postinc0	equ	0xFEE
  6148                           postdec0	equ	0xFED
  6149                           preinc0	equ	0xFEC
  6150                           plusw0	equ	0xFEB
  6151                           fsr0h	equ	0xFEA
  6152                           fsr0l	equ	0xFE9
  6153                           wreg	equ	0xFE8
  6154                           indf1	equ	0xFE7
  6155                           postinc1	equ	0xFE6
  6156                           postdec1	equ	0xFE5
  6157                           preinc1	equ	0xFE4
  6158                           plusw1	equ	0xFE3
  6159                           fsr1h	equ	0xFE2
  6160                           fsr1l	equ	0xFE1
  6161                           bsr	equ	0xFE0
  6162                           indf2	equ	0xFDF
  6163                           postinc2	equ	0xFDE
  6164                           postdec2	equ	0xFDD
  6165                           preinc2	equ	0xFDC
  6166                           plusw2	equ	0xFDB
  6167                           fsr2h	equ	0xFDA
  6168                           fsr2l	equ	0xFD9
  6169                           status	equ	0xFD8

Data Sizes:
    Strings     78
    Constant    0
    Data        1
    BSS         124
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     93      95
    BANK0           160    126     157
    BANK1           256     46     138
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp...source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp...buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_14(CODE[5]), STR_13(CODE[6]), STR_2(CODE[12]), STR_1(CODE[15]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 15
		 -> STR_14(CODE[5]), STR_13(CODE[6]), STR_2(CODE[12]), STR_1(CODE[15]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_14(CODE[5]), STR_13(CODE[6]), STR_2(CODE[12]), STR_1(CODE[15]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 100
		 -> voltage_display@buf(COMRAM[80]), color_predict@buf(BANK0[100]), check_color_reading@buf(BANK0[100]), color_display@buf(BANK0[100]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S2156$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S2156$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    motorR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhlll[1]), PWM6DCH(BITBIGSFRhhhlll[1]), 

    motorL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhlll[1]), PWM6DCH(BITBIGSFRhhhlll[1]), 

    sendStringSerial4@string	PTR unsigned char  size(2) Largest target is 100
		 -> voltage_display@buf(COMRAM[80]), color_predict@buf(BANK0[100]), check_color_reading@buf(BANK0[100]), color_display@buf(BANK0[100]), 

    voltage_display@m.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    voltage_display@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhlll[1]), PWM6DCH(BITBIGSFRhhhlll[1]), 

    voltage_read@m.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    voltage_read@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhlll[1]), PWM6DCH(BITBIGSFRhhhlll[1]), 

    turn180@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    turn180@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhlll[1]), PWM6DCH(BITBIGSFRhhhlll[1]), 

    turn180@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    turn180@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhlll[1]), PWM6DCH(BITBIGSFRhhhlll[1]), 

    fullSpeedAhead@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    fullSpeedAhead@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhlll[1]), PWM6DCH(BITBIGSFRhhhlll[1]), 

    fullSpeedAhead@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    fullSpeedAhead@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhlll[1]), PWM6DCH(BITBIGSFRhhhlll[1]), 

    turnRight@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhlll[1]), PWM6DCH(BITBIGSFRhhhlll[1]), 

    turnRight@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhlll[1]), PWM6DCH(BITBIGSFRhhhlll[1]), 

    turnLeft@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhlll[1]), PWM6DCH(BITBIGSFRhhhlll[1]), 

    turnLeft@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhlll[1]), PWM6DCH(BITBIGSFRhhhlll[1]), 

    stop@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhlll[1]), PWM6DCH(BITBIGSFRhhhlll[1]), 

    stop@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhlll[1]), PWM6DCH(BITBIGSFRhhhlll[1]), 

    setMotorPWM@m.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhlll[1]), PWM6DCH(BITBIGSFRhhhlll[1]), 

    initDCmotors_parameter@motorR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    initDCmotors_parameter@motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhlll[1]), PWM6DCH(BITBIGSFRhhhlll[1]), 

    initDCmotors_parameter@motorR	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(BANK1[10]), 

    S209DC_motor$dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    initDCmotors_parameter@motorL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    S209DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhlll[1]), PWM6DCH(BITBIGSFRhhhlll[1]), 

    initDCmotors_parameter@motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhlll[1]), PWM6DCH(BITBIGSFRhhhlll[1]), 

    initDCmotors_parameter@motorL	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(BANK1[10]), 

    detect_color@w	PTR struct white_card size(2) Largest target is 18
		 -> main@white(BANK1[18]), 

    detect_color@m	PTR struct color_rgb size(2) Largest target is 8
		 -> main@rgb(BANK1[8]), 

    calibrate_white@w	PTR struct white_card size(2) Largest target is 18
		 -> main@white(BANK1[18]), 

    check_color_reading@w	PTR struct white_card size(2) Largest target is 18
		 -> main@white(BANK1[18]), 

    check_color_reading@m	PTR struct color_rgb size(2) Largest target is 8
		 -> main@rgb(BANK1[8]), 

    color_display@m	PTR struct color_rgb size(2) Largest target is 8
		 -> main@rgb(BANK1[8]), 

    read_color@m	PTR struct color_rgb size(2) Largest target is 18
		 -> main@rgb(BANK1[8]), main@white(BANK1[18]), 


Critical Paths under _main in COMRAM

    _main->_check_color_reading
    _detect_color->_compare
    _compare->___lwdiv
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _sendStringSerial4->_sendCharSerial4
    ___lwdiv->___wmul
    _calibrate_white->_read_color
    _read_color->_color_read_Blue
    _read_color->_color_read_Clear
    _read_color->_color_read_Green
    _read_color->_color_read_Red
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle

Critical Paths under _main in BANK0

    _main->_color_predict
    _color_predict->_sprintf
    _color_display->_sprintf
    _check_color_reading->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                58    58      0   38560
                                             91 COMRAM     2     2      0
                                              0 BANK1     46    46      0
                  _I2C_2_Master_Init
                              _LED_B
                              _LED_C
                              _LED_G
                              _LED_R
                    _calibrate_white
                _check_color_reading
                   _color_click_init
                      _color_display
                      _color_predict
                       _detect_color
                    _initDCmotorsPWM
             _initDCmotors_parameter
                         _initUSART4
                         _read_color
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotors_parameter                               4     0      4     416
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      76
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _detect_color                                        25    21      4    7699
                                             20 COMRAM    25    21      4
                              _LED_B
                              _LED_G
                              _LED_R
                            ___lwdiv
                             ___wmul
                            _compare
                         _read_color
 ---------------------------------------------------------------------------------
 (2) _compare                                              7     1      6    2164
                                             13 COMRAM     7     1      6
                            ___lwdiv (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _color_predict                                      102   102      0    7585
                                             25 BANK0    101   101      0
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _color_display                                      102   100      2    7725
                                             87 COMRAM     2     0      2
                                             25 BANK0    100   100      0
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     294
                                              4 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     294
                                              2 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _check_color_reading                                104   100      4   10858
                                             87 COMRAM     4     0      4
                                             25 BANK0    100   100      0
                            ___lwdiv
                             ___wmul
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             27    15     12    6912
                                              0 BANK0     25    13     12
                            ___lwdiv (ARG)
                             ___wmul (ARG)
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             8     2      6    6105
                                             79 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           42    36      6    5751
                                             63 COMRAM    16    10      6
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _dtoa                                                36    26     10    4358
                                             27 COMRAM    36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (6) _pad                                                 11     5      6    2709
                                             16 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (7) _strlen                                               4     2      2     166
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (7) _fputs                                                7     3      4    1235
                                              9 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                                9     5      4     834
                                              0 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     142
                                             18 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (6) ___aomod                                             18     2     16     448
                                              0 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (6) ___aodiv                                             26    10     16     452
                                              0 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (2) _sendStringSerial4                                    2     0      2     371
                                              1 COMRAM     2     0      2
                    _sendCharSerial4
 ---------------------------------------------------------------------------------
 (3) _sendCharSerial4                                      1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1839
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4    1446
                                              6 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _calibrate_white                                      4     2      2    1979
                                             13 COMRAM     4     2      2
                              _LED_B
                              _LED_G
                              _LED_R
                    _color_read_Blue
                   _color_read_Green
                     _color_read_Red
                         _read_color
 ---------------------------------------------------------------------------------
 (1) _read_color                                           2     0      2    1300
                                             11 COMRAM     2     0      2
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (2) _color_read_Red                                       7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Clear                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      22
                                              1 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Read                                    3     3      0      45
                                              1 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _LED_R                                                2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _LED_G                                                2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _LED_B                                                2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_C                                                2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_2_Master_Init
   _LED_B
   _LED_C
   _LED_G
   _LED_R
   _calibrate_white
     _LED_B
     _LED_G
     _LED_R
     _color_read_Blue
       _I2C_2_Master_Read
         _I2C_2_Master_Idle
       _I2C_2_Master_RepStart
         _I2C_2_Master_Idle
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
     _color_read_Green
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Red
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _read_color
       _color_read_Blue
       _color_read_Clear
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Green
       _color_read_Red
   _check_color_reading
     ___lwdiv
       ___wmul (ARG)
     ___wmul
     _sendStringSerial4
       _sendCharSerial4
     _sprintf
       ___lwdiv (ARG)
       ___wmul (ARG)
       _vfprintf (ARG)
         _vfpfcnvrt
           _dtoa
             ___aodiv
             ___aomod
             _abs
               ___aomod (ARG)
             _pad
               _fputc
                 _putch
               _fputs
                 _fputc
               _strlen
           _fputc
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _color_display
     _sendStringSerial4
     _sprintf
   _color_predict
     _sendStringSerial4
     _sprintf
   _detect_color
     _LED_B
     _LED_G
     _LED_R
     ___lwdiv
     ___wmul
     _compare
       ___lwdiv (ARG)
       ___wmul (ARG)
     _read_color
   _initDCmotorsPWM
   _initDCmotors_parameter
   _initUSART4
   _read_color

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      58        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     2E      8A       7       53.9%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     7E      9D       5       98.1%
BITBIGSFRllhhl      6E      0       0      43        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5D      5F       1      100.0%
BITBIGSFRhhhh       40      0       0      32        0.0%
BITBIGSFRlllllh     32      0       0      48        0.0%
BITBIGSFRlllllh     2A      0       0      52        0.0%
BITBIGSFRllllll     26      0       0      56        0.0%
BITBIGSFRllllhh     20      0       0      46        0.0%
BITBIGSFRhhhlll     18      0       0      35        0.0%
BITBIGSFRhhhlh      17      0       0      33        0.0%
BITBIGSFRllhhhh     14      0       0      40        0.0%
BITBIGSFRlllllh      F      0       0      54        0.0%
BITBIGSFRllllhl      C      0       0      47        0.0%
BITBIGSFRlllllh      9      0       0      53        0.0%
BITBIGSFRllhlll      8      0       0      44        0.0%
BITBIGSFRllhhhl      6      0       0      42        0.0%
BITBIGSFRllllll      6      0       0      55        0.0%
BITBIGSFRlllllh      6      0       0      51        0.0%
BITBIGSFRlllllh      5      0       0      50        0.0%
BITBIGSFRllhhhh      3      0       0      41        0.0%
BITBIGSFRlllllh      3      0       0      49        0.0%
BITBIGSFRhlh         1      0       0      36        0.0%
BITBIGSFRhhhllh      1      0       0      34        0.0%
BITBIGSFRlhh         1      0       0      38        0.0%
BITBIGSFRlllh        1      0       0      45        0.0%
BITBIGSFRlhl         1      0       0      39        0.0%
BITBIGSFRhll         1      0       0      37        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     186      57        0.0%
DATA                 0      0     186       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.35 build 20211206165544 
Symbol Table                                                                                   Wed Mar 09 09:51:04 2022

                _color_read_Red 22EA                 _color_read_Blue 23DA                   _color_predict 1C70  
                            l51 2338                              l60 23D8                              l45 260E  
                            l54 2428                              l63 2296                              l72 2736  
                            l48 26D6                              l57 2388                              l81 20F2  
                            l66 26F6                              l75 2716                              l69 2756  
                            l78 21D6                              l94 1D4C                              l97 1C6E  
           ___wmul@multiplicand 0003                _color_read_Clear 238A                _color_read_Green 233A  
                           l113 139A                             l114 139C                             l117 25A2  
                           l118 25A4                             l152 2668                             l232 24AE  
                           l161 27AC                             l170 2798                             l155 266A  
                           l235 1E1E                             l164 27B6                             l173 24F0  
                           l325 2774                             l158 2690                             l334 2778  
                           l167 27A2                             l343 263E                             l337 278C  
                           l621 1B20                             l608 19BC                             l494 26B6  
                           l992 2166                             l985 215E                             u960 1E32  
                           u961 1E2E                             u970 1E44                             u971 1E40  
                           u980 1E6C                             u981 1E68                             u990 1EA2  
                           u991 1E9E                ?_calibrate_white 000E                             _abs 24F2  
                           _pad 1EEA                             wreg 000FE8                            l1202 1F72  
                          l1210 143E                            ?_abs 0013                            l1204 1FAE  
                          l1212 1446                            l1230 1680                            l2200 1E32  
                          l2202 1E44                            l1251 2530                            l1243 2230  
                          l2300 1ACA                            l2204 1E4E                            l2212 242A  
                          l2220 25A6                            l1244 2238                            l1172 22E8  
                          l1237 1834                            l2230 1836                            l2302 1AD0  
                          l2206 1E6C                            l2214 2436                            l2222 25B2  
                          l2310 1EEA                            l1263 1EE8                            l1271 246C  
                          l2240 187A                            l2232 183A                            l2304 1AE0  
                          l1248 2528                            l2208 1EA2                            l2216 2448  
                          l1280 25DA                            l2224 25B6                            l2320 1F3C  
                          l2312 1EFA                            l2402 27A4                            l2410 279A  
                          l2250 18D0                            l2242 189A                            l2234 1848  
                          l2306 1B00                            l1274 27B8                            l2218 244C  
                          l2226 25CE                            l2322 1F50                            l2314 1F0E  
                          l2420 24B6                            l2404 27A8                            l2412 279E  
                          l2260 1952                            l2252 18E4                            l2244 189E  
                          l2236 1868                            l2332 24F2                            l2324 1F54  
                          l2316 1F1C                            l2340 139E                            l2422 24BE  
                          l2414 27AE                            l2406 2790                            l2510 2788  
                          l2270 199C                            l2262 1954                            l2254 18F2  
                          l2246 18AA                            l2238 186C                            l2334 250C  
                          l2326 1F82                            l2318 1F28                            l2350 1418  
                          l2342 13BE                            l1199 1F30                            l2336 266A  
                          l2424 24C6                            l2416 27B2                            l2408 2794  
                          l2600 20F4                            l2264 1966                            l2256 1904  
                          l2248 18C8                            l2280 19F0                            l2328 1F96  
                          l2360 1474                            l2352 1432                            l2344 13E6  
                          l2440 16CA                            l2432 1682                            l2512 21D8  
                          l2520 2640                            l2338 267A                            l2426 24EC  
                          l2418 24B2                            l2610 212C                            l2602 20FC  
                          l2258 1932                            l2266 196C                            l2290 1A48  
                          l2282 19F4                            l2274 19BE                            l2370 1514  
                          l2362 147C                            l2354 144E                            l2346 1406  
                          l2450 1792                            l2442 16EE                            l2434 16A6  
                          l2514 21E0                            l2530 2656                            l2522 264A  
                          l2540 2718                            l2428 24EE                            l2700 1B8E  
                          l2620 2158                            l2612 2132                            l2604 210E  
                          l2508 2778                            l2268 197C                            l2292 1A5C  
                          l2284 1A02                            l2276 19C2                            l2380 15D0  
                          l2372 151A                            l2364 1486                            l2356 1460  
                          l2348 1416                            l2452 17B6                            l2460 17E4  
                          l2444 1712                            l2436 16B4                            l2516 21EE  
                          l2524 2650                            l2532 26BA                            l2542 271E  
                          l2534 223A                            l2710 1BFE                            l2702 1B92  
                          l2614 2148                            l2606 2116                            l2294 1A6A  
                          l2286 1A22                            l2278 19D0                            l2198 1E20  
                          l2390 1622                            l2382 15EA                            l2366 148C  
                          l2374 157E                            l2358 146E                            l2462 17F2  
                          l2454 17C4                            l2446 175A                            l2438 16C6  
                          l2518 2214                            l2550 22AA                            l2526 2652  
                          l2630 2604                            l2622 25DC                            l2632 2738  
                          l2544 26F8                            l2536 26D8                            l2480 23DA  
                          l2720 1C56                            l2712 1C02                            l2704 1B9E  
                          l2616 2150                            l2608 211E                            l2560 2610  
                          l2296 1A98                            l2288 1A40                            l2392 1634  
                          l2376 1598                            l2384 15FA                            l2368 150E  
                          l2456 17D8                            l2552 22B2                            l2640 2070  
                          l2528 2654                            l2624 25E0                            l2800 246E  
                          l2634 273E                            l2546 26FE                            l2538 26DE  
                          l2482 2420                            l2474 22EA                            l2714 1C0E  
                          l2706 1BB6                            l2618 2152                            l2562 2614  
                          l2298 1AB8                            l2394 1640                            l2386 160C  
                          l2378 15B6                            l2466 17FE                            l2554 22BA  
                          l2642 20E6                            l2626 25EA                            l2650 1C96  
                          l2570 2572                            l2730 0EE4                            l2722 0E50  
                          l2802 247E                            l2810 1D4E                            l2492 238A  
                          l2476 2330                            l2716 1C26                            l2708 1BCE  
                          l2564 2622                            l2396 1648                            l2388 161C  
                          l2468 1822                            l2556 22D6                            l2548 2298  
                          l2628 25FA                            l2636 2168                            l2660 1CBA  
                          l2652 1C96                            l2644 1C74                            l2572 2588  
                          l2740 0F94                            l2732 0F2C                            l2724 0E94  
                          l2804 2496                            l2820 1DA2                            l2812 1D5A  
                          l2494 23D0                            l2486 233A                            l2718 1C3E  
                          l2566 2626                            l2398 1658                            l2638 21CA  
                          l2670 1CF0                            l2662 1CCC                            l2654 1CA8  
                          l2646 1C86                            l2574 259E                            l2750 1074  
                          l2742 0FD0                            l2734 0F6C                            l2726 0E98  
                          l2806 24AA                            l2822 1DB6                            l2814 1D6A  
                          l2488 2380                            l2680 1D14                            l2672 1CF0  
                          l2664 1CCC                            l2656 1CA8                            l2648 1C86  
                          l2568 256E                            l2760 116C                            l2752 1080  
                          l2744 1018                            l2736 0F84                            l2728 0EA4  
                          l2808 24AC                            l2816 1D7E                            l2690 1B26  
                          l2594 2692                            l2682 1D26                            l2674 1D02  
                          l2666 1CDE                            l2658 1CBA                            l2770 1228  
                          l2762 1198                            l2754 10C4                            l2746 1058  
                          l2738 0F88                            l2818 1D92                            l2850 2770  
                          l2842 2758                            l2692 1B32                            l2596 26AE  
                          l2684 1D26                            l2676 1D02                            l2668 1CDE  
                          l2780 12C0                            l2772 127C                            l2764 11EC  
                          l2756 110C                            l2748 1070                            l2852 2772  
                          l2844 2762                            l2940 1FB8                            l2694 1B46  
                          l2686 1D40                            l2678 1D14                            l2790 133A  
                          l2782 12D6                            l2774 1284                            l2766 11F4  
                          l2758 1154                            l2846 2764                            l2950 1FE0  
                          l2942 1FC4                            ?_pad 0011                            l2696 1B5E  
                          l2688 1B22                            l2792 133E                            l2784 12DE  
                          l2776 128C                            l2768 11FC                            l2848 276E  
                          l2960 1FEA                            l2952 1FE2                            l2944 1FC8  
                          l2936 1FB0                            l2698 1B76                            l2794 136A  
                          l2778 12B8                            l2786 12E2                            l2970 1FEC  
                          l2962 1FEC                            l2954 1FE4                            l2946 1FDC  
                          l2938 1FB4                            l2796 1396                            l2788 130E  
                          l2980 2028                            l2972 1FEC                            l2964 1FEC  
                          l2956 1FE6                            l2948 1FDE                            l2982 203C  
                          l2974 1FEC                            l2966 1FEC                            l2958 1FE8  
                          l2984 2050                            l2976 2004                            l2968 1FEC  
                          l2978 2010                            STR_1 0E01                            STR_2 0E04  
                          STR_3 0E3B                            STR_4 0E4B                            STR_5 0E35  
                          STR_6 0E41                            STR_7 0E22                            STR_8 0E46  
                          STR_9 0E1B                            u1000 246C                            u1001 2468  
                          u1010 25CE                            u1011 25CA                            u1020 1848  
                          u1100 1A02                            u1021 1844                            u1101 19FE  
                          u1030 187A                            u1110 1A40                            u1031 1876  
                          u1111 1A3C                            u1200 267A                            u1120 1A6A  
                          u1201 2676                            u1041 18A4                            u1121 1A66  
                          u1210 2690                            u1050 18C8                            u1130 1A98  
                          u1211 268C                            u1051 18C4                            u1131 1A94  
                          u1060 18F2                            u1140 1AE0                            u1300 15B6  
                          u1220 13CE                            u1061 18EE                            u1141 1ADC  
                          u1301 15B2                            u1221 13C8                            u1070 1932  
                          u1150 1EFA                            u1310 15D0                            u1230 13D0  
                          u1071 192E                            u1151 1EF6                            u1311 15CC  
                          u1080 197C                            u1160 1F1C                            u1320 15EA  
                          u1240 13E6                            u1400 16EE                            u1081 1978  
                          u1161 1F18                            u1321 15E6                            u1241 13E2  
                          u1401 16EA                            u1090 19D0                            u1170 1F72  
                          u1330 15FA                            u1250 1416                            u1410 1712  
                          u1091 19CC                            u1171 1F6E                            u1331 15F6  
                          u1251 1412                            u1411 170E                            u1180 1F82  
                          u1340 160C                            u1260 1432                            u1420 17B6  
                          u1181 1F7E                            u1341 1608                            u1261 142E  
                          u1421 17B2                            u1510 210E                            u1190 250C  
                          u1350 161C                            u1270 1460                            u1511 210A  
                          u1191 2508                            u1351 1618                            u1271 145C  
                          u1520 212C                            u1440 2788                            u1360 1634  
                          u1280 146E                            u1600 1CF0                    _BAUD4CONbits 000EE9  
                          u1521 2128                            u1441 2784                            u1361 1630  
                          u1281 146A                            u1601 1CEC                            _LATE 000F7D  
                          u1370 24DA                            u1530 2148                            u1290 1598  
                          u1450 2230                            u1610 1D02                            u1371 24D2  
                          u1531 2144                            u1291 1594                            u1451 222C  
                          u1611 1CFE                            _LATG 000F7F                            u1460 263E  
                          u1620 1D14                            u1540 1C86                            u1700 130E  
                          u1461 263A                            u1621 1D10                            u1541 1C82  
                          u1701 130A                            u1390 16A6                            u1630 1D26  
                          u1550 1C96                            u1470 2588                            u1710 133A  
                          u1391 16A2                            u1631 1D22                            u1551 1C92  
                          u1471 2584                            u1711 1336                            u1560 1CA8  
                          u1480 259E                            u1720 136A                            u1640 1198  
                          u1561 1CA4                            u1481 259A                            u1721 1366  
                          u1641 1194                            u1570 1CBA                            u1730 1396  
                          u1650 11EC                            _T2PR 000FBC                            u1571 1CB6  
                          u1731 1392                            u1651 11E8                            u1388 24DC  
                          u1580 1CCC                            u1660 1228                            u1581 1CC8  
                          u1661 1224                            u1590 1CDE                            u1670 127C  
                          u1591 1CDA                            u1671 1278                            u1680 12B8  
                          u1681 12B4                            u1690 12D6                            u1691 12D2  
                          u1907 1062                            u1917 115E                            u1927 25F0  
                          u1937 1B80                            u1947 1BF0                            u1867 1FF6  
                          u1957 1C60                            u1877 201A                            u1967 26E8  
                          u1887 205A                            u1977 2708                            u1897 0F76  
                          u1987 2728                            u1997 2748                            abs@a 0013  
                          _dbuf 013C                            _main 1FB0                            _dtoa 139E  
                          _prec 00F6                            _nout 00F2                            pad@i 0018  
                          pad@p 0015                            fsr1h 000FE2                            fsr2h 000FDA  
                          indf2 000FDF                            fsr1l 000FE1                            pad@w 001A  
                          fsr2l 000FD9                            prodh 000FF4                            prodl 000FF3  
                          start 0000                  ?_color_display 0058          __end_of_color_read_Red 233A  
                  ___param_bank 000000                  ?_color_predict 0001                           ??_abs 0015  
                         ??_pad 0017                 __end_of___aodiv 19BE                           ?_main 0001  
                         ?_dtoa 001C                 __end_of___aomod 1B22                           _ADPCH 000F5F  
                         STR_10 0E10                           STR_11 0E29                           STR_12 0E2F  
                         STR_13 0E0A                           _LED_B 2718                           _LED_C 2738  
               __end_of___lwdiv 2168                           _LED_G 26F8                           _LED_R 26D8  
                  vfpfcnvrt@fmt 0042         __end_of_sendCharSerial4 278E      __end_of_I2C_2_Master_Start 27AE  
    __end_of_I2C_2_Master_Write 279A                 __end_of_compare 25A6                    compare@lower 000E  
                         _flags 00F8                           _color 00FC                    compare@upper 0012  
                         _fputc 1E20                           _fputs 242A                           pad@fp 0011  
                         _width 00F4                           _putch 27B8                           dtoa@d 001E  
                         dtoa@i 003E                           dtoa@n 0036                           dtoa@p 0030  
                         dtoa@s 0034                           dtoa@w 0032                           tablat 000FF5  
                         status 000FD8                 __end_of_sprintf 22EA                color_display@buf 0079  
        check_color_reading@buf 0079         __end_of_color_read_Blue 242A           _I2C_2_Master_RepStart 27AE  
               ?_color_read_Red 0005                 __initialization 2532                    __end_of_main 2070  
                  __end_of_dtoa 1682            __end_of_detect_color 139E                          ??_main 005C  
                        ??_dtoa 0026     __end_of_check_color_reading 20F4                   __activetblptr 000001  
                        ?_LED_B 0001                          ?_LED_C 0001                          ?_LED_G 0001  
                        ?_LED_R 0001          _initDCmotors_parameter 1D4E                          ?_fputc 0001  
                        ?_fputs 000A                          _ADRESH 000F64                          ?_putch 0001  
                        _RC0PPS 000E62                          _RC4REG 000EE3                          _RE2PPS 000E74  
                        _RD5PPS 000E6F                          _RC7PPS 000E69                          _RD6PPS 000E70  
      __end_of_color_click_init 2610                          _RX4PPS 000E15                          _TX4REG 000EE4  
               ??_color_display 005A                 ??_color_predict 0058                    vfprintf@cfmt 0056  
                     ??___aodiv 0011                       ??___aomod 0011                          ___wmul 2692  
                     ??___lwdiv 000B                   compare@result 0014                          clear_0 254A  
                        clear_1 2556                          isa$std 000001                          pad@buf 0013  
                        dtoa@fp 001C                          _strlen 25A6                       ??_compare 0014  
                        fputc@c 0001                          fputs@c 000E                          fputs@i 000F  
                        fputs@s 000A                    __mediumconst 0000                          tblptrh 000FF7  
                        tblptrl 000FF6                          tblptru 000FF8                ?_sendCharSerial4 0001  
                   read_color@m 000C                          putch@c 0001                __end_of_vfprintf 223A  
             ??_initDCmotorsPWM 0003                       ??_sprintf 0058                calibrate_white@w 000E  
                    __accesstop 0060         __end_of__initialization 2560        __end_of_color_read_Clear 23DA  
      __end_of_color_read_Green 238A          ?_I2C_2_Master_RepStart 0001              color_predict@color 00DD  
  initDCmotors_parameter@motorL 0001    initDCmotors_parameter@motorR 0003                   ___rparam_used 000001  
                 __end_of_LED_B 2738                   __end_of_LED_C 2758                   __end_of_LED_G 2718  
                 __end_of_LED_R 26F8                ?_color_read_Blue 0005                  __pcstackCOMRAM 0001  
                  __pidataBANK0 27BA                   __end_of_fputc 1EEA               detect_color@color 002D  
                 __end_of_fputs 246E                   __end_of_putch 27BA                         ??_LED_B 0001  
                       ??_LED_C 0001                         ??_LED_G 0001                         ??_LED_R 0001  
                       ??_fputc 0005                         ??_fputs 000E                         ??_putch 0001  
                    __pbssBANK0 00DE                      __pbssBANK1 0100                color_predict@buf 0079  
             _color_writetoaddr 26B8                    _T2CLKCONbits 000FBF              ?_color_writetoaddr 0003  
                       ?___wmul 0001             ??_color_writetoaddr 0004                         ?_strlen 0001  
                       _SP4BRGH 000EE6                         _SP4BRGL 000EE5                         _PWM6DCH 000FA3  
                       _PWM7DCH 000FA0                         _SSP2ADD 000ED6                         _SSP2BUF 000ED5  
                  _detect_color 0E50          color_writetoaddr@value 0003                ??_color_read_Red 0007  
     __end_of_color_writetoaddr 26D8                       _ADREFbits 000F58              _I2C_2_Master_Start 27A4  
                    _initUSART4 2758              _I2C_2_Master_Write 278E                         __Hparam 0000  
                       __Lparam 0000               color_read_Red@tmp 000A         sendStringSerial4@string 0002  
                       ___aodiv 1836                         ___aomod 19BE             ?_I2C_2_Master_Start 0001  
                       ___lwdiv 20F4             ?_I2C_2_Master_Write 0001                       ?_vfprintf 0050  
                  __psmallconst 0E00                         __pcinit 2532                         __ramtop 0E00  
                    _read_color 223A                         __ptext0 1FB0                         __ptext1 2758  
                       __ptext2 1D4E                         __ptext3 246E                         __ptext4 0E50  
                       __ptext5 256E                         __ptext6 1C70                         __ptext7 2168  
                       __ptext8 25DC                         __ptext9 26B8                         _compare 256E  
       ?_initDCmotors_parameter 0001                       _T2CONbits 000FBD                       _T2HLTbits 000FBE  
                 _RxBufWriteCnt 00FB                         _sprintf 2298                         main@rgb 0182  
          ??_I2C_2_Master_Start 0002            ??_I2C_2_Master_Write 0002            end_of_initialization 2560  
                       fputc@fp 0003                         fputs@fp 000C               ?_color_click_init 0001  
            ??_color_click_init 0005               __end_of_vfpfcnvrt 1836                         postdec2 000FDD  
                       postinc0 000FEE                         postinc1 000FE6                         postinc2 000FDE  
                    ??_vfprintf 0056                         strlen@a 0003                         strlen@s 0001  
               _initDCmotorsPWM 246E  __end_of_initDCmotors_parameter 1E20                       _TRISAbits 000F81  
                     _TRISCbits 000F83                       _TRISDbits 000F84                       _TRISEbits 000F85  
                     _TRISFbits 000F86                       _TRISGbits 000F87        color_writetoaddr@address 0004  
       ??_I2C_2_Master_RepStart 0002               ?_color_read_Clear 0005                    _EUSART4RXbuf 00DE  
                  _EUSART4TXbuf 0100               ?_color_read_Green 0005                     ?_initUSART4 0001  
     sendCharSerial4@charToSend 0001           __end_of_color_display 21D8                      main@motorL 015C  
                    main@motorR 0166               ??_calibrate_white 0010              ??_color_read_Clear 0007  
                color_display@m 0058            check_color_reading@m 0058              ??_color_read_Green 0007  
          check_color_reading@w 005A                  detect_color@BB 0025                  detect_color@BG 002B  
                detect_color@GB 001F                  detect_color@GG 0023                  detect_color@BR 0029  
                detect_color@GR 001D                  detect_color@RB 001B                  detect_color@RG 0021  
                detect_color@RR 0027           __end_of_color_predict 1D4E                     vfpfcnvrt@ap 0044  
                   vfpfcnvrt@fp 0040                     vfpfcnvrt@ll 0048                  __end_of___wmul 26B8  
                   ?_read_color 000C                  __end_of_strlen 25DC             color_read_Clear@tmp 000A  
           start_initialization 2532                     __end_of_abs 2532                     __end_of_pad 1FB0  
                 _TxBufWriteCnt 005F             color_read_Green@tmp 000A         __end_of_initDCmotorsPWM 24B0  
                   vfprintf@fmt 0052                        ??___wmul 0005                     __pdataBANK0 00FC  
                      ??_strlen 0003                     __pbssCOMRAM 005E                   __pcstackBANK0 0060  
                 __pcstackBANK1 015C                ___aodiv@dividend 0001                ___lwdiv@dividend 0007  
                     _dtoa$2238 002E                        ?___aodiv 0001                        ?___aomod 0001  
              ___aodiv@quotient 0013                        ?___lwdiv 0007            I2C_2_Master_Read@ack 0003  
          I2C_2_Master_Read@tmp 0004                        ?_compare 000E                     __smallconst 0E00  
             _I2C_2_Master_Idle 266A               _I2C_2_Master_Init 2640               _I2C_2_Master_Read 24B0  
             _I2C_2_Master_Stop 279A                    _RxBufReadCnt 00FA              ?_I2C_2_Master_Idle 0001  
            ?_I2C_2_Master_Init 0001              ?_I2C_2_Master_Read 0001              ?_I2C_2_Master_Stop 0001  
              ___lwdiv@quotient 000B        initDCmotorsPWM@PWMperiod 0001                        ?_sprintf 0060  
             _sendStringSerial4 2610             ??_I2C_2_Master_Idle 0001             ??_I2C_2_Master_Init 0001  
           ??_I2C_2_Master_Read 0002                  ___wmul@product 0005                        _LATAbits 000F79  
           ??_I2C_2_Master_Stop 0002                        _LATCbits 000F7B                        _LATEbits 000F7D  
                      _LATFbits 000F7E                        _LATGbits 000F7F              ?_sendStringSerial4 0002  
                      _PIE4bits 000E2D                        _PIR4bits 000E37                ?_initDCmotorsPWM 0001  
             ??_sendCharSerial4 0001                        _SSP2CON2 000EDA             _check_color_reading 2070  
           ??_sendStringSerial4 0004                        _SSP2STAT 000ED8                       _vfpfcnvrt 1682  
                    _ADCON0bits 000F60       __end_of_I2C_2_Master_Idle 2692       __end_of_I2C_2_Master_Init 266A  
     __end_of_I2C_2_Master_Read 24F2               ___wmul@multiplier 0001       __end_of_I2C_2_Master_Stop 27A4  
   I2C_2_Master_Write@data_byte 0002                       main@white 0170               ??_color_read_Blue 0007  
                 detect_color@m 0015                   detect_color@w 0017                    _TxBufReadCnt 005E  
          ?_check_color_reading 0058                 _calibrate_white 1B22       __end_of_sendStringSerial4 2640  
 __end_of_I2C_2_Master_RepStart 27B8              color_read_Blue@tmp 000A                    ??_initUSART4 0001  
                      __Hrparam 0000                      vfprintf@ap 0054                        __Lrparam 0000  
                    vfprintf@fp 0050                    __Lsmallconst 0E00            compare@value2compare 0010  
                    ?_vfpfcnvrt 0040                    ??_read_color 000E                 ___aodiv@divisor 0009  
               ___aodiv@counter 0011                      _ANSELDbits 000EA7                      _ANSELFbits 000EB4  
                    sprintf@fmt 0062                 ___lwdiv@divisor 0009              __end_of_initUSART4 2776  
               ___lwdiv@counter 000D           ??_check_color_reading 005C                        __ptext10 2640  
                      __ptext11 2070                        __ptext20 27B8                        __ptext12 2298  
                      __ptext21 24F2                        __ptext13 21D8                        __ptext30 22EA  
                      __ptext22 19BE                        __ptext14 1682                        __ptext31 233A  
                      __ptext23 1836                        __ptext15 139E                        __ptext40 26D8  
                      __ptext32 238A                        __ptext24 2610                        __ptext16 1EEA  
                      __ptext41 26F8                        __ptext33 23DA                        __ptext25 2776  
                      __ptext17 25A6                        __ptext42 2718                        __ptext34 278E  
                      __ptext26 2692                        __ptext18 242A                        __ptext43 2738  
                      __ptext35 279A                        __ptext27 20F4                        __ptext19 1E20  
                      __ptext36 27A4                        __ptext28 1B22                        __ptext37 27AE  
                      __ptext29 223A                        __ptext38 24B0                        __ptext39 266A  
                  _SSP2CON1bits 000ED9                    _SSP2CON2bits 000EDA              __end_of_read_color 2298  
                      isa$xinst 000000                      _RC4STAbits 000EE7                        _vfprintf 21D8  
              ___aomod@dividend 0001         __end_of_calibrate_white 1C70                   ?_detect_color 0015  
                   _PWM6CONbits 000FA4                     _PWM7CONbits 000FA1                       sprintf@ap 006C  
      ??_initDCmotors_parameter 0005                 ___aomod@divisor 0009                     ??_vfpfcnvrt 0046  
               ___aomod@counter 0011                _color_click_init 25DC                        sprintf@f 006E  
                      sprintf@s 0060                      _SSP2DATPPS 000E1D                      _SSP2CLKPPS 000E1C  
                ??_detect_color 0019                      _TX4STAbits 000EE8                    ___aodiv@sign 0012  
               _sendCharSerial4 2776                    ___aomod@sign 0012                   _color_display 2168  
