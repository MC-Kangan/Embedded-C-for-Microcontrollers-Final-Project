

Microchip MPLAB XC8 Assembler V2.35 build 20211206165544 
                                                                                               Mon Mar 07 09:45:41 2022

Microchip MPLAB XC8 C Compiler v2.35 (Free license) build 20211206165544 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=3
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=3
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=3
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=3
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=3
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=3
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=2
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=2
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    59                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    60                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    61                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    62  0000                     
    63                           ; Version 2.35
    64                           ; Generated 05/05/2021 GMT
    65                           ; 
    66                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    67                           ; All rights reserved.
    68                           ; 
    69                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    70                           ; 
    71                           ; Redistribution and use in source and binary forms, with or without modification, are
    72                           ; permitted provided that the following conditions are met:
    73                           ; 
    74                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    75                           ;        conditions and the following disclaimer.
    76                           ; 
    77                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    78                           ;        of conditions and the following disclaimer in the documentation and/or other
    79                           ;        materials provided with the distribution. Publication is not required when
    80                           ;        this file is used in an embedded application.
    81                           ; 
    82                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    83                           ;        software without specific prior written permission.
    84                           ; 
    85                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    86                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    87                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    88                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    89                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    90                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    91                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    92                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    93                           ; 
    94                           ; 
    95                           ; Code-generator required, PIC18F67K40 Definitions
    96                           ; 
    97                           ; SFR Addresses
    98  0000                     
    99                           	psect	idataBANK0
   100  0024AA                     __pidataBANK0:
   101                           	callstack 0
   102                           
   103                           ;initializer for _color
   104  0024AA  01                 	db	1
   105  0000                     _TRISFbits	set	3974
   106  0000                     _TX4REG	set	3812
   107  0000                     _RC4STAbits	set	3815
   108  0000                     _SP4BRGH	set	3814
   109  0000                     _TRISGbits	set	3975
   110  0000                     _TRISEbits	set	3973
   111  0000                     _SSP2CON2bits	set	3802
   112  0000                     _LATG	set	3967
   113  0000                     _LATE	set	3965
   114  0000                     _RX4PPS	set	3605
   115  0000                     _SSP2CLKPPS	set	3612
   116  0000                     _SSP2DATPPS	set	3613
   117  0000                     _ANSELDbits	set	3751
   118  0000                     _SSP2ADD	set	3798
   119  0000                     _SSP2CON1bits	set	3801
   120  0000                     _LATAbits	set	3961
   121  0000                     _LATFbits	set	3966
   122  0000                     _LATGbits	set	3967
   123  0000                     _TRISAbits	set	3969
   124  0000                     _TRISCbits	set	3971
   125  0000                     _TRISDbits	set	3972
   126  0000                     _LATCbits	set	3963
   127  0000                     _LATEbits	set	3965
   128  0000                     _RC4REG	set	3811
   129  0000                     _SP4BRGL	set	3813
   130  0000                     _TX4STAbits	set	3816
   131  0000                     _BAUD4CONbits	set	3817
   132  0000                     _SSP2CON2	set	3802
   133  0000                     _SSP2STAT	set	3800
   134  0000                     _ANSELFbits	set	3764
   135  0000                     _SSP2BUF	set	3797
   136  0000                     _PIE4bits	set	3629
   137  0000                     _PIR4bits	set	3639
   138  0000                     _RC0PPS	set	3682
   139  0000                     _RC7PPS	set	3689
   140  0000                     _RD5PPS	set	3695
   141  0000                     _RE2PPS	set	3700
   142  0000                     _RD6PPS	set	3696
   143  0000                     _T2PR	set	4028
   144  0000                     _T2CONbits	set	4029
   145  0000                     _PWM7DCH	set	4000
   146  0000                     _PWM6DCH	set	4003
   147  0000                     _T2CLKCONbits	set	4031
   148  0000                     _T2HLTbits	set	4030
   149  0000                     _PWM6CONbits	set	4004
   150  0000                     _PWM7CONbits	set	4001
   151  0000                     _ADREFbits	set	3928
   152  0000                     _ADPCH	set	3935
   153  0000                     _ADRESH	set	3940
   154  0000                     _ADCON0bits	set	3936
   155                           
   156                           	psect	smallconst
   157  000E00                     __psmallconst:
   158                           	callstack 0
   159  000E00  00                 	db	0
   160  000E01                     STR_1:
   161                           
   162                           ; BSR set to: 14
   163  000E01  09                 	db	9
   164  000E02  25                 	db	37
   165  000E03  64                 	db	100	;'d'
   166  000E04  09                 	db	9
   167  000E05  25                 	db	37
   168  000E06  64                 	db	100	;'d'
   169  000E07  09                 	db	9
   170  000E08  25                 	db	37
   171  000E09  64                 	db	100	;'d'
   172  000E0A  09                 	db	9
   173  000E0B  25                 	db	37
   174  000E0C  64                 	db	100	;'d'
   175  000E0D  0D                 	db	13
   176  000E0E  0A                 	db	10
   177  000E0F  00                 	db	0
   178  000E10  00                 	db	0	; dummy byte at the end
   179  0000                     
   180                           ; #config settings
   181                           
   182                           	psect	cinit
   183  00216C                     __pcinit:
   184                           	callstack 0
   185  00216C                     start_initialization:
   186                           	callstack 0
   187  00216C                     __initialization:
   188                           	callstack 0
   189                           
   190                           ; Initialize objects allocated to BANK0 (1 bytes)
   191                           ; load TBLPTR registers with __pidataBANK0
   192  00216C  0EAA               	movlw	low __pidataBANK0
   193  00216E  6EF6               	movwf	tblptrl,c
   194  002170  0E24               	movlw	high __pidataBANK0
   195  002172  6EF7               	movwf	tblptrh,c
   196  002174  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   197  002176  6EF8               	movwf	tblptru,c
   198  002178  0009               	tblrd		*+	;fetch initializer
   199  00217A  CFF5 F0FF          	movff	tablat,__pdataBANK0
   200                           
   201                           ; Clear objects allocated to BANK1 (114 bytes)
   202  00217E  EE01  F000         	lfsr	0,__pbssBANK1
   203  002182  0E72               	movlw	114
   204  002184                     clear_0:
   205  002184  6AEE               	clrf	postinc0,c
   206  002186  06E8               	decf	wreg,f,c
   207  002188  E1FD               	bnz	clear_0
   208                           
   209                           ; Clear objects allocated to BANK0 (6 bytes)
   210  00218A  0100               	movlb	0
   211  00218C  6BFE               	clrf	(__pbssBANK0+5)& (0+255),b
   212  00218E  6BFD               	clrf	(__pbssBANK0+4)& (0+255),b
   213  002190  6BFC               	clrf	(__pbssBANK0+3)& (0+255),b
   214  002192  6BFB               	clrf	(__pbssBANK0+2)& (0+255),b
   215  002194  6BFA               	clrf	(__pbssBANK0+1)& (0+255),b
   216  002196  6BF9               	clrf	__pbssBANK0& (0+255),b
   217                           
   218                           ; Clear objects allocated to COMRAM (4 bytes)
   219  002198  6A5F               	clrf	(__pbssCOMRAM+3)& (0+255),c
   220  00219A  6A5E               	clrf	(__pbssCOMRAM+2)& (0+255),c
   221  00219C  6A5D               	clrf	(__pbssCOMRAM+1)& (0+255),c
   222  00219E  6A5C               	clrf	__pbssCOMRAM& (0+255),c
   223  0021A0                     end_of_initialization:
   224                           	callstack 0
   225  0021A0                     __end_of__initialization:
   226                           	callstack 0
   227  0021A0  0E00               	movlw	low (__Lsmallconst shr (0+16))
   228  0021A2  6EF8               	movwf	tblptru,c
   229  0021A4  0E0E               	movlw	high __Lsmallconst
   230  0021A6  6EF7               	movwf	tblptrh,c
   231  0021A8  0100               	movlb	0
   232  0021AA  EFBF  F00E         	goto	_main	;jump to C main() function
   233                           
   234                           	psect	bssCOMRAM
   235  00005C                     __pbssCOMRAM:
   236                           	callstack 0
   237  00005C                     _TxBufReadCnt:
   238                           	callstack 0
   239  00005C                     	ds	1
   240  00005D                     _TxBufWriteCnt:
   241                           	callstack 0
   242  00005D                     	ds	1
   243  00005E                     _RxBufReadCnt:
   244                           	callstack 0
   245  00005E                     	ds	1
   246  00005F                     _RxBufWriteCnt:
   247                           	callstack 0
   248  00005F                     	ds	1
   249                           
   250                           	psect	bssBANK0
   251  0000F9                     __pbssBANK0:
   252                           	callstack 0
   253  0000F9                     _width:
   254                           	callstack 0
   255  0000F9                     	ds	2
   256  0000FB                     _prec:
   257                           	callstack 0
   258  0000FB                     	ds	2
   259  0000FD                     _flags:
   260                           	callstack 0
   261  0000FD                     	ds	2
   262                           
   263                           	psect	dataBANK0
   264  0000FF                     __pdataBANK0:
   265                           	callstack 0
   266  0000FF                     _color:
   267                           	callstack 0
   268  0000FF                     	ds	1
   269                           
   270                           	psect	bssBANK1
   271  000100                     __pbssBANK1:
   272                           	callstack 0
   273  000100                     _EUSART4TXbuf:
   274                           	callstack 0
   275  000100                     	ds	60
   276  00013C                     _EUSART4RXbuf:
   277                           	callstack 0
   278  00013C                     	ds	20
   279  000150                     _nout:
   280                           	callstack 0
   281  000150                     	ds	2
   282  000152                     _dbuf:
   283                           	callstack 0
   284  000152                     	ds	32
   285                           
   286                           	psect	cstackBANK0
   287  000060                     __pcstackBANK0:
   288                           	callstack 0
   289  000060                     ?_sprintf:
   290                           	callstack 0
   291  000060                     sprintf@s:
   292                           	callstack 0
   293                           
   294                           ; 2 bytes @ 0x0
   295  000060                     	ds	2
   296  000062                     sprintf@fmt:
   297                           	callstack 0
   298                           
   299                           ; 2 bytes @ 0x2
   300  000062                     	ds	10
   301  00006C                     sprintf@ap:
   302                           	callstack 0
   303                           
   304                           ; 2 bytes @ 0xC
   305  00006C                     	ds	2
   306  00006E                     sprintf@f:
   307                           	callstack 0
   308                           
   309                           ; 11 bytes @ 0xE
   310  00006E                     	ds	11
   311  000079                     color_display@buf:
   312                           	callstack 0
   313                           
   314                           ; 100 bytes @ 0x19
   315  000079                     	ds	100
   316  0000DD                     main@rgb:
   317                           	callstack 0
   318                           
   319                           ; 8 bytes @ 0x7D
   320  0000DD                     	ds	8
   321  0000E5                     main@motorR:
   322                           	callstack 0
   323                           
   324                           ; 10 bytes @ 0x85
   325  0000E5                     	ds	10
   326  0000EF                     main@motorL:
   327                           	callstack 0
   328                           
   329                           ; 10 bytes @ 0x8F
   330  0000EF                     	ds	10
   331                           
   332                           	psect	cstackCOMRAM
   333  000001                     __pcstackCOMRAM:
   334                           	callstack 0
   335  000001                     ??_I2C_2_Master_Idle:
   336  000001                     ?_strlen:
   337                           	callstack 0
   338  000001                     ?___lwdiv:
   339                           	callstack 0
   340  000001                     ?___aodiv:
   341                           	callstack 0
   342  000001                     ?___aomod:
   343                           	callstack 0
   344  000001                     sendCharSerial4@charToSend:
   345                           	callstack 0
   346  000001                     compare@value2compare:
   347                           	callstack 0
   348  000001                     initDCmotorsPWM@PWMperiod:
   349                           	callstack 0
   350  000001                     initDCmotors_parameter@motorL:
   351                           	callstack 0
   352  000001                     ___lwdiv@dividend:
   353                           	callstack 0
   354  000001                     fputc@c:
   355                           	callstack 0
   356  000001                     strlen@s:
   357                           	callstack 0
   358  000001                     ___aodiv@dividend:
   359                           	callstack 0
   360  000001                     ___aomod@dividend:
   361                           	callstack 0
   362                           
   363                           ; 8 bytes @ 0x0
   364  000001                     	ds	1
   365  000002                     ??_I2C_2_Master_Read:
   366  000002                     I2C_2_Master_Write@data_byte:
   367                           	callstack 0
   368  000002                     sendStringSerial4@string:
   369                           	callstack 0
   370                           
   371                           ; 2 bytes @ 0x1
   372  000002                     	ds	1
   373  000003                     color_writetoaddr@value:
   374                           	callstack 0
   375  000003                     I2C_2_Master_Read@ack:
   376                           	callstack 0
   377  000003                     compare@upper:
   378                           	callstack 0
   379  000003                     initDCmotors_parameter@motorR:
   380                           	callstack 0
   381  000003                     ___lwdiv@divisor:
   382                           	callstack 0
   383  000003                     fputc@fp:
   384                           	callstack 0
   385  000003                     strlen@a:
   386                           	callstack 0
   387                           
   388                           ; 2 bytes @ 0x2
   389  000003                     	ds	1
   390  000004                     color_writetoaddr@address:
   391                           	callstack 0
   392  000004                     I2C_2_Master_Read@tmp:
   393                           	callstack 0
   394                           
   395                           ; 1 bytes @ 0x3
   396  000004                     	ds	1
   397  000005                     ??_fputc:
   398  000005                     ??_color_click_init:
   399  000005                     ?_color_read_Red:
   400                           	callstack 0
   401  000005                     ?_color_read_Blue:
   402                           	callstack 0
   403  000005                     ?_color_read_Green:
   404                           	callstack 0
   405  000005                     ?_color_read_Clear:
   406                           	callstack 0
   407  000005                     compare@lower:
   408                           	callstack 0
   409  000005                     ___lwdiv@quotient:
   410                           	callstack 0
   411                           
   412                           ; 2 bytes @ 0x4
   413  000005                     	ds	2
   414  000007                     ??_color_read_Red:
   415  000007                     ??_color_read_Blue:
   416  000007                     ??_color_read_Green:
   417  000007                     ??_color_read_Clear:
   418  000007                     compare@result:
   419                           	callstack 0
   420  000007                     ___lwdiv@counter:
   421                           	callstack 0
   422                           
   423                           ; 1 bytes @ 0x6
   424  000007                     	ds	1
   425  000008                     ?___wmul:
   426                           	callstack 0
   427  000008                     ___wmul@multiplier:
   428                           	callstack 0
   429                           
   430                           ; 2 bytes @ 0x7
   431  000008                     	ds	1
   432  000009                     ___aodiv@divisor:
   433                           	callstack 0
   434  000009                     ___aomod@divisor:
   435                           	callstack 0
   436                           
   437                           ; 8 bytes @ 0x8
   438  000009                     	ds	1
   439  00000A                     color_read_Red@tmp:
   440                           	callstack 0
   441  00000A                     color_read_Blue@tmp:
   442                           	callstack 0
   443  00000A                     color_read_Green@tmp:
   444                           	callstack 0
   445  00000A                     color_read_Clear@tmp:
   446                           	callstack 0
   447  00000A                     ___wmul@multiplicand:
   448                           	callstack 0
   449  00000A                     fputs@s:
   450                           	callstack 0
   451                           
   452                           ; 2 bytes @ 0x9
   453  00000A                     	ds	2
   454  00000C                     get_color@m:
   455                           	callstack 0
   456  00000C                     ___wmul@product:
   457                           	callstack 0
   458  00000C                     fputs@fp:
   459                           	callstack 0
   460                           
   461                           ; 2 bytes @ 0xB
   462  00000C                     	ds	2
   463  00000E                     ?___awdiv:
   464                           	callstack 0
   465  00000E                     fputs@c:
   466                           	callstack 0
   467  00000E                     LED_G@m:
   468                           	callstack 0
   469  00000E                     detect_color_C@m:
   470                           	callstack 0
   471  00000E                     ___awdiv@dividend:
   472                           	callstack 0
   473                           
   474                           ; 2 bytes @ 0xD
   475  00000E                     	ds	1
   476  00000F                     fputs@i:
   477                           	callstack 0
   478                           
   479                           ; 2 bytes @ 0xE
   480  00000F                     	ds	1
   481  000010                     ??_LED_G:
   482  000010                     detect_color_C@RG_ratio:
   483                           	callstack 0
   484  000010                     ___awdiv@divisor:
   485                           	callstack 0
   486                           
   487                           ; 2 bytes @ 0xF
   488  000010                     	ds	1
   489  000011                     ?_pad:
   490                           	callstack 0
   491  000011                     ___aodiv@counter:
   492                           	callstack 0
   493  000011                     ___aomod@counter:
   494                           	callstack 0
   495  000011                     pad@fp:
   496                           	callstack 0
   497                           
   498                           ; 2 bytes @ 0x10
   499  000011                     	ds	1
   500  000012                     ___aodiv@sign:
   501                           	callstack 0
   502  000012                     ___aomod@sign:
   503                           	callstack 0
   504  000012                     ___awdiv@counter:
   505                           	callstack 0
   506  000012                     detect_color_C@RB_ratio:
   507                           	callstack 0
   508                           
   509                           ; 2 bytes @ 0x11
   510  000012                     	ds	1
   511  000013                     ?_abs:
   512                           	callstack 0
   513  000013                     ___awdiv@sign:
   514                           	callstack 0
   515  000013                     pad@buf:
   516                           	callstack 0
   517  000013                     abs@a:
   518                           	callstack 0
   519  000013                     ___aodiv@quotient:
   520                           	callstack 0
   521                           
   522                           ; 8 bytes @ 0x12
   523  000013                     	ds	1
   524  000014                     ___awdiv@quotient:
   525                           	callstack 0
   526                           
   527                           ; 2 bytes @ 0x13
   528  000014                     	ds	1
   529  000015                     ??_abs:
   530  000015                     pad@p:
   531                           	callstack 0
   532                           
   533                           ; 2 bytes @ 0x14
   534  000015                     	ds	1
   535  000016                     setMotorPWM@m:
   536                           	callstack 0
   537                           
   538                           ; 2 bytes @ 0x15
   539  000016                     	ds	1
   540  000017                     ??_pad:
   541                           
   542                           ; 1 bytes @ 0x16
   543  000017                     	ds	1
   544  000018                     ??_setMotorPWM:
   545  000018                     pad@i:
   546                           	callstack 0
   547                           
   548                           ; 2 bytes @ 0x17
   549  000018                     	ds	2
   550  00001A                     pad@w:
   551                           	callstack 0
   552                           
   553                           ; 2 bytes @ 0x19
   554  00001A                     	ds	2
   555  00001C                     ?_dtoa:
   556                           	callstack 0
   557  00001C                     dtoa@fp:
   558                           	callstack 0
   559                           
   560                           ; 2 bytes @ 0x1B
   561  00001C                     	ds	2
   562  00001E                     dtoa@d:
   563                           	callstack 0
   564                           
   565                           ; 8 bytes @ 0x1D
   566  00001E                     	ds	1
   567  00001F                     setMotorPWM@PWMduty:
   568                           	callstack 0
   569                           
   570                           ; 2 bytes @ 0x1E
   571  00001F                     	ds	2
   572  000021                     stop@mL:
   573                           	callstack 0
   574  000021                     turnRight@mL:
   575                           	callstack 0
   576  000021                     fullSpeedAhead@mL:
   577                           	callstack 0
   578                           
   579                           ; 2 bytes @ 0x20
   580  000021                     	ds	2
   581  000023                     stop@mR:
   582                           	callstack 0
   583  000023                     turnRight@mR:
   584                           	callstack 0
   585  000023                     fullSpeedAhead@mR:
   586                           	callstack 0
   587                           
   588                           ; 2 bytes @ 0x22
   589  000023                     	ds	2
   590  000025                     ??_turnRight:
   591  000025                     ??_stop:
   592  000025                     ??_fullSpeedAhead:
   593                           
   594                           ; 1 bytes @ 0x24
   595  000025                     	ds	1
   596  000026                     ??_dtoa:
   597  000026                     movement@mL:
   598                           	callstack 0
   599                           
   600                           ; 2 bytes @ 0x25
   601  000026                     	ds	2
   602  000028                     movement@mR:
   603                           	callstack 0
   604                           
   605                           ; 2 bytes @ 0x27
   606  000028                     	ds	2
   607  00002A                     ??_movement:
   608                           
   609                           ; 1 bytes @ 0x29
   610  00002A                     	ds	2
   611  00002C                     movement@color:
   612                           	callstack 0
   613                           
   614                           ; 1 bytes @ 0x2B
   615  00002C                     	ds	2
   616  00002E                     _dtoa$2122:
   617                           	callstack 0
   618                           
   619                           ; 2 bytes @ 0x2D
   620  00002E                     	ds	2
   621  000030                     dtoa@p:
   622                           	callstack 0
   623                           
   624                           ; 2 bytes @ 0x2F
   625  000030                     	ds	2
   626  000032                     dtoa@w:
   627                           	callstack 0
   628                           
   629                           ; 2 bytes @ 0x31
   630  000032                     	ds	2
   631  000034                     dtoa@s:
   632                           	callstack 0
   633                           
   634                           ; 2 bytes @ 0x33
   635  000034                     	ds	2
   636  000036                     dtoa@n:
   637                           	callstack 0
   638                           
   639                           ; 8 bytes @ 0x35
   640  000036                     	ds	8
   641  00003E                     dtoa@i:
   642                           	callstack 0
   643                           
   644                           ; 2 bytes @ 0x3D
   645  00003E                     	ds	2
   646  000040                     ?_vfpfcnvrt:
   647                           	callstack 0
   648  000040                     vfpfcnvrt@fp:
   649                           	callstack 0
   650                           
   651                           ; 2 bytes @ 0x3F
   652  000040                     	ds	2
   653  000042                     vfpfcnvrt@fmt:
   654                           	callstack 0
   655                           
   656                           ; 2 bytes @ 0x41
   657  000042                     	ds	2
   658  000044                     vfpfcnvrt@ap:
   659                           	callstack 0
   660                           
   661                           ; 2 bytes @ 0x43
   662  000044                     	ds	2
   663  000046                     ??_vfpfcnvrt:
   664                           
   665                           ; 1 bytes @ 0x45
   666  000046                     	ds	2
   667  000048                     vfpfcnvrt@ll:
   668                           	callstack 0
   669                           
   670                           ; 8 bytes @ 0x47
   671  000048                     	ds	8
   672  000050                     ?_vfprintf:
   673                           	callstack 0
   674  000050                     vfprintf@fp:
   675                           	callstack 0
   676                           
   677                           ; 2 bytes @ 0x4F
   678  000050                     	ds	2
   679  000052                     vfprintf@fmt:
   680                           	callstack 0
   681                           
   682                           ; 2 bytes @ 0x51
   683  000052                     	ds	2
   684  000054                     vfprintf@ap:
   685                           	callstack 0
   686                           
   687                           ; 2 bytes @ 0x53
   688  000054                     	ds	2
   689  000056                     vfprintf@cfmt:
   690                           	callstack 0
   691                           
   692                           ; 2 bytes @ 0x55
   693  000056                     	ds	2
   694  000058                     color_display@m:
   695                           	callstack 0
   696                           
   697                           ; 2 bytes @ 0x57
   698  000058                     	ds	2
   699  00005A                     ??_main:
   700                           
   701                           ; 1 bytes @ 0x59
   702  00005A                     	ds	2
   703                           
   704 ;;
   705 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   706 ;;
   707 ;; *************** function _main *****************
   708 ;; Defined at:
   709 ;;		line 30 in file "main.c"
   710 ;; Parameters:    Size  Location     Type
   711 ;;		None
   712 ;; Auto vars:     Size  Location     Type
   713 ;;  motorL         10  143[BANK0 ] struct DC_motor
   714 ;;  motorR         10  133[BANK0 ] struct DC_motor
   715 ;;  rgb             8  125[BANK0 ] struct color_rgb
   716 ;;  color           1    0        unsigned char 
   717 ;; Return value:  Size  Location     Type
   718 ;;                  1    wreg      void 
   719 ;; Registers used:
   720 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   721 ;; Tracked objects:
   722 ;;		On entry : 0/0
   723 ;;		On exit  : 0/0
   724 ;;		Unchanged: 0/0
   725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   727 ;;      Locals:         0      28       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   728 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   729 ;;      Totals:         2      28       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   730 ;;Total ram usage:       30 bytes
   731 ;; Hardware stack levels required when called: 9
   732 ;; This function calls:
   733 ;;		_I2C_2_Master_Init
   734 ;;		_LED_G
   735 ;;		_color_click_init
   736 ;;		_color_display
   737 ;;		_detect_color_C
   738 ;;		_fullSpeedAhead
   739 ;;		_initDCmotorsPWM
   740 ;;		_initDCmotors_parameter
   741 ;;		_initUSART4
   742 ;;		_movement
   743 ;;		_stop
   744 ;; This function is called by:
   745 ;;		Startup code after reset
   746 ;; This function uses a non-reentrant model
   747 ;;
   748                           
   749                           	psect	text0
   750  001D7E                     __ptext0:
   751                           	callstack 0
   752  001D7E                     _main:
   753                           	callstack 22
   754  001D7E                     
   755                           ;main.c: 31:     I2C_2_Master_Init();
   756  001D7E  ECD8  F011         	call	_I2C_2_Master_Init	;wreg free
   757  001D82                     
   758                           ;main.c: 32:     color_click_init();
   759  001D82  EC90  F011         	call	_color_click_init	;wreg free
   760  001D86                     
   761                           ;main.c: 33:     initDCmotorsPWM(199);
   762  001D86  0E00               	movlw	0
   763  001D88  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   764  001D8A  0EC7               	movlw	199
   765  001D8C  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
   766  001D8E  ECD7  F010         	call	_initDCmotorsPWM	;wreg free
   767  001D92                     
   768                           ;main.c: 35:     initUSART4();
   769  001D92  EC24  F012         	call	_initUSART4	;wreg free
   770  001D96                     
   771                           ;main.c: 37:     struct color_rgb rgb;;main.c: 38:     struct DC_motor motorL, motorR;;m
      +                          ain.c: 40:     initDCmotors_parameter(&motorL, &motorR);
   772  001D96  0EEF               	movlw	low main@motorL
   773  001D98  6E01               	movwf	initDCmotors_parameter@motorL^0,c
   774  001D9A  0E00               	movlw	high main@motorL
   775  001D9C  6E02               	movwf	(initDCmotors_parameter@motorL+1)^0,c
   776  001D9E  0EE5               	movlw	low main@motorR
   777  001DA0  6E03               	movwf	initDCmotors_parameter@motorR^0,c
   778  001DA2  0E00               	movlw	high main@motorR
   779  001DA4  6E04               	movwf	(initDCmotors_parameter@motorR+1)^0,c
   780  001DA6  EC46  F00C         	call	_initDCmotors_parameter	;wreg free
   781  001DAA                     
   782                           ;main.c: 42:     TRISFbits.TRISF6 = 0;
   783  001DAA  9C86               	bcf	134,6,c	;volatile
   784  001DAC                     
   785                           ;main.c: 43:     LATFbits.LATF6 = 0;
   786  001DAC  9C7E               	bcf	126,6,c	;volatile
   787  001DAE                     
   788                           ;main.c: 45:     TRISGbits.TRISG1 = 0;
   789  001DAE  9287               	bcf	135,1,c	;volatile
   790  001DB0                     
   791                           ;main.c: 46:     TRISFbits.TRISF7 = 0;
   792  001DB0  9E86               	bcf	134,7,c	;volatile
   793  001DB2                     
   794                           ;main.c: 47:     TRISAbits.TRISA4 = 0;
   795  001DB2  9881               	bcf	129,4,c	;volatile
   796  001DB4                     
   797                           ;main.c: 48:     LATGbits.LATG1 = 1;
   798  001DB4  827F               	bsf	127,1,c	;volatile
   799  001DB6                     
   800                           ;main.c: 49:     LATFbits.LATF7 = 1;
   801  001DB6  8E7E               	bsf	126,7,c	;volatile
   802  001DB8                     
   803                           ;main.c: 50:     LATAbits.LATA4 = 1;
   804  001DB8  8879               	bsf	121,4,c	;volatile
   805  001DBA                     l2638:
   806                           
   807                           ;main.c: 56:         LED_G(&rgb);
   808  001DBA  0EDD               	movlw	low main@rgb
   809  001DBC  6E0E               	movwf	LED_G@m^0,c
   810  001DBE  0E00               	movlw	high main@rgb
   811  001DC0  6E0F               	movwf	(LED_G@m+1)^0,c
   812  001DC2  ECC2  F011         	call	_LED_G	;wreg free
   813  001DC6                     
   814                           ;main.c: 57:         color_display(&rgb);
   815  001DC6  0EDD               	movlw	low main@rgb
   816  001DC8  6E58               	movwf	color_display@m^0,c
   817  001DCA  0E00               	movlw	high main@rgb
   818  001DCC  6E59               	movwf	(color_display@m+1)^0,c
   819  001DCE  EC33  F00F         	call	_color_display	;wreg free
   820  001DD2                     
   821                           ;main.c: 58:         _delay((unsigned long)((200)*(64000000/4000.0)));
   822  001DD2  0E11               	movlw	17
   823  001DD4  6E5B               	movwf	(??_main+1)^0,c
   824  001DD6  0E3C               	movlw	60
   825  001DD8  6E5A               	movwf	??_main^0,c
   826  001DDA  0ECB               	movlw	203
   827  001DDC                     u1687:
   828  001DDC  2EE8               	decfsz	wreg,f,c
   829  001DDE  D7FE               	bra	u1687
   830  001DE0  2E5A               	decfsz	??_main^0,f,c
   831  001DE2  D7FC               	bra	u1687
   832  001DE4  2E5B               	decfsz	(??_main+1)^0,f,c
   833  001DE6  D7FA               	bra	u1687
   834  001DE8  F000               	nop	
   835  001DEA  EFDD  F00E         	goto	l2638
   836  001DEE  EF00  F000         	goto	start
   837  001DF2                     __end_of_main:
   838                           	callstack 0
   839                           
   840 ;; *************** function _stop *****************
   841 ;; Defined at:
   842 ;;		line 79 in file "dc_motor.c"
   843 ;; Parameters:    Size  Location     Type
   844 ;;  mL              2   32[COMRAM] PTR struct DC_motor
   845 ;;		 -> main@motorL(10), 
   846 ;;  mR              2   34[COMRAM] PTR struct DC_motor
   847 ;;		 -> main@motorR(10), 
   848 ;; Auto vars:     Size  Location     Type
   849 ;;		None
   850 ;; Return value:  Size  Location     Type
   851 ;;                  1    wreg      void 
   852 ;; Registers used:
   853 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   854 ;; Tracked objects:
   855 ;;		On entry : 0/0
   856 ;;		On exit  : 0/0
   857 ;;		Unchanged: 0/0
   858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   859 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   860 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   861 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   862 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   863 ;;Total ram usage:        5 bytes
   864 ;; Hardware stack levels used: 1
   865 ;; Hardware stack levels required when called: 2
   866 ;; This function calls:
   867 ;;		_setMotorPWM
   868 ;; This function is called by:
   869 ;;		_main
   870 ;; This function uses a non-reentrant model
   871 ;;
   872                           
   873                           	psect	text1
   874  001C5E                     __ptext1:
   875                           	callstack 0
   876  001C5E                     _stop:
   877                           	callstack 28
   878  001C5E                     
   879                           ;dc_motor.c: 79: void stop(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 80: {;d
      +                          c_motor.c: 81:     while (mL->power >0 || mR->power >0){
   880  001C5E  EF68  F00E         	goto	l2498
   881  001C62                     l2484:
   882                           
   883                           ;dc_motor.c: 82:         if (mL->power !=0){mL->power -= 5;}
   884  001C62  C021  FFD9         	movff	stop@mL,fsr2l
   885  001C66  C022  FFDA         	movff	stop@mL+1,fsr2h
   886  001C6A  50DF               	movf	indf2,w,c
   887  001C6C  B4D8               	btfsc	status,2,c
   888  001C6E  EF3B  F00E         	goto	u1561
   889  001C72  EF3D  F00E         	goto	u1560
   890  001C76                     u1561:
   891  001C76  EF43  F00E         	goto	l2488
   892  001C7A                     u1560:
   893  001C7A  C021  FFD9         	movff	stop@mL,fsr2l
   894  001C7E  C022  FFDA         	movff	stop@mL+1,fsr2h
   895  001C82  0E05               	movlw	5
   896  001C84  5EDF               	subwf	indf2,f,c
   897  001C86                     l2488:
   898                           
   899                           ;dc_motor.c: 83:         if (mR->power !=0){mR->power -= 5;}
   900  001C86  C023  FFD9         	movff	stop@mR,fsr2l
   901  001C8A  C024  FFDA         	movff	stop@mR+1,fsr2h
   902  001C8E  50DF               	movf	indf2,w,c
   903  001C90  B4D8               	btfsc	status,2,c
   904  001C92  EF4D  F00E         	goto	u1571
   905  001C96  EF4F  F00E         	goto	u1570
   906  001C9A                     u1571:
   907  001C9A  EF55  F00E         	goto	l2492
   908  001C9E                     u1570:
   909  001C9E  C023  FFD9         	movff	stop@mR,fsr2l
   910  001CA2  C024  FFDA         	movff	stop@mR+1,fsr2h
   911  001CA6  0E05               	movlw	5
   912  001CA8  5EDF               	subwf	indf2,f,c
   913  001CAA                     l2492:
   914                           
   915                           ;dc_motor.c: 84:         setMotorPWM(mL);
   916  001CAA  C021  F016         	movff	stop@mL,setMotorPWM@m
   917  001CAE  C022  F017         	movff	stop@mL+1,setMotorPWM@m+1
   918  001CB2  EC7B  F008         	call	_setMotorPWM	;wreg free
   919  001CB6                     
   920                           ;dc_motor.c: 85:         setMotorPWM(mR);
   921  001CB6  C023  F016         	movff	stop@mR,setMotorPWM@m
   922  001CBA  C024  F017         	movff	stop@mR+1,setMotorPWM@m+1
   923  001CBE  EC7B  F008         	call	_setMotorPWM	;wreg free
   924  001CC2                     
   925                           ;dc_motor.c: 86:         _delay((unsigned long)((10)*(64000000/4000.0)));
   926  001CC2  0ED0               	movlw	208
   927  001CC4  6E25               	movwf	??_stop^0,c
   928  001CC6  0ECA               	movlw	202
   929  001CC8                     u1697:
   930  001CC8  2EE8               	decfsz	wreg,f,c
   931  001CCA  D7FE               	bra	u1697
   932  001CCC  2E25               	decfsz	??_stop^0,f,c
   933  001CCE  D7FC               	bra	u1697
   934  001CD0                     l2498:
   935                           
   936                           ;dc_motor.c: 81:     while (mL->power >0 || mR->power >0){
   937  001CD0  C021  FFD9         	movff	stop@mL,fsr2l
   938  001CD4  C022  FFDA         	movff	stop@mL+1,fsr2h
   939  001CD8  50DF               	movf	indf2,w,c
   940  001CDA  A4D8               	btfss	status,2,c
   941  001CDC  EF72  F00E         	goto	u1581
   942  001CE0  EF74  F00E         	goto	u1580
   943  001CE4                     u1581:
   944  001CE4  EF31  F00E         	goto	l2484
   945  001CE8                     u1580:
   946  001CE8  C023  FFD9         	movff	stop@mR,fsr2l
   947  001CEC  C024  FFDA         	movff	stop@mR+1,fsr2h
   948  001CF0  50DF               	movf	indf2,w,c
   949  001CF2  A4D8               	btfss	status,2,c
   950  001CF4  EF7E  F00E         	goto	u1591
   951  001CF8  EF80  F00E         	goto	u1590
   952  001CFC                     u1591:
   953  001CFC  EF31  F00E         	goto	l2484
   954  001D00                     u1590:
   955  001D00  0012               	return		;funcret
   956  001D02                     __end_of_stop:
   957                           	callstack 0
   958                           
   959 ;; *************** function _movement *****************
   960 ;; Defined at:
   961 ;;		line 177 in file "color.c"
   962 ;; Parameters:    Size  Location     Type
   963 ;;  color           1    wreg     unsigned char 
   964 ;;  mL              2   37[COMRAM] PTR struct DC_motor
   965 ;;		 -> main@motorL(10), 
   966 ;;  mR              2   39[COMRAM] PTR struct DC_motor
   967 ;;		 -> main@motorR(10), 
   968 ;; Auto vars:     Size  Location     Type
   969 ;;  color           1   43[COMRAM] unsigned char 
   970 ;; Return value:  Size  Location     Type
   971 ;;                  1    wreg      void 
   972 ;; Registers used:
   973 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   974 ;; Tracked objects:
   975 ;;		On entry : 0/0
   976 ;;		On exit  : 0/0
   977 ;;		Unchanged: 0/0
   978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   979 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   980 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   981 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   982 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   983 ;;Total ram usage:        7 bytes
   984 ;; Hardware stack levels used: 1
   985 ;; Hardware stack levels required when called: 3
   986 ;; This function calls:
   987 ;;		_turnRight
   988 ;; This function is called by:
   989 ;;		_main
   990 ;; This function uses a non-reentrant model
   991 ;;
   992                           
   993                           	psect	text2
   994  002232                     __ptext2:
   995                           	callstack 0
   996  002232                     _movement:
   997                           	callstack 27
   998                           
   999                           ;incstack = 0
  1000                           ;movement@color stored from wreg
  1001  002232  6E2C               	movwf	movement@color^0,c
  1002  002234                     
  1003                           ;color.c: 177: void movement (unsigned char color,struct DC_motor *mL, struct DC_motor *
      +                          mR);color.c: 178: {;color.c: 179:     if (color == 1){turnRight(mL, mR); _delay((unsigne
      +                          d long)((500)*(64000000/4000.0)));}
  1004  002234  042C               	decf	movement@color^0,w,c
  1005  002236  A4D8               	btfss	status,2,c
  1006  002238  EF20  F011         	goto	u1551
  1007  00223C  EF22  F011         	goto	u1550
  1008  002240                     u1551:
  1009  002240  EF38  F011         	goto	l96
  1010  002244                     u1550:
  1011  002244  C026  F021         	movff	movement@mL,turnRight@mL
  1012  002248  C027  F022         	movff	movement@mL+1,turnRight@mL+1
  1013  00224C  C028  F023         	movff	movement@mR,turnRight@mR
  1014  002250  C029  F024         	movff	movement@mR+1,turnRight@mR+1
  1015  002254  EC81  F00E         	call	_turnRight	;wreg free
  1016  002258  0E29               	movlw	41
  1017  00225A  6E2B               	movwf	(??_movement+1)^0,c
  1018  00225C  0E96               	movlw	150
  1019  00225E  6E2A               	movwf	??_movement^0,c
  1020  002260  0E7F               	movlw	127
  1021  002262                     u1707:
  1022  002262  2EE8               	decfsz	wreg,f,c
  1023  002264  D7FE               	bra	u1707
  1024  002266  2E2A               	decfsz	??_movement^0,f,c
  1025  002268  D7FC               	bra	u1707
  1026  00226A  2E2B               	decfsz	(??_movement+1)^0,f,c
  1027  00226C  D7FA               	bra	u1707
  1028  00226E  F000               	nop	
  1029  002270                     l96:
  1030  002270  0012               	return		;funcret
  1031  002272                     __end_of_movement:
  1032                           	callstack 0
  1033                           
  1034 ;; *************** function _turnRight *****************
  1035 ;; Defined at:
  1036 ;;		line 105 in file "dc_motor.c"
  1037 ;; Parameters:    Size  Location     Type
  1038 ;;  mL              2   32[COMRAM] PTR struct DC_motor
  1039 ;;		 -> main@motorL(10), 
  1040 ;;  mR              2   34[COMRAM] PTR struct DC_motor
  1041 ;;		 -> main@motorR(10), 
  1042 ;; Auto vars:     Size  Location     Type
  1043 ;;		None
  1044 ;; Return value:  Size  Location     Type
  1045 ;;                  1    wreg      void 
  1046 ;; Registers used:
  1047 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1048 ;; Tracked objects:
  1049 ;;		On entry : 0/0
  1050 ;;		On exit  : 0/0
  1051 ;;		Unchanged: 0/0
  1052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1053 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1054 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1055 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1056 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1057 ;;Total ram usage:        5 bytes
  1058 ;; Hardware stack levels used: 1
  1059 ;; Hardware stack levels required when called: 2
  1060 ;; This function calls:
  1061 ;;		_setMotorPWM
  1062 ;; This function is called by:
  1063 ;;		_movement
  1064 ;; This function uses a non-reentrant model
  1065 ;;
  1066                           
  1067                           	psect	text3
  1068  001D02                     __ptext3:
  1069                           	callstack 0
  1070  001D02                     _turnRight:
  1071                           	callstack 27
  1072  001D02                     
  1073                           ;dc_motor.c: 105: void turnRight(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 1
      +                          06: {;dc_motor.c: 107:     mL->direction=1;
  1074  001D02  EE20 F001          	lfsr	2,1
  1075  001D06  5021               	movf	turnRight@mL^0,w,c
  1076  001D08  26D9               	addwf	fsr2l,f,c
  1077  001D0A  5022               	movf	(turnRight@mL+1)^0,w,c
  1078  001D0C  22DA               	addwfc	fsr2h,f,c
  1079  001D0E  0E01               	movlw	1
  1080  001D10  6EDF               	movwf	indf2,c
  1081                           
  1082                           ;dc_motor.c: 108:     mR->direction=1;
  1083  001D12  EE20 F001          	lfsr	2,1
  1084  001D16  5023               	movf	turnRight@mR^0,w,c
  1085  001D18  26D9               	addwf	fsr2l,f,c
  1086  001D1A  5024               	movf	(turnRight@mR+1)^0,w,c
  1087  001D1C  22DA               	addwfc	fsr2h,f,c
  1088  001D1E  0E01               	movlw	1
  1089  001D20  6EDF               	movwf	indf2,c
  1090                           
  1091                           ;dc_motor.c: 109:     while (mL->power <40){
  1092  001D22  EFB2  F00E         	goto	l2392
  1093  001D26                     l2384:
  1094                           
  1095                           ;dc_motor.c: 110:         mL->power += 5;
  1096  001D26  C021  FFD9         	movff	turnRight@mL,fsr2l
  1097  001D2A  C022  FFDA         	movff	turnRight@mL+1,fsr2h
  1098  001D2E  0E05               	movlw	5
  1099  001D30  26DF               	addwf	indf2,f,c
  1100                           
  1101                           ;dc_motor.c: 111:         mR->power = 0;
  1102  001D32  C023  FFD9         	movff	turnRight@mR,fsr2l
  1103  001D36  C024  FFDA         	movff	turnRight@mR+1,fsr2h
  1104  001D3A  0E00               	movlw	0
  1105  001D3C  6EDF               	movwf	indf2,c
  1106  001D3E                     
  1107                           ;dc_motor.c: 112:         setMotorPWM(mL);
  1108  001D3E  C021  F016         	movff	turnRight@mL,setMotorPWM@m
  1109  001D42  C022  F017         	movff	turnRight@mL+1,setMotorPWM@m+1
  1110  001D46  EC7B  F008         	call	_setMotorPWM	;wreg free
  1111  001D4A                     
  1112                           ;dc_motor.c: 113:         setMotorPWM(mR);
  1113  001D4A  C023  F016         	movff	turnRight@mR,setMotorPWM@m
  1114  001D4E  C024  F017         	movff	turnRight@mR+1,setMotorPWM@m+1
  1115  001D52  EC7B  F008         	call	_setMotorPWM	;wreg free
  1116  001D56                     
  1117                           ;dc_motor.c: 114:         _delay((unsigned long)((10)*(64000000/4000.0)));
  1118  001D56  0ED0               	movlw	208
  1119  001D58  6E25               	movwf	??_turnRight^0,c
  1120  001D5A  0ECA               	movlw	202
  1121  001D5C                     u1717:
  1122  001D5C  2EE8               	decfsz	wreg,f,c
  1123  001D5E  D7FE               	bra	u1717
  1124  001D60  2E25               	decfsz	??_turnRight^0,f,c
  1125  001D62  D7FC               	bra	u1717
  1126  001D64                     l2392:
  1127                           
  1128                           ;dc_motor.c: 109:     while (mL->power <40){
  1129  001D64  C021  FFD9         	movff	turnRight@mL,fsr2l
  1130  001D68  C022  FFDA         	movff	turnRight@mL+1,fsr2h
  1131  001D6C  0E27               	movlw	39
  1132  001D6E  64DF               	cpfsgt	indf2,c
  1133  001D70  EFBC  F00E         	goto	u1491
  1134  001D74  EFBE  F00E         	goto	u1490
  1135  001D78                     u1491:
  1136  001D78  EF93  F00E         	goto	l2384
  1137  001D7C                     u1490:
  1138  001D7C  0012               	return		;funcret
  1139  001D7E                     __end_of_turnRight:
  1140                           	callstack 0
  1141                           
  1142 ;; *************** function _initUSART4 *****************
  1143 ;; Defined at:
  1144 ;;		line 4 in file "serial.c"
  1145 ;; Parameters:    Size  Location     Type
  1146 ;;		None
  1147 ;; Auto vars:     Size  Location     Type
  1148 ;;		None
  1149 ;; Return value:  Size  Location     Type
  1150 ;;                  1    wreg      void 
  1151 ;; Registers used:
  1152 ;;		wreg, status,2
  1153 ;; Tracked objects:
  1154 ;;		On entry : 0/0
  1155 ;;		On exit  : 0/0
  1156 ;;		Unchanged: 0/0
  1157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1158 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1159 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1160 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1161 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1162 ;;Total ram usage:        0 bytes
  1163 ;; Hardware stack levels used: 1
  1164 ;; This function calls:
  1165 ;;		Nothing
  1166 ;; This function is called by:
  1167 ;;		_main
  1168 ;; This function uses a non-reentrant model
  1169 ;;
  1170                           
  1171                           	psect	text4
  1172  002448                     __ptext4:
  1173                           	callstack 0
  1174  002448                     _initUSART4:
  1175                           	callstack 30
  1176  002448                     
  1177                           ;serial.c: 8:     RC0PPS = 0x12;
  1178  002448  0E12               	movlw	18
  1179  00244A  010E               	movlb	14	; () banked
  1180  00244C  6F62               	movwf	98,b	;volatile
  1181                           
  1182                           ;serial.c: 9:     RX4PPS = 0x11;
  1183  00244E  0E11               	movlw	17
  1184  002450  6F15               	movwf	21,b	;volatile
  1185  002452                     
  1186                           ; BSR set to: 14
  1187                           ;serial.c: 11:     BAUD4CONbits.BRG16 = 0;
  1188  002452  97E9               	bcf	233,3,b	;volatile
  1189  002454                     
  1190                           ; BSR set to: 14
  1191                           ;serial.c: 12:     TX4STAbits.BRGH = 0;
  1192  002454  95E8               	bcf	232,2,b	;volatile
  1193                           
  1194                           ;serial.c: 13:     SP4BRGL = 51;
  1195  002456  0E33               	movlw	51
  1196  002458  6FE5               	movwf	229,b	;volatile
  1197                           
  1198                           ;serial.c: 15:     SP4BRGH = 0;
  1199  00245A  0E00               	movlw	0
  1200  00245C  6FE6               	movwf	230,b	;volatile
  1201  00245E                     
  1202                           ; BSR set to: 14
  1203                           ;serial.c: 17:     RC4STAbits.CREN = 1;
  1204  00245E  89E7               	bsf	231,4,b	;volatile
  1205  002460                     
  1206                           ; BSR set to: 14
  1207                           ;serial.c: 18:     TX4STAbits.TXEN = 1;
  1208  002460  8BE8               	bsf	232,5,b	;volatile
  1209  002462                     
  1210                           ; BSR set to: 14
  1211                           ;serial.c: 19:     RC4STAbits.SPEN = 1;
  1212  002462  8FE7               	bsf	231,7,b	;volatile
  1213  002464                     
  1214                           ; BSR set to: 14
  1215  002464  0012               	return		;funcret
  1216  002466                     __end_of_initUSART4:
  1217                           	callstack 0
  1218                           
  1219 ;; *************** function _initDCmotors_parameter *****************
  1220 ;; Defined at:
  1221 ;;		line 37 in file "dc_motor.c"
  1222 ;; Parameters:    Size  Location     Type
  1223 ;;  motorL          2    0[COMRAM] PTR struct DC_motor
  1224 ;;		 -> main@motorL(10), 
  1225 ;;  motorR          2    2[COMRAM] PTR struct DC_motor
  1226 ;;		 -> main@motorR(10), 
  1227 ;; Auto vars:     Size  Location     Type
  1228 ;;		None
  1229 ;; Return value:  Size  Location     Type
  1230 ;;                  1    wreg      void 
  1231 ;; Registers used:
  1232 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1233 ;; Tracked objects:
  1234 ;;		On entry : 0/0
  1235 ;;		On exit  : 0/0
  1236 ;;		Unchanged: 0/0
  1237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1238 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1239 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1240 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1241 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1242 ;;Total ram usage:        4 bytes
  1243 ;; Hardware stack levels used: 1
  1244 ;; This function calls:
  1245 ;;		Nothing
  1246 ;; This function is called by:
  1247 ;;		_main
  1248 ;; This function uses a non-reentrant model
  1249 ;;
  1250                           
  1251                           	psect	text5
  1252  00188C                     __ptext5:
  1253                           	callstack 0
  1254  00188C                     _initDCmotors_parameter:
  1255                           	callstack 30
  1256  00188C                     
  1257                           ;dc_motor.c: 39:     motorL->power = 0;
  1258  00188C  C001  FFD9         	movff	initDCmotors_parameter@motorL,fsr2l
  1259  001890  C002  FFDA         	movff	initDCmotors_parameter@motorL+1,fsr2h
  1260  001894  0E00               	movlw	0
  1261  001896  6EDF               	movwf	indf2,c
  1262  001898                     
  1263                           ;dc_motor.c: 40:     motorL->direction = 1;
  1264  001898  EE20 F001          	lfsr	2,1
  1265  00189C  5001               	movf	initDCmotors_parameter@motorL^0,w,c
  1266  00189E  26D9               	addwf	fsr2l,f,c
  1267  0018A0  5002               	movf	(initDCmotors_parameter@motorL+1)^0,w,c
  1268  0018A2  22DA               	addwfc	fsr2h,f,c
  1269  0018A4  0E01               	movlw	1
  1270  0018A6  6EDF               	movwf	indf2,c
  1271  0018A8                     
  1272                           ;dc_motor.c: 41:     motorL->dutyHighByte = (unsigned char *)(&PWM6DCH);
  1273  0018A8  EE20 F002          	lfsr	2,2
  1274  0018AC  5001               	movf	initDCmotors_parameter@motorL^0,w,c
  1275  0018AE  26D9               	addwf	fsr2l,f,c
  1276  0018B0  5002               	movf	(initDCmotors_parameter@motorL+1)^0,w,c
  1277  0018B2  22DA               	addwfc	fsr2h,f,c
  1278  0018B4  0EA3               	movlw	163
  1279  0018B6  6EDE               	movwf	postinc2,c
  1280  0018B8  0E0F               	movlw	15
  1281  0018BA  6EDD               	movwf	postdec2,c
  1282  0018BC                     
  1283                           ;dc_motor.c: 42:     motorL->dir_LAT = (unsigned char *)(&LATE);
  1284  0018BC  EE20 F004          	lfsr	2,4
  1285  0018C0  5001               	movf	initDCmotors_parameter@motorL^0,w,c
  1286  0018C2  26D9               	addwf	fsr2l,f,c
  1287  0018C4  5002               	movf	(initDCmotors_parameter@motorL+1)^0,w,c
  1288  0018C6  22DA               	addwfc	fsr2h,f,c
  1289  0018C8  0E7D               	movlw	125
  1290  0018CA  6EDE               	movwf	postinc2,c
  1291  0018CC  0E0F               	movlw	15
  1292  0018CE  6EDD               	movwf	postdec2,c
  1293  0018D0                     
  1294                           ;dc_motor.c: 43:     motorL->dir_pin = 4;
  1295  0018D0  EE20 F006          	lfsr	2,6
  1296  0018D4  5001               	movf	initDCmotors_parameter@motorL^0,w,c
  1297  0018D6  26D9               	addwf	fsr2l,f,c
  1298  0018D8  5002               	movf	(initDCmotors_parameter@motorL+1)^0,w,c
  1299  0018DA  22DA               	addwfc	fsr2h,f,c
  1300  0018DC  0E04               	movlw	4
  1301  0018DE  6EDF               	movwf	indf2,c
  1302  0018E0                     
  1303                           ;dc_motor.c: 44:     motorL->PWMperiod = 199;
  1304  0018E0  EE20 F007          	lfsr	2,7
  1305  0018E4  5001               	movf	initDCmotors_parameter@motorL^0,w,c
  1306  0018E6  26D9               	addwf	fsr2l,f,c
  1307  0018E8  5002               	movf	(initDCmotors_parameter@motorL+1)^0,w,c
  1308  0018EA  22DA               	addwfc	fsr2h,f,c
  1309  0018EC  0EC7               	movlw	199
  1310  0018EE  6EDE               	movwf	postinc2,c
  1311  0018F0  0E00               	movlw	0
  1312  0018F2  6EDD               	movwf	postdec2,c
  1313  0018F4                     
  1314                           ;dc_motor.c: 47:     motorR->power = 0;
  1315  0018F4  C003  FFD9         	movff	initDCmotors_parameter@motorR,fsr2l
  1316  0018F8  C004  FFDA         	movff	initDCmotors_parameter@motorR+1,fsr2h
  1317  0018FC  0E00               	movlw	0
  1318  0018FE  6EDF               	movwf	indf2,c
  1319                           
  1320                           ;dc_motor.c: 48:     motorR->direction = 1;
  1321  001900  EE20 F001          	lfsr	2,1
  1322  001904  5003               	movf	initDCmotors_parameter@motorR^0,w,c
  1323  001906  26D9               	addwf	fsr2l,f,c
  1324  001908  5004               	movf	(initDCmotors_parameter@motorR+1)^0,w,c
  1325  00190A  22DA               	addwfc	fsr2h,f,c
  1326  00190C  0E01               	movlw	1
  1327  00190E  6EDF               	movwf	indf2,c
  1328                           
  1329                           ;dc_motor.c: 49:     motorR->dutyHighByte = (unsigned char *)(&PWM7DCH);
  1330  001910  EE20 F002          	lfsr	2,2
  1331  001914  5003               	movf	initDCmotors_parameter@motorR^0,w,c
  1332  001916  26D9               	addwf	fsr2l,f,c
  1333  001918  5004               	movf	(initDCmotors_parameter@motorR+1)^0,w,c
  1334  00191A  22DA               	addwfc	fsr2h,f,c
  1335  00191C  0EA0               	movlw	160
  1336  00191E  6EDE               	movwf	postinc2,c
  1337  001920  0E0F               	movlw	15
  1338  001922  6EDD               	movwf	postdec2,c
  1339                           
  1340                           ;dc_motor.c: 50:     motorR->dir_LAT = (unsigned char *)(&LATG);
  1341  001924  EE20 F004          	lfsr	2,4
  1342  001928  5003               	movf	initDCmotors_parameter@motorR^0,w,c
  1343  00192A  26D9               	addwf	fsr2l,f,c
  1344  00192C  5004               	movf	(initDCmotors_parameter@motorR+1)^0,w,c
  1345  00192E  22DA               	addwfc	fsr2h,f,c
  1346  001930  0E7F               	movlw	127
  1347  001932  6EDE               	movwf	postinc2,c
  1348  001934  0E0F               	movlw	15
  1349  001936  6EDD               	movwf	postdec2,c
  1350                           
  1351                           ;dc_motor.c: 51:     motorR->dir_pin = 6;
  1352  001938  EE20 F006          	lfsr	2,6
  1353  00193C  5003               	movf	initDCmotors_parameter@motorR^0,w,c
  1354  00193E  26D9               	addwf	fsr2l,f,c
  1355  001940  5004               	movf	(initDCmotors_parameter@motorR+1)^0,w,c
  1356  001942  22DA               	addwfc	fsr2h,f,c
  1357  001944  0E06               	movlw	6
  1358  001946  6EDF               	movwf	indf2,c
  1359                           
  1360                           ;dc_motor.c: 52:     motorR->PWMperiod = 199;
  1361  001948  EE20 F007          	lfsr	2,7
  1362  00194C  5003               	movf	initDCmotors_parameter@motorR^0,w,c
  1363  00194E  26D9               	addwf	fsr2l,f,c
  1364  001950  5004               	movf	(initDCmotors_parameter@motorR+1)^0,w,c
  1365  001952  22DA               	addwfc	fsr2h,f,c
  1366  001954  0EC7               	movlw	199
  1367  001956  6EDE               	movwf	postinc2,c
  1368  001958  0E00               	movlw	0
  1369  00195A  6EDD               	movwf	postdec2,c
  1370  00195C  0012               	return		;funcret
  1371  00195E                     __end_of_initDCmotors_parameter:
  1372                           	callstack 0
  1373                           
  1374 ;; *************** function _initDCmotorsPWM *****************
  1375 ;; Defined at:
  1376 ;;		line 7 in file "dc_motor.c"
  1377 ;; Parameters:    Size  Location     Type
  1378 ;;  PWMperiod       2    0[COMRAM] int 
  1379 ;; Auto vars:     Size  Location     Type
  1380 ;;		None
  1381 ;; Return value:  Size  Location     Type
  1382 ;;                  1    wreg      void 
  1383 ;; Registers used:
  1384 ;;		wreg, status,2
  1385 ;; Tracked objects:
  1386 ;;		On entry : 0/0
  1387 ;;		On exit  : 0/0
  1388 ;;		Unchanged: 0/0
  1389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1390 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1391 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1392 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1393 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1394 ;;Total ram usage:        2 bytes
  1395 ;; Hardware stack levels used: 1
  1396 ;; This function calls:
  1397 ;;		Nothing
  1398 ;; This function is called by:
  1399 ;;		_main
  1400 ;; This function uses a non-reentrant model
  1401 ;;
  1402                           
  1403                           	psect	text6
  1404  0021AE                     __ptext6:
  1405                           	callstack 0
  1406  0021AE                     _initDCmotorsPWM:
  1407                           	callstack 30
  1408  0021AE                     
  1409                           ;dc_motor.c: 10:     TRISEbits.TRISE2=0;
  1410  0021AE  9485               	bcf	133,2,c	;volatile
  1411                           
  1412                           ;dc_motor.c: 11:     TRISCbits.TRISC7=0;
  1413  0021B0  9E83               	bcf	131,7,c	;volatile
  1414                           
  1415                           ;dc_motor.c: 12:     TRISGbits.TRISG6=0;
  1416  0021B2  9C87               	bcf	135,6,c	;volatile
  1417                           
  1418                           ;dc_motor.c: 13:     TRISEbits.TRISE4=0;
  1419  0021B4  9885               	bcf	133,4,c	;volatile
  1420                           
  1421                           ;dc_motor.c: 14:     LATEbits.LATE2=0;
  1422  0021B6  947D               	bcf	125,2,c	;volatile
  1423                           
  1424                           ;dc_motor.c: 15:     LATCbits.LATC7=0;
  1425  0021B8  9E7B               	bcf	123,7,c	;volatile
  1426                           
  1427                           ;dc_motor.c: 16:     LATGbits.LATG6=0;
  1428  0021BA  9C7F               	bcf	127,6,c	;volatile
  1429                           
  1430                           ;dc_motor.c: 17:     LATEbits.LATE4=0;
  1431  0021BC  987D               	bcf	125,4,c	;volatile
  1432  0021BE                     
  1433                           ;dc_motor.c: 20:     T2CONbits.CKPS=0b011;
  1434  0021BE  50BD               	movf	189,w,c	;volatile
  1435  0021C0  0B8F               	andlw	-113
  1436  0021C2  0930               	iorlw	48
  1437  0021C4  6EBD               	movwf	189,c	;volatile
  1438                           
  1439                           ;dc_motor.c: 21:     T2HLTbits.MODE=0b00000;
  1440  0021C6  0EE0               	movlw	-32
  1441  0021C8  16BE               	andwf	190,f,c	;volatile
  1442                           
  1443                           ;dc_motor.c: 22:     T2CLKCONbits.CS=0b0001;
  1444  0021CA  50BF               	movf	191,w,c	;volatile
  1445  0021CC  0BF0               	andlw	-16
  1446  0021CE  0901               	iorlw	1
  1447  0021D0  6EBF               	movwf	191,c	;volatile
  1448                           
  1449                           ;dc_motor.c: 25:     T2PR=200-1;
  1450  0021D2  0EC7               	movlw	199
  1451  0021D4  6EBC               	movwf	188,c	;volatile
  1452  0021D6                     
  1453                           ;dc_motor.c: 26:     T2CONbits.ON=1;
  1454  0021D6  8EBD               	bsf	189,7,c	;volatile
  1455                           
  1456                           ;dc_motor.c: 28:     RE2PPS=0x0A;
  1457  0021D8  0E0A               	movlw	10
  1458  0021DA  010E               	movlb	14	; () banked
  1459  0021DC  6F74               	movwf	116,b	;volatile
  1460                           
  1461                           ;dc_motor.c: 29:     RC7PPS=0x0B;
  1462  0021DE  0E0B               	movlw	11
  1463  0021E0  6F69               	movwf	105,b	;volatile
  1464                           
  1465                           ;dc_motor.c: 31:     PWM6DCH=0;
  1466  0021E2  0E00               	movlw	0
  1467  0021E4  6EA3               	movwf	163,c	;volatile
  1468                           
  1469                           ;dc_motor.c: 32:     PWM7DCH=0;
  1470  0021E6  0E00               	movlw	0
  1471  0021E8  6EA0               	movwf	160,c	;volatile
  1472  0021EA                     
  1473                           ; BSR set to: 14
  1474                           ;dc_motor.c: 34:     PWM6CONbits.EN = 1;
  1475  0021EA  8EA4               	bsf	164,7,c	;volatile
  1476  0021EC                     
  1477                           ; BSR set to: 14
  1478                           ;dc_motor.c: 35:     PWM7CONbits.EN = 1;
  1479  0021EC  8EA1               	bsf	161,7,c	;volatile
  1480  0021EE                     
  1481                           ; BSR set to: 14
  1482  0021EE  0012               	return		;funcret
  1483  0021F0                     __end_of_initDCmotorsPWM:
  1484                           	callstack 0
  1485                           
  1486 ;; *************** function _fullSpeedAhead *****************
  1487 ;; Defined at:
  1488 ;;		line 119 in file "dc_motor.c"
  1489 ;; Parameters:    Size  Location     Type
  1490 ;;  mL              2   32[COMRAM] PTR struct DC_motor
  1491 ;;		 -> main@motorL(10), 
  1492 ;;  mR              2   34[COMRAM] PTR struct DC_motor
  1493 ;;		 -> main@motorR(10), 
  1494 ;; Auto vars:     Size  Location     Type
  1495 ;;		None
  1496 ;; Return value:  Size  Location     Type
  1497 ;;                  1    wreg      void 
  1498 ;; Registers used:
  1499 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1500 ;; Tracked objects:
  1501 ;;		On entry : 0/0
  1502 ;;		On exit  : 0/0
  1503 ;;		Unchanged: 0/0
  1504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1505 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1506 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1507 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1508 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1509 ;;Total ram usage:        5 bytes
  1510 ;; Hardware stack levels used: 1
  1511 ;; Hardware stack levels required when called: 2
  1512 ;; This function calls:
  1513 ;;		_setMotorPWM
  1514 ;; This function is called by:
  1515 ;;		_main
  1516 ;; This function uses a non-reentrant model
  1517 ;;
  1518                           
  1519                           	psect	text7
  1520  001BB2                     __ptext7:
  1521                           	callstack 0
  1522  001BB2                     _fullSpeedAhead:
  1523                           	callstack 28
  1524  001BB2                     
  1525                           ;dc_motor.c: 119: void fullSpeedAhead(struct DC_motor *mL, struct DC_motor *mR);dc_motor
      +                          .c: 120: {;dc_motor.c: 121:     mL->direction=1;
  1526  001BB2  EE20 F001          	lfsr	2,1
  1527  001BB6  5021               	movf	fullSpeedAhead@mL^0,w,c
  1528  001BB8  26D9               	addwf	fsr2l,f,c
  1529  001BBA  5022               	movf	(fullSpeedAhead@mL+1)^0,w,c
  1530  001BBC  22DA               	addwfc	fsr2h,f,c
  1531  001BBE  0E01               	movlw	1
  1532  001BC0  6EDF               	movwf	indf2,c
  1533                           
  1534                           ;dc_motor.c: 122:     mR->direction=1;
  1535  001BC2  EE20 F001          	lfsr	2,1
  1536  001BC6  5023               	movf	fullSpeedAhead@mR^0,w,c
  1537  001BC8  26D9               	addwf	fsr2l,f,c
  1538  001BCA  5024               	movf	(fullSpeedAhead@mR+1)^0,w,c
  1539  001BCC  22DA               	addwfc	fsr2h,f,c
  1540  001BCE  0E01               	movlw	1
  1541  001BD0  6EDF               	movwf	indf2,c
  1542  001BD2                     
  1543                           ;dc_motor.c: 123:     mL->power = 0;
  1544  001BD2  C021  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  1545  001BD6  C022  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  1546  001BDA  0E00               	movlw	0
  1547  001BDC  6EDF               	movwf	indf2,c
  1548  001BDE                     
  1549                           ;dc_motor.c: 124:     mR->power = 0;
  1550  001BDE  C023  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  1551  001BE2  C024  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  1552  001BE6  0E00               	movlw	0
  1553  001BE8  6EDF               	movwf	indf2,c
  1554                           
  1555                           ;dc_motor.c: 125:     while (mL->power<70 && mR->power<70){
  1556  001BEA  EF16  F00E         	goto	l2516
  1557  001BEE                     l2508:
  1558                           
  1559                           ;dc_motor.c: 126:         mL->power += 10;
  1560  001BEE  C021  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  1561  001BF2  C022  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  1562  001BF6  0E0A               	movlw	10
  1563  001BF8  26DF               	addwf	indf2,f,c
  1564                           
  1565                           ;dc_motor.c: 127:         mR->power += 10;
  1566  001BFA  C023  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  1567  001BFE  C024  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  1568  001C02  0E0A               	movlw	10
  1569  001C04  26DF               	addwf	indf2,f,c
  1570  001C06                     
  1571                           ;dc_motor.c: 128:         setMotorPWM(mL);
  1572  001C06  C021  F016         	movff	fullSpeedAhead@mL,setMotorPWM@m
  1573  001C0A  C022  F017         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  1574  001C0E  EC7B  F008         	call	_setMotorPWM	;wreg free
  1575  001C12                     
  1576                           ;dc_motor.c: 129:         setMotorPWM(mR);
  1577  001C12  C023  F016         	movff	fullSpeedAhead@mR,setMotorPWM@m
  1578  001C16  C024  F017         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  1579  001C1A  EC7B  F008         	call	_setMotorPWM	;wreg free
  1580  001C1E                     
  1581                           ;dc_motor.c: 130:         _delay((unsigned long)((10)*(64000000/4000.0)));
  1582  001C1E  0ED0               	movlw	208
  1583  001C20  6E25               	movwf	??_fullSpeedAhead^0,c
  1584  001C22  0ECA               	movlw	202
  1585  001C24                     u1727:
  1586  001C24  2EE8               	decfsz	wreg,f,c
  1587  001C26  D7FE               	bra	u1727
  1588  001C28  2E25               	decfsz	??_fullSpeedAhead^0,f,c
  1589  001C2A  D7FC               	bra	u1727
  1590  001C2C                     l2516:
  1591                           
  1592                           ;dc_motor.c: 125:     while (mL->power<70 && mR->power<70){
  1593  001C2C  C021  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  1594  001C30  C022  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  1595  001C34  0E46               	movlw	70
  1596  001C36  60DF               	cpfslt	indf2,c
  1597  001C38  EF20  F00E         	goto	u1601
  1598  001C3C  EF22  F00E         	goto	u1600
  1599  001C40                     u1601:
  1600  001C40  EF2E  F00E         	goto	l241
  1601  001C44                     u1600:
  1602  001C44  C023  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  1603  001C48  C024  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  1604  001C4C  0E45               	movlw	69
  1605  001C4E  64DF               	cpfsgt	indf2,c
  1606  001C50  EF2C  F00E         	goto	u1611
  1607  001C54  EF2E  F00E         	goto	u1610
  1608  001C58                     u1611:
  1609  001C58  EFF7  F00D         	goto	l2508
  1610  001C5C                     u1610:
  1611  001C5C                     l241:
  1612  001C5C  0012               	return		;funcret
  1613  001C5E                     __end_of_fullSpeedAhead:
  1614                           	callstack 0
  1615                           
  1616 ;; *************** function _setMotorPWM *****************
  1617 ;; Defined at:
  1618 ;;		line 56 in file "dc_motor.c"
  1619 ;; Parameters:    Size  Location     Type
  1620 ;;  m               2   21[COMRAM] PTR struct DC_motor
  1621 ;;		 -> main@motorR(10), main@motorL(10), 
  1622 ;; Auto vars:     Size  Location     Type
  1623 ;;  PWMduty         2   30[COMRAM] int 
  1624 ;; Return value:  Size  Location     Type
  1625 ;;                  1    wreg      void 
  1626 ;; Registers used:
  1627 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1628 ;; Tracked objects:
  1629 ;;		On entry : 0/0
  1630 ;;		On exit  : 0/0
  1631 ;;		Unchanged: 0/0
  1632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1633 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1634 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1635 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1636 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1637 ;;Total ram usage:       11 bytes
  1638 ;; Hardware stack levels used: 1
  1639 ;; Hardware stack levels required when called: 1
  1640 ;; This function calls:
  1641 ;;		___awdiv
  1642 ;;		___wmul
  1643 ;; This function is called by:
  1644 ;;		_stop
  1645 ;;		_turnRight
  1646 ;;		_fullSpeedAhead
  1647 ;;		_turnLeft
  1648 ;;		_turn180
  1649 ;; This function uses a non-reentrant model
  1650 ;;
  1651                           
  1652                           	psect	text8
  1653  0010F6                     __ptext8:
  1654                           	callstack 0
  1655  0010F6                     _setMotorPWM:
  1656                           	callstack 28
  1657  0010F6                     
  1658                           ;dc_motor.c: 56: void setMotorPWM(struct DC_motor *m);dc_motor.c: 57: {;dc_motor.c: 58: 
      +                           int PWMduty;;dc_motor.c: 60:  if (m->direction){
  1659  0010F6  EE20 F001          	lfsr	2,1
  1660  0010FA  5016               	movf	setMotorPWM@m^0,w,c
  1661  0010FC  26D9               	addwf	fsr2l,f,c
  1662  0010FE  5017               	movf	(setMotorPWM@m+1)^0,w,c
  1663  001100  22DA               	addwfc	fsr2h,f,c
  1664  001102  50DF               	movf	indf2,w,c
  1665  001104  B4D8               	btfsc	status,2,c
  1666  001106  EF87  F008         	goto	u1401
  1667  00110A  EF89  F008         	goto	u1400
  1668  00110E                     u1401:
  1669  00110E  EFBA  F008         	goto	l2314
  1670  001112                     u1400:
  1671  001112                     
  1672                           ;dc_motor.c: 62:   PWMduty=m->PWMperiod - ((int)(m->power)*(m->PWMperiod))/100;
  1673  001112  C016  FFD9         	movff	setMotorPWM@m,fsr2l
  1674  001116  C017  FFDA         	movff	setMotorPWM@m+1,fsr2h
  1675  00111A  50DF               	movf	indf2,w,c
  1676  00111C  6E18               	movwf	??_setMotorPWM^0,c
  1677  00111E  5018               	movf	??_setMotorPWM^0,w,c
  1678  001120  6E08               	movwf	___wmul@multiplier^0,c
  1679  001122  6A09               	clrf	(___wmul@multiplier+1)^0,c
  1680  001124  EE20 F007          	lfsr	2,7
  1681  001128  5016               	movf	setMotorPWM@m^0,w,c
  1682  00112A  26D9               	addwf	fsr2l,f,c
  1683  00112C  5017               	movf	(setMotorPWM@m+1)^0,w,c
  1684  00112E  22DA               	addwfc	fsr2h,f,c
  1685  001130  CFDE F00A          	movff	postinc2,___wmul@multiplicand
  1686  001134  CFDD F00B          	movff	postdec2,___wmul@multiplicand+1
  1687  001138  EC01  F012         	call	___wmul	;wreg free
  1688  00113C  C008  F00E         	movff	?___wmul,___awdiv@dividend
  1689  001140  C009  F00F         	movff	?___wmul+1,___awdiv@dividend+1
  1690  001144  0E00               	movlw	0
  1691  001146  6E11               	movwf	(___awdiv@divisor+1)^0,c
  1692  001148  0E64               	movlw	100
  1693  00114A  6E10               	movwf	___awdiv@divisor^0,c
  1694  00114C  EC77  F00D         	call	___awdiv	;wreg free
  1695  001150  EE20 F007          	lfsr	2,7
  1696  001154  5016               	movf	setMotorPWM@m^0,w,c
  1697  001156  26D9               	addwf	fsr2l,f,c
  1698  001158  5017               	movf	(setMotorPWM@m+1)^0,w,c
  1699  00115A  22DA               	addwfc	fsr2h,f,c
  1700  00115C  CFDE F019          	movff	postinc2,??_setMotorPWM+1
  1701  001160  CFDD F01A          	movff	postdec2,??_setMotorPWM+2
  1702  001164  500E               	movf	?___awdiv^0,w,c
  1703  001166  5C19               	subwf	(??_setMotorPWM+1)^0,w,c
  1704  001168  6E1F               	movwf	setMotorPWM@PWMduty^0,c
  1705  00116A  500F               	movf	(?___awdiv+1)^0,w,c
  1706  00116C  581A               	subwfb	(??_setMotorPWM+2)^0,w,c
  1707  00116E  6E20               	movwf	(setMotorPWM@PWMduty+1)^0,c
  1708                           
  1709                           ;dc_motor.c: 63:  }
  1710  001170  EFDD  F008         	goto	l2316
  1711  001174                     l2314:
  1712                           
  1713                           ;dc_motor.c: 66:   PWMduty=((int)(m->power)*(m->PWMperiod))/100;
  1714  001174  C016  FFD9         	movff	setMotorPWM@m,fsr2l
  1715  001178  C017  FFDA         	movff	setMotorPWM@m+1,fsr2h
  1716  00117C  50DF               	movf	indf2,w,c
  1717  00117E  6E18               	movwf	??_setMotorPWM^0,c
  1718  001180  5018               	movf	??_setMotorPWM^0,w,c
  1719  001182  6E08               	movwf	___wmul@multiplier^0,c
  1720  001184  6A09               	clrf	(___wmul@multiplier+1)^0,c
  1721  001186  EE20 F007          	lfsr	2,7
  1722  00118A  5016               	movf	setMotorPWM@m^0,w,c
  1723  00118C  26D9               	addwf	fsr2l,f,c
  1724  00118E  5017               	movf	(setMotorPWM@m+1)^0,w,c
  1725  001190  22DA               	addwfc	fsr2h,f,c
  1726  001192  CFDE F00A          	movff	postinc2,___wmul@multiplicand
  1727  001196  CFDD F00B          	movff	postdec2,___wmul@multiplicand+1
  1728  00119A  EC01  F012         	call	___wmul	;wreg free
  1729  00119E  C008  F00E         	movff	?___wmul,___awdiv@dividend
  1730  0011A2  C009  F00F         	movff	?___wmul+1,___awdiv@dividend+1
  1731  0011A6  0E00               	movlw	0
  1732  0011A8  6E11               	movwf	(___awdiv@divisor+1)^0,c
  1733  0011AA  0E64               	movlw	100
  1734  0011AC  6E10               	movwf	___awdiv@divisor^0,c
  1735  0011AE  EC77  F00D         	call	___awdiv	;wreg free
  1736  0011B2  C00E  F01F         	movff	?___awdiv,setMotorPWM@PWMduty
  1737  0011B6  C00F  F020         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  1738  0011BA                     l2316:
  1739                           
  1740                           ;dc_motor.c: 69:  *(m->dutyHighByte) = PWMduty;
  1741  0011BA  EE20 F002          	lfsr	2,2
  1742  0011BE  5016               	movf	setMotorPWM@m^0,w,c
  1743  0011C0  26D9               	addwf	fsr2l,f,c
  1744  0011C2  5017               	movf	(setMotorPWM@m+1)^0,w,c
  1745  0011C4  22DA               	addwfc	fsr2h,f,c
  1746  0011C6  CFDE F018          	movff	postinc2,??_setMotorPWM
  1747  0011CA  CFDD F019          	movff	postdec2,??_setMotorPWM+1
  1748  0011CE  C018  FFD9         	movff	??_setMotorPWM,fsr2l
  1749  0011D2  C019  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1750  0011D6  C01F  FFDF         	movff	setMotorPWM@PWMduty,indf2
  1751  0011DA                     
  1752                           ;dc_motor.c: 71:  if (m->direction){
  1753  0011DA  EE20 F001          	lfsr	2,1
  1754  0011DE  5016               	movf	setMotorPWM@m^0,w,c
  1755  0011E0  26D9               	addwf	fsr2l,f,c
  1756  0011E2  5017               	movf	(setMotorPWM@m+1)^0,w,c
  1757  0011E4  22DA               	addwfc	fsr2h,f,c
  1758  0011E6  50DF               	movf	indf2,w,c
  1759  0011E8  B4D8               	btfsc	status,2,c
  1760  0011EA  EFF9  F008         	goto	u1411
  1761  0011EE  EFFB  F008         	goto	u1410
  1762  0011F2                     u1411:
  1763  0011F2  EF30  F009         	goto	l2322
  1764  0011F6                     u1410:
  1765  0011F6                     
  1766                           ;dc_motor.c: 72:   *(m->dir_LAT) = *(m->dir_LAT) | (1<<(m->dir_pin));
  1767  0011F6  EE20 F004          	lfsr	2,4
  1768  0011FA  5016               	movf	setMotorPWM@m^0,w,c
  1769  0011FC  26D9               	addwf	fsr2l,f,c
  1770  0011FE  5017               	movf	(setMotorPWM@m+1)^0,w,c
  1771  001200  22DA               	addwfc	fsr2h,f,c
  1772  001202  CFDE F018          	movff	postinc2,??_setMotorPWM
  1773  001206  CFDD F019          	movff	postdec2,??_setMotorPWM+1
  1774  00120A  C018  FFD9         	movff	??_setMotorPWM,fsr2l
  1775  00120E  C019  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1776  001212  EE10 F004          	lfsr	1,4
  1777  001216  5016               	movf	setMotorPWM@m^0,w,c
  1778  001218  26E1               	addwf	fsr1l,f,c
  1779  00121A  5017               	movf	(setMotorPWM@m+1)^0,w,c
  1780  00121C  22E2               	addwfc	fsr1h,f,c
  1781  00121E  CFE6 F01A          	movff	postinc1,??_setMotorPWM+2
  1782  001222  CFE5 F01B          	movff	postdec1,??_setMotorPWM+3
  1783  001226  C01A  FFE1         	movff	??_setMotorPWM+2,fsr1l
  1784  00122A  C01B  FFE2         	movff	??_setMotorPWM+3,fsr1h
  1785  00122E  50E7               	movf	indf1,w,c
  1786  001230  6E1C               	movwf	(??_setMotorPWM+4)^0,c
  1787  001232  EE10 F006          	lfsr	1,6
  1788  001236  5016               	movf	setMotorPWM@m^0,w,c
  1789  001238  26E1               	addwf	fsr1l,f,c
  1790  00123A  5017               	movf	(setMotorPWM@m+1)^0,w,c
  1791  00123C  22E2               	addwfc	fsr1h,f,c
  1792  00123E  50E7               	movf	indf1,w,c
  1793  001240  6E1D               	movwf	(??_setMotorPWM+5)^0,c
  1794  001242  0E01               	movlw	1
  1795  001244  6E1E               	movwf	(??_setMotorPWM+6)^0,c
  1796  001246  2A1D               	incf	(??_setMotorPWM+5)^0,f,c
  1797  001248  EF28  F009         	goto	u1424
  1798  00124C                     u1425:
  1799  00124C  90D8               	bcf	status,0,c
  1800  00124E  361E               	rlcf	(??_setMotorPWM+6)^0,f,c
  1801  001250                     u1424:
  1802  001250  2E1D               	decfsz	(??_setMotorPWM+5)^0,f,c
  1803  001252  EF26  F009         	goto	u1425
  1804  001256  501E               	movf	(??_setMotorPWM+6)^0,w,c
  1805  001258  101C               	iorwf	(??_setMotorPWM+4)^0,w,c
  1806  00125A  6EDF               	movwf	indf2,c
  1807                           
  1808                           ;dc_motor.c: 73:  } else {
  1809  00125C  EF64  F009         	goto	l213
  1810  001260                     l2322:
  1811                           
  1812                           ;dc_motor.c: 74:   *(m->dir_LAT) = *(m->dir_LAT) & (~(1<<(m->dir_pin)));
  1813  001260  EE20 F004          	lfsr	2,4
  1814  001264  5016               	movf	setMotorPWM@m^0,w,c
  1815  001266  26D9               	addwf	fsr2l,f,c
  1816  001268  5017               	movf	(setMotorPWM@m+1)^0,w,c
  1817  00126A  22DA               	addwfc	fsr2h,f,c
  1818  00126C  CFDE F018          	movff	postinc2,??_setMotorPWM
  1819  001270  CFDD F019          	movff	postdec2,??_setMotorPWM+1
  1820  001274  C018  FFD9         	movff	??_setMotorPWM,fsr2l
  1821  001278  C019  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1822  00127C  EE10 F004          	lfsr	1,4
  1823  001280  5016               	movf	setMotorPWM@m^0,w,c
  1824  001282  26E1               	addwf	fsr1l,f,c
  1825  001284  5017               	movf	(setMotorPWM@m+1)^0,w,c
  1826  001286  22E2               	addwfc	fsr1h,f,c
  1827  001288  CFE6 F01A          	movff	postinc1,??_setMotorPWM+2
  1828  00128C  CFE5 F01B          	movff	postdec1,??_setMotorPWM+3
  1829  001290  C01A  FFE1         	movff	??_setMotorPWM+2,fsr1l
  1830  001294  C01B  FFE2         	movff	??_setMotorPWM+3,fsr1h
  1831  001298  50E7               	movf	indf1,w,c
  1832  00129A  6E1C               	movwf	(??_setMotorPWM+4)^0,c
  1833  00129C  EE10 F006          	lfsr	1,6
  1834  0012A0  5016               	movf	setMotorPWM@m^0,w,c
  1835  0012A2  26E1               	addwf	fsr1l,f,c
  1836  0012A4  5017               	movf	(setMotorPWM@m+1)^0,w,c
  1837  0012A6  22E2               	addwfc	fsr1h,f,c
  1838  0012A8  50E7               	movf	indf1,w,c
  1839  0012AA  6E1D               	movwf	(??_setMotorPWM+5)^0,c
  1840  0012AC  0E01               	movlw	1
  1841  0012AE  6E1E               	movwf	(??_setMotorPWM+6)^0,c
  1842  0012B0  2A1D               	incf	(??_setMotorPWM+5)^0,f,c
  1843  0012B2  EF5D  F009         	goto	u1434
  1844  0012B6                     u1435:
  1845  0012B6  90D8               	bcf	status,0,c
  1846  0012B8  361E               	rlcf	(??_setMotorPWM+6)^0,f,c
  1847  0012BA                     u1434:
  1848  0012BA  2E1D               	decfsz	(??_setMotorPWM+5)^0,f,c
  1849  0012BC  EF5B  F009         	goto	u1435
  1850  0012C0  501E               	movf	(??_setMotorPWM+6)^0,w,c
  1851  0012C2  0AFF               	xorlw	255
  1852  0012C4  141C               	andwf	(??_setMotorPWM+4)^0,w,c
  1853  0012C6  6EDF               	movwf	indf2,c
  1854  0012C8                     l213:
  1855  0012C8  0012               	return		;funcret
  1856  0012CA                     __end_of_setMotorPWM:
  1857                           	callstack 0
  1858                           
  1859 ;; *************** function ___awdiv *****************
  1860 ;; Defined at:
  1861 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\awdiv.c"
  1862 ;; Parameters:    Size  Location     Type
  1863 ;;  dividend        2   13[COMRAM] int 
  1864 ;;  divisor         2   15[COMRAM] int 
  1865 ;; Auto vars:     Size  Location     Type
  1866 ;;  quotient        2   19[COMRAM] int 
  1867 ;;  sign            1   18[COMRAM] unsigned char 
  1868 ;;  counter         1   17[COMRAM] unsigned char 
  1869 ;; Return value:  Size  Location     Type
  1870 ;;                  2   13[COMRAM] int 
  1871 ;; Registers used:
  1872 ;;		wreg, status,2, status,0
  1873 ;; Tracked objects:
  1874 ;;		On entry : 0/0
  1875 ;;		On exit  : 0/0
  1876 ;;		Unchanged: 0/0
  1877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1878 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1879 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1880 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1881 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1882 ;;Total ram usage:        8 bytes
  1883 ;; Hardware stack levels used: 1
  1884 ;; This function calls:
  1885 ;;		Nothing
  1886 ;; This function is called by:
  1887 ;;		_setMotorPWM
  1888 ;; This function uses a non-reentrant model
  1889 ;;
  1890                           
  1891                           	psect	text9
  1892  001AEE                     __ptext9:
  1893                           	callstack 0
  1894  001AEE                     ___awdiv:
  1895                           	callstack 28
  1896  001AEE  0E00               	movlw	0
  1897  001AF0  6E13               	movwf	___awdiv@sign^0,c
  1898  001AF2  BE11               	btfsc	(___awdiv@divisor+1)^0,7,c
  1899  001AF4  EF80  F00D         	goto	u1300
  1900  001AF8  EF7E  F00D         	goto	u1301
  1901  001AFC                     u1301:
  1902  001AFC  EF86  F00D         	goto	l2208
  1903  001B00                     u1300:
  1904  001B00  6C10               	negf	___awdiv@divisor^0,c
  1905  001B02  1E11               	comf	(___awdiv@divisor+1)^0,f,c
  1906  001B04  B0D8               	btfsc	status,0,c
  1907  001B06  2A11               	incf	(___awdiv@divisor+1)^0,f,c
  1908  001B08  0E01               	movlw	1
  1909  001B0A  6E13               	movwf	___awdiv@sign^0,c
  1910  001B0C                     l2208:
  1911  001B0C  BE0F               	btfsc	(___awdiv@dividend+1)^0,7,c
  1912  001B0E  EF8D  F00D         	goto	u1310
  1913  001B12  EF8B  F00D         	goto	u1311
  1914  001B16                     u1311:
  1915  001B16  EF93  F00D         	goto	l2214
  1916  001B1A                     u1310:
  1917  001B1A  6C0E               	negf	___awdiv@dividend^0,c
  1918  001B1C  1E0F               	comf	(___awdiv@dividend+1)^0,f,c
  1919  001B1E  B0D8               	btfsc	status,0,c
  1920  001B20  2A0F               	incf	(___awdiv@dividend+1)^0,f,c
  1921  001B22  0E01               	movlw	1
  1922  001B24  1A13               	xorwf	___awdiv@sign^0,f,c
  1923  001B26                     l2214:
  1924  001B26  0E00               	movlw	0
  1925  001B28  6E15               	movwf	(___awdiv@quotient+1)^0,c
  1926  001B2A  0E00               	movlw	0
  1927  001B2C  6E14               	movwf	___awdiv@quotient^0,c
  1928  001B2E  5010               	movf	___awdiv@divisor^0,w,c
  1929  001B30  1011               	iorwf	(___awdiv@divisor+1)^0,w,c
  1930  001B32  B4D8               	btfsc	status,2,c
  1931  001B34  EF9E  F00D         	goto	u1321
  1932  001B38  EFA0  F00D         	goto	u1320
  1933  001B3C                     u1321:
  1934  001B3C  EFC8  F00D         	goto	l2236
  1935  001B40                     u1320:
  1936  001B40  0E01               	movlw	1
  1937  001B42  6E12               	movwf	___awdiv@counter^0,c
  1938  001B44  EFA8  F00D         	goto	l2222
  1939  001B48                     l2220:
  1940  001B48  90D8               	bcf	status,0,c
  1941  001B4A  3610               	rlcf	___awdiv@divisor^0,f,c
  1942  001B4C  3611               	rlcf	(___awdiv@divisor+1)^0,f,c
  1943  001B4E  2A12               	incf	___awdiv@counter^0,f,c
  1944  001B50                     l2222:
  1945  001B50  AE11               	btfss	(___awdiv@divisor+1)^0,7,c
  1946  001B52  EFAD  F00D         	goto	u1331
  1947  001B56  EFAF  F00D         	goto	u1330
  1948  001B5A                     u1331:
  1949  001B5A  EFA4  F00D         	goto	l2220
  1950  001B5E                     u1330:
  1951  001B5E                     l2224:
  1952  001B5E  90D8               	bcf	status,0,c
  1953  001B60  3614               	rlcf	___awdiv@quotient^0,f,c
  1954  001B62  3615               	rlcf	(___awdiv@quotient+1)^0,f,c
  1955  001B64  5010               	movf	___awdiv@divisor^0,w,c
  1956  001B66  5C0E               	subwf	___awdiv@dividend^0,w,c
  1957  001B68  5011               	movf	(___awdiv@divisor+1)^0,w,c
  1958  001B6A  580F               	subwfb	(___awdiv@dividend+1)^0,w,c
  1959  001B6C  A0D8               	btfss	status,0,c
  1960  001B6E  EFBB  F00D         	goto	u1341
  1961  001B72  EFBD  F00D         	goto	u1340
  1962  001B76                     u1341:
  1963  001B76  EFC2  F00D         	goto	l2232
  1964  001B7A                     u1340:
  1965  001B7A  5010               	movf	___awdiv@divisor^0,w,c
  1966  001B7C  5E0E               	subwf	___awdiv@dividend^0,f,c
  1967  001B7E  5011               	movf	(___awdiv@divisor+1)^0,w,c
  1968  001B80  5A0F               	subwfb	(___awdiv@dividend+1)^0,f,c
  1969  001B82  8014               	bsf	___awdiv@quotient^0,0,c
  1970  001B84                     l2232:
  1971  001B84  90D8               	bcf	status,0,c
  1972  001B86  3211               	rrcf	(___awdiv@divisor+1)^0,f,c
  1973  001B88  3210               	rrcf	___awdiv@divisor^0,f,c
  1974  001B8A  2E12               	decfsz	___awdiv@counter^0,f,c
  1975  001B8C  EFAF  F00D         	goto	l2224
  1976  001B90                     l2236:
  1977  001B90  5013               	movf	___awdiv@sign^0,w,c
  1978  001B92  B4D8               	btfsc	status,2,c
  1979  001B94  EFCE  F00D         	goto	u1351
  1980  001B98  EFD0  F00D         	goto	u1350
  1981  001B9C                     u1351:
  1982  001B9C  EFD4  F00D         	goto	l2240
  1983  001BA0                     u1350:
  1984  001BA0  6C14               	negf	___awdiv@quotient^0,c
  1985  001BA2  1E15               	comf	(___awdiv@quotient+1)^0,f,c
  1986  001BA4  B0D8               	btfsc	status,0,c
  1987  001BA6  2A15               	incf	(___awdiv@quotient+1)^0,f,c
  1988  001BA8                     l2240:
  1989  001BA8  C014  F00E         	movff	___awdiv@quotient,?___awdiv
  1990  001BAC  C015  F00F         	movff	___awdiv@quotient+1,?___awdiv+1
  1991  001BB0  0012               	return		;funcret
  1992  001BB2                     __end_of___awdiv:
  1993                           	callstack 0
  1994                           
  1995 ;; *************** function _detect_color_C *****************
  1996 ;; Defined at:
  1997 ;;		line 150 in file "color.c"
  1998 ;; Parameters:    Size  Location     Type
  1999 ;;  m               2   13[COMRAM] PTR struct color_rgb
  2000 ;;		 -> main@rgb(8), 
  2001 ;; Auto vars:     Size  Location     Type
  2002 ;;  RB_ratio        2   17[COMRAM] unsigned int 
  2003 ;;  RG_ratio        2   15[COMRAM] unsigned int 
  2004 ;;  GB_ratio        2    0        unsigned int 
  2005 ;;  color           1    0        unsigned char 
  2006 ;; Return value:  Size  Location     Type
  2007 ;;                  1    wreg      unsigned char 
  2008 ;; Registers used:
  2009 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2010 ;; Tracked objects:
  2011 ;;		On entry : 0/0
  2012 ;;		On exit  : 0/0
  2013 ;;		Unchanged: 0/0
  2014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2015 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2016 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2017 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2018 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2019 ;;Total ram usage:        6 bytes
  2020 ;; Hardware stack levels used: 1
  2021 ;; Hardware stack levels required when called: 1
  2022 ;; This function calls:
  2023 ;;		___lwdiv
  2024 ;;		___wmul
  2025 ;;		_compare
  2026 ;; This function is called by:
  2027 ;;		_main
  2028 ;; This function uses a non-reentrant model
  2029 ;;
  2030                           
  2031                           	psect	text10
  2032  00176A                     __ptext10:
  2033                           	callstack 0
  2034  00176A                     _detect_color_C:
  2035                           	callstack 29
  2036  00176A                     
  2037                           ;color.c: 155:     unsigned int RG_ratio = (m->R/m->G)*100;
  2038  00176A  EE20 F002          	lfsr	2,2
  2039  00176E  500E               	movf	detect_color_C@m^0,w,c
  2040  001770  26D9               	addwf	fsr2l,f,c
  2041  001772  500F               	movf	(detect_color_C@m+1)^0,w,c
  2042  001774  22DA               	addwfc	fsr2h,f,c
  2043  001776  CFDE F003          	movff	postinc2,___lwdiv@divisor
  2044  00177A  CFDD F004          	movff	postdec2,___lwdiv@divisor+1
  2045  00177E  C00E  FFD9         	movff	detect_color_C@m,fsr2l
  2046  001782  C00F  FFDA         	movff	detect_color_C@m+1,fsr2h
  2047  001786  CFDE F001          	movff	postinc2,___lwdiv@dividend
  2048  00178A  CFDD F002          	movff	postdec2,___lwdiv@dividend+1
  2049  00178E  ECF9  F00E         	call	___lwdiv	;wreg free
  2050  001792  C001  F008         	movff	?___lwdiv,___wmul@multiplier
  2051  001796  C002  F009         	movff	?___lwdiv+1,___wmul@multiplier+1
  2052  00179A  0E00               	movlw	0
  2053  00179C  6E0B               	movwf	(___wmul@multiplicand+1)^0,c
  2054  00179E  0E64               	movlw	100
  2055  0017A0  6E0A               	movwf	___wmul@multiplicand^0,c
  2056  0017A2  EC01  F012         	call	___wmul	;wreg free
  2057  0017A6  C008  F010         	movff	?___wmul,detect_color_C@RG_ratio
  2058  0017AA  C009  F011         	movff	?___wmul+1,detect_color_C@RG_ratio+1
  2059  0017AE                     
  2060                           ;color.c: 156:     unsigned int RB_ratio = (m->R/m->B)*100;
  2061  0017AE  EE20 F004          	lfsr	2,4
  2062  0017B2  500E               	movf	detect_color_C@m^0,w,c
  2063  0017B4  26D9               	addwf	fsr2l,f,c
  2064  0017B6  500F               	movf	(detect_color_C@m+1)^0,w,c
  2065  0017B8  22DA               	addwfc	fsr2h,f,c
  2066  0017BA  CFDE F003          	movff	postinc2,___lwdiv@divisor
  2067  0017BE  CFDD F004          	movff	postdec2,___lwdiv@divisor+1
  2068  0017C2  C00E  FFD9         	movff	detect_color_C@m,fsr2l
  2069  0017C6  C00F  FFDA         	movff	detect_color_C@m+1,fsr2h
  2070  0017CA  CFDE F001          	movff	postinc2,___lwdiv@dividend
  2071  0017CE  CFDD F002          	movff	postdec2,___lwdiv@dividend+1
  2072  0017D2  ECF9  F00E         	call	___lwdiv	;wreg free
  2073  0017D6  C001  F008         	movff	?___lwdiv,___wmul@multiplier
  2074  0017DA  C002  F009         	movff	?___lwdiv+1,___wmul@multiplier+1
  2075  0017DE  0E00               	movlw	0
  2076  0017E0  6E0B               	movwf	(___wmul@multiplicand+1)^0,c
  2077  0017E2  0E64               	movlw	100
  2078  0017E4  6E0A               	movwf	___wmul@multiplicand^0,c
  2079  0017E6  EC01  F012         	call	___wmul	;wreg free
  2080  0017EA  C008  F012         	movff	?___wmul,detect_color_C@RB_ratio
  2081  0017EE  C009  F013         	movff	?___wmul+1,detect_color_C@RB_ratio+1
  2082  0017F2  EE20 F004          	lfsr	2,4
  2083  0017F6  500E               	movf	detect_color_C@m^0,w,c
  2084  0017F8  26D9               	addwf	fsr2l,f,c
  2085  0017FA  500F               	movf	(detect_color_C@m+1)^0,w,c
  2086  0017FC  22DA               	addwfc	fsr2h,f,c
  2087  0017FE  CFDE F003          	movff	postinc2,___lwdiv@divisor
  2088  001802  CFDD F004          	movff	postdec2,___lwdiv@divisor+1
  2089  001806  EE20 F002          	lfsr	2,2
  2090  00180A  500E               	movf	detect_color_C@m^0,w,c
  2091  00180C  26D9               	addwf	fsr2l,f,c
  2092  00180E  500F               	movf	(detect_color_C@m+1)^0,w,c
  2093  001810  22DA               	addwfc	fsr2h,f,c
  2094  001812  CFDE F001          	movff	postinc2,___lwdiv@dividend
  2095  001816  CFDD F002          	movff	postdec2,___lwdiv@dividend+1
  2096  00181A  ECF9  F00E         	call	___lwdiv	;wreg free
  2097  00181E  C001  F008         	movff	?___lwdiv,___wmul@multiplier
  2098  001822  C002  F009         	movff	?___lwdiv+1,___wmul@multiplier+1
  2099  001826  0E00               	movlw	0
  2100  001828  6E0B               	movwf	(___wmul@multiplicand+1)^0,c
  2101  00182A  0E64               	movlw	100
  2102  00182C  6E0A               	movwf	___wmul@multiplicand^0,c
  2103  00182E  EC01  F012         	call	___wmul	;wreg free
  2104  001832                     
  2105                           ;color.c: 159:     if (compare(RG_ratio, 0, 100) && compare(RB_ratio, 0, 200)){color = 1
      +                          ;}
  2106  001832  C010  F001         	movff	detect_color_C@RG_ratio,compare@value2compare
  2107  001836  C011  F002         	movff	detect_color_C@RG_ratio+1,compare@value2compare+1
  2108  00183A  0E00               	movlw	0
  2109  00183C  6E04               	movwf	(compare@upper+1)^0,c
  2110  00183E  0E00               	movlw	0
  2111  001840  6E03               	movwf	compare@upper^0,c
  2112  001842  0E00               	movlw	0
  2113  001844  6E06               	movwf	(compare@lower+1)^0,c
  2114  001846  0E64               	movlw	100
  2115  001848  6E05               	movwf	compare@lower^0,c
  2116  00184A  EC59  F011         	call	_compare	;wreg free
  2117  00184E  0900               	iorlw	0
  2118  001850  B4D8               	btfsc	status,2,c
  2119  001852  EF2D  F00C         	goto	u1531
  2120  001856  EF2F  F00C         	goto	u1530
  2121  00185A                     u1531:
  2122  00185A  EF45  F00C         	goto	l85
  2123  00185E                     u1530:
  2124  00185E  C012  F001         	movff	detect_color_C@RB_ratio,compare@value2compare
  2125  001862  C013  F002         	movff	detect_color_C@RB_ratio+1,compare@value2compare+1
  2126  001866  0E00               	movlw	0
  2127  001868  6E04               	movwf	(compare@upper+1)^0,c
  2128  00186A  0E00               	movlw	0
  2129  00186C  6E03               	movwf	compare@upper^0,c
  2130  00186E  0E00               	movlw	0
  2131  001870  6E06               	movwf	(compare@lower+1)^0,c
  2132  001872  0EC8               	movlw	200
  2133  001874  6E05               	movwf	compare@lower^0,c
  2134  001876  EC59  F011         	call	_compare	;wreg free
  2135  00187A  0900               	iorlw	0
  2136  00187C  B4D8               	btfsc	status,2,c
  2137  00187E  EF43  F00C         	goto	u1541
  2138  001882  EF45  F00C         	goto	u1540
  2139  001886                     u1541:
  2140  001886  EF45  F00C         	goto	l85
  2141  00188A                     u1540:
  2142  00188A                     l85:
  2143  00188A  0012               	return		;funcret
  2144  00188C                     __end_of_detect_color_C:
  2145                           	callstack 0
  2146                           
  2147 ;; *************** function _compare *****************
  2148 ;; Defined at:
  2149 ;;		line 164 in file "color.c"
  2150 ;; Parameters:    Size  Location     Type
  2151 ;;  value2compar    2    0[COMRAM] unsigned int 
  2152 ;;  upper           2    2[COMRAM] unsigned int 
  2153 ;;  lower           2    4[COMRAM] unsigned int 
  2154 ;; Auto vars:     Size  Location     Type
  2155 ;;  result          1    6[COMRAM] unsigned char 
  2156 ;; Return value:  Size  Location     Type
  2157 ;;                  1    wreg      unsigned char 
  2158 ;; Registers used:
  2159 ;;		wreg, status,2, status,0
  2160 ;; Tracked objects:
  2161 ;;		On entry : 0/0
  2162 ;;		On exit  : 0/0
  2163 ;;		Unchanged: 0/0
  2164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2165 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2166 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2167 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2168 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2169 ;;Total ram usage:        7 bytes
  2170 ;; Hardware stack levels used: 1
  2171 ;; This function calls:
  2172 ;;		Nothing
  2173 ;; This function is called by:
  2174 ;;		_detect_color_C
  2175 ;; This function uses a non-reentrant model
  2176 ;;
  2177                           
  2178                           	psect	text11
  2179  0022B2                     __ptext11:
  2180                           	callstack 0
  2181  0022B2                     _compare:
  2182                           	callstack 29
  2183  0022B2                     
  2184                           ;color.c: 164: unsigned char compare(unsigned int value2compare, unsigned int upper, uns
      +                          igned int lower );color.c: 165: {;color.c: 166:     unsigned char result = 0;
  2185  0022B2  0E00               	movlw	0
  2186  0022B4  6E07               	movwf	compare@result^0,c
  2187  0022B6                     
  2188                           ;color.c: 167:     if (lower <= value2compare && value2compare <= upper){result = 1;}
  2189  0022B6  5005               	movf	compare@lower^0,w,c
  2190  0022B8  5C01               	subwf	compare@value2compare^0,w,c
  2191  0022BA  5006               	movf	(compare@lower+1)^0,w,c
  2192  0022BC  5802               	subwfb	(compare@value2compare+1)^0,w,c
  2193  0022BE  A0D8               	btfss	status,0,c
  2194  0022C0  EF64  F011         	goto	u1471
  2195  0022C4  EF66  F011         	goto	u1470
  2196  0022C8                     u1471:
  2197  0022C8  EF73  F011         	goto	l88
  2198  0022CC                     u1470:
  2199  0022CC  5001               	movf	compare@value2compare^0,w,c
  2200  0022CE  5C03               	subwf	compare@upper^0,w,c
  2201  0022D0  5002               	movf	(compare@value2compare+1)^0,w,c
  2202  0022D2  5804               	subwfb	(compare@upper+1)^0,w,c
  2203  0022D4  A0D8               	btfss	status,0,c
  2204  0022D6  EF6F  F011         	goto	u1481
  2205  0022DA  EF71  F011         	goto	u1480
  2206  0022DE                     u1481:
  2207  0022DE  EF73  F011         	goto	l88
  2208  0022E2                     u1480:
  2209  0022E2  0E01               	movlw	1
  2210  0022E4  6E07               	movwf	compare@result^0,c
  2211  0022E6                     l88:
  2212                           
  2213                           ;color.c: 168:     return result;
  2214  0022E6  5007               	movf	compare@result^0,w,c
  2215  0022E8  0012               	return		;funcret
  2216  0022EA                     __end_of_compare:
  2217                           	callstack 0
  2218                           
  2219 ;; *************** function ___wmul *****************
  2220 ;; Defined at:
  2221 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\Umul16.c"
  2222 ;; Parameters:    Size  Location     Type
  2223 ;;  multiplier      2    7[COMRAM] unsigned int 
  2224 ;;  multiplicand    2    9[COMRAM] unsigned int 
  2225 ;; Auto vars:     Size  Location     Type
  2226 ;;  product         2   11[COMRAM] unsigned int 
  2227 ;; Return value:  Size  Location     Type
  2228 ;;                  2    7[COMRAM] unsigned int 
  2229 ;; Registers used:
  2230 ;;		wreg, status,2, status,0, prodl, prodh
  2231 ;; Tracked objects:
  2232 ;;		On entry : 0/0
  2233 ;;		On exit  : 0/0
  2234 ;;		Unchanged: 0/0
  2235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2236 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2237 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2238 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2239 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2240 ;;Total ram usage:        6 bytes
  2241 ;; Hardware stack levels used: 1
  2242 ;; This function calls:
  2243 ;;		Nothing
  2244 ;; This function is called by:
  2245 ;;		_detect_color_C
  2246 ;;		_setMotorPWM
  2247 ;; This function uses a non-reentrant model
  2248 ;;
  2249                           
  2250                           	psect	text12
  2251  002402                     __ptext12:
  2252                           	callstack 0
  2253  002402                     ___wmul:
  2254                           	callstack 28
  2255  002402  5008               	movf	___wmul@multiplier^0,w,c
  2256  002404  020A               	mulwf	___wmul@multiplicand^0,c
  2257  002406  CFF3 F00C          	movff	prodl,___wmul@product
  2258  00240A  CFF4 F00D          	movff	prodh,___wmul@product+1
  2259  00240E  5008               	movf	___wmul@multiplier^0,w,c
  2260  002410  020B               	mulwf	(___wmul@multiplicand+1)^0,c
  2261  002412  50F3               	movf	243,w,c
  2262  002414  260D               	addwf	(___wmul@product+1)^0,f,c
  2263  002416  5009               	movf	(___wmul@multiplier+1)^0,w,c
  2264  002418  020A               	mulwf	___wmul@multiplicand^0,c
  2265  00241A  50F3               	movf	243,w,c
  2266  00241C  260D               	addwf	(___wmul@product+1)^0,f,c
  2267  00241E  C00C  F008         	movff	___wmul@product,?___wmul
  2268  002422  C00D  F009         	movff	___wmul@product+1,?___wmul+1
  2269  002426  0012               	return		;funcret
  2270  002428                     __end_of___wmul:
  2271                           	callstack 0
  2272                           
  2273 ;; *************** function ___lwdiv *****************
  2274 ;; Defined at:
  2275 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\lwdiv.c"
  2276 ;; Parameters:    Size  Location     Type
  2277 ;;  dividend        2    0[COMRAM] unsigned int 
  2278 ;;  divisor         2    2[COMRAM] unsigned int 
  2279 ;; Auto vars:     Size  Location     Type
  2280 ;;  quotient        2    4[COMRAM] unsigned int 
  2281 ;;  counter         1    6[COMRAM] unsigned char 
  2282 ;; Return value:  Size  Location     Type
  2283 ;;                  2    0[COMRAM] unsigned int 
  2284 ;; Registers used:
  2285 ;;		wreg, status,2, status,0
  2286 ;; Tracked objects:
  2287 ;;		On entry : 0/0
  2288 ;;		On exit  : 0/0
  2289 ;;		Unchanged: 0/0
  2290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2291 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2292 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2293 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2294 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2295 ;;Total ram usage:        7 bytes
  2296 ;; Hardware stack levels used: 1
  2297 ;; This function calls:
  2298 ;;		Nothing
  2299 ;; This function is called by:
  2300 ;;		_detect_color_C
  2301 ;; This function uses a non-reentrant model
  2302 ;;
  2303                           
  2304                           	psect	text13
  2305  001DF2                     __ptext13:
  2306                           	callstack 0
  2307  001DF2                     ___lwdiv:
  2308                           	callstack 29
  2309  001DF2  0E00               	movlw	0
  2310  001DF4  6E06               	movwf	(___lwdiv@quotient+1)^0,c
  2311  001DF6  0E00               	movlw	0
  2312  001DF8  6E05               	movwf	___lwdiv@quotient^0,c
  2313  001DFA  5003               	movf	___lwdiv@divisor^0,w,c
  2314  001DFC  1004               	iorwf	(___lwdiv@divisor+1)^0,w,c
  2315  001DFE  B4D8               	btfsc	status,2,c
  2316  001E00  EF04  F00F         	goto	u1501
  2317  001E04  EF06  F00F         	goto	u1500
  2318  001E08                     u1501:
  2319  001E08  EF2E  F00F         	goto	l927
  2320  001E0C                     u1500:
  2321  001E0C  0E01               	movlw	1
  2322  001E0E  6E07               	movwf	___lwdiv@counter^0,c
  2323  001E10  EF0E  F00F         	goto	l2402
  2324  001E14                     l2400:
  2325  001E14  90D8               	bcf	status,0,c
  2326  001E16  3603               	rlcf	___lwdiv@divisor^0,f,c
  2327  001E18  3604               	rlcf	(___lwdiv@divisor+1)^0,f,c
  2328  001E1A  2A07               	incf	___lwdiv@counter^0,f,c
  2329  001E1C                     l2402:
  2330  001E1C  AE04               	btfss	(___lwdiv@divisor+1)^0,7,c
  2331  001E1E  EF13  F00F         	goto	u1511
  2332  001E22  EF15  F00F         	goto	u1510
  2333  001E26                     u1511:
  2334  001E26  EF0A  F00F         	goto	l2400
  2335  001E2A                     u1510:
  2336  001E2A                     l2404:
  2337  001E2A  90D8               	bcf	status,0,c
  2338  001E2C  3605               	rlcf	___lwdiv@quotient^0,f,c
  2339  001E2E  3606               	rlcf	(___lwdiv@quotient+1)^0,f,c
  2340  001E30  5003               	movf	___lwdiv@divisor^0,w,c
  2341  001E32  5C01               	subwf	___lwdiv@dividend^0,w,c
  2342  001E34  5004               	movf	(___lwdiv@divisor+1)^0,w,c
  2343  001E36  5802               	subwfb	(___lwdiv@dividend+1)^0,w,c
  2344  001E38  A0D8               	btfss	status,0,c
  2345  001E3A  EF21  F00F         	goto	u1521
  2346  001E3E  EF23  F00F         	goto	u1520
  2347  001E42                     u1521:
  2348  001E42  EF28  F00F         	goto	l2412
  2349  001E46                     u1520:
  2350  001E46  5003               	movf	___lwdiv@divisor^0,w,c
  2351  001E48  5E01               	subwf	___lwdiv@dividend^0,f,c
  2352  001E4A  5004               	movf	(___lwdiv@divisor+1)^0,w,c
  2353  001E4C  5A02               	subwfb	(___lwdiv@dividend+1)^0,f,c
  2354  001E4E  8005               	bsf	___lwdiv@quotient^0,0,c
  2355  001E50                     l2412:
  2356  001E50  90D8               	bcf	status,0,c
  2357  001E52  3204               	rrcf	(___lwdiv@divisor+1)^0,f,c
  2358  001E54  3203               	rrcf	___lwdiv@divisor^0,f,c
  2359  001E56  2E07               	decfsz	___lwdiv@counter^0,f,c
  2360  001E58  EF15  F00F         	goto	l2404
  2361  001E5C                     l927:
  2362  001E5C  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  2363  001E60  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2364  001E64  0012               	return		;funcret
  2365  001E66                     __end_of___lwdiv:
  2366                           	callstack 0
  2367                           
  2368 ;; *************** function _color_display *****************
  2369 ;; Defined at:
  2370 ;;		line 134 in file "color.c"
  2371 ;; Parameters:    Size  Location     Type
  2372 ;;  m               2   87[COMRAM] PTR struct color_rgb
  2373 ;;		 -> main@rgb(8), 
  2374 ;; Auto vars:     Size  Location     Type
  2375 ;;  buf           100   25[BANK0 ] unsigned char [100]
  2376 ;; Return value:  Size  Location     Type
  2377 ;;                  1    wreg      void 
  2378 ;; Registers used:
  2379 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2380 ;; Tracked objects:
  2381 ;;		On entry : 0/0
  2382 ;;		On exit  : 0/0
  2383 ;;		Unchanged: 0/0
  2384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2385 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2386 ;;      Locals:         0     100       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2387 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2388 ;;      Totals:         2     100       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2389 ;;Total ram usage:      102 bytes
  2390 ;; Hardware stack levels used: 1
  2391 ;; Hardware stack levels required when called: 8
  2392 ;; This function calls:
  2393 ;;		_sendStringSerial4
  2394 ;;		_sprintf
  2395 ;; This function is called by:
  2396 ;;		_main
  2397 ;; This function uses a non-reentrant model
  2398 ;;
  2399                           
  2400                           	psect	text14
  2401  001E66                     __ptext14:
  2402                           	callstack 0
  2403  001E66                     _color_display:
  2404                           	callstack 22
  2405  001E66                     
  2406                           ;color.c: 134: void color_display(struct color_rgb *m);color.c: 135: {;color.c: 136:    
      +                           char buf[100];;color.c: 137:     sprintf(buf,"\t%d\t%d\t%d\t%d\r\n", m->R, m->G, m->B, 
      +                          m->C);
  2407  001E66  0E79               	movlw	low color_display@buf
  2408  001E68  0100               	movlb	0	; () banked
  2409  001E6A  6F60               	movwf	sprintf@s& (0+255),b
  2410  001E6C  0E00               	movlw	high color_display@buf
  2411  001E6E  6F61               	movwf	(sprintf@s+1)& (0+255),b
  2412  001E70  0E01               	movlw	low STR_1
  2413  001E72  6F62               	movwf	sprintf@fmt& (0+255),b
  2414  001E74  0E0E               	movlw	high STR_1
  2415  001E76  6F63               	movwf	(sprintf@fmt+1)& (0+255),b
  2416  001E78  C058  FFD9         	movff	color_display@m,fsr2l
  2417  001E7C  C059  FFDA         	movff	color_display@m+1,fsr2h
  2418  001E80  CFDE F064          	movff	postinc2,?_sprintf+4
  2419  001E84  CFDD F065          	movff	postdec2,?_sprintf+5
  2420  001E88  EE20 F002          	lfsr	2,2
  2421  001E8C  5058               	movf	color_display@m^0,w,c
  2422  001E8E  26D9               	addwf	fsr2l,f,c
  2423  001E90  5059               	movf	(color_display@m+1)^0,w,c
  2424  001E92  22DA               	addwfc	fsr2h,f,c
  2425  001E94  CFDE F066          	movff	postinc2,?_sprintf+6
  2426  001E98  CFDD F067          	movff	postdec2,?_sprintf+7
  2427  001E9C  EE20 F004          	lfsr	2,4
  2428  001EA0  5058               	movf	color_display@m^0,w,c
  2429  001EA2  26D9               	addwf	fsr2l,f,c
  2430  001EA4  5059               	movf	(color_display@m+1)^0,w,c
  2431  001EA6  22DA               	addwfc	fsr2h,f,c
  2432  001EA8  CFDE F068          	movff	postinc2,?_sprintf+8
  2433  001EAC  CFDD F069          	movff	postdec2,?_sprintf+9
  2434  001EB0  EE20 F006          	lfsr	2,6
  2435  001EB4  5058               	movf	color_display@m^0,w,c
  2436  001EB6  26D9               	addwf	fsr2l,f,c
  2437  001EB8  5059               	movf	(color_display@m+1)^0,w,c
  2438  001EBA  22DA               	addwfc	fsr2h,f,c
  2439  001EBC  CFDE F06A          	movff	postinc2,?_sprintf+10
  2440  001EC0  CFDD F06B          	movff	postdec2,?_sprintf+11
  2441  001EC4  ECCB  F00F         	call	_sprintf	;wreg free
  2442  001EC8                     
  2443                           ;color.c: 138:     sendStringSerial4(buf);
  2444  001EC8  0E79               	movlw	low color_display@buf
  2445  001ECA  6E02               	movwf	sendStringSerial4@string^0,c
  2446  001ECC  0E00               	movlw	high color_display@buf
  2447  001ECE  6E03               	movwf	(sendStringSerial4@string+1)^0,c
  2448  001ED0  ECAA  F011         	call	_sendStringSerial4	;wreg free
  2449  001ED4  0012               	return		;funcret
  2450  001ED6                     __end_of_color_display:
  2451                           	callstack 0
  2452                           
  2453 ;; *************** function _sprintf *****************
  2454 ;; Defined at:
  2455 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\nf_sprintf.c"
  2456 ;; Parameters:    Size  Location     Type
  2457 ;;  s               2    0[BANK0 ] PTR unsigned char 
  2458 ;;		 -> voltage_display@buf(80), color_predict@buf(100), color_display@buf(100), 
  2459 ;;  fmt             2    2[BANK0 ] PTR const unsigned char 
  2460 ;;		 -> STR_3(5), STR_2(6), STR_1(15), 
  2461 ;; Auto vars:     Size  Location     Type
  2462 ;;  f              11   14[BANK0 ] struct _IO_FILE
  2463 ;;  ap              2   12[BANK0 ] PTR void [1]
  2464 ;;		 -> ?_sprintf(2), 
  2465 ;;  ret             2    0        int 
  2466 ;; Return value:  Size  Location     Type
  2467 ;;                  2    0[BANK0 ] int 
  2468 ;; Registers used:
  2469 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2470 ;; Tracked objects:
  2471 ;;		On entry : 0/0
  2472 ;;		On exit  : 0/0
  2473 ;;		Unchanged: 0/0
  2474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2475 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2476 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2477 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2478 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2479 ;;Total ram usage:       25 bytes
  2480 ;; Hardware stack levels used: 1
  2481 ;; Hardware stack levels required when called: 7
  2482 ;; This function calls:
  2483 ;;		_vfprintf
  2484 ;; This function is called by:
  2485 ;;		_color_display
  2486 ;;		_color_predict
  2487 ;;		_voltage_display
  2488 ;; This function uses a non-reentrant model
  2489 ;;
  2490                           
  2491                           	psect	text15
  2492  001F96                     __ptext15:
  2493                           	callstack 0
  2494  001F96                     _sprintf:
  2495                           	callstack 22
  2496  001F96  0E64               	movlw	low (?_sprintf+4)
  2497  001F98  0100               	movlb	0	; () banked
  2498  001F9A  6F6C               	movwf	sprintf@ap& (0+255),b
  2499  001F9C  0E00               	movlw	high (?_sprintf+4)
  2500  001F9E  6F6D               	movwf	(sprintf@ap+1)& (0+255),b
  2501  001FA0  C060  F06E         	movff	sprintf@s,sprintf@f
  2502  001FA4  C061  F06F         	movff	sprintf@s+1,sprintf@f+1
  2503  001FA8                     
  2504                           ; BSR set to: 0
  2505  001FA8  0E00               	movlw	0
  2506  001FAA  6F72               	movwf	(sprintf@f+4)& (0+255),b
  2507  001FAC  0E00               	movlw	0
  2508  001FAE  6F71               	movwf	(sprintf@f+3)& (0+255),b
  2509  001FB0                     
  2510                           ; BSR set to: 0
  2511  001FB0  0E00               	movlw	0
  2512  001FB2  6F78               	movwf	(sprintf@f+10)& (0+255),b
  2513  001FB4  0E00               	movlw	0
  2514  001FB6  6F77               	movwf	(sprintf@f+9)& (0+255),b
  2515  001FB8                     
  2516                           ; BSR set to: 0
  2517  001FB8  0E6E               	movlw	low sprintf@f
  2518  001FBA  6E50               	movwf	vfprintf@fp^0,c
  2519  001FBC  0E00               	movlw	high sprintf@f
  2520  001FBE  6E51               	movwf	(vfprintf@fp+1)^0,c
  2521  001FC0  C062  F052         	movff	sprintf@fmt,vfprintf@fmt
  2522  001FC4  C063  F053         	movff	sprintf@fmt+1,vfprintf@fmt+1
  2523  001FC8  0E6C               	movlw	low sprintf@ap
  2524  001FCA  6E54               	movwf	vfprintf@ap^0,c
  2525  001FCC  0E00               	movlw	high sprintf@ap
  2526  001FCE  6E55               	movwf	(vfprintf@ap+1)^0,c
  2527  001FD0  EC6B  F00F         	call	_vfprintf	;wreg free
  2528  001FD4  0100               	movlb	0	; () banked
  2529  001FD6  5171               	movf	(sprintf@f+3)& (0+255),w,b
  2530  001FD8  2560               	addwf	sprintf@s& (0+255),w,b
  2531  001FDA  6ED9               	movwf	fsr2l,c
  2532  001FDC  5172               	movf	(sprintf@f+4)& (0+255),w,b
  2533  001FDE  2161               	addwfc	(sprintf@s+1)& (0+255),w,b
  2534  001FE0  6EDA               	movwf	fsr2h,c
  2535  001FE2  0E00               	movlw	0
  2536  001FE4  6EDF               	movwf	indf2,c
  2537  001FE6                     
  2538                           ; BSR set to: 0
  2539  001FE6  0012               	return		;funcret
  2540  001FE8                     __end_of_sprintf:
  2541                           	callstack 0
  2542                           
  2543 ;; *************** function _vfprintf *****************
  2544 ;; Defined at:
  2545 ;;		line 1390 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c"
  2546 ;; Parameters:    Size  Location     Type
  2547 ;;  fp              2   79[COMRAM] PTR struct _IO_FILE
  2548 ;;		 -> sprintf@f(11), 
  2549 ;;  fmt             2   81[COMRAM] PTR const unsigned char 
  2550 ;;		 -> STR_3(5), STR_2(6), STR_1(15), 
  2551 ;;  ap              2   83[COMRAM] PTR PTR void 
  2552 ;;		 -> sprintf@ap(2), 
  2553 ;; Auto vars:     Size  Location     Type
  2554 ;;  cfmt            2   85[COMRAM] PTR unsigned char 
  2555 ;;		 -> STR_3(5), STR_2(6), STR_1(15), 
  2556 ;; Return value:  Size  Location     Type
  2557 ;;                  2   79[COMRAM] int 
  2558 ;; Registers used:
  2559 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2560 ;; Tracked objects:
  2561 ;;		On entry : 0/0
  2562 ;;		On exit  : 0/0
  2563 ;;		Unchanged: 0/0
  2564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2565 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2566 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2567 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2568 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2569 ;;Total ram usage:        8 bytes
  2570 ;; Hardware stack levels used: 1
  2571 ;; Hardware stack levels required when called: 6
  2572 ;; This function calls:
  2573 ;;		_vfpfcnvrt
  2574 ;; This function is called by:
  2575 ;;		_sprintf
  2576 ;; This function uses a non-reentrant model
  2577 ;;
  2578                           
  2579                           	psect	text16
  2580  001ED6                     __ptext16:
  2581                           	callstack 0
  2582  001ED6                     _vfprintf:
  2583                           	callstack 22
  2584  001ED6                     
  2585                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 1390: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.35\pic\source
      +                          s\c99\common\doprnt.c: 1391: {;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\comm
      +                          on\doprnt.c: 1393:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\
      +                          common\doprnt.c: 1395:     cfmt = (char *)fmt;
  2586  001ED6  C052  F056         	movff	vfprintf@fmt,vfprintf@cfmt
  2587  001EDA  C053  F057         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  2588  001EDE                     
  2589                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 1396:     nout = 
      +                          0;
  2590  001EDE  0E00               	movlw	0
  2591  001EE0  0101               	movlb	1	; () banked
  2592  001EE2  6F51               	movwf	(_nout+1)& (0+255),b
  2593  001EE4  0E00               	movlw	0
  2594  001EE6  6F50               	movwf	_nout& (0+255),b
  2595                           
  2596                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 1397:     while (
      +                          *cfmt) {
  2597  001EE8  EF89  F00F         	goto	l2334
  2598  001EEC                     l2332:
  2599                           
  2600                           ; BSR set to: 1
  2601                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 1398:         nou
      +                          t += vfpfcnvrt(fp, &cfmt, ap);
  2602  001EEC  C050  F040         	movff	vfprintf@fp,vfpfcnvrt@fp
  2603  001EF0  C051  F041         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  2604  001EF4  0E56               	movlw	low vfprintf@cfmt
  2605  001EF6  6E42               	movwf	vfpfcnvrt@fmt^0,c
  2606  001EF8  0E00               	movlw	high vfprintf@cfmt
  2607  001EFA  6E43               	movwf	(vfpfcnvrt@fmt+1)^0,c
  2608  001EFC  C054  F044         	movff	vfprintf@ap,vfpfcnvrt@ap
  2609  001F00  C055  F045         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  2610  001F04  EC65  F009         	call	_vfpfcnvrt	;wreg free
  2611  001F08  5040               	movf	?_vfpfcnvrt^0,w,c
  2612  001F0A  0101               	movlb	1	; () banked
  2613  001F0C  2750               	addwf	_nout& (0+255),f,b
  2614  001F0E  5041               	movf	(?_vfpfcnvrt+1)^0,w,c
  2615  001F10  2351               	addwfc	(_nout+1)& (0+255),f,b
  2616  001F12                     l2334:
  2617                           
  2618                           ; BSR set to: 1
  2619                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 1397:     while (
      +                          *cfmt) {
  2620  001F12  C056  FFF6         	movff	vfprintf@cfmt,tblptrl
  2621  001F16  C057  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  2622  001F1A                     	if	0	;tblptru may be non-zero
  2623  001F1A                     	endif
  2624  001F1A                     	if	0	;tblptru may be non-zero
  2625  001F1A                     	endif
  2626  001F1A  0008               	tblrd		*
  2627  001F1C  50F5               	movf	tablat,w,c
  2628  001F1E  0900               	iorlw	0
  2629  001F20  A4D8               	btfss	status,2,c
  2630  001F22  EF95  F00F         	goto	u1451
  2631  001F26  EF97  F00F         	goto	u1450
  2632  001F2A                     u1451:
  2633  001F2A  EF76  F00F         	goto	l2332
  2634  001F2E                     u1450:
  2635  001F2E                     
  2636                           ; BSR set to: 1
  2637                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 1400:     return 
      +                          nout;
  2638  001F2E  C150  F050         	movff	_nout,?_vfprintf
  2639  001F32  C151  F051         	movff	_nout+1,?_vfprintf+1
  2640  001F36                     
  2641                           ; BSR set to: 1
  2642  001F36  0012               	return		;funcret
  2643  001F38                     __end_of_vfprintf:
  2644                           	callstack 0
  2645                           
  2646 ;; *************** function _vfpfcnvrt *****************
  2647 ;; Defined at:
  2648 ;;		line 692 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c"
  2649 ;; Parameters:    Size  Location     Type
  2650 ;;  fp              2   63[COMRAM] PTR struct _IO_FILE
  2651 ;;		 -> sprintf@f(11), 
  2652 ;;  fmt             2   65[COMRAM] PTR PTR unsigned char 
  2653 ;;		 -> vfprintf@cfmt(2), 
  2654 ;;  ap              2   67[COMRAM] PTR PTR void 
  2655 ;;		 -> sprintf@ap(2), 
  2656 ;; Auto vars:     Size  Location     Type
  2657 ;;  ll              8   71[COMRAM] long long 
  2658 ;;  llu             8    0        unsigned long long 
  2659 ;;  f               4    0        unsigned long long 
  2660 ;;  vp              3    0        PTR void 
  2661 ;;  ct              3    0        unsigned char [3]
  2662 ;;  cp              3    0        PTR unsigned char 
  2663 ;;  i               2    0        int 
  2664 ;;  done            2    0        int 
  2665 ;;  c               1    0        unsigned char 
  2666 ;; Return value:  Size  Location     Type
  2667 ;;                  2   63[COMRAM] int 
  2668 ;; Registers used:
  2669 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2670 ;; Tracked objects:
  2671 ;;		On entry : 0/0
  2672 ;;		On exit  : 0/0
  2673 ;;		Unchanged: 0/0
  2674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2675 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2676 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2677 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2678 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2679 ;;Total ram usage:       16 bytes
  2680 ;; Hardware stack levels used: 1
  2681 ;; Hardware stack levels required when called: 5
  2682 ;; This function calls:
  2683 ;;		_dtoa
  2684 ;;		_fputc
  2685 ;; This function is called by:
  2686 ;;		_vfprintf
  2687 ;; This function uses a non-reentrant model
  2688 ;;
  2689                           
  2690                           	psect	text17
  2691  0012CA                     __ptext17:
  2692                           	callstack 0
  2693  0012CA                     _vfpfcnvrt:
  2694                           	callstack 22
  2695  0012CA                     
  2696                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 692: static int v
      +                          fpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.35\pic\sou
      +                          rces\c99\common\doprnt.c: 693: {;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\co
      +                          mmon\doprnt.c: 694:     char c, *cp, ct[3];;C:\Program Files\Microchip\xc8\v2.35\pic\sou
      +                          rces\c99\common\doprnt.c: 695:     int done, i;;C:\Program Files\Microchip\xc8\v2.35\pic
      +                          \sources\c99\common\doprnt.c: 696:     long long ll;;C:\Program Files\Microchip\xc8\v2.3
      +                          5\pic\sources\c99\common\doprnt.c: 697:     unsigned long long llu;
  2697  0012CA  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2698  0012CE  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2699  0012D2  CFDE FFF6          	movff	postinc2,tblptrl
  2700  0012D6  CFDD FFF7          	movff	postdec2,tblptrh
  2701  0012DA                     	if	0	;tblptru may be non-zero
  2702  0012DA                     	endif
  2703  0012DA                     	if	0	;tblptru may be non-zero
  2704  0012DA                     	endif
  2705  0012DA  0008               	tblrd		*
  2706  0012DC  50F5               	movf	tablat,w,c
  2707  0012DE  0A25               	xorlw	37
  2708  0012E0  A4D8               	btfss	status,2,c
  2709  0012E2  EF75  F009         	goto	u1361
  2710  0012E6  EF77  F009         	goto	u1360
  2711  0012EA                     u1361:
  2712  0012EA  EF23  F00A         	goto	l2278
  2713  0012EE                     u1360:
  2714  0012EE                     
  2715                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 703:         ++*f
      +                          mt;
  2716  0012EE  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2717  0012F2  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2718  0012F6  2ADE               	incf	postinc2,f,c
  2719  0012F8  0E00               	movlw	0
  2720  0012FA  22DD               	addwfc	postdec2,f,c
  2721  0012FC                     
  2722                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 705:         flag
      +                          s = width = 0;
  2723  0012FC  0E00               	movlw	0
  2724  0012FE  0100               	movlb	0	; () banked
  2725  001300  6FFA               	movwf	(_width+1)& (0+255),b
  2726  001302  0E00               	movlw	0
  2727  001304  6FF9               	movwf	_width& (0+255),b
  2728  001306  C0F9  F0FD         	movff	_width,_flags
  2729  00130A  C0FA  F0FE         	movff	_width+1,_flags+1
  2730  00130E                     
  2731                           ; BSR set to: 0
  2732                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 706:         prec
      +                           = -1;
  2733  00130E  69FB               	setf	_prec& (0+255),b
  2734  001310  69FC               	setf	(_prec+1)& (0+255),b
  2735  001312                     
  2736                           ; BSR set to: 0
  2737                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 847:         if (
      +                          (*fmt[0] == 'd') || (*fmt[0] == 'i')) {
  2738  001312  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2739  001316  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2740  00131A  CFDE FFF6          	movff	postinc2,tblptrl
  2741  00131E  CFDD FFF7          	movff	postdec2,tblptrh
  2742  001322                     	if	0	;tblptru may be non-zero
  2743  001322                     	endif
  2744  001322                     	if	0	;tblptru may be non-zero
  2745  001322                     	endif
  2746  001322  0008               	tblrd		*
  2747  001324  50F5               	movf	tablat,w,c
  2748  001326  0A64               	xorlw	100
  2749  001328  B4D8               	btfsc	status,2,c
  2750  00132A  EF99  F009         	goto	u1371
  2751  00132E  EF9B  F009         	goto	u1370
  2752  001332                     u1371:
  2753  001332  EFAD  F009         	goto	l2256
  2754  001336                     u1370:
  2755  001336                     
  2756                           ; BSR set to: 0
  2757  001336  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2758  00133A  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2759  00133E  CFDE FFF6          	movff	postinc2,tblptrl
  2760  001342  CFDD FFF7          	movff	postdec2,tblptrh
  2761  001346                     	if	0	;tblptru may be non-zero
  2762  001346                     	endif
  2763  001346                     	if	0	;tblptru may be non-zero
  2764  001346                     	endif
  2765  001346  0008               	tblrd		*
  2766  001348  50F5               	movf	tablat,w,c
  2767  00134A  0A69               	xorlw	105
  2768  00134C  A4D8               	btfss	status,2,c
  2769  00134E  EFAB  F009         	goto	u1381
  2770  001352  EFAD  F009         	goto	u1380
  2771  001356                     u1381:
  2772  001356  EFED  F009         	goto	l2262
  2773  00135A                     u1380:
  2774  00135A                     l2256:
  2775                           
  2776                           ; BSR set to: 0
  2777                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 849:             
      +                          ++*fmt;
  2778  00135A  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2779  00135E  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2780  001362  2ADE               	incf	postinc2,f,c
  2781  001364  0E00               	movlw	0
  2782  001366  22DD               	addwfc	postdec2,f,c
  2783                           
  2784                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 850:             
      +                          ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
  2785  001368  C044  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  2786  00136C  C045  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  2787  001370  CFDF F046          	movff	indf2,??_vfpfcnvrt
  2788  001374  0E02               	movlw	2
  2789  001376  26DE               	addwf	postinc2,f,c
  2790  001378  CFDF F047          	movff	indf2,??_vfpfcnvrt+1
  2791  00137C  0E00               	movlw	0
  2792  00137E  22DD               	addwfc	postdec2,f,c
  2793  001380  C046  FFD9         	movff	??_vfpfcnvrt,fsr2l
  2794  001384  C047  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  2795  001388  CFDE F048          	movff	postinc2,vfpfcnvrt@ll
  2796  00138C  CFDD F049          	movff	postdec2,vfpfcnvrt@ll+1
  2797  001390  0E00               	movlw	0
  2798  001392  BE49               	btfsc	(vfpfcnvrt@ll+1)^0,7,c
  2799  001394  0EFF               	movlw	-1
  2800  001396  6E4A               	movwf	(vfpfcnvrt@ll+2)^0,c
  2801  001398  6E4B               	movwf	(vfpfcnvrt@ll+3)^0,c
  2802  00139A  6E4C               	movwf	(vfpfcnvrt@ll+4)^0,c
  2803  00139C  6E4D               	movwf	(vfpfcnvrt@ll+5)^0,c
  2804  00139E  6E4E               	movwf	(vfpfcnvrt@ll+6)^0,c
  2805  0013A0  6E4F               	movwf	(vfpfcnvrt@ll+7)^0,c
  2806  0013A2                     
  2807                           ; BSR set to: 0
  2808                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 852:             
      +                          return dtoa(fp, ll);
  2809  0013A2  C040  F01C         	movff	vfpfcnvrt@fp,dtoa@fp
  2810  0013A6  C041  F01D         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  2811  0013AA  C048  F01E         	movff	vfpfcnvrt@ll,dtoa@d
  2812  0013AE  C049  F01F         	movff	vfpfcnvrt@ll+1,dtoa@d+1
  2813  0013B2  C04A  F020         	movff	vfpfcnvrt@ll+2,dtoa@d+2
  2814  0013B6  C04B  F021         	movff	vfpfcnvrt@ll+3,dtoa@d+3
  2815  0013BA  C04C  F022         	movff	vfpfcnvrt@ll+4,dtoa@d+4
  2816  0013BE  C04D  F023         	movff	vfpfcnvrt@ll+5,dtoa@d+5
  2817  0013C2  C04E  F024         	movff	vfpfcnvrt@ll+6,dtoa@d+6
  2818  0013C6  C04F  F025         	movff	vfpfcnvrt@ll+7,dtoa@d+7
  2819  0013CA  EC09  F007         	call	_dtoa	;wreg free
  2820  0013CE  C01C  F040         	movff	?_dtoa,?_vfpfcnvrt
  2821  0013D2  C01D  F041         	movff	?_dtoa+1,?_vfpfcnvrt+1
  2822  0013D6  EF3E  F00A         	goto	l1179
  2823  0013DA                     l2262:
  2824                           
  2825                           ; BSR set to: 0
  2826                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 1372:         if 
      +                          ((*fmt)[0] == '%') {
  2827  0013DA  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2828  0013DE  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2829  0013E2  CFDE FFF6          	movff	postinc2,tblptrl
  2830  0013E6  CFDD FFF7          	movff	postdec2,tblptrh
  2831  0013EA                     	if	0	;tblptru may be non-zero
  2832  0013EA                     	endif
  2833  0013EA                     	if	0	;tblptru may be non-zero
  2834  0013EA                     	endif
  2835  0013EA  0008               	tblrd		*
  2836  0013EC  50F5               	movf	tablat,w,c
  2837  0013EE  0A25               	xorlw	37
  2838  0013F0  A4D8               	btfss	status,2,c
  2839  0013F2  EFFD  F009         	goto	u1391
  2840  0013F6  EFFF  F009         	goto	u1390
  2841  0013FA                     u1391:
  2842  0013FA  EF16  F00A         	goto	l2272
  2843  0013FE                     u1390:
  2844  0013FE                     
  2845                           ; BSR set to: 0
  2846                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 1373:            
      +                           ++*fmt;
  2847  0013FE  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2848  001402  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2849  001406  2ADE               	incf	postinc2,f,c
  2850  001408  0E00               	movlw	0
  2851  00140A  22DD               	addwfc	postdec2,f,c
  2852  00140C                     
  2853                           ; BSR set to: 0
  2854                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 1374:            
      +                           fputc((int)'%', fp);
  2855  00140C  0E00               	movlw	0
  2856  00140E  6E02               	movwf	(fputc@c+1)^0,c
  2857  001410  0E25               	movlw	37
  2858  001412  6E01               	movwf	fputc@c^0,c
  2859  001414  C040  F003         	movff	vfpfcnvrt@fp,fputc@fp
  2860  001418  C041  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  2861  00141C  ECAF  F00C         	call	_fputc	;wreg free
  2862  001420                     l2268:
  2863                           
  2864                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 1375:            
      +                           return 1;
  2865  001420  0E00               	movlw	0
  2866  001422  6E41               	movwf	(?_vfpfcnvrt+1)^0,c
  2867  001424  0E01               	movlw	1
  2868  001426  6E40               	movwf	?_vfpfcnvrt^0,c
  2869  001428  EF3E  F00A         	goto	l1179
  2870  00142C                     l2272:
  2871                           
  2872                           ; BSR set to: 0
  2873                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 1379:         ++*
      +                          fmt;
  2874  00142C  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2875  001430  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2876  001434  2ADE               	incf	postinc2,f,c
  2877  001436  0E00               	movlw	0
  2878  001438  22DD               	addwfc	postdec2,f,c
  2879  00143A                     
  2880                           ; BSR set to: 0
  2881                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 1380:         ret
      +                          urn 0;
  2882  00143A  0E00               	movlw	0
  2883  00143C  6E41               	movwf	(?_vfpfcnvrt+1)^0,c
  2884  00143E  0E00               	movlw	0
  2885  001440  6E40               	movwf	?_vfpfcnvrt^0,c
  2886  001442  EF3E  F00A         	goto	l1179
  2887  001446                     l2278:
  2888                           
  2889                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 1384:     fputc((
      +                          int)(*fmt)[0], fp);
  2890  001446  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2891  00144A  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2892  00144E  CFDE FFF6          	movff	postinc2,tblptrl
  2893  001452  CFDD FFF7          	movff	postdec2,tblptrh
  2894  001456                     	if	0	;tblptru may be non-zero
  2895  001456                     	endif
  2896  001456                     	if	0	;tblptru may be non-zero
  2897  001456                     	endif
  2898  001456  0008               	tblrd		*
  2899  001458  50F5               	movf	tablat,w,c
  2900  00145A  6E01               	movwf	fputc@c^0,c
  2901  00145C  6A02               	clrf	(fputc@c+1)^0,c
  2902  00145E  C040  F003         	movff	vfpfcnvrt@fp,fputc@fp
  2903  001462  C041  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  2904  001466  ECAF  F00C         	call	_fputc	;wreg free
  2905  00146A                     
  2906                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 1385:     ++*fmt;
  2907  00146A  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2908  00146E  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2909  001472  2ADE               	incf	postinc2,f,c
  2910  001474  0E00               	movlw	0
  2911  001476  22DD               	addwfc	postdec2,f,c
  2912  001478  EF10  F00A         	goto	l2268
  2913  00147C                     l1179:
  2914  00147C  0012               	return		;funcret
  2915  00147E                     __end_of_vfpfcnvrt:
  2916                           	callstack 0
  2917                           
  2918 ;; *************** function _dtoa *****************
  2919 ;; Defined at:
  2920 ;;		line 287 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c"
  2921 ;; Parameters:    Size  Location     Type
  2922 ;;  fp              2   27[COMRAM] PTR struct _IO_FILE
  2923 ;;		 -> sprintf@f(11), 
  2924 ;;  d               8   29[COMRAM] long long 
  2925 ;; Auto vars:     Size  Location     Type
  2926 ;;  n               8   53[COMRAM] long long 
  2927 ;;  i               2   61[COMRAM] int 
  2928 ;;  s               2   51[COMRAM] int 
  2929 ;;  w               2   49[COMRAM] int 
  2930 ;;  p               2   47[COMRAM] int 
  2931 ;; Return value:  Size  Location     Type
  2932 ;;                  2   27[COMRAM] int 
  2933 ;; Registers used:
  2934 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2935 ;; Tracked objects:
  2936 ;;		On entry : 0/0
  2937 ;;		On exit  : 0/0
  2938 ;;		Unchanged: 0/0
  2939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2940 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2941 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2942 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2943 ;;      Totals:        36       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2944 ;;Total ram usage:       36 bytes
  2945 ;; Hardware stack levels used: 1
  2946 ;; Hardware stack levels required when called: 4
  2947 ;; This function calls:
  2948 ;;		___aodiv
  2949 ;;		___aomod
  2950 ;;		_abs
  2951 ;;		_pad
  2952 ;; This function is called by:
  2953 ;;		_vfpfcnvrt
  2954 ;; This function uses a non-reentrant model
  2955 ;;
  2956                           
  2957                           	psect	text18
  2958  000E12                     __ptext18:
  2959                           	callstack 0
  2960  000E12                     _dtoa:
  2961                           	callstack 22
  2962  000E12                     
  2963                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 287: static int d
      +                          toa(FILE *fp, long long d);C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\d
      +                          oprnt.c: 288: {;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 28
      +                          9:     int i, p, s, w;;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprn
      +                          t.c: 290:     long long n;;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\d
      +                          oprnt.c: 293:     n = d;
  2964  000E12  C01E  F036         	movff	dtoa@d,dtoa@n
  2965  000E16  C01F  F037         	movff	dtoa@d+1,dtoa@n+1
  2966  000E1A  C020  F038         	movff	dtoa@d+2,dtoa@n+2
  2967  000E1E  C021  F039         	movff	dtoa@d+3,dtoa@n+3
  2968  000E22  C022  F03A         	movff	dtoa@d+4,dtoa@n+4
  2969  000E26  C023  F03B         	movff	dtoa@d+5,dtoa@n+5
  2970  000E2A  C024  F03C         	movff	dtoa@d+6,dtoa@n+6
  2971  000E2E  C025  F03D         	movff	dtoa@d+7,dtoa@n+7
  2972  000E32                     
  2973                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 294:     s = n < 
      +                          0 ? 1 : 0;
  2974  000E32  BE3D               	btfsc	(dtoa@n+7)^0,7,c
  2975  000E34  EF1E  F007         	goto	u1131
  2976  000E38  EF21  F007         	goto	u1130
  2977  000E3C                     u1131:
  2978  000E3C  0E01               	movlw	1
  2979  000E3E  EF22  F007         	goto	u1140
  2980  000E42                     u1130:
  2981  000E42  0E00               	movlw	0
  2982  000E44                     u1140:
  2983  000E44  6E34               	movwf	dtoa@s^0,c
  2984  000E46  6A35               	clrf	(dtoa@s+1)^0,c
  2985                           
  2986                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 295:     if (s) {
  2987  000E48  5034               	movf	dtoa@s^0,w,c
  2988  000E4A  1035               	iorwf	(dtoa@s+1)^0,w,c
  2989  000E4C  B4D8               	btfsc	status,2,c
  2990  000E4E  EF2B  F007         	goto	u1151
  2991  000E52  EF2D  F007         	goto	u1150
  2992  000E56                     u1151:
  2993  000E56  EF3D  F007         	goto	l2108
  2994  000E5A                     u1150:
  2995  000E5A                     
  2996                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 296:         n = 
      +                          -n;
  2997  000E5A  1E3D               	comf	(dtoa@n+7)^0,f,c
  2998  000E5C  1E3C               	comf	(dtoa@n+6)^0,f,c
  2999  000E5E  1E3B               	comf	(dtoa@n+5)^0,f,c
  3000  000E60  1E3A               	comf	(dtoa@n+4)^0,f,c
  3001  000E62  1E39               	comf	(dtoa@n+3)^0,f,c
  3002  000E64  1E38               	comf	(dtoa@n+2)^0,f,c
  3003  000E66  1E37               	comf	(dtoa@n+1)^0,f,c
  3004  000E68  6C36               	negf	dtoa@n^0,c
  3005  000E6A  0E00               	movlw	0
  3006  000E6C  2237               	addwfc	(dtoa@n+1)^0,f,c
  3007  000E6E  2238               	addwfc	(dtoa@n+2)^0,f,c
  3008  000E70  2239               	addwfc	(dtoa@n+3)^0,f,c
  3009  000E72  223A               	addwfc	(dtoa@n+4)^0,f,c
  3010  000E74  223B               	addwfc	(dtoa@n+5)^0,f,c
  3011  000E76  223C               	addwfc	(dtoa@n+6)^0,f,c
  3012  000E78  223D               	addwfc	(dtoa@n+7)^0,f,c
  3013  000E7A                     l2108:
  3014                           
  3015                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 300:     if (!(pr
      +                          ec < 0)) {
  3016  000E7A  0100               	movlb	0	; () banked
  3017  000E7C  BFFC               	btfsc	(_prec+1)& (0+255),7,b
  3018  000E7E  EF43  F007         	goto	u1161
  3019  000E82  EF45  F007         	goto	u1160
  3020  000E86                     u1161:
  3021  000E86  EF46  F007         	goto	l2112
  3022  000E8A                     u1160:
  3023  000E8A                     
  3024                           ; BSR set to: 0
  3025                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 301:         flag
      +                          s &= ~(1 << 1);
  3026  000E8A  93FD               	bcf	_flags& (0+255),1,b
  3027  000E8C                     l2112:
  3028                           
  3029                           ; BSR set to: 0
  3030                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 303:     p = (0 <
      +                           prec) ? prec : 1;
  3031  000E8C  BFFC               	btfsc	(_prec+1)& (0+255),7,b
  3032  000E8E  EF53  F007         	goto	u1170
  3033  000E92  51FC               	movf	(_prec+1)& (0+255),w,b
  3034  000E94  E106               	bnz	u1171
  3035  000E96  05FB               	decf	_prec& (0+255),w,b
  3036  000E98  B0D8               	btfsc	status,0,c
  3037  000E9A  EF51  F007         	goto	u1171
  3038  000E9E  EF53  F007         	goto	u1170
  3039  000EA2                     u1171:
  3040  000EA2  EF59  F007         	goto	l1152
  3041  000EA6                     u1170:
  3042  000EA6                     
  3043                           ; BSR set to: 0
  3044  000EA6  0E00               	movlw	0
  3045  000EA8  6E31               	movwf	(dtoa@p+1)^0,c
  3046  000EAA  0E01               	movlw	1
  3047  000EAC  6E30               	movwf	dtoa@p^0,c
  3048  000EAE  EF5D  F007         	goto	l1154
  3049  000EB2                     l1152:
  3050                           
  3051                           ; BSR set to: 0
  3052  000EB2  C0FB  F030         	movff	_prec,dtoa@p
  3053  000EB6  C0FC  F031         	movff	_prec+1,dtoa@p+1
  3054  000EBA                     l1154:
  3055                           
  3056                           ; BSR set to: 0
  3057                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 304:     w = widt
      +                          h;
  3058  000EBA  C0F9  F032         	movff	_width,dtoa@w
  3059  000EBE  C0FA  F033         	movff	_width+1,dtoa@w+1
  3060  000EC2                     
  3061                           ; BSR set to: 0
  3062                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 305:     if (s ||
      +                           (flags & (1 << 2))) {
  3063  000EC2  5034               	movf	dtoa@s^0,w,c
  3064  000EC4  1035               	iorwf	(dtoa@s+1)^0,w,c
  3065  000EC6  A4D8               	btfss	status,2,c
  3066  000EC8  EF68  F007         	goto	u1181
  3067  000ECC  EF6A  F007         	goto	u1180
  3068  000ED0                     u1181:
  3069  000ED0  EF71  F007         	goto	l2120
  3070  000ED4                     u1180:
  3071  000ED4                     
  3072                           ; BSR set to: 0
  3073  000ED4  A5FD               	btfss	_flags& (0+255),2,b
  3074  000ED6  EF6F  F007         	goto	u1191
  3075  000EDA  EF71  F007         	goto	u1190
  3076  000EDE                     u1191:
  3077  000EDE  EF74  F007         	goto	l2122
  3078  000EE2                     u1190:
  3079  000EE2                     l2120:
  3080                           
  3081                           ; BSR set to: 0
  3082                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 306:         --w;
  3083  000EE2  0632               	decf	dtoa@w^0,f,c
  3084  000EE4  A0D8               	btfss	status,0,c
  3085  000EE6  0633               	decf	(dtoa@w+1)^0,f,c
  3086  000EE8                     l2122:
  3087                           
  3088                           ; BSR set to: 0
  3089                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 310:     i = size
      +                          of(dbuf) - 1;
  3090  000EE8  0E00               	movlw	0
  3091  000EEA  6E3F               	movwf	(dtoa@i+1)^0,c
  3092  000EEC  0E1F               	movlw	31
  3093  000EEE  6E3E               	movwf	dtoa@i^0,c
  3094  000EF0                     
  3095                           ; BSR set to: 0
  3096                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 311:     dbuf[i] 
      +                          = '\0';
  3097  000EF0  0E00               	movlw	0
  3098  000EF2  0101               	movlb	1	; () banked
  3099  000EF4  6F71               	movwf	(_dbuf+31)& (0+255),b
  3100                           
  3101                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 312:     while (!
      +                          (i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  3102  000EF6  EFF9  F007         	goto	l2136
  3103  000EFA                     l2126:
  3104                           
  3105                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 313:         --i;
  3106  000EFA  063E               	decf	dtoa@i^0,f,c
  3107  000EFC  A0D8               	btfss	status,0,c
  3108  000EFE  063F               	decf	(dtoa@i+1)^0,f,c
  3109  000F00                     
  3110                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 314:         dbuf
      +                          [i] = (char)((int)'0' + abs(n % 10));
  3111  000F00  0E52               	movlw	low _dbuf
  3112  000F02  243E               	addwf	dtoa@i^0,w,c
  3113  000F04  6ED9               	movwf	fsr2l,c
  3114  000F06  0E01               	movlw	high _dbuf
  3115  000F08  203F               	addwfc	(dtoa@i+1)^0,w,c
  3116  000F0A  6EDA               	movwf	fsr2h,c
  3117  000F0C  C036  F001         	movff	dtoa@n,___aomod@dividend
  3118  000F10  C037  F002         	movff	dtoa@n+1,___aomod@dividend+1
  3119  000F14  C038  F003         	movff	dtoa@n+2,___aomod@dividend+2
  3120  000F18  C039  F004         	movff	dtoa@n+3,___aomod@dividend+3
  3121  000F1C  C03A  F005         	movff	dtoa@n+4,___aomod@dividend+4
  3122  000F20  C03B  F006         	movff	dtoa@n+5,___aomod@dividend+5
  3123  000F24  C03C  F007         	movff	dtoa@n+6,___aomod@dividend+6
  3124  000F28  C03D  F008         	movff	dtoa@n+7,___aomod@dividend+7
  3125  000F2C  0E0A               	movlw	10
  3126  000F2E  6E09               	movwf	___aomod@divisor^0,c
  3127  000F30  0E00               	movlw	0
  3128  000F32  6E0A               	movwf	(___aomod@divisor+1)^0,c
  3129  000F34  0E00               	movlw	0
  3130  000F36  6E0B               	movwf	(___aomod@divisor+2)^0,c
  3131  000F38  0E00               	movlw	0
  3132  000F3A  6E0C               	movwf	(___aomod@divisor+3)^0,c
  3133  000F3C  0E00               	movlw	0
  3134  000F3E  6E0D               	movwf	(___aomod@divisor+4)^0,c
  3135  000F40  0E00               	movlw	0
  3136  000F42  6E0E               	movwf	(___aomod@divisor+5)^0,c
  3137  000F44  0E00               	movlw	0
  3138  000F46  6E0F               	movwf	(___aomod@divisor+6)^0,c
  3139  000F48  0E00               	movlw	0
  3140  000F4A  6E10               	movwf	(___aomod@divisor+7)^0,c
  3141  000F4C  EC03  F00B         	call	___aomod	;wreg free
  3142  000F50  C001  F026         	movff	?___aomod,??_dtoa
  3143  000F54  C002  F027         	movff	?___aomod+1,??_dtoa+1
  3144  000F58  C003  F028         	movff	?___aomod+2,??_dtoa+2
  3145  000F5C  C004  F029         	movff	?___aomod+3,??_dtoa+3
  3146  000F60  C005  F02A         	movff	?___aomod+4,??_dtoa+4
  3147  000F64  C006  F02B         	movff	?___aomod+5,??_dtoa+5
  3148  000F68  C007  F02C         	movff	?___aomod+6,??_dtoa+6
  3149  000F6C  C008  F02D         	movff	?___aomod+7,??_dtoa+7
  3150  000F70  C026  F013         	movff	??_dtoa,abs@a
  3151  000F74  C028  F014         	movff	??_dtoa+2,abs@a+1
  3152  000F78  EC39  F011         	call	_abs	;wreg free
  3153  000F7C  5013               	movf	?_abs^0,w,c
  3154  000F7E  0F30               	addlw	48
  3155  000F80  6EDF               	movwf	indf2,c
  3156  000F82                     
  3157                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 315:         --p;
  3158  000F82  0630               	decf	dtoa@p^0,f,c
  3159  000F84  A0D8               	btfss	status,0,c
  3160  000F86  0631               	decf	(dtoa@p+1)^0,f,c
  3161  000F88                     
  3162                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 316:         --w;
  3163  000F88  0632               	decf	dtoa@w^0,f,c
  3164  000F8A  A0D8               	btfss	status,0,c
  3165  000F8C  0633               	decf	(dtoa@w+1)^0,f,c
  3166  000F8E                     
  3167                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 317:         n = 
      +                          n / 10;
  3168  000F8E  C036  F001         	movff	dtoa@n,___aodiv@dividend
  3169  000F92  C037  F002         	movff	dtoa@n+1,___aodiv@dividend+1
  3170  000F96  C038  F003         	movff	dtoa@n+2,___aodiv@dividend+2
  3171  000F9A  C039  F004         	movff	dtoa@n+3,___aodiv@dividend+3
  3172  000F9E  C03A  F005         	movff	dtoa@n+4,___aodiv@dividend+4
  3173  000FA2  C03B  F006         	movff	dtoa@n+5,___aodiv@dividend+5
  3174  000FA6  C03C  F007         	movff	dtoa@n+6,___aodiv@dividend+6
  3175  000FAA  C03D  F008         	movff	dtoa@n+7,___aodiv@dividend+7
  3176  000FAE  0E0A               	movlw	10
  3177  000FB0  6E09               	movwf	___aodiv@divisor^0,c
  3178  000FB2  0E00               	movlw	0
  3179  000FB4  6E0A               	movwf	(___aodiv@divisor+1)^0,c
  3180  000FB6  0E00               	movlw	0
  3181  000FB8  6E0B               	movwf	(___aodiv@divisor+2)^0,c
  3182  000FBA  0E00               	movlw	0
  3183  000FBC  6E0C               	movwf	(___aodiv@divisor+3)^0,c
  3184  000FBE  0E00               	movlw	0
  3185  000FC0  6E0D               	movwf	(___aodiv@divisor+4)^0,c
  3186  000FC2  0E00               	movlw	0
  3187  000FC4  6E0E               	movwf	(___aodiv@divisor+5)^0,c
  3188  000FC6  0E00               	movlw	0
  3189  000FC8  6E0F               	movwf	(___aodiv@divisor+6)^0,c
  3190  000FCA  0E00               	movlw	0
  3191  000FCC  6E10               	movwf	(___aodiv@divisor+7)^0,c
  3192  000FCE  EC3F  F00A         	call	___aodiv	;wreg free
  3193  000FD2  C001  F036         	movff	?___aodiv,dtoa@n
  3194  000FD6  C002  F037         	movff	?___aodiv+1,dtoa@n+1
  3195  000FDA  C003  F038         	movff	?___aodiv+2,dtoa@n+2
  3196  000FDE  C004  F039         	movff	?___aodiv+3,dtoa@n+3
  3197  000FE2  C005  F03A         	movff	?___aodiv+4,dtoa@n+4
  3198  000FE6  C006  F03B         	movff	?___aodiv+5,dtoa@n+5
  3199  000FEA  C007  F03C         	movff	?___aodiv+6,dtoa@n+6
  3200  000FEE  C008  F03D         	movff	?___aodiv+7,dtoa@n+7
  3201  000FF2                     l2136:
  3202                           
  3203                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 312:     while (!
      +                          (i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  3204  000FF2  BE3F               	btfsc	(dtoa@i+1)^0,7,c
  3205  000FF4  EF04  F008         	goto	u1201
  3206  000FF8  503F               	movf	(dtoa@i+1)^0,w,c
  3207  000FFA  E108               	bnz	u1200
  3208  000FFC  043E               	decf	dtoa@i^0,w,c
  3209  000FFE  A0D8               	btfss	status,0,c
  3210  001000  EF04  F008         	goto	u1201
  3211  001004  EF06  F008         	goto	u1200
  3212  001008                     u1201:
  3213  001008  EF37  F008         	goto	l2146
  3214  00100C                     u1200:
  3215  00100C  5036               	movf	dtoa@n^0,w,c
  3216  00100E  1037               	iorwf	(dtoa@n+1)^0,w,c
  3217  001010  1038               	iorwf	(dtoa@n+2)^0,w,c
  3218  001012  1039               	iorwf	(dtoa@n+3)^0,w,c
  3219  001014  103A               	iorwf	(dtoa@n+4)^0,w,c
  3220  001016  103B               	iorwf	(dtoa@n+5)^0,w,c
  3221  001018  103C               	iorwf	(dtoa@n+6)^0,w,c
  3222  00101A  103D               	iorwf	(dtoa@n+7)^0,w,c
  3223  00101C  A4D8               	btfss	status,2,c
  3224  00101E  EF13  F008         	goto	u1211
  3225  001022  EF15  F008         	goto	u1210
  3226  001026                     u1211:
  3227  001026  EF7D  F007         	goto	l2126
  3228  00102A                     u1210:
  3229  00102A  BE31               	btfsc	(dtoa@p+1)^0,7,c
  3230  00102C  EF22  F008         	goto	u1220
  3231  001030  5031               	movf	(dtoa@p+1)^0,w,c
  3232  001032  E106               	bnz	u1221
  3233  001034  0430               	decf	dtoa@p^0,w,c
  3234  001036  B0D8               	btfsc	status,0,c
  3235  001038  EF20  F008         	goto	u1221
  3236  00103C  EF22  F008         	goto	u1220
  3237  001040                     u1221:
  3238  001040  EF7D  F007         	goto	l2126
  3239  001044                     u1220:
  3240  001044  BE33               	btfsc	(dtoa@w+1)^0,7,c
  3241  001046  EF2D  F008         	goto	u1231
  3242  00104A  5033               	movf	(dtoa@w+1)^0,w,c
  3243  00104C  E108               	bnz	u1230
  3244  00104E  0432               	decf	dtoa@w^0,w,c
  3245  001050  A0D8               	btfss	status,0,c
  3246  001052  EF2D  F008         	goto	u1231
  3247  001056  EF2F  F008         	goto	u1230
  3248  00105A                     u1231:
  3249  00105A  EF37  F008         	goto	l2146
  3250  00105E                     u1230:
  3251  00105E  0100               	movlb	0	; () banked
  3252  001060  B3FD               	btfsc	_flags& (0+255),1,b
  3253  001062  EF35  F008         	goto	u1241
  3254  001066  EF37  F008         	goto	u1240
  3255  00106A                     u1241:
  3256  00106A  EF7D  F007         	goto	l2126
  3257  00106E                     u1240:
  3258  00106E                     l2146:
  3259                           
  3260                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 321:     if (s ||
      +                           (flags & (1 << 2))) {
  3261  00106E  5034               	movf	dtoa@s^0,w,c
  3262  001070  1035               	iorwf	(dtoa@s+1)^0,w,c
  3263  001072  A4D8               	btfss	status,2,c
  3264  001074  EF3E  F008         	goto	u1251
  3265  001078  EF40  F008         	goto	u1250
  3266  00107C                     u1251:
  3267  00107C  EF48  F008         	goto	l2150
  3268  001080                     u1250:
  3269  001080  0100               	movlb	0	; () banked
  3270  001082  A5FD               	btfss	_flags& (0+255),2,b
  3271  001084  EF46  F008         	goto	u1261
  3272  001088  EF48  F008         	goto	u1260
  3273  00108C                     u1261:
  3274  00108C  EF66  F008         	goto	l2160
  3275  001090                     u1260:
  3276  001090                     l2150:
  3277                           
  3278                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 322:         --i;
  3279  001090  063E               	decf	dtoa@i^0,f,c
  3280  001092  A0D8               	btfss	status,0,c
  3281  001094  063F               	decf	(dtoa@i+1)^0,f,c
  3282  001096                     
  3283                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 323:         dbuf
      +                          [i] = s ? '-' : '+';
  3284  001096  5034               	movf	dtoa@s^0,w,c
  3285  001098  1035               	iorwf	(dtoa@s+1)^0,w,c
  3286  00109A  A4D8               	btfss	status,2,c
  3287  00109C  EF52  F008         	goto	u1271
  3288  0010A0  EF54  F008         	goto	u1270
  3289  0010A4                     u1271:
  3290  0010A4  EF5A  F008         	goto	l2156
  3291  0010A8                     u1270:
  3292  0010A8  0E00               	movlw	0
  3293  0010AA  6E2F               	movwf	(_dtoa$2122+1)^0,c
  3294  0010AC  0E2B               	movlw	43
  3295  0010AE  6E2E               	movwf	_dtoa$2122^0,c
  3296  0010B0  EF5E  F008         	goto	l2158
  3297  0010B4                     l2156:
  3298  0010B4  0E00               	movlw	0
  3299  0010B6  6E2F               	movwf	(_dtoa$2122+1)^0,c
  3300  0010B8  0E2D               	movlw	45
  3301  0010BA  6E2E               	movwf	_dtoa$2122^0,c
  3302  0010BC                     l2158:
  3303  0010BC  0E52               	movlw	low _dbuf
  3304  0010BE  243E               	addwf	dtoa@i^0,w,c
  3305  0010C0  6ED9               	movwf	fsr2l,c
  3306  0010C2  0E01               	movlw	high _dbuf
  3307  0010C4  203F               	addwfc	(dtoa@i+1)^0,w,c
  3308  0010C6  6EDA               	movwf	fsr2h,c
  3309  0010C8  C02E  FFDF         	movff	_dtoa$2122,indf2
  3310  0010CC                     l2160:
  3311                           
  3312                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 327:     return p
      +                          ad(fp, &dbuf[i], w);
  3313  0010CC  C01C  F011         	movff	dtoa@fp,pad@fp
  3314  0010D0  C01D  F012         	movff	dtoa@fp+1,pad@fp+1
  3315  0010D4  0E52               	movlw	low _dbuf
  3316  0010D6  243E               	addwf	dtoa@i^0,w,c
  3317  0010D8  6E13               	movwf	pad@buf^0,c
  3318  0010DA  0E01               	movlw	high _dbuf
  3319  0010DC  203F               	addwfc	(dtoa@i+1)^0,w,c
  3320  0010DE  6E14               	movwf	(pad@buf+1)^0,c
  3321  0010E0  C032  F015         	movff	dtoa@w,pad@p
  3322  0010E4  C033  F016         	movff	dtoa@w+1,pad@p+1
  3323  0010E8  EC14  F00D         	call	_pad	;wreg free
  3324  0010EC  C011  F01C         	movff	?_pad,?_dtoa
  3325  0010F0  C012  F01D         	movff	?_pad+1,?_dtoa+1
  3326  0010F4  0012               	return		;funcret
  3327  0010F6                     __end_of_dtoa:
  3328                           	callstack 0
  3329                           
  3330 ;; *************** function _pad *****************
  3331 ;; Defined at:
  3332 ;;		line 72 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c"
  3333 ;; Parameters:    Size  Location     Type
  3334 ;;  fp              2   16[COMRAM] PTR struct _IO_FILE
  3335 ;;		 -> sprintf@f(11), 
  3336 ;;  buf             2   18[COMRAM] PTR unsigned char 
  3337 ;;		 -> dbuf(32), 
  3338 ;;  p               2   20[COMRAM] int 
  3339 ;; Auto vars:     Size  Location     Type
  3340 ;;  w               2   25[COMRAM] int 
  3341 ;;  i               2   23[COMRAM] int 
  3342 ;; Return value:  Size  Location     Type
  3343 ;;                  2   16[COMRAM] int 
  3344 ;; Registers used:
  3345 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3346 ;; Tracked objects:
  3347 ;;		On entry : 0/0
  3348 ;;		On exit  : 0/0
  3349 ;;		Unchanged: 0/0
  3350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3351 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3352 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3353 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3354 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3355 ;;Total ram usage:       11 bytes
  3356 ;; Hardware stack levels used: 1
  3357 ;; Hardware stack levels required when called: 3
  3358 ;; This function calls:
  3359 ;;		_fputc
  3360 ;;		_fputs
  3361 ;;		_strlen
  3362 ;; This function is called by:
  3363 ;;		_dtoa
  3364 ;; This function uses a non-reentrant model
  3365 ;;
  3366                           
  3367                           	psect	text19
  3368  001A28                     __ptext19:
  3369                           	callstack 0
  3370  001A28                     _pad:
  3371                           	callstack 22
  3372  001A28                     
  3373                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 72: static int pa
      +                          d(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\commo
      +                          n\doprnt.c: 73: {;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 
      +                          74:     int i, w;;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 
      +                          77:     if (flags & (1 << 0)) {
  3374  001A28  0100               	movlb	0	; () banked
  3375  001A2A  A1FD               	btfss	_flags& (0+255),0,b
  3376  001A2C  EF1A  F00D         	goto	u1061
  3377  001A30  EF1C  F00D         	goto	u1060
  3378  001A34                     u1061:
  3379  001A34  EF26  F00D         	goto	l2076
  3380  001A38                     u1060:
  3381  001A38                     
  3382                           ; BSR set to: 0
  3383                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 78:         fputs
      +                          ((const char *)buf, fp);
  3384  001A38  C013  F00A         	movff	pad@buf,fputs@s
  3385  001A3C  C014  F00B         	movff	pad@buf+1,fputs@s+1
  3386  001A40  C011  F00C         	movff	pad@fp,fputs@fp
  3387  001A44  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  3388  001A48  EC94  F010         	call	_fputs	;wreg free
  3389  001A4C                     l2076:
  3390                           
  3391                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 82:     w = (p < 
      +                          0) ? 0 : p;
  3392  001A4C  BE16               	btfsc	(pad@p+1)^0,7,c
  3393  001A4E  EF2B  F00D         	goto	u1071
  3394  001A52  EF2D  F00D         	goto	u1070
  3395  001A56                     u1071:
  3396  001A56  EF33  F00D         	goto	l2080
  3397  001A5A                     u1070:
  3398  001A5A  C015  F01A         	movff	pad@p,pad@w
  3399  001A5E  C016  F01B         	movff	pad@p+1,pad@w+1
  3400  001A62  EF37  F00D         	goto	l1141
  3401  001A66                     l2080:
  3402  001A66  0E00               	movlw	0
  3403  001A68  6E1B               	movwf	(pad@w+1)^0,c
  3404  001A6A  0E00               	movlw	0
  3405  001A6C  6E1A               	movwf	pad@w^0,c
  3406  001A6E                     l1141:
  3407                           
  3408                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 83:     i = 0;
  3409  001A6E  0E00               	movlw	0
  3410  001A70  6E19               	movwf	(pad@i+1)^0,c
  3411  001A72  0E00               	movlw	0
  3412  001A74  6E18               	movwf	pad@i^0,c
  3413                           
  3414                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 84:     while (i 
      +                          < w) {
  3415  001A76  EF49  F00D         	goto	l2086
  3416  001A7A                     l2082:
  3417                           
  3418                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 85:         fputc
      +                          (' ', fp);
  3419  001A7A  0E00               	movlw	0
  3420  001A7C  6E02               	movwf	(fputc@c+1)^0,c
  3421  001A7E  0E20               	movlw	32
  3422  001A80  6E01               	movwf	fputc@c^0,c
  3423  001A82  C011  F003         	movff	pad@fp,fputc@fp
  3424  001A86  C012  F004         	movff	pad@fp+1,fputc@fp+1
  3425  001A8A  ECAF  F00C         	call	_fputc	;wreg free
  3426  001A8E                     
  3427                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 86:         ++i;
  3428  001A8E  4A18               	infsnz	pad@i^0,f,c
  3429  001A90  2A19               	incf	(pad@i+1)^0,f,c
  3430  001A92                     l2086:
  3431                           
  3432                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 84:     while (i 
      +                          < w) {
  3433  001A92  501A               	movf	pad@w^0,w,c
  3434  001A94  5C18               	subwf	pad@i^0,w,c
  3435  001A96  5019               	movf	(pad@i+1)^0,w,c
  3436  001A98  0A80               	xorlw	128
  3437  001A9A  6E17               	movwf	??_pad^0,c
  3438  001A9C  501B               	movf	(pad@w+1)^0,w,c
  3439  001A9E  0A80               	xorlw	128
  3440  001AA0  5817               	subwfb	??_pad^0,w,c
  3441  001AA2  A0D8               	btfss	status,0,c
  3442  001AA4  EF56  F00D         	goto	u1081
  3443  001AA8  EF58  F00D         	goto	u1080
  3444  001AAC                     u1081:
  3445  001AAC  EF3D  F00D         	goto	l2082
  3446  001AB0                     u1080:
  3447  001AB0                     
  3448                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 90:     if (!(fla
      +                          gs & (1 << 0))) {
  3449  001AB0  0100               	movlb	0	; () banked
  3450  001AB2  B1FD               	btfsc	_flags& (0+255),0,b
  3451  001AB4  EF5E  F00D         	goto	u1091
  3452  001AB8  EF60  F00D         	goto	u1090
  3453  001ABC                     u1091:
  3454  001ABC  EF6A  F00D         	goto	l2090
  3455  001AC0                     u1090:
  3456  001AC0                     
  3457                           ; BSR set to: 0
  3458                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 91:         fputs
      +                          ((const char *)buf, fp);
  3459  001AC0  C013  F00A         	movff	pad@buf,fputs@s
  3460  001AC4  C014  F00B         	movff	pad@buf+1,fputs@s+1
  3461  001AC8  C011  F00C         	movff	pad@fp,fputs@fp
  3462  001ACC  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  3463  001AD0  EC94  F010         	call	_fputs	;wreg free
  3464  001AD4                     l2090:
  3465                           
  3466                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\doprnt.c: 94:     return (i
      +                          nt)(strlen(buf) + (size_t)w);
  3467  001AD4  C013  F001         	movff	pad@buf,strlen@s
  3468  001AD8  C014  F002         	movff	pad@buf+1,strlen@s+1
  3469  001ADC  EC75  F011         	call	_strlen	;wreg free
  3470  001AE0  501A               	movf	pad@w^0,w,c
  3471  001AE2  2401               	addwf	?_strlen^0,w,c
  3472  001AE4  6E11               	movwf	?_pad^0,c
  3473  001AE6  501B               	movf	(pad@w+1)^0,w,c
  3474  001AE8  2002               	addwfc	(?_strlen+1)^0,w,c
  3475  001AEA  6E12               	movwf	(?_pad+1)^0,c
  3476  001AEC  0012               	return		;funcret
  3477  001AEE                     __end_of_pad:
  3478                           	callstack 0
  3479                           
  3480 ;; *************** function _strlen *****************
  3481 ;; Defined at:
  3482 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\strlen.c"
  3483 ;; Parameters:    Size  Location     Type
  3484 ;;  s               2    0[COMRAM] PTR const unsigned char 
  3485 ;;		 -> dbuf(32), 
  3486 ;; Auto vars:     Size  Location     Type
  3487 ;;  a               2    2[COMRAM] PTR const unsigned char 
  3488 ;;		 -> dbuf(32), 
  3489 ;; Return value:  Size  Location     Type
  3490 ;;                  2    0[COMRAM] unsigned int 
  3491 ;; Registers used:
  3492 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3493 ;; Tracked objects:
  3494 ;;		On entry : 0/0
  3495 ;;		On exit  : 0/0
  3496 ;;		Unchanged: 0/0
  3497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3498 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3499 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3500 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3501 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3502 ;;Total ram usage:        4 bytes
  3503 ;; Hardware stack levels used: 1
  3504 ;; This function calls:
  3505 ;;		Nothing
  3506 ;; This function is called by:
  3507 ;;		_pad
  3508 ;; This function uses a non-reentrant model
  3509 ;;
  3510                           
  3511                           	psect	text20
  3512  0022EA                     __ptext20:
  3513                           	callstack 0
  3514  0022EA                     _strlen:
  3515                           	callstack 24
  3516  0022EA  C001  F003         	movff	strlen@s,strlen@a
  3517  0022EE  C002  F004         	movff	strlen@s+1,strlen@a+1
  3518  0022F2  EF7D  F011         	goto	l1986
  3519  0022F6                     l1984:
  3520  0022F6  4A01               	infsnz	strlen@s^0,f,c
  3521  0022F8  2A02               	incf	(strlen@s+1)^0,f,c
  3522  0022FA                     l1986:
  3523  0022FA  C001  FFD9         	movff	strlen@s,fsr2l
  3524  0022FE  C002  FFDA         	movff	strlen@s+1,fsr2h
  3525  002302  50DF               	movf	indf2,w,c
  3526  002304  A4D8               	btfss	status,2,c
  3527  002306  EF87  F011         	goto	u921
  3528  00230A  EF89  F011         	goto	u920
  3529  00230E                     u921:
  3530  00230E  EF7B  F011         	goto	l1984
  3531  002312                     u920:
  3532  002312  5003               	movf	strlen@a^0,w,c
  3533  002314  5C01               	subwf	strlen@s^0,w,c
  3534  002316  6E01               	movwf	?_strlen^0,c
  3535  002318  5004               	movf	(strlen@a+1)^0,w,c
  3536  00231A  5802               	subwfb	(strlen@s+1)^0,w,c
  3537  00231C  6E02               	movwf	(?_strlen+1)^0,c
  3538  00231E  0012               	return		;funcret
  3539  002320                     __end_of_strlen:
  3540                           	callstack 0
  3541                           
  3542 ;; *************** function _fputs *****************
  3543 ;; Defined at:
  3544 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\nf_fputs.c"
  3545 ;; Parameters:    Size  Location     Type
  3546 ;;  s               2    9[COMRAM] PTR const unsigned char 
  3547 ;;		 -> dbuf(32), 
  3548 ;;  fp              2   11[COMRAM] PTR struct _IO_FILE
  3549 ;;		 -> sprintf@f(11), 
  3550 ;; Auto vars:     Size  Location     Type
  3551 ;;  i               2   14[COMRAM] int 
  3552 ;;  c               1   13[COMRAM] unsigned char 
  3553 ;; Return value:  Size  Location     Type
  3554 ;;                  2    9[COMRAM] int 
  3555 ;; Registers used:
  3556 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3557 ;; Tracked objects:
  3558 ;;		On entry : 0/0
  3559 ;;		On exit  : 0/0
  3560 ;;		Unchanged: 0/0
  3561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3562 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3563 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3564 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3565 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3566 ;;Total ram usage:        7 bytes
  3567 ;; Hardware stack levels used: 1
  3568 ;; Hardware stack levels required when called: 2
  3569 ;; This function calls:
  3570 ;;		_fputc
  3571 ;; This function is called by:
  3572 ;;		_pad
  3573 ;; This function uses a non-reentrant model
  3574 ;;
  3575                           
  3576                           	psect	text21
  3577  002128                     __ptext21:
  3578                           	callstack 0
  3579  002128                     _fputs:
  3580                           	callstack 22
  3581  002128  0E00               	movlw	0
  3582  00212A  6E10               	movwf	(fputs@i+1)^0,c
  3583  00212C  0E00               	movlw	0
  3584  00212E  6E0F               	movwf	fputs@i^0,c
  3585  002130  EFA5  F010         	goto	l1980
  3586  002134                     l1976:
  3587  002134  C00E  F001         	movff	fputs@c,fputc@c
  3588  002138  6A02               	clrf	(fputc@c+1)^0,c
  3589  00213A  C00C  F003         	movff	fputs@fp,fputc@fp
  3590  00213E  C00D  F004         	movff	fputs@fp+1,fputc@fp+1
  3591  002142  ECAF  F00C         	call	_fputc	;wreg free
  3592  002146  4A0F               	infsnz	fputs@i^0,f,c
  3593  002148  2A10               	incf	(fputs@i+1)^0,f,c
  3594  00214A                     l1980:
  3595  00214A  500F               	movf	fputs@i^0,w,c
  3596  00214C  240A               	addwf	fputs@s^0,w,c
  3597  00214E  6ED9               	movwf	fsr2l,c
  3598  002150  5010               	movf	(fputs@i+1)^0,w,c
  3599  002152  200B               	addwfc	(fputs@s+1)^0,w,c
  3600  002154  6EDA               	movwf	fsr2h,c
  3601  002156  50DF               	movf	indf2,w,c
  3602  002158  6E0E               	movwf	fputs@c^0,c
  3603  00215A  500E               	movf	fputs@c^0,w,c
  3604  00215C  A4D8               	btfss	status,2,c
  3605  00215E  EFB3  F010         	goto	u911
  3606  002162  EFB5  F010         	goto	u910
  3607  002166                     u911:
  3608  002166  EF9A  F010         	goto	l1976
  3609  00216A                     u910:
  3610  00216A  0012               	return		;funcret
  3611  00216C                     __end_of_fputs:
  3612                           	callstack 0
  3613                           
  3614 ;; *************** function _fputc *****************
  3615 ;; Defined at:
  3616 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\nf_fputc.c"
  3617 ;; Parameters:    Size  Location     Type
  3618 ;;  c               2    0[COMRAM] int 
  3619 ;;  fp              2    2[COMRAM] PTR struct _IO_FILE
  3620 ;;		 -> sprintf@f(11), 
  3621 ;; Auto vars:     Size  Location     Type
  3622 ;;		None
  3623 ;; Return value:  Size  Location     Type
  3624 ;;                  2    0[COMRAM] int 
  3625 ;; Registers used:
  3626 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3627 ;; Tracked objects:
  3628 ;;		On entry : 0/0
  3629 ;;		On exit  : 0/0
  3630 ;;		Unchanged: 0/0
  3631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3632 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3633 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3634 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3635 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3636 ;;Total ram usage:        9 bytes
  3637 ;; Hardware stack levels used: 1
  3638 ;; Hardware stack levels required when called: 1
  3639 ;; This function calls:
  3640 ;;		_putch
  3641 ;; This function is called by:
  3642 ;;		_pad
  3643 ;;		_vfpfcnvrt
  3644 ;;		_fputs
  3645 ;; This function uses a non-reentrant model
  3646 ;;
  3647                           
  3648                           	psect	text22
  3649  00195E                     __ptext22:
  3650                           	callstack 0
  3651  00195E                     _fputc:
  3652                           	callstack 25
  3653  00195E  5003               	movf	fputc@fp^0,w,c
  3654  001960  1004               	iorwf	(fputc@fp+1)^0,w,c
  3655  001962  B4D8               	btfsc	status,2,c
  3656  001964  EFB6  F00C         	goto	u871
  3657  001968  EFB8  F00C         	goto	u870
  3658  00196C                     u871:
  3659  00196C  EFC1  F00C         	goto	l1964
  3660  001970                     u870:
  3661  001970  5003               	movf	fputc@fp^0,w,c
  3662  001972  1004               	iorwf	(fputc@fp+1)^0,w,c
  3663  001974  A4D8               	btfss	status,2,c
  3664  001976  EFBF  F00C         	goto	u881
  3665  00197A  EFC1  F00C         	goto	u880
  3666  00197E                     u881:
  3667  00197E  EFC6  F00C         	goto	l1966
  3668  001982                     u880:
  3669  001982                     l1964:
  3670  001982  5001               	movf	fputc@c^0,w,c
  3671  001984  EC54  F012         	call	_putch
  3672  001988  EF13  F00D         	goto	l1205
  3673  00198C                     l1966:
  3674  00198C  EE20 F009          	lfsr	2,9
  3675  001990  5003               	movf	fputc@fp^0,w,c
  3676  001992  26D9               	addwf	fsr2l,f,c
  3677  001994  5004               	movf	(fputc@fp+1)^0,w,c
  3678  001996  22DA               	addwfc	fsr2h,f,c
  3679  001998  50DE               	movf	postinc2,w,c
  3680  00199A  10DE               	iorwf	postinc2,w,c
  3681  00199C  B4D8               	btfsc	status,2,c
  3682  00199E  EFD3  F00C         	goto	u891
  3683  0019A2  EFD5  F00C         	goto	u890
  3684  0019A6                     u891:
  3685  0019A6  EFF0  F00C         	goto	l1970
  3686  0019AA                     u890:
  3687  0019AA  EE20 F009          	lfsr	2,9
  3688  0019AE  5003               	movf	fputc@fp^0,w,c
  3689  0019B0  26D9               	addwf	fsr2l,f,c
  3690  0019B2  5004               	movf	(fputc@fp+1)^0,w,c
  3691  0019B4  22DA               	addwfc	fsr2h,f,c
  3692  0019B6  EE10 F003          	lfsr	1,3
  3693  0019BA  5003               	movf	fputc@fp^0,w,c
  3694  0019BC  26E1               	addwf	fsr1l,f,c
  3695  0019BE  5004               	movf	(fputc@fp+1)^0,w,c
  3696  0019C0  22E2               	addwfc	fsr1h,f,c
  3697  0019C2  50DE               	movf	postinc2,w,c
  3698  0019C4  5CE6               	subwf	postinc1,w,c
  3699  0019C6  50E6               	movf	postinc1,w,c
  3700  0019C8  0A80               	xorlw	128
  3701  0019CA  6E09               	movwf	(??_fputc+4)^0,c
  3702  0019CC  50DE               	movf	postinc2,w,c
  3703  0019CE  0A80               	xorlw	128
  3704  0019D0  5809               	subwfb	(??_fputc+4)^0,w,c
  3705  0019D2  B0D8               	btfsc	status,0,c
  3706  0019D4  EFEE  F00C         	goto	u901
  3707  0019D8  EFF0  F00C         	goto	u900
  3708  0019DC                     u901:
  3709  0019DC  EF13  F00D         	goto	l1205
  3710  0019E0                     u900:
  3711  0019E0                     l1970:
  3712  0019E0  EE20 F003          	lfsr	2,3
  3713  0019E4  5003               	movf	fputc@fp^0,w,c
  3714  0019E6  26D9               	addwf	fsr2l,f,c
  3715  0019E8  5004               	movf	(fputc@fp+1)^0,w,c
  3716  0019EA  22DA               	addwfc	fsr2h,f,c
  3717  0019EC  CFDE F005          	movff	postinc2,??_fputc
  3718  0019F0  CFDD F006          	movff	postdec2,??_fputc+1
  3719  0019F4  C003  FFD9         	movff	fputc@fp,fsr2l
  3720  0019F8  C004  FFDA         	movff	fputc@fp+1,fsr2h
  3721  0019FC  CFDE F007          	movff	postinc2,??_fputc+2
  3722  001A00  CFDD F008          	movff	postdec2,??_fputc+3
  3723  001A04  5005               	movf	??_fputc^0,w,c
  3724  001A06  2407               	addwf	(??_fputc+2)^0,w,c
  3725  001A08  6ED9               	movwf	fsr2l,c
  3726  001A0A  5006               	movf	(??_fputc+1)^0,w,c
  3727  001A0C  2008               	addwfc	(??_fputc+3)^0,w,c
  3728  001A0E  6EDA               	movwf	fsr2h,c
  3729  001A10  C001  FFDF         	movff	fputc@c,indf2
  3730  001A14  EE20 F003          	lfsr	2,3
  3731  001A18  5003               	movf	fputc@fp^0,w,c
  3732  001A1A  26D9               	addwf	fsr2l,f,c
  3733  001A1C  5004               	movf	(fputc@fp+1)^0,w,c
  3734  001A1E  22DA               	addwfc	fsr2h,f,c
  3735  001A20  2ADE               	incf	postinc2,f,c
  3736  001A22  0E00               	movlw	0
  3737  001A24  22DD               	addwfc	postdec2,f,c
  3738  001A26                     l1205:
  3739  001A26  0012               	return		;funcret
  3740  001A28                     __end_of_fputc:
  3741                           	callstack 0
  3742                           
  3743 ;; *************** function _putch *****************
  3744 ;; Defined at:
  3745 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\putch.c"
  3746 ;; Parameters:    Size  Location     Type
  3747 ;;  c               1    wreg     unsigned char 
  3748 ;; Auto vars:     Size  Location     Type
  3749 ;;  c               1    0[COMRAM] unsigned char 
  3750 ;; Return value:  Size  Location     Type
  3751 ;;                  1    wreg      void 
  3752 ;; Registers used:
  3753 ;;		wreg
  3754 ;; Tracked objects:
  3755 ;;		On entry : 0/0
  3756 ;;		On exit  : 0/0
  3757 ;;		Unchanged: 0/0
  3758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3759 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3760 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3761 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3762 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3763 ;;Total ram usage:        0 bytes
  3764 ;; Hardware stack levels used: 1
  3765 ;; This function calls:
  3766 ;;		Nothing
  3767 ;; This function is called by:
  3768 ;;		_fputc
  3769 ;; This function uses a non-reentrant model
  3770 ;;
  3771                           
  3772                           	psect	text23
  3773  0024A8                     __ptext23:
  3774                           	callstack 0
  3775  0024A8                     _putch:
  3776                           	callstack 25
  3777  0024A8  0012               	return		;funcret
  3778  0024AA                     __end_of_putch:
  3779                           	callstack 0
  3780                           
  3781 ;; *************** function _abs *****************
  3782 ;; Defined at:
  3783 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\abs.c"
  3784 ;; Parameters:    Size  Location     Type
  3785 ;;  a               2   18[COMRAM] int 
  3786 ;; Auto vars:     Size  Location     Type
  3787 ;;		None
  3788 ;; Return value:  Size  Location     Type
  3789 ;;                  2   18[COMRAM] int 
  3790 ;; Registers used:
  3791 ;;		wreg, status,2, status,0
  3792 ;; Tracked objects:
  3793 ;;		On entry : 0/0
  3794 ;;		On exit  : 0/0
  3795 ;;		Unchanged: 0/0
  3796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3797 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3798 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3799 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3800 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3801 ;;Total ram usage:        4 bytes
  3802 ;; Hardware stack levels used: 1
  3803 ;; This function calls:
  3804 ;;		Nothing
  3805 ;; This function is called by:
  3806 ;;		_dtoa
  3807 ;; This function uses a non-reentrant model
  3808 ;;
  3809                           
  3810                           	psect	text24
  3811  002272                     __ptext24:
  3812                           	callstack 0
  3813  002272                     _abs:
  3814                           	callstack 25
  3815  002272  BE14               	btfsc	(abs@a+1)^0,7,c
  3816  002274  EF46  F011         	goto	u1100
  3817  002278  5014               	movf	(abs@a+1)^0,w,c
  3818  00227A  E106               	bnz	u1101
  3819  00227C  0413               	decf	abs@a^0,w,c
  3820  00227E  B0D8               	btfsc	status,0,c
  3821  002280  EF44  F011         	goto	u1101
  3822  002284  EF46  F011         	goto	u1100
  3823  002288                     u1101:
  3824  002288  EF54  F011         	goto	l1190
  3825  00228C                     u1100:
  3826  00228C  C013  F015         	movff	abs@a,??_abs
  3827  002290  C014  F016         	movff	abs@a+1,??_abs+1
  3828  002294  1E15               	comf	??_abs^0,f,c
  3829  002296  1E16               	comf	(??_abs+1)^0,f,c
  3830  002298  4A15               	infsnz	??_abs^0,f,c
  3831  00229A  2A16               	incf	(??_abs+1)^0,f,c
  3832  00229C  C015  F013         	movff	??_abs,?_abs
  3833  0022A0  C016  F014         	movff	??_abs+1,?_abs+1
  3834  0022A4  EF58  F011         	goto	l1193
  3835  0022A8                     l1190:
  3836  0022A8  C013  F013         	movff	abs@a,?_abs
  3837  0022AC  C014  F014         	movff	abs@a+1,?_abs+1
  3838  0022B0                     l1193:
  3839  0022B0  0012               	return		;funcret
  3840  0022B2                     __end_of_abs:
  3841                           	callstack 0
  3842                           
  3843 ;; *************** function ___aomod *****************
  3844 ;; Defined at:
  3845 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\aomod.c"
  3846 ;; Parameters:    Size  Location     Type
  3847 ;;  dividend        8    0[COMRAM] long long 
  3848 ;;  divisor         8    8[COMRAM] long long 
  3849 ;; Auto vars:     Size  Location     Type
  3850 ;;  sign            1   17[COMRAM] unsigned char 
  3851 ;;  counter         1   16[COMRAM] unsigned char 
  3852 ;; Return value:  Size  Location     Type
  3853 ;;                  8    0[COMRAM] long long 
  3854 ;; Registers used:
  3855 ;;		wreg, status,2, status,0
  3856 ;; Tracked objects:
  3857 ;;		On entry : 0/0
  3858 ;;		On exit  : 0/0
  3859 ;;		Unchanged: 0/0
  3860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3861 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3862 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3863 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3864 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3865 ;;Total ram usage:       18 bytes
  3866 ;; Hardware stack levels used: 1
  3867 ;; This function calls:
  3868 ;;		Nothing
  3869 ;; This function is called by:
  3870 ;;		_dtoa
  3871 ;; This function uses a non-reentrant model
  3872 ;;
  3873                           
  3874                           	psect	text25
  3875  001606                     __ptext25:
  3876                           	callstack 0
  3877  001606                     ___aomod:
  3878                           	callstack 25
  3879  001606  0E00               	movlw	0
  3880  001608  6E12               	movwf	___aomod@sign^0,c
  3881  00160A  BE08               	btfsc	(___aomod@dividend+7)^0,7,c
  3882  00160C  EF0C  F00B         	goto	u1000
  3883  001610  EF0A  F00B         	goto	u1001
  3884  001614                     u1001:
  3885  001614  EF1E  F00B         	goto	l2044
  3886  001618                     u1000:
  3887  001618  1E08               	comf	(___aomod@dividend+7)^0,f,c
  3888  00161A  1E07               	comf	(___aomod@dividend+6)^0,f,c
  3889  00161C  1E06               	comf	(___aomod@dividend+5)^0,f,c
  3890  00161E  1E05               	comf	(___aomod@dividend+4)^0,f,c
  3891  001620  1E04               	comf	(___aomod@dividend+3)^0,f,c
  3892  001622  1E03               	comf	(___aomod@dividend+2)^0,f,c
  3893  001624  1E02               	comf	(___aomod@dividend+1)^0,f,c
  3894  001626  6C01               	negf	___aomod@dividend^0,c
  3895  001628  0E00               	movlw	0
  3896  00162A  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  3897  00162C  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  3898  00162E  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  3899  001630  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  3900  001632  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  3901  001634  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  3902  001636  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  3903  001638  0E01               	movlw	1
  3904  00163A  6E12               	movwf	___aomod@sign^0,c
  3905  00163C                     l2044:
  3906  00163C  BE10               	btfsc	(___aomod@divisor+7)^0,7,c
  3907  00163E  EF25  F00B         	goto	u1010
  3908  001642  EF23  F00B         	goto	u1011
  3909  001646                     u1011:
  3910  001646  EF35  F00B         	goto	l2048
  3911  00164A                     u1010:
  3912  00164A  1E10               	comf	(___aomod@divisor+7)^0,f,c
  3913  00164C  1E0F               	comf	(___aomod@divisor+6)^0,f,c
  3914  00164E  1E0E               	comf	(___aomod@divisor+5)^0,f,c
  3915  001650  1E0D               	comf	(___aomod@divisor+4)^0,f,c
  3916  001652  1E0C               	comf	(___aomod@divisor+3)^0,f,c
  3917  001654  1E0B               	comf	(___aomod@divisor+2)^0,f,c
  3918  001656  1E0A               	comf	(___aomod@divisor+1)^0,f,c
  3919  001658  6C09               	negf	___aomod@divisor^0,c
  3920  00165A  0E00               	movlw	0
  3921  00165C  220A               	addwfc	(___aomod@divisor+1)^0,f,c
  3922  00165E  220B               	addwfc	(___aomod@divisor+2)^0,f,c
  3923  001660  220C               	addwfc	(___aomod@divisor+3)^0,f,c
  3924  001662  220D               	addwfc	(___aomod@divisor+4)^0,f,c
  3925  001664  220E               	addwfc	(___aomod@divisor+5)^0,f,c
  3926  001666  220F               	addwfc	(___aomod@divisor+6)^0,f,c
  3927  001668  2210               	addwfc	(___aomod@divisor+7)^0,f,c
  3928  00166A                     l2048:
  3929  00166A  5009               	movf	___aomod@divisor^0,w,c
  3930  00166C  100A               	iorwf	(___aomod@divisor+1)^0,w,c
  3931  00166E  100B               	iorwf	(___aomod@divisor+2)^0,w,c
  3932  001670  100C               	iorwf	(___aomod@divisor+3)^0,w,c
  3933  001672  100D               	iorwf	(___aomod@divisor+4)^0,w,c
  3934  001674  100E               	iorwf	(___aomod@divisor+5)^0,w,c
  3935  001676  100F               	iorwf	(___aomod@divisor+6)^0,w,c
  3936  001678  1010               	iorwf	(___aomod@divisor+7)^0,w,c
  3937  00167A  B4D8               	btfsc	status,2,c
  3938  00167C  EF42  F00B         	goto	u1021
  3939  001680  EF44  F00B         	goto	u1020
  3940  001684                     u1021:
  3941  001684  EF8C  F00B         	goto	l2064
  3942  001688                     u1020:
  3943  001688  0E01               	movlw	1
  3944  00168A  6E11               	movwf	___aomod@counter^0,c
  3945  00168C  EF52  F00B         	goto	l2054
  3946  001690                     l2052:
  3947  001690  90D8               	bcf	status,0,c
  3948  001692  3609               	rlcf	___aomod@divisor^0,f,c
  3949  001694  360A               	rlcf	(___aomod@divisor+1)^0,f,c
  3950  001696  360B               	rlcf	(___aomod@divisor+2)^0,f,c
  3951  001698  360C               	rlcf	(___aomod@divisor+3)^0,f,c
  3952  00169A  360D               	rlcf	(___aomod@divisor+4)^0,f,c
  3953  00169C  360E               	rlcf	(___aomod@divisor+5)^0,f,c
  3954  00169E  360F               	rlcf	(___aomod@divisor+6)^0,f,c
  3955  0016A0  3610               	rlcf	(___aomod@divisor+7)^0,f,c
  3956  0016A2  2A11               	incf	___aomod@counter^0,f,c
  3957  0016A4                     l2054:
  3958  0016A4  AE10               	btfss	(___aomod@divisor+7)^0,7,c
  3959  0016A6  EF57  F00B         	goto	u1031
  3960  0016AA  EF59  F00B         	goto	u1030
  3961  0016AE                     u1031:
  3962  0016AE  EF48  F00B         	goto	l2052
  3963  0016B2                     u1030:
  3964  0016B2                     l2056:
  3965  0016B2  5009               	movf	___aomod@divisor^0,w,c
  3966  0016B4  5C01               	subwf	___aomod@dividend^0,w,c
  3967  0016B6  500A               	movf	(___aomod@divisor+1)^0,w,c
  3968  0016B8  5802               	subwfb	(___aomod@dividend+1)^0,w,c
  3969  0016BA  500B               	movf	(___aomod@divisor+2)^0,w,c
  3970  0016BC  5803               	subwfb	(___aomod@dividend+2)^0,w,c
  3971  0016BE  500C               	movf	(___aomod@divisor+3)^0,w,c
  3972  0016C0  5804               	subwfb	(___aomod@dividend+3)^0,w,c
  3973  0016C2  500D               	movf	(___aomod@divisor+4)^0,w,c
  3974  0016C4  5805               	subwfb	(___aomod@dividend+4)^0,w,c
  3975  0016C6  500E               	movf	(___aomod@divisor+5)^0,w,c
  3976  0016C8  5806               	subwfb	(___aomod@dividend+5)^0,w,c
  3977  0016CA  500F               	movf	(___aomod@divisor+6)^0,w,c
  3978  0016CC  5807               	subwfb	(___aomod@dividend+6)^0,w,c
  3979  0016CE  5010               	movf	(___aomod@divisor+7)^0,w,c
  3980  0016D0  5808               	subwfb	(___aomod@dividend+7)^0,w,c
  3981  0016D2  A0D8               	btfss	status,0,c
  3982  0016D4  EF6E  F00B         	goto	u1041
  3983  0016D8  EF70  F00B         	goto	u1040
  3984  0016DC                     u1041:
  3985  0016DC  EF80  F00B         	goto	l2060
  3986  0016E0                     u1040:
  3987  0016E0  5009               	movf	___aomod@divisor^0,w,c
  3988  0016E2  5E01               	subwf	___aomod@dividend^0,f,c
  3989  0016E4  500A               	movf	(___aomod@divisor+1)^0,w,c
  3990  0016E6  5A02               	subwfb	(___aomod@dividend+1)^0,f,c
  3991  0016E8  500B               	movf	(___aomod@divisor+2)^0,w,c
  3992  0016EA  5A03               	subwfb	(___aomod@dividend+2)^0,f,c
  3993  0016EC  500C               	movf	(___aomod@divisor+3)^0,w,c
  3994  0016EE  5A04               	subwfb	(___aomod@dividend+3)^0,f,c
  3995  0016F0  500D               	movf	(___aomod@divisor+4)^0,w,c
  3996  0016F2  5A05               	subwfb	(___aomod@dividend+4)^0,f,c
  3997  0016F4  500E               	movf	(___aomod@divisor+5)^0,w,c
  3998  0016F6  5A06               	subwfb	(___aomod@dividend+5)^0,f,c
  3999  0016F8  500F               	movf	(___aomod@divisor+6)^0,w,c
  4000  0016FA  5A07               	subwfb	(___aomod@dividend+6)^0,f,c
  4001  0016FC  5010               	movf	(___aomod@divisor+7)^0,w,c
  4002  0016FE  5A08               	subwfb	(___aomod@dividend+7)^0,f,c
  4003  001700                     l2060:
  4004  001700  90D8               	bcf	status,0,c
  4005  001702  3210               	rrcf	(___aomod@divisor+7)^0,f,c
  4006  001704  320F               	rrcf	(___aomod@divisor+6)^0,f,c
  4007  001706  320E               	rrcf	(___aomod@divisor+5)^0,f,c
  4008  001708  320D               	rrcf	(___aomod@divisor+4)^0,f,c
  4009  00170A  320C               	rrcf	(___aomod@divisor+3)^0,f,c
  4010  00170C  320B               	rrcf	(___aomod@divisor+2)^0,f,c
  4011  00170E  320A               	rrcf	(___aomod@divisor+1)^0,f,c
  4012  001710  3209               	rrcf	___aomod@divisor^0,f,c
  4013  001712  2E11               	decfsz	___aomod@counter^0,f,c
  4014  001714  EF59  F00B         	goto	l2056
  4015  001718                     l2064:
  4016  001718  5012               	movf	___aomod@sign^0,w,c
  4017  00171A  B4D8               	btfsc	status,2,c
  4018  00171C  EF92  F00B         	goto	u1051
  4019  001720  EF94  F00B         	goto	u1050
  4020  001724                     u1051:
  4021  001724  EFA4  F00B         	goto	l2068
  4022  001728                     u1050:
  4023  001728  1E08               	comf	(___aomod@dividend+7)^0,f,c
  4024  00172A  1E07               	comf	(___aomod@dividend+6)^0,f,c
  4025  00172C  1E06               	comf	(___aomod@dividend+5)^0,f,c
  4026  00172E  1E05               	comf	(___aomod@dividend+4)^0,f,c
  4027  001730  1E04               	comf	(___aomod@dividend+3)^0,f,c
  4028  001732  1E03               	comf	(___aomod@dividend+2)^0,f,c
  4029  001734  1E02               	comf	(___aomod@dividend+1)^0,f,c
  4030  001736  6C01               	negf	___aomod@dividend^0,c
  4031  001738  0E00               	movlw	0
  4032  00173A  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  4033  00173C  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  4034  00173E  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  4035  001740  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  4036  001742  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  4037  001744  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  4038  001746  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  4039  001748                     l2068:
  4040  001748  C001  F001         	movff	___aomod@dividend,?___aomod
  4041  00174C  C002  F002         	movff	___aomod@dividend+1,?___aomod+1
  4042  001750  C003  F003         	movff	___aomod@dividend+2,?___aomod+2
  4043  001754  C004  F004         	movff	___aomod@dividend+3,?___aomod+3
  4044  001758  C005  F005         	movff	___aomod@dividend+4,?___aomod+4
  4045  00175C  C006  F006         	movff	___aomod@dividend+5,?___aomod+5
  4046  001760  C007  F007         	movff	___aomod@dividend+6,?___aomod+6
  4047  001764  C008  F008         	movff	___aomod@dividend+7,?___aomod+7
  4048  001768  0012               	return		;funcret
  4049  00176A                     __end_of___aomod:
  4050                           	callstack 0
  4051                           
  4052 ;; *************** function ___aodiv *****************
  4053 ;; Defined at:
  4054 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\aodiv.c"
  4055 ;; Parameters:    Size  Location     Type
  4056 ;;  dividend        8    0[COMRAM] long long 
  4057 ;;  divisor         8    8[COMRAM] long long 
  4058 ;; Auto vars:     Size  Location     Type
  4059 ;;  quotient        8   18[COMRAM] long long 
  4060 ;;  sign            1   17[COMRAM] unsigned char 
  4061 ;;  counter         1   16[COMRAM] unsigned char 
  4062 ;; Return value:  Size  Location     Type
  4063 ;;                  8    0[COMRAM] long long 
  4064 ;; Registers used:
  4065 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4066 ;; Tracked objects:
  4067 ;;		On entry : 0/0
  4068 ;;		On exit  : 0/0
  4069 ;;		Unchanged: 0/0
  4070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4071 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4072 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4073 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4074 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4075 ;;Total ram usage:       26 bytes
  4076 ;; Hardware stack levels used: 1
  4077 ;; This function calls:
  4078 ;;		Nothing
  4079 ;; This function is called by:
  4080 ;;		_dtoa
  4081 ;; This function uses a non-reentrant model
  4082 ;;
  4083                           
  4084                           	psect	text26
  4085  00147E                     __ptext26:
  4086                           	callstack 0
  4087  00147E                     ___aodiv:
  4088                           	callstack 25
  4089  00147E  0E00               	movlw	0
  4090  001480  6E12               	movwf	___aodiv@sign^0,c
  4091  001482  BE10               	btfsc	(___aodiv@divisor+7)^0,7,c
  4092  001484  EF48  F00A         	goto	u930
  4093  001488  EF46  F00A         	goto	u931
  4094  00148C                     u931:
  4095  00148C  EF5A  F00A         	goto	l2000
  4096  001490                     u930:
  4097  001490  1E10               	comf	(___aodiv@divisor+7)^0,f,c
  4098  001492  1E0F               	comf	(___aodiv@divisor+6)^0,f,c
  4099  001494  1E0E               	comf	(___aodiv@divisor+5)^0,f,c
  4100  001496  1E0D               	comf	(___aodiv@divisor+4)^0,f,c
  4101  001498  1E0C               	comf	(___aodiv@divisor+3)^0,f,c
  4102  00149A  1E0B               	comf	(___aodiv@divisor+2)^0,f,c
  4103  00149C  1E0A               	comf	(___aodiv@divisor+1)^0,f,c
  4104  00149E  6C09               	negf	___aodiv@divisor^0,c
  4105  0014A0  0E00               	movlw	0
  4106  0014A2  220A               	addwfc	(___aodiv@divisor+1)^0,f,c
  4107  0014A4  220B               	addwfc	(___aodiv@divisor+2)^0,f,c
  4108  0014A6  220C               	addwfc	(___aodiv@divisor+3)^0,f,c
  4109  0014A8  220D               	addwfc	(___aodiv@divisor+4)^0,f,c
  4110  0014AA  220E               	addwfc	(___aodiv@divisor+5)^0,f,c
  4111  0014AC  220F               	addwfc	(___aodiv@divisor+6)^0,f,c
  4112  0014AE  2210               	addwfc	(___aodiv@divisor+7)^0,f,c
  4113  0014B0  0E01               	movlw	1
  4114  0014B2  6E12               	movwf	___aodiv@sign^0,c
  4115  0014B4                     l2000:
  4116  0014B4  BE08               	btfsc	(___aodiv@dividend+7)^0,7,c
  4117  0014B6  EF61  F00A         	goto	u940
  4118  0014BA  EF5F  F00A         	goto	u941
  4119  0014BE                     u941:
  4120  0014BE  EF73  F00A         	goto	l2006
  4121  0014C2                     u940:
  4122  0014C2  1E08               	comf	(___aodiv@dividend+7)^0,f,c
  4123  0014C4  1E07               	comf	(___aodiv@dividend+6)^0,f,c
  4124  0014C6  1E06               	comf	(___aodiv@dividend+5)^0,f,c
  4125  0014C8  1E05               	comf	(___aodiv@dividend+4)^0,f,c
  4126  0014CA  1E04               	comf	(___aodiv@dividend+3)^0,f,c
  4127  0014CC  1E03               	comf	(___aodiv@dividend+2)^0,f,c
  4128  0014CE  1E02               	comf	(___aodiv@dividend+1)^0,f,c
  4129  0014D0  6C01               	negf	___aodiv@dividend^0,c
  4130  0014D2  0E00               	movlw	0
  4131  0014D4  2202               	addwfc	(___aodiv@dividend+1)^0,f,c
  4132  0014D6  2203               	addwfc	(___aodiv@dividend+2)^0,f,c
  4133  0014D8  2204               	addwfc	(___aodiv@dividend+3)^0,f,c
  4134  0014DA  2205               	addwfc	(___aodiv@dividend+4)^0,f,c
  4135  0014DC  2206               	addwfc	(___aodiv@dividend+5)^0,f,c
  4136  0014DE  2207               	addwfc	(___aodiv@dividend+6)^0,f,c
  4137  0014E0  2208               	addwfc	(___aodiv@dividend+7)^0,f,c
  4138  0014E2  0E01               	movlw	1
  4139  0014E4  1A12               	xorwf	___aodiv@sign^0,f,c
  4140  0014E6                     l2006:
  4141  0014E6  EE20  F013         	lfsr	2,___aodiv@quotient
  4142  0014EA  0E07               	movlw	7
  4143  0014EC                     u951:
  4144  0014EC  6ADE               	clrf	postinc2,c
  4145  0014EE  06E8               	decf	wreg,f,c
  4146  0014F0  E2FD               	bc	u951
  4147  0014F2  5009               	movf	___aodiv@divisor^0,w,c
  4148  0014F4  100A               	iorwf	(___aodiv@divisor+1)^0,w,c
  4149  0014F6  100B               	iorwf	(___aodiv@divisor+2)^0,w,c
  4150  0014F8  100C               	iorwf	(___aodiv@divisor+3)^0,w,c
  4151  0014FA  100D               	iorwf	(___aodiv@divisor+4)^0,w,c
  4152  0014FC  100E               	iorwf	(___aodiv@divisor+5)^0,w,c
  4153  0014FE  100F               	iorwf	(___aodiv@divisor+6)^0,w,c
  4154  001500  1010               	iorwf	(___aodiv@divisor+7)^0,w,c
  4155  001502  B4D8               	btfsc	status,2,c
  4156  001504  EF86  F00A         	goto	u961
  4157  001508  EF88  F00A         	goto	u960
  4158  00150C                     u961:
  4159  00150C  EFDA  F00A         	goto	l2028
  4160  001510                     u960:
  4161  001510  0E01               	movlw	1
  4162  001512  6E11               	movwf	___aodiv@counter^0,c
  4163  001514  EF96  F00A         	goto	l2014
  4164  001518                     l2012:
  4165  001518  90D8               	bcf	status,0,c
  4166  00151A  3609               	rlcf	___aodiv@divisor^0,f,c
  4167  00151C  360A               	rlcf	(___aodiv@divisor+1)^0,f,c
  4168  00151E  360B               	rlcf	(___aodiv@divisor+2)^0,f,c
  4169  001520  360C               	rlcf	(___aodiv@divisor+3)^0,f,c
  4170  001522  360D               	rlcf	(___aodiv@divisor+4)^0,f,c
  4171  001524  360E               	rlcf	(___aodiv@divisor+5)^0,f,c
  4172  001526  360F               	rlcf	(___aodiv@divisor+6)^0,f,c
  4173  001528  3610               	rlcf	(___aodiv@divisor+7)^0,f,c
  4174  00152A  2A11               	incf	___aodiv@counter^0,f,c
  4175  00152C                     l2014:
  4176  00152C  AE10               	btfss	(___aodiv@divisor+7)^0,7,c
  4177  00152E  EF9B  F00A         	goto	u971
  4178  001532  EF9D  F00A         	goto	u970
  4179  001536                     u971:
  4180  001536  EF8C  F00A         	goto	l2012
  4181  00153A                     u970:
  4182  00153A                     l2016:
  4183  00153A  90D8               	bcf	status,0,c
  4184  00153C  3613               	rlcf	___aodiv@quotient^0,f,c
  4185  00153E  3614               	rlcf	(___aodiv@quotient+1)^0,f,c
  4186  001540  3615               	rlcf	(___aodiv@quotient+2)^0,f,c
  4187  001542  3616               	rlcf	(___aodiv@quotient+3)^0,f,c
  4188  001544  3617               	rlcf	(___aodiv@quotient+4)^0,f,c
  4189  001546  3618               	rlcf	(___aodiv@quotient+5)^0,f,c
  4190  001548  3619               	rlcf	(___aodiv@quotient+6)^0,f,c
  4191  00154A  361A               	rlcf	(___aodiv@quotient+7)^0,f,c
  4192  00154C  5009               	movf	___aodiv@divisor^0,w,c
  4193  00154E  5C01               	subwf	___aodiv@dividend^0,w,c
  4194  001550  500A               	movf	(___aodiv@divisor+1)^0,w,c
  4195  001552  5802               	subwfb	(___aodiv@dividend+1)^0,w,c
  4196  001554  500B               	movf	(___aodiv@divisor+2)^0,w,c
  4197  001556  5803               	subwfb	(___aodiv@dividend+2)^0,w,c
  4198  001558  500C               	movf	(___aodiv@divisor+3)^0,w,c
  4199  00155A  5804               	subwfb	(___aodiv@dividend+3)^0,w,c
  4200  00155C  500D               	movf	(___aodiv@divisor+4)^0,w,c
  4201  00155E  5805               	subwfb	(___aodiv@dividend+4)^0,w,c
  4202  001560  500E               	movf	(___aodiv@divisor+5)^0,w,c
  4203  001562  5806               	subwfb	(___aodiv@dividend+5)^0,w,c
  4204  001564  500F               	movf	(___aodiv@divisor+6)^0,w,c
  4205  001566  5807               	subwfb	(___aodiv@dividend+6)^0,w,c
  4206  001568  5010               	movf	(___aodiv@divisor+7)^0,w,c
  4207  00156A  5808               	subwfb	(___aodiv@dividend+7)^0,w,c
  4208  00156C  A0D8               	btfss	status,0,c
  4209  00156E  EFBB  F00A         	goto	u981
  4210  001572  EFBD  F00A         	goto	u980
  4211  001576                     u981:
  4212  001576  EFCE  F00A         	goto	l2024
  4213  00157A                     u980:
  4214  00157A  5009               	movf	___aodiv@divisor^0,w,c
  4215  00157C  5E01               	subwf	___aodiv@dividend^0,f,c
  4216  00157E  500A               	movf	(___aodiv@divisor+1)^0,w,c
  4217  001580  5A02               	subwfb	(___aodiv@dividend+1)^0,f,c
  4218  001582  500B               	movf	(___aodiv@divisor+2)^0,w,c
  4219  001584  5A03               	subwfb	(___aodiv@dividend+2)^0,f,c
  4220  001586  500C               	movf	(___aodiv@divisor+3)^0,w,c
  4221  001588  5A04               	subwfb	(___aodiv@dividend+3)^0,f,c
  4222  00158A  500D               	movf	(___aodiv@divisor+4)^0,w,c
  4223  00158C  5A05               	subwfb	(___aodiv@dividend+4)^0,f,c
  4224  00158E  500E               	movf	(___aodiv@divisor+5)^0,w,c
  4225  001590  5A06               	subwfb	(___aodiv@dividend+5)^0,f,c
  4226  001592  500F               	movf	(___aodiv@divisor+6)^0,w,c
  4227  001594  5A07               	subwfb	(___aodiv@dividend+6)^0,f,c
  4228  001596  5010               	movf	(___aodiv@divisor+7)^0,w,c
  4229  001598  5A08               	subwfb	(___aodiv@dividend+7)^0,f,c
  4230  00159A  8013               	bsf	___aodiv@quotient^0,0,c
  4231  00159C                     l2024:
  4232  00159C  90D8               	bcf	status,0,c
  4233  00159E  3210               	rrcf	(___aodiv@divisor+7)^0,f,c
  4234  0015A0  320F               	rrcf	(___aodiv@divisor+6)^0,f,c
  4235  0015A2  320E               	rrcf	(___aodiv@divisor+5)^0,f,c
  4236  0015A4  320D               	rrcf	(___aodiv@divisor+4)^0,f,c
  4237  0015A6  320C               	rrcf	(___aodiv@divisor+3)^0,f,c
  4238  0015A8  320B               	rrcf	(___aodiv@divisor+2)^0,f,c
  4239  0015AA  320A               	rrcf	(___aodiv@divisor+1)^0,f,c
  4240  0015AC  3209               	rrcf	___aodiv@divisor^0,f,c
  4241  0015AE  2E11               	decfsz	___aodiv@counter^0,f,c
  4242  0015B0  EF9D  F00A         	goto	l2016
  4243  0015B4                     l2028:
  4244  0015B4  5012               	movf	___aodiv@sign^0,w,c
  4245  0015B6  B4D8               	btfsc	status,2,c
  4246  0015B8  EFE0  F00A         	goto	u991
  4247  0015BC  EFE2  F00A         	goto	u990
  4248  0015C0                     u991:
  4249  0015C0  EFF2  F00A         	goto	l2032
  4250  0015C4                     u990:
  4251  0015C4  1E1A               	comf	(___aodiv@quotient+7)^0,f,c
  4252  0015C6  1E19               	comf	(___aodiv@quotient+6)^0,f,c
  4253  0015C8  1E18               	comf	(___aodiv@quotient+5)^0,f,c
  4254  0015CA  1E17               	comf	(___aodiv@quotient+4)^0,f,c
  4255  0015CC  1E16               	comf	(___aodiv@quotient+3)^0,f,c
  4256  0015CE  1E15               	comf	(___aodiv@quotient+2)^0,f,c
  4257  0015D0  1E14               	comf	(___aodiv@quotient+1)^0,f,c
  4258  0015D2  6C13               	negf	___aodiv@quotient^0,c
  4259  0015D4  0E00               	movlw	0
  4260  0015D6  2214               	addwfc	(___aodiv@quotient+1)^0,f,c
  4261  0015D8  2215               	addwfc	(___aodiv@quotient+2)^0,f,c
  4262  0015DA  2216               	addwfc	(___aodiv@quotient+3)^0,f,c
  4263  0015DC  2217               	addwfc	(___aodiv@quotient+4)^0,f,c
  4264  0015DE  2218               	addwfc	(___aodiv@quotient+5)^0,f,c
  4265  0015E0  2219               	addwfc	(___aodiv@quotient+6)^0,f,c
  4266  0015E2  221A               	addwfc	(___aodiv@quotient+7)^0,f,c
  4267  0015E4                     l2032:
  4268  0015E4  C013  F001         	movff	___aodiv@quotient,?___aodiv
  4269  0015E8  C014  F002         	movff	___aodiv@quotient+1,?___aodiv+1
  4270  0015EC  C015  F003         	movff	___aodiv@quotient+2,?___aodiv+2
  4271  0015F0  C016  F004         	movff	___aodiv@quotient+3,?___aodiv+3
  4272  0015F4  C017  F005         	movff	___aodiv@quotient+4,?___aodiv+4
  4273  0015F8  C018  F006         	movff	___aodiv@quotient+5,?___aodiv+5
  4274  0015FC  C019  F007         	movff	___aodiv@quotient+6,?___aodiv+6
  4275  001600  C01A  F008         	movff	___aodiv@quotient+7,?___aodiv+7
  4276  001604  0012               	return		;funcret
  4277  001606                     __end_of___aodiv:
  4278                           	callstack 0
  4279                           
  4280 ;; *************** function _sendStringSerial4 *****************
  4281 ;; Defined at:
  4282 ;;		line 36 in file "serial.c"
  4283 ;; Parameters:    Size  Location     Type
  4284 ;;  string          2    1[COMRAM] PTR unsigned char 
  4285 ;;		 -> voltage_display@buf(80), color_predict@buf(100), color_display@buf(100), 
  4286 ;; Auto vars:     Size  Location     Type
  4287 ;;		None
  4288 ;; Return value:  Size  Location     Type
  4289 ;;                  1    wreg      void 
  4290 ;; Registers used:
  4291 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4292 ;; Tracked objects:
  4293 ;;		On entry : 0/0
  4294 ;;		On exit  : 0/0
  4295 ;;		Unchanged: 0/0
  4296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4297 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4298 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4300 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4301 ;;Total ram usage:        2 bytes
  4302 ;; Hardware stack levels used: 1
  4303 ;; Hardware stack levels required when called: 1
  4304 ;; This function calls:
  4305 ;;		_sendCharSerial4
  4306 ;; This function is called by:
  4307 ;;		_color_display
  4308 ;;		_color_predict
  4309 ;;		_voltage_display
  4310 ;; This function uses a non-reentrant model
  4311 ;;
  4312                           
  4313                           	psect	text27
  4314  002354                     __ptext27:
  4315                           	callstack 0
  4316  002354                     _sendStringSerial4:
  4317                           	callstack 28
  4318  002354                     
  4319                           ;serial.c: 38:     while(*string != 0){
  4320  002354  EFB5  F011         	goto	l2370
  4321  002358                     l2366:
  4322                           
  4323                           ;serial.c: 39:   sendCharSerial4(*string++);}
  4324  002358  C002  FFD9         	movff	sendStringSerial4@string,fsr2l
  4325  00235C  C003  FFDA         	movff	sendStringSerial4@string+1,fsr2h
  4326  002360  50DF               	movf	indf2,w,c
  4327  002362  EC33  F012         	call	_sendCharSerial4
  4328  002366  4A02               	infsnz	sendStringSerial4@string^0,f,c
  4329  002368  2A03               	incf	(sendStringSerial4@string+1)^0,f,c
  4330  00236A                     l2370:
  4331                           
  4332                           ;serial.c: 38:     while(*string != 0){
  4333  00236A  C002  FFD9         	movff	sendStringSerial4@string,fsr2l
  4334  00236E  C003  FFDA         	movff	sendStringSerial4@string+1,fsr2h
  4335  002372  50DF               	movf	indf2,w,c
  4336  002374  A4D8               	btfss	status,2,c
  4337  002376  EFBF  F011         	goto	u1461
  4338  00237A  EFC1  F011         	goto	u1460
  4339  00237E                     u1461:
  4340  00237E  EFAC  F011         	goto	l2366
  4341  002382                     u1460:
  4342  002382  0012               	return		;funcret
  4343  002384                     __end_of_sendStringSerial4:
  4344                           	callstack 0
  4345                           
  4346 ;; *************** function _sendCharSerial4 *****************
  4347 ;; Defined at:
  4348 ;;		line 29 in file "serial.c"
  4349 ;; Parameters:    Size  Location     Type
  4350 ;;  charToSend      1    wreg     unsigned char 
  4351 ;; Auto vars:     Size  Location     Type
  4352 ;;  charToSend      1    0[COMRAM] unsigned char 
  4353 ;; Return value:  Size  Location     Type
  4354 ;;                  1    wreg      void 
  4355 ;; Registers used:
  4356 ;;		wreg
  4357 ;; Tracked objects:
  4358 ;;		On entry : 0/0
  4359 ;;		On exit  : 0/0
  4360 ;;		Unchanged: 0/0
  4361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4362 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4363 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4364 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4365 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4366 ;;Total ram usage:        1 bytes
  4367 ;; Hardware stack levels used: 1
  4368 ;; This function calls:
  4369 ;;		Nothing
  4370 ;; This function is called by:
  4371 ;;		_sendStringSerial4
  4372 ;; This function uses a non-reentrant model
  4373 ;;
  4374                           
  4375                           	psect	text28
  4376  002466                     __ptext28:
  4377                           	callstack 0
  4378  002466                     _sendCharSerial4:
  4379                           	callstack 28
  4380                           
  4381                           ;incstack = 0
  4382                           ;sendCharSerial4@charToSend stored from wreg
  4383  002466  6E01               	movwf	sendCharSerial4@charToSend^0,c
  4384  002468                     l299:
  4385  002468  010E               	movlb	14	; () banked
  4386  00246A  A537               	btfss	55,2,b	;volatile
  4387  00246C  EF3A  F012         	goto	u1441
  4388  002470  EF3C  F012         	goto	u1440
  4389  002474                     u1441:
  4390  002474  EF34  F012         	goto	l299
  4391  002478                     u1440:
  4392  002478                     
  4393                           ; BSR set to: 14
  4394                           ;serial.c: 31:     TX4REG = charToSend;
  4395  002478  C001  FEE4         	movff	sendCharSerial4@charToSend,3812	;volatile
  4396  00247C                     
  4397                           ; BSR set to: 14
  4398  00247C  0012               	return		;funcret
  4399  00247E                     __end_of_sendCharSerial4:
  4400                           	callstack 0
  4401                           
  4402 ;; *************** function _color_click_init *****************
  4403 ;; Defined at:
  4404 ;;		line 9 in file "color.c"
  4405 ;; Parameters:    Size  Location     Type
  4406 ;;		None
  4407 ;; Auto vars:     Size  Location     Type
  4408 ;;		None
  4409 ;; Return value:  Size  Location     Type
  4410 ;;                  1    wreg      void 
  4411 ;; Registers used:
  4412 ;;		wreg, status,2, status,0, cstack
  4413 ;; Tracked objects:
  4414 ;;		On entry : 0/0
  4415 ;;		On exit  : 0/0
  4416 ;;		Unchanged: 0/0
  4417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4419 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4420 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4421 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4422 ;;Total ram usage:        1 bytes
  4423 ;; Hardware stack levels used: 1
  4424 ;; Hardware stack levels required when called: 3
  4425 ;; This function calls:
  4426 ;;		_I2C_2_Master_Init
  4427 ;;		_color_writetoaddr
  4428 ;; This function is called by:
  4429 ;;		_main
  4430 ;; This function uses a non-reentrant model
  4431 ;;
  4432                           
  4433                           	psect	text29
  4434  002320                     __ptext29:
  4435                           	callstack 0
  4436  002320                     _color_click_init:
  4437                           	callstack 27
  4438  002320                     
  4439                           ;color.c: 12:     I2C_2_Master_Init();
  4440  002320  ECD8  F011         	call	_I2C_2_Master_Init	;wreg free
  4441  002324                     
  4442                           ;color.c: 15:   color_writetoaddr(0x00, 0x01);
  4443  002324  0E01               	movlw	1
  4444  002326  6E03               	movwf	color_writetoaddr@value^0,c
  4445  002328  0E00               	movlw	0
  4446  00232A  EC14  F012         	call	_color_writetoaddr
  4447  00232E                     
  4448                           ;color.c: 16:     _delay((unsigned long)((3)*(64000000/4000.0)));
  4449  00232E  0E3F               	movlw	63
  4450  002330  6E05               	movwf	??_color_click_init^0,c
  4451  002332  0E55               	movlw	85
  4452  002334                     u1737:
  4453  002334  2EE8               	decfsz	wreg,f,c
  4454  002336  D7FE               	bra	u1737
  4455  002338  2E05               	decfsz	??_color_click_init^0,f,c
  4456  00233A  D7FC               	bra	u1737
  4457  00233C  F000               	nop	
  4458  00233E                     
  4459                           ;color.c: 19:  color_writetoaddr(0x00, 0x03);
  4460  00233E  0E03               	movlw	3
  4461  002340  6E03               	movwf	color_writetoaddr@value^0,c
  4462  002342  0E00               	movlw	0
  4463  002344  EC14  F012         	call	_color_writetoaddr
  4464  002348                     
  4465                           ;color.c: 22:  color_writetoaddr(0x01, 0xD5);
  4466  002348  0ED5               	movlw	213
  4467  00234A  6E03               	movwf	color_writetoaddr@value^0,c
  4468  00234C  0E01               	movlw	1
  4469  00234E  EC14  F012         	call	_color_writetoaddr
  4470  002352  0012               	return		;funcret
  4471  002354                     __end_of_color_click_init:
  4472                           	callstack 0
  4473                           
  4474 ;; *************** function _color_writetoaddr *****************
  4475 ;; Defined at:
  4476 ;;		line 25 in file "color.c"
  4477 ;; Parameters:    Size  Location     Type
  4478 ;;  address         1    wreg     unsigned char 
  4479 ;;  value           1    2[COMRAM] unsigned char 
  4480 ;; Auto vars:     Size  Location     Type
  4481 ;;  address         1    3[COMRAM] unsigned char 
  4482 ;; Return value:  Size  Location     Type
  4483 ;;                  1    wreg      void 
  4484 ;; Registers used:
  4485 ;;		wreg, status,2, status,0, cstack
  4486 ;; Tracked objects:
  4487 ;;		On entry : 0/0
  4488 ;;		On exit  : 0/0
  4489 ;;		Unchanged: 0/0
  4490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4491 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4492 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4493 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4494 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4495 ;;Total ram usage:        2 bytes
  4496 ;; Hardware stack levels used: 1
  4497 ;; Hardware stack levels required when called: 2
  4498 ;; This function calls:
  4499 ;;		_I2C_2_Master_Start
  4500 ;;		_I2C_2_Master_Stop
  4501 ;;		_I2C_2_Master_Write
  4502 ;; This function is called by:
  4503 ;;		_color_click_init
  4504 ;; This function uses a non-reentrant model
  4505 ;;
  4506                           
  4507                           	psect	text30
  4508  002428                     __ptext30:
  4509                           	callstack 0
  4510  002428                     _color_writetoaddr:
  4511                           	callstack 27
  4512                           
  4513                           ;incstack = 0
  4514                           ;color_writetoaddr@address stored from wreg
  4515  002428  6E04               	movwf	color_writetoaddr@address^0,c
  4516  00242A                     
  4517                           ;color.c: 26:     I2C_2_Master_Start();
  4518  00242A  EC4A  F012         	call	_I2C_2_Master_Start	;wreg free
  4519                           
  4520                           ;color.c: 27:     I2C_2_Master_Write(0x52 | 0x00);
  4521  00242E  0E52               	movlw	82
  4522  002430  EC3F  F012         	call	_I2C_2_Master_Write
  4523                           
  4524                           ;color.c: 28:     I2C_2_Master_Write(0x80 | address);
  4525  002434  5004               	movf	color_writetoaddr@address^0,w,c
  4526  002436  0980               	iorlw	128
  4527  002438  EC3F  F012         	call	_I2C_2_Master_Write
  4528                           
  4529                           ;color.c: 29:     I2C_2_Master_Write(value);
  4530  00243C  5003               	movf	color_writetoaddr@value^0,w,c
  4531  00243E  EC3F  F012         	call	_I2C_2_Master_Write
  4532                           
  4533                           ;color.c: 30:     I2C_2_Master_Stop();
  4534  002442  EC45  F012         	call	_I2C_2_Master_Stop	;wreg free
  4535  002446  0012               	return		;funcret
  4536  002448                     __end_of_color_writetoaddr:
  4537                           	callstack 0
  4538                           
  4539 ;; *************** function _I2C_2_Master_Init *****************
  4540 ;; Defined at:
  4541 ;;		line 4 in file "i2c.c"
  4542 ;; Parameters:    Size  Location     Type
  4543 ;;		None
  4544 ;; Auto vars:     Size  Location     Type
  4545 ;;		None
  4546 ;; Return value:  Size  Location     Type
  4547 ;;                  1    wreg      void 
  4548 ;; Registers used:
  4549 ;;		wreg, status,2
  4550 ;; Tracked objects:
  4551 ;;		On entry : 0/0
  4552 ;;		On exit  : 0/0
  4553 ;;		Unchanged: 0/0
  4554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4556 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4557 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4558 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4559 ;;Total ram usage:        0 bytes
  4560 ;; Hardware stack levels used: 1
  4561 ;; This function calls:
  4562 ;;		Nothing
  4563 ;; This function is called by:
  4564 ;;		_color_click_init
  4565 ;;		_main
  4566 ;; This function uses a non-reentrant model
  4567 ;;
  4568                           
  4569                           	psect	text31
  4570  0023B0                     __ptext31:
  4571                           	callstack 0
  4572  0023B0                     _I2C_2_Master_Init:
  4573                           	callstack 29
  4574  0023B0                     
  4575                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  4576  0023B0  010E               	movlb	14	; () banked
  4577  0023B2  51D9               	movf	217,w,b	;volatile
  4578  0023B4  0BF0               	andlw	-16
  4579  0023B6  0908               	iorlw	8
  4580  0023B8  6FD9               	movwf	217,b	;volatile
  4581  0023BA                     
  4582                           ; BSR set to: 14
  4583                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  4584  0023BA  8BD9               	bsf	217,5,b	;volatile
  4585                           
  4586                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  4587  0023BC  0E9F               	movlw	159
  4588  0023BE  6FD6               	movwf	214,b	;volatile
  4589  0023C0                     
  4590                           ; BSR set to: 14
  4591                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  4592  0023C0  8A84               	bsf	132,5,c	;volatile
  4593  0023C2                     
  4594                           ; BSR set to: 14
  4595                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  4596  0023C2  8C84               	bsf	132,6,c	;volatile
  4597  0023C4                     
  4598                           ; BSR set to: 14
  4599                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  4600  0023C4  9BA7               	bcf	167,5,b	;volatile
  4601  0023C6                     
  4602                           ; BSR set to: 14
  4603                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  4604  0023C6  9DA7               	bcf	167,6,b	;volatile
  4605                           
  4606                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  4607  0023C8  0E1D               	movlw	29
  4608  0023CA  6F1D               	movwf	29,b	;volatile
  4609                           
  4610                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  4611  0023CC  0E1E               	movlw	30
  4612  0023CE  6F1C               	movwf	28,b	;volatile
  4613                           
  4614                           ;i2c.c: 18:   RD5PPS=0x1C;
  4615  0023D0  0E1C               	movlw	28
  4616  0023D2  6F6F               	movwf	111,b	;volatile
  4617                           
  4618                           ;i2c.c: 19:   RD6PPS=0x1B;
  4619  0023D4  0E1B               	movlw	27
  4620  0023D6  6F70               	movwf	112,b	;volatile
  4621  0023D8                     
  4622                           ; BSR set to: 14
  4623  0023D8  0012               	return		;funcret
  4624  0023DA                     __end_of_I2C_2_Master_Init:
  4625                           	callstack 0
  4626                           
  4627 ;; *************** function _LED_G *****************
  4628 ;; Defined at:
  4629 ;;		line 125 in file "color.c"
  4630 ;; Parameters:    Size  Location     Type
  4631 ;;  m               2   13[COMRAM] PTR struct color_rgb
  4632 ;;		 -> main@rgb(8), 
  4633 ;; Auto vars:     Size  Location     Type
  4634 ;;		None
  4635 ;; Return value:  Size  Location     Type
  4636 ;;                  1    wreg      void 
  4637 ;; Registers used:
  4638 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4639 ;; Tracked objects:
  4640 ;;		On entry : 0/0
  4641 ;;		On exit  : 0/0
  4642 ;;		Unchanged: 0/0
  4643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4644 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4645 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4646 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4647 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4648 ;;Total ram usage:        4 bytes
  4649 ;; Hardware stack levels used: 1
  4650 ;; Hardware stack levels required when called: 4
  4651 ;; This function calls:
  4652 ;;		_get_color
  4653 ;; This function is called by:
  4654 ;;		_main
  4655 ;; This function uses a non-reentrant model
  4656 ;;
  4657                           
  4658                           	psect	text32
  4659  002384                     __ptext32:
  4660                           	callstack 0
  4661  002384                     _LED_G:
  4662                           	callstack 26
  4663  002384                     
  4664                           ;color.c: 125: void LED_G(struct color_rgb *m);color.c: 126: {;color.c: 127:     LATGbit
      +                          s.LATG1 = 0;
  4665  002384  927F               	bcf	127,1,c	;volatile
  4666                           
  4667                           ;color.c: 128:     LATFbits.LATF7 = 0;
  4668  002386  9E7E               	bcf	126,7,c	;volatile
  4669                           
  4670                           ;color.c: 129:     LATAbits.LATA4 = 1;
  4671  002388  8879               	bsf	121,4,c	;volatile
  4672  00238A                     
  4673                           ;color.c: 130:     _delay((unsigned long)((200)*(64000000/4000.0)));
  4674  00238A  0E11               	movlw	17
  4675  00238C  6E11               	movwf	(??_LED_G+1)^0,c
  4676  00238E  0E3C               	movlw	60
  4677  002390  6E10               	movwf	??_LED_G^0,c
  4678  002392  0ECB               	movlw	203
  4679  002394                     u1747:
  4680  002394  2EE8               	decfsz	wreg,f,c
  4681  002396  D7FE               	bra	u1747
  4682  002398  2E10               	decfsz	??_LED_G^0,f,c
  4683  00239A  D7FC               	bra	u1747
  4684  00239C  2E11               	decfsz	(??_LED_G+1)^0,f,c
  4685  00239E  D7FA               	bra	u1747
  4686  0023A0  F000               	nop	
  4687  0023A2                     
  4688                           ;color.c: 131:     get_color(m);
  4689  0023A2  C00E  F00C         	movff	LED_G@m,get_color@m
  4690  0023A6  C00F  F00D         	movff	LED_G@m+1,get_color@m+1
  4691  0023AA  EC9C  F00F         	call	_get_color	;wreg free
  4692  0023AE  0012               	return		;funcret
  4693  0023B0                     __end_of_LED_G:
  4694                           	callstack 0
  4695                           
  4696 ;; *************** function _get_color *****************
  4697 ;; Defined at:
  4698 ;;		line 89 in file "color.c"
  4699 ;; Parameters:    Size  Location     Type
  4700 ;;  m               2   11[COMRAM] PTR struct color_rgb
  4701 ;;		 -> main@rgb(8), 
  4702 ;; Auto vars:     Size  Location     Type
  4703 ;;		None
  4704 ;; Return value:  Size  Location     Type
  4705 ;;                  1    wreg      void 
  4706 ;; Registers used:
  4707 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4708 ;; Tracked objects:
  4709 ;;		On entry : 0/0
  4710 ;;		On exit  : 0/0
  4711 ;;		Unchanged: 0/0
  4712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4713 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4714 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4715 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4716 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4717 ;;Total ram usage:        2 bytes
  4718 ;; Hardware stack levels used: 1
  4719 ;; Hardware stack levels required when called: 3
  4720 ;; This function calls:
  4721 ;;		_color_read_Blue
  4722 ;;		_color_read_Clear
  4723 ;;		_color_read_Green
  4724 ;;		_color_read_Red
  4725 ;; This function is called by:
  4726 ;;		_LED_G
  4727 ;;		_LED_R
  4728 ;;		_LED_C
  4729 ;;		_LED_B
  4730 ;; This function uses a non-reentrant model
  4731 ;;
  4732                           
  4733                           	psect	text33
  4734  001F38                     __ptext33:
  4735                           	callstack 0
  4736  001F38                     _get_color:
  4737                           	callstack 26
  4738  001F38                     
  4739                           ;color.c: 89: void get_color (struct color_rgb *m);color.c: 90: {;color.c: 91:     m->R 
      +                          = color_read_Red();
  4740  001F38  ECF4  F00F         	call	_color_read_Red	;wreg free
  4741  001F3C  C00C  FFD9         	movff	get_color@m,fsr2l
  4742  001F40  C00D  FFDA         	movff	get_color@m+1,fsr2h
  4743  001F44  C005  FFDE         	movff	?_color_read_Red,postinc2
  4744  001F48  C006  FFDD         	movff	?_color_read_Red+1,postdec2
  4745                           
  4746                           ;color.c: 92:     m->B = color_read_Blue();
  4747  001F4C  EC6C  F010         	call	_color_read_Blue	;wreg free
  4748  001F50  EE20 F004          	lfsr	2,4
  4749  001F54  500C               	movf	get_color@m^0,w,c
  4750  001F56  26D9               	addwf	fsr2l,f,c
  4751  001F58  500D               	movf	(get_color@m+1)^0,w,c
  4752  001F5A  22DA               	addwfc	fsr2h,f,c
  4753  001F5C  C005  FFDE         	movff	?_color_read_Blue,postinc2
  4754  001F60  C006  FFDD         	movff	?_color_read_Blue+1,postdec2
  4755                           
  4756                           ;color.c: 93:     m->G = color_read_Green();
  4757  001F64  EC1C  F010         	call	_color_read_Green	;wreg free
  4758  001F68  EE20 F002          	lfsr	2,2
  4759  001F6C  500C               	movf	get_color@m^0,w,c
  4760  001F6E  26D9               	addwf	fsr2l,f,c
  4761  001F70  500D               	movf	(get_color@m+1)^0,w,c
  4762  001F72  22DA               	addwfc	fsr2h,f,c
  4763  001F74  C005  FFDE         	movff	?_color_read_Green,postinc2
  4764  001F78  C006  FFDD         	movff	?_color_read_Green+1,postdec2
  4765                           
  4766                           ;color.c: 94:     m->C = color_read_Clear();
  4767  001F7C  EC44  F010         	call	_color_read_Clear	;wreg free
  4768  001F80  EE20 F006          	lfsr	2,6
  4769  001F84  500C               	movf	get_color@m^0,w,c
  4770  001F86  26D9               	addwf	fsr2l,f,c
  4771  001F88  500D               	movf	(get_color@m+1)^0,w,c
  4772  001F8A  22DA               	addwfc	fsr2h,f,c
  4773  001F8C  C005  FFDE         	movff	?_color_read_Clear,postinc2
  4774  001F90  C006  FFDD         	movff	?_color_read_Clear+1,postdec2
  4775  001F94  0012               	return		;funcret
  4776  001F96                     __end_of_get_color:
  4777                           	callstack 0
  4778                           
  4779 ;; *************** function _color_read_Red *****************
  4780 ;; Defined at:
  4781 ;;		line 33 in file "color.c"
  4782 ;; Parameters:    Size  Location     Type
  4783 ;;		None
  4784 ;; Auto vars:     Size  Location     Type
  4785 ;;  tmp             2    9[COMRAM] unsigned int 
  4786 ;; Return value:  Size  Location     Type
  4787 ;;                  2    4[COMRAM] unsigned int 
  4788 ;; Registers used:
  4789 ;;		wreg, status,2, status,0, cstack
  4790 ;; Tracked objects:
  4791 ;;		On entry : 0/0
  4792 ;;		On exit  : 0/0
  4793 ;;		Unchanged: 0/0
  4794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4795 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4796 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4797 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4798 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4799 ;;Total ram usage:        7 bytes
  4800 ;; Hardware stack levels used: 1
  4801 ;; Hardware stack levels required when called: 2
  4802 ;; This function calls:
  4803 ;;		_I2C_2_Master_Read
  4804 ;;		_I2C_2_Master_RepStart
  4805 ;;		_I2C_2_Master_Start
  4806 ;;		_I2C_2_Master_Stop
  4807 ;;		_I2C_2_Master_Write
  4808 ;; This function is called by:
  4809 ;;		_get_color
  4810 ;; This function uses a non-reentrant model
  4811 ;;
  4812                           
  4813                           	psect	text34
  4814  001FE8                     __ptext34:
  4815                           	callstack 0
  4816  001FE8                     _color_read_Red:
  4817                           	callstack 26
  4818  001FE8                     
  4819                           ;color.c: 35:  unsigned int tmp;;color.c: 36:  I2C_2_Master_Start();
  4820  001FE8  EC4A  F012         	call	_I2C_2_Master_Start	;wreg free
  4821                           
  4822                           ;color.c: 37:  I2C_2_Master_Write(0x52 | 0x00);
  4823  001FEC  0E52               	movlw	82
  4824  001FEE  EC3F  F012         	call	_I2C_2_Master_Write
  4825                           
  4826                           ;color.c: 38:  I2C_2_Master_Write(0xA0 | 0x16);
  4827  001FF2  0EB6               	movlw	182
  4828  001FF4  EC3F  F012         	call	_I2C_2_Master_Write
  4829                           
  4830                           ;color.c: 39:  I2C_2_Master_RepStart();
  4831  001FF8  EC4F  F012         	call	_I2C_2_Master_RepStart	;wreg free
  4832                           
  4833                           ;color.c: 40:  I2C_2_Master_Write(0x52 | 0x01);
  4834  001FFC  0E53               	movlw	83
  4835  001FFE  EC3F  F012         	call	_I2C_2_Master_Write
  4836                           
  4837                           ;color.c: 41:  tmp=I2C_2_Master_Read(1);
  4838  002002  0E01               	movlw	1
  4839  002004  ECF8  F010         	call	_I2C_2_Master_Read
  4840  002008  6E07               	movwf	??_color_read_Red^0,c
  4841  00200A  5007               	movf	??_color_read_Red^0,w,c
  4842  00200C  6E0A               	movwf	color_read_Red@tmp^0,c
  4843  00200E  6A0B               	clrf	(color_read_Red@tmp+1)^0,c
  4844                           
  4845                           ;color.c: 42:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  4846  002010  0E00               	movlw	0
  4847  002012  ECF8  F010         	call	_I2C_2_Master_Read
  4848  002016  6E07               	movwf	??_color_read_Red^0,c
  4849  002018  5007               	movf	??_color_read_Red^0,w,c
  4850  00201A  6E09               	movwf	(??_color_read_Red+2)^0,c
  4851  00201C  6A08               	clrf	(??_color_read_Red+1)^0,c
  4852  00201E  500A               	movf	color_read_Red@tmp^0,w,c
  4853  002020  1008               	iorwf	(??_color_read_Red+1)^0,w,c
  4854  002022  6E0A               	movwf	color_read_Red@tmp^0,c
  4855  002024  500B               	movf	(color_read_Red@tmp+1)^0,w,c
  4856  002026  1009               	iorwf	(??_color_read_Red+2)^0,w,c
  4857  002028  6E0B               	movwf	(color_read_Red@tmp+1)^0,c
  4858                           
  4859                           ;color.c: 43:  I2C_2_Master_Stop();
  4860  00202A  EC45  F012         	call	_I2C_2_Master_Stop	;wreg free
  4861  00202E                     
  4862                           ;color.c: 44:  return tmp;
  4863  00202E  C00A  F005         	movff	color_read_Red@tmp,?_color_read_Red
  4864  002032  C00B  F006         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  4865  002036  0012               	return		;funcret
  4866  002038                     __end_of_color_read_Red:
  4867                           	callstack 0
  4868                           
  4869 ;; *************** function _color_read_Green *****************
  4870 ;; Defined at:
  4871 ;;		line 61 in file "color.c"
  4872 ;; Parameters:    Size  Location     Type
  4873 ;;		None
  4874 ;; Auto vars:     Size  Location     Type
  4875 ;;  tmp             2    9[COMRAM] unsigned int 
  4876 ;; Return value:  Size  Location     Type
  4877 ;;                  2    4[COMRAM] unsigned int 
  4878 ;; Registers used:
  4879 ;;		wreg, status,2, status,0, cstack
  4880 ;; Tracked objects:
  4881 ;;		On entry : 0/0
  4882 ;;		On exit  : 0/0
  4883 ;;		Unchanged: 0/0
  4884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4885 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4886 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4887 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4888 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4889 ;;Total ram usage:        7 bytes
  4890 ;; Hardware stack levels used: 1
  4891 ;; Hardware stack levels required when called: 2
  4892 ;; This function calls:
  4893 ;;		_I2C_2_Master_Read
  4894 ;;		_I2C_2_Master_RepStart
  4895 ;;		_I2C_2_Master_Start
  4896 ;;		_I2C_2_Master_Stop
  4897 ;;		_I2C_2_Master_Write
  4898 ;; This function is called by:
  4899 ;;		_get_color
  4900 ;; This function uses a non-reentrant model
  4901 ;;
  4902                           
  4903                           	psect	text35
  4904  002038                     __ptext35:
  4905                           	callstack 0
  4906  002038                     _color_read_Green:
  4907                           	callstack 26
  4908  002038                     
  4909                           ;color.c: 63:  unsigned int tmp;;color.c: 64:  I2C_2_Master_Start();
  4910  002038  EC4A  F012         	call	_I2C_2_Master_Start	;wreg free
  4911                           
  4912                           ;color.c: 65:  I2C_2_Master_Write(0x52 | 0x00);
  4913  00203C  0E52               	movlw	82
  4914  00203E  EC3F  F012         	call	_I2C_2_Master_Write
  4915                           
  4916                           ;color.c: 66:  I2C_2_Master_Write(0xA0 | 0x18);
  4917  002042  0EB8               	movlw	184
  4918  002044  EC3F  F012         	call	_I2C_2_Master_Write
  4919                           
  4920                           ;color.c: 67:  I2C_2_Master_RepStart();
  4921  002048  EC4F  F012         	call	_I2C_2_Master_RepStart	;wreg free
  4922                           
  4923                           ;color.c: 68:  I2C_2_Master_Write(0x52 | 0x01);
  4924  00204C  0E53               	movlw	83
  4925  00204E  EC3F  F012         	call	_I2C_2_Master_Write
  4926                           
  4927                           ;color.c: 69:  tmp=I2C_2_Master_Read(1);
  4928  002052  0E01               	movlw	1
  4929  002054  ECF8  F010         	call	_I2C_2_Master_Read
  4930  002058  6E07               	movwf	??_color_read_Green^0,c
  4931  00205A  5007               	movf	??_color_read_Green^0,w,c
  4932  00205C  6E0A               	movwf	color_read_Green@tmp^0,c
  4933  00205E  6A0B               	clrf	(color_read_Green@tmp+1)^0,c
  4934                           
  4935                           ;color.c: 70:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  4936  002060  0E00               	movlw	0
  4937  002062  ECF8  F010         	call	_I2C_2_Master_Read
  4938  002066  6E07               	movwf	??_color_read_Green^0,c
  4939  002068  5007               	movf	??_color_read_Green^0,w,c
  4940  00206A  6E09               	movwf	(??_color_read_Green+2)^0,c
  4941  00206C  6A08               	clrf	(??_color_read_Green+1)^0,c
  4942  00206E  500A               	movf	color_read_Green@tmp^0,w,c
  4943  002070  1008               	iorwf	(??_color_read_Green+1)^0,w,c
  4944  002072  6E0A               	movwf	color_read_Green@tmp^0,c
  4945  002074  500B               	movf	(color_read_Green@tmp+1)^0,w,c
  4946  002076  1009               	iorwf	(??_color_read_Green+2)^0,w,c
  4947  002078  6E0B               	movwf	(color_read_Green@tmp+1)^0,c
  4948                           
  4949                           ;color.c: 71:  I2C_2_Master_Stop();
  4950  00207A  EC45  F012         	call	_I2C_2_Master_Stop	;wreg free
  4951  00207E                     
  4952                           ;color.c: 72:  return tmp;
  4953  00207E  C00A  F005         	movff	color_read_Green@tmp,?_color_read_Green
  4954  002082  C00B  F006         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  4955  002086  0012               	return		;funcret
  4956  002088                     __end_of_color_read_Green:
  4957                           	callstack 0
  4958                           
  4959 ;; *************** function _color_read_Clear *****************
  4960 ;; Defined at:
  4961 ;;		line 75 in file "color.c"
  4962 ;; Parameters:    Size  Location     Type
  4963 ;;		None
  4964 ;; Auto vars:     Size  Location     Type
  4965 ;;  tmp             2    9[COMRAM] unsigned int 
  4966 ;; Return value:  Size  Location     Type
  4967 ;;                  2    4[COMRAM] unsigned int 
  4968 ;; Registers used:
  4969 ;;		wreg, status,2, status,0, cstack
  4970 ;; Tracked objects:
  4971 ;;		On entry : 0/0
  4972 ;;		On exit  : 0/0
  4973 ;;		Unchanged: 0/0
  4974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4975 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4976 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4977 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4978 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4979 ;;Total ram usage:        7 bytes
  4980 ;; Hardware stack levels used: 1
  4981 ;; Hardware stack levels required when called: 2
  4982 ;; This function calls:
  4983 ;;		_I2C_2_Master_Read
  4984 ;;		_I2C_2_Master_RepStart
  4985 ;;		_I2C_2_Master_Start
  4986 ;;		_I2C_2_Master_Stop
  4987 ;;		_I2C_2_Master_Write
  4988 ;; This function is called by:
  4989 ;;		_get_color
  4990 ;; This function uses a non-reentrant model
  4991 ;;
  4992                           
  4993                           	psect	text36
  4994  002088                     __ptext36:
  4995                           	callstack 0
  4996  002088                     _color_read_Clear:
  4997                           	callstack 26
  4998  002088                     
  4999                           ;color.c: 77:  unsigned int tmp;;color.c: 78:  I2C_2_Master_Start();
  5000  002088  EC4A  F012         	call	_I2C_2_Master_Start	;wreg free
  5001                           
  5002                           ;color.c: 79:  I2C_2_Master_Write(0x52 | 0x00);
  5003  00208C  0E52               	movlw	82
  5004  00208E  EC3F  F012         	call	_I2C_2_Master_Write
  5005                           
  5006                           ;color.c: 80:  I2C_2_Master_Write(0xA0 | 0x14);
  5007  002092  0EB4               	movlw	180
  5008  002094  EC3F  F012         	call	_I2C_2_Master_Write
  5009                           
  5010                           ;color.c: 81:  I2C_2_Master_RepStart();
  5011  002098  EC4F  F012         	call	_I2C_2_Master_RepStart	;wreg free
  5012                           
  5013                           ;color.c: 82:  I2C_2_Master_Write(0x52 | 0x01);
  5014  00209C  0E53               	movlw	83
  5015  00209E  EC3F  F012         	call	_I2C_2_Master_Write
  5016                           
  5017                           ;color.c: 83:  tmp=I2C_2_Master_Read(1);
  5018  0020A2  0E01               	movlw	1
  5019  0020A4  ECF8  F010         	call	_I2C_2_Master_Read
  5020  0020A8  6E07               	movwf	??_color_read_Clear^0,c
  5021  0020AA  5007               	movf	??_color_read_Clear^0,w,c
  5022  0020AC  6E0A               	movwf	color_read_Clear@tmp^0,c
  5023  0020AE  6A0B               	clrf	(color_read_Clear@tmp+1)^0,c
  5024                           
  5025                           ;color.c: 84:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5026  0020B0  0E00               	movlw	0
  5027  0020B2  ECF8  F010         	call	_I2C_2_Master_Read
  5028  0020B6  6E07               	movwf	??_color_read_Clear^0,c
  5029  0020B8  5007               	movf	??_color_read_Clear^0,w,c
  5030  0020BA  6E09               	movwf	(??_color_read_Clear+2)^0,c
  5031  0020BC  6A08               	clrf	(??_color_read_Clear+1)^0,c
  5032  0020BE  500A               	movf	color_read_Clear@tmp^0,w,c
  5033  0020C0  1008               	iorwf	(??_color_read_Clear+1)^0,w,c
  5034  0020C2  6E0A               	movwf	color_read_Clear@tmp^0,c
  5035  0020C4  500B               	movf	(color_read_Clear@tmp+1)^0,w,c
  5036  0020C6  1009               	iorwf	(??_color_read_Clear+2)^0,w,c
  5037  0020C8  6E0B               	movwf	(color_read_Clear@tmp+1)^0,c
  5038                           
  5039                           ;color.c: 85:  I2C_2_Master_Stop();
  5040  0020CA  EC45  F012         	call	_I2C_2_Master_Stop	;wreg free
  5041  0020CE                     
  5042                           ;color.c: 86:  return tmp;
  5043  0020CE  C00A  F005         	movff	color_read_Clear@tmp,?_color_read_Clear
  5044  0020D2  C00B  F006         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
  5045  0020D6  0012               	return		;funcret
  5046  0020D8                     __end_of_color_read_Clear:
  5047                           	callstack 0
  5048                           
  5049 ;; *************** function _color_read_Blue *****************
  5050 ;; Defined at:
  5051 ;;		line 47 in file "color.c"
  5052 ;; Parameters:    Size  Location     Type
  5053 ;;		None
  5054 ;; Auto vars:     Size  Location     Type
  5055 ;;  tmp             2    9[COMRAM] unsigned int 
  5056 ;; Return value:  Size  Location     Type
  5057 ;;                  2    4[COMRAM] unsigned int 
  5058 ;; Registers used:
  5059 ;;		wreg, status,2, status,0, cstack
  5060 ;; Tracked objects:
  5061 ;;		On entry : 0/0
  5062 ;;		On exit  : 0/0
  5063 ;;		Unchanged: 0/0
  5064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5065 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5066 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5067 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5068 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5069 ;;Total ram usage:        7 bytes
  5070 ;; Hardware stack levels used: 1
  5071 ;; Hardware stack levels required when called: 2
  5072 ;; This function calls:
  5073 ;;		_I2C_2_Master_Read
  5074 ;;		_I2C_2_Master_RepStart
  5075 ;;		_I2C_2_Master_Start
  5076 ;;		_I2C_2_Master_Stop
  5077 ;;		_I2C_2_Master_Write
  5078 ;; This function is called by:
  5079 ;;		_get_color
  5080 ;; This function uses a non-reentrant model
  5081 ;;
  5082                           
  5083                           	psect	text37
  5084  0020D8                     __ptext37:
  5085                           	callstack 0
  5086  0020D8                     _color_read_Blue:
  5087                           	callstack 26
  5088  0020D8                     
  5089                           ;color.c: 49:  unsigned int tmp;;color.c: 50:  I2C_2_Master_Start();
  5090  0020D8  EC4A  F012         	call	_I2C_2_Master_Start	;wreg free
  5091                           
  5092                           ;color.c: 51:  I2C_2_Master_Write(0x52 | 0x00);
  5093  0020DC  0E52               	movlw	82
  5094  0020DE  EC3F  F012         	call	_I2C_2_Master_Write
  5095                           
  5096                           ;color.c: 52:  I2C_2_Master_Write(0xA0 | 0x1A);
  5097  0020E2  0EBA               	movlw	186
  5098  0020E4  EC3F  F012         	call	_I2C_2_Master_Write
  5099                           
  5100                           ;color.c: 53:  I2C_2_Master_RepStart();
  5101  0020E8  EC4F  F012         	call	_I2C_2_Master_RepStart	;wreg free
  5102                           
  5103                           ;color.c: 54:  I2C_2_Master_Write(0x52 | 0x01);
  5104  0020EC  0E53               	movlw	83
  5105  0020EE  EC3F  F012         	call	_I2C_2_Master_Write
  5106                           
  5107                           ;color.c: 55:  tmp=I2C_2_Master_Read(1);
  5108  0020F2  0E01               	movlw	1
  5109  0020F4  ECF8  F010         	call	_I2C_2_Master_Read
  5110  0020F8  6E07               	movwf	??_color_read_Blue^0,c
  5111  0020FA  5007               	movf	??_color_read_Blue^0,w,c
  5112  0020FC  6E0A               	movwf	color_read_Blue@tmp^0,c
  5113  0020FE  6A0B               	clrf	(color_read_Blue@tmp+1)^0,c
  5114                           
  5115                           ;color.c: 56:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5116  002100  0E00               	movlw	0
  5117  002102  ECF8  F010         	call	_I2C_2_Master_Read
  5118  002106  6E07               	movwf	??_color_read_Blue^0,c
  5119  002108  5007               	movf	??_color_read_Blue^0,w,c
  5120  00210A  6E09               	movwf	(??_color_read_Blue+2)^0,c
  5121  00210C  6A08               	clrf	(??_color_read_Blue+1)^0,c
  5122  00210E  500A               	movf	color_read_Blue@tmp^0,w,c
  5123  002110  1008               	iorwf	(??_color_read_Blue+1)^0,w,c
  5124  002112  6E0A               	movwf	color_read_Blue@tmp^0,c
  5125  002114  500B               	movf	(color_read_Blue@tmp+1)^0,w,c
  5126  002116  1009               	iorwf	(??_color_read_Blue+2)^0,w,c
  5127  002118  6E0B               	movwf	(color_read_Blue@tmp+1)^0,c
  5128                           
  5129                           ;color.c: 57:  I2C_2_Master_Stop();
  5130  00211A  EC45  F012         	call	_I2C_2_Master_Stop	;wreg free
  5131  00211E                     
  5132                           ;color.c: 58:  return tmp;
  5133  00211E  C00A  F005         	movff	color_read_Blue@tmp,?_color_read_Blue
  5134  002122  C00B  F006         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  5135  002126  0012               	return		;funcret
  5136  002128                     __end_of_color_read_Blue:
  5137                           	callstack 0
  5138                           
  5139 ;; *************** function _I2C_2_Master_Write *****************
  5140 ;; Defined at:
  5141 ;;		line 45 in file "i2c.c"
  5142 ;; Parameters:    Size  Location     Type
  5143 ;;  data_byte       1    wreg     unsigned char 
  5144 ;; Auto vars:     Size  Location     Type
  5145 ;;  data_byte       1    1[COMRAM] unsigned char 
  5146 ;; Return value:  Size  Location     Type
  5147 ;;                  1    wreg      void 
  5148 ;; Registers used:
  5149 ;;		wreg, status,2, status,0, cstack
  5150 ;; Tracked objects:
  5151 ;;		On entry : 0/0
  5152 ;;		On exit  : 0/0
  5153 ;;		Unchanged: 0/0
  5154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5155 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5156 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5158 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5159 ;;Total ram usage:        1 bytes
  5160 ;; Hardware stack levels used: 1
  5161 ;; Hardware stack levels required when called: 1
  5162 ;; This function calls:
  5163 ;;		_I2C_2_Master_Idle
  5164 ;; This function is called by:
  5165 ;;		_color_writetoaddr
  5166 ;;		_color_read_Red
  5167 ;;		_color_read_Blue
  5168 ;;		_color_read_Green
  5169 ;;		_color_read_Clear
  5170 ;; This function uses a non-reentrant model
  5171 ;;
  5172                           
  5173                           	psect	text38
  5174  00247E                     __ptext38:
  5175                           	callstack 0
  5176  00247E                     _I2C_2_Master_Write:
  5177                           	callstack 27
  5178                           
  5179                           ;incstack = 0
  5180                           ;I2C_2_Master_Write@data_byte stored from wreg
  5181  00247E  6E02               	movwf	I2C_2_Master_Write@data_byte^0,c
  5182  002480                     
  5183                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  5184  002480  ECED  F011         	call	_I2C_2_Master_Idle	;wreg free
  5185  002484                     
  5186                           ;i2c.c: 48:   SSP2BUF = data_byte;
  5187  002484  C002  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  5188  002488  0012               	return		;funcret
  5189  00248A                     __end_of_I2C_2_Master_Write:
  5190                           	callstack 0
  5191                           
  5192 ;; *************** function _I2C_2_Master_Stop *****************
  5193 ;; Defined at:
  5194 ;;		line 39 in file "i2c.c"
  5195 ;; Parameters:    Size  Location     Type
  5196 ;;		None
  5197 ;; Auto vars:     Size  Location     Type
  5198 ;;		None
  5199 ;; Return value:  Size  Location     Type
  5200 ;;                  1    wreg      void 
  5201 ;; Registers used:
  5202 ;;		wreg, status,2, status,0, cstack
  5203 ;; Tracked objects:
  5204 ;;		On entry : 0/0
  5205 ;;		On exit  : 0/0
  5206 ;;		Unchanged: 0/0
  5207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5209 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5210 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5211 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5212 ;;Total ram usage:        0 bytes
  5213 ;; Hardware stack levels used: 1
  5214 ;; Hardware stack levels required when called: 1
  5215 ;; This function calls:
  5216 ;;		_I2C_2_Master_Idle
  5217 ;; This function is called by:
  5218 ;;		_color_writetoaddr
  5219 ;;		_color_read_Red
  5220 ;;		_color_read_Blue
  5221 ;;		_color_read_Green
  5222 ;;		_color_read_Clear
  5223 ;; This function uses a non-reentrant model
  5224 ;;
  5225                           
  5226                           	psect	text39
  5227  00248A                     __ptext39:
  5228                           	callstack 0
  5229  00248A                     _I2C_2_Master_Stop:
  5230                           	callstack 27
  5231  00248A                     
  5232                           ;i2c.c: 41:   I2C_2_Master_Idle();
  5233  00248A  ECED  F011         	call	_I2C_2_Master_Idle	;wreg free
  5234  00248E                     
  5235                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  5236  00248E  010E               	movlb	14	; () banked
  5237  002490  85DA               	bsf	218,2,b	;volatile
  5238  002492                     
  5239                           ; BSR set to: 14
  5240  002492  0012               	return		;funcret
  5241  002494                     __end_of_I2C_2_Master_Stop:
  5242                           	callstack 0
  5243                           
  5244 ;; *************** function _I2C_2_Master_Start *****************
  5245 ;; Defined at:
  5246 ;;		line 27 in file "i2c.c"
  5247 ;; Parameters:    Size  Location     Type
  5248 ;;		None
  5249 ;; Auto vars:     Size  Location     Type
  5250 ;;		None
  5251 ;; Return value:  Size  Location     Type
  5252 ;;                  1    wreg      void 
  5253 ;; Registers used:
  5254 ;;		wreg, status,2, status,0, cstack
  5255 ;; Tracked objects:
  5256 ;;		On entry : 0/0
  5257 ;;		On exit  : 0/0
  5258 ;;		Unchanged: 0/0
  5259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5260 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5261 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5262 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5263 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5264 ;;Total ram usage:        0 bytes
  5265 ;; Hardware stack levels used: 1
  5266 ;; Hardware stack levels required when called: 1
  5267 ;; This function calls:
  5268 ;;		_I2C_2_Master_Idle
  5269 ;; This function is called by:
  5270 ;;		_color_writetoaddr
  5271 ;;		_color_read_Red
  5272 ;;		_color_read_Blue
  5273 ;;		_color_read_Green
  5274 ;;		_color_read_Clear
  5275 ;; This function uses a non-reentrant model
  5276 ;;
  5277                           
  5278                           	psect	text40
  5279  002494                     __ptext40:
  5280                           	callstack 0
  5281  002494                     _I2C_2_Master_Start:
  5282                           	callstack 27
  5283  002494                     
  5284                           ;i2c.c: 29:   I2C_2_Master_Idle();
  5285  002494  ECED  F011         	call	_I2C_2_Master_Idle	;wreg free
  5286  002498                     
  5287                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  5288  002498  010E               	movlb	14	; () banked
  5289  00249A  81DA               	bsf	218,0,b	;volatile
  5290  00249C                     
  5291                           ; BSR set to: 14
  5292  00249C  0012               	return		;funcret
  5293  00249E                     __end_of_I2C_2_Master_Start:
  5294                           	callstack 0
  5295                           
  5296 ;; *************** function _I2C_2_Master_RepStart *****************
  5297 ;; Defined at:
  5298 ;;		line 33 in file "i2c.c"
  5299 ;; Parameters:    Size  Location     Type
  5300 ;;		None
  5301 ;; Auto vars:     Size  Location     Type
  5302 ;;		None
  5303 ;; Return value:  Size  Location     Type
  5304 ;;                  1    wreg      void 
  5305 ;; Registers used:
  5306 ;;		wreg, status,2, status,0, cstack
  5307 ;; Tracked objects:
  5308 ;;		On entry : 0/0
  5309 ;;		On exit  : 0/0
  5310 ;;		Unchanged: 0/0
  5311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5312 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5313 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5314 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5315 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5316 ;;Total ram usage:        0 bytes
  5317 ;; Hardware stack levels used: 1
  5318 ;; Hardware stack levels required when called: 1
  5319 ;; This function calls:
  5320 ;;		_I2C_2_Master_Idle
  5321 ;; This function is called by:
  5322 ;;		_color_read_Red
  5323 ;;		_color_read_Blue
  5324 ;;		_color_read_Green
  5325 ;;		_color_read_Clear
  5326 ;; This function uses a non-reentrant model
  5327 ;;
  5328                           
  5329                           	psect	text41
  5330  00249E                     __ptext41:
  5331                           	callstack 0
  5332  00249E                     _I2C_2_Master_RepStart:
  5333                           	callstack 26
  5334  00249E                     
  5335                           ;i2c.c: 35:   I2C_2_Master_Idle();
  5336  00249E  ECED  F011         	call	_I2C_2_Master_Idle	;wreg free
  5337  0024A2                     
  5338                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  5339  0024A2  010E               	movlb	14	; () banked
  5340  0024A4  83DA               	bsf	218,1,b	;volatile
  5341  0024A6                     
  5342                           ; BSR set to: 14
  5343  0024A6  0012               	return		;funcret
  5344  0024A8                     __end_of_I2C_2_Master_RepStart:
  5345                           	callstack 0
  5346                           
  5347 ;; *************** function _I2C_2_Master_Read *****************
  5348 ;; Defined at:
  5349 ;;		line 51 in file "i2c.c"
  5350 ;; Parameters:    Size  Location     Type
  5351 ;;  ack             1    wreg     unsigned char 
  5352 ;; Auto vars:     Size  Location     Type
  5353 ;;  ack             1    2[COMRAM] unsigned char 
  5354 ;;  tmp             1    3[COMRAM] unsigned char 
  5355 ;; Return value:  Size  Location     Type
  5356 ;;                  1    wreg      unsigned char 
  5357 ;; Registers used:
  5358 ;;		wreg, status,2, status,0, cstack
  5359 ;; Tracked objects:
  5360 ;;		On entry : 0/0
  5361 ;;		On exit  : 0/0
  5362 ;;		Unchanged: 0/0
  5363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5364 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5365 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5366 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5367 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5368 ;;Total ram usage:        3 bytes
  5369 ;; Hardware stack levels used: 1
  5370 ;; Hardware stack levels required when called: 1
  5371 ;; This function calls:
  5372 ;;		_I2C_2_Master_Idle
  5373 ;; This function is called by:
  5374 ;;		_color_read_Red
  5375 ;;		_color_read_Blue
  5376 ;;		_color_read_Green
  5377 ;;		_color_read_Clear
  5378 ;; This function uses a non-reentrant model
  5379 ;;
  5380                           
  5381                           	psect	text42
  5382  0021F0                     __ptext42:
  5383                           	callstack 0
  5384  0021F0                     _I2C_2_Master_Read:
  5385                           	callstack 26
  5386                           
  5387                           ; BSR set to: 14
  5388                           ;incstack = 0
  5389                           ;I2C_2_Master_Read@ack stored from wreg
  5390  0021F0  6E03               	movwf	I2C_2_Master_Read@ack^0,c
  5391  0021F2                     
  5392                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  5393  0021F2  ECED  F011         	call	_I2C_2_Master_Idle	;wreg free
  5394  0021F6                     
  5395                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  5396  0021F6  010E               	movlb	14	; () banked
  5397  0021F8  87DA               	bsf	218,3,b	;volatile
  5398                           
  5399                           ;i2c.c: 56:   I2C_2_Master_Idle();
  5400  0021FA  ECED  F011         	call	_I2C_2_Master_Idle	;wreg free
  5401  0021FE                     
  5402                           ;i2c.c: 57:   tmp = SSP2BUF;
  5403  0021FE  CED5 F004          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  5404                           
  5405                           ;i2c.c: 58:   I2C_2_Master_Idle();
  5406  002202  ECED  F011         	call	_I2C_2_Master_Idle	;wreg free
  5407  002206                     
  5408                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  5409  002206  5003               	movf	I2C_2_Master_Read@ack^0,w,c
  5410  002208  B4D8               	btfsc	status,2,c
  5411  00220A  EF09  F011         	goto	u1281
  5412  00220E  EF0D  F011         	goto	u1280
  5413  002212                     u1281:
  5414  002212  6A02               	clrf	??_I2C_2_Master_Read^0,c
  5415  002214  2A02               	incf	??_I2C_2_Master_Read^0,f,c
  5416  002216  EF0E  F011         	goto	u1298
  5417  00221A                     u1280:
  5418  00221A  6A02               	clrf	??_I2C_2_Master_Read^0,c
  5419  00221C                     u1298:
  5420  00221C  3A02               	swapf	??_I2C_2_Master_Read^0,f,c
  5421  00221E  4602               	rlncf	??_I2C_2_Master_Read^0,f,c
  5422  002220  010E               	movlb	14	; () banked
  5423  002222  51DA               	movf	218,w,b	;volatile
  5424  002224  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  5425  002226  0BDF               	andlw	-33
  5426  002228  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  5427  00222A  6FDA               	movwf	218,b	;volatile
  5428  00222C                     
  5429                           ; BSR set to: 14
  5430                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  5431  00222C  89DA               	bsf	218,4,b	;volatile
  5432  00222E                     
  5433                           ; BSR set to: 14
  5434                           ;i2c.c: 61:   return tmp;
  5435  00222E  5004               	movf	I2C_2_Master_Read@tmp^0,w,c
  5436  002230                     
  5437                           ; BSR set to: 14
  5438  002230  0012               	return		;funcret
  5439  002232                     __end_of_I2C_2_Master_Read:
  5440                           	callstack 0
  5441                           
  5442 ;; *************** function _I2C_2_Master_Idle *****************
  5443 ;; Defined at:
  5444 ;;		line 22 in file "i2c.c"
  5445 ;; Parameters:    Size  Location     Type
  5446 ;;		None
  5447 ;; Auto vars:     Size  Location     Type
  5448 ;;		None
  5449 ;; Return value:  Size  Location     Type
  5450 ;;                  1    wreg      void 
  5451 ;; Registers used:
  5452 ;;		wreg, status,2, status,0
  5453 ;; Tracked objects:
  5454 ;;		On entry : 0/0
  5455 ;;		On exit  : 0/0
  5456 ;;		Unchanged: 0/0
  5457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5458 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5459 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5460 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5461 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5462 ;;Total ram usage:        1 bytes
  5463 ;; Hardware stack levels used: 1
  5464 ;; This function calls:
  5465 ;;		Nothing
  5466 ;; This function is called by:
  5467 ;;		_I2C_2_Master_Start
  5468 ;;		_I2C_2_Master_RepStart
  5469 ;;		_I2C_2_Master_Stop
  5470 ;;		_I2C_2_Master_Write
  5471 ;;		_I2C_2_Master_Read
  5472 ;; This function uses a non-reentrant model
  5473 ;;
  5474                           
  5475                           	psect	text43
  5476  0023DA                     __ptext43:
  5477                           	callstack 0
  5478  0023DA                     _I2C_2_Master_Idle:
  5479                           	callstack 27
  5480  0023DA                     l126:
  5481  0023DA  010E               	movlb	14	; () banked
  5482  0023DC  B5D8               	btfsc	216,2,b	;volatile
  5483  0023DE  EFF3  F011         	goto	u1111
  5484  0023E2  EFF5  F011         	goto	u1110
  5485  0023E6                     u1111:
  5486  0023E6  EFED  F011         	goto	l126
  5487  0023EA                     u1110:
  5488  0023EA                     
  5489                           ; BSR set to: 14
  5490  0023EA  CEDA F001          	movff	3802,??_I2C_2_Master_Idle	;volatile
  5491  0023EE  0E1F               	movlw	31
  5492  0023F0  1601               	andwf	??_I2C_2_Master_Idle^0,f,c
  5493  0023F2  A4D8               	btfss	status,2,c
  5494  0023F4  EFFE  F011         	goto	u1121
  5495  0023F8  EF00  F012         	goto	u1120
  5496  0023FC                     u1121:
  5497  0023FC  EFED  F011         	goto	l126
  5498  002400                     u1120:
  5499  002400                     
  5500                           ; BSR set to: 14
  5501  002400  0012               	return		;funcret
  5502  002402                     __end_of_I2C_2_Master_Idle:
  5503                           	callstack 0
  5504                           
  5505                           	psect	rparam
  5506  0000                     
  5507                           	psect	idloc
  5508                           
  5509                           ;Config register IDLOC0 @ 0x200000
  5510                           ;	unspecified, using default values
  5511  200000                     	org	2097152
  5512  200000  0FFF               	dw	4095
  5513                           
  5514                           ;Config register IDLOC1 @ 0x200002
  5515                           ;	unspecified, using default values
  5516  200002                     	org	2097154
  5517  200002  0FFF               	dw	4095
  5518                           
  5519                           ;Config register IDLOC2 @ 0x200004
  5520                           ;	unspecified, using default values
  5521  200004                     	org	2097156
  5522  200004  0FFF               	dw	4095
  5523                           
  5524                           ;Config register IDLOC3 @ 0x200006
  5525                           ;	unspecified, using default values
  5526  200006                     	org	2097158
  5527  200006  0FFF               	dw	4095
  5528                           
  5529                           ;Config register IDLOC4 @ 0x200008
  5530                           ;	unspecified, using default values
  5531  200008                     	org	2097160
  5532  200008  0FFF               	dw	4095
  5533                           
  5534                           ;Config register IDLOC5 @ 0x20000A
  5535                           ;	unspecified, using default values
  5536  20000A                     	org	2097162
  5537  20000A  0FFF               	dw	4095
  5538                           
  5539                           ;Config register IDLOC6 @ 0x20000C
  5540                           ;	unspecified, using default values
  5541  20000C                     	org	2097164
  5542  20000C  0FFF               	dw	4095
  5543                           
  5544                           ;Config register IDLOC7 @ 0x20000E
  5545                           ;	unspecified, using default values
  5546  20000E                     	org	2097166
  5547  20000E  0FFF               	dw	4095
  5548                           
  5549                           	psect	config
  5550                           
  5551                           ;Config register CONFIG1L @ 0x300000
  5552                           ;	External Oscillator mode Selection bits
  5553                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  5554                           ;	Power-up default value for COSC bits
  5555                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  5556  300000                     	org	3145728
  5557  300000  AA                 	db	170
  5558                           
  5559                           ;Config register CONFIG1H @ 0x300001
  5560                           ;	unspecified, using default values
  5561                           ;	Clock Out Enable bit
  5562                           ;	CLKOUTEN = 0x1, unprogrammed default
  5563                           ;	Clock Switch Enable bit
  5564                           ;	CSWEN = 0x1, unprogrammed default
  5565                           ;	Fail-Safe Clock Monitor Enable bit
  5566                           ;	FCMEN = 0x1, unprogrammed default
  5567  300001                     	org	3145729
  5568  300001  FF                 	db	255
  5569                           
  5570                           ;Config register CONFIG2L @ 0x300002
  5571                           ;	unspecified, using default values
  5572                           ;	Master Clear Enable bit
  5573                           ;	MCLRE = 0x1, unprogrammed default
  5574                           ;	Power-up Timer Enable bit
  5575                           ;	PWRTE = 0x1, unprogrammed default
  5576                           ;	Low-power BOR enable bit
  5577                           ;	LPBOREN = 0x1, unprogrammed default
  5578                           ;	Brown-out Reset Enable bits
  5579                           ;	BOREN = 0x3, unprogrammed default
  5580  300002                     	org	3145730
  5581  300002  FF                 	db	255
  5582                           
  5583                           ;Config register CONFIG2H @ 0x300003
  5584                           ;	unspecified, using default values
  5585                           ;	Brown Out Reset Voltage selection bits
  5586                           ;	BORV = 0x3, unprogrammed default
  5587                           ;	ZCD Disable bit
  5588                           ;	ZCD = 0x1, unprogrammed default
  5589                           ;	PPSLOCK bit One-Way Set Enable bit
  5590                           ;	PPS1WAY = 0x1, unprogrammed default
  5591                           ;	Stack Full/Underflow Reset Enable bit
  5592                           ;	STVREN = 0x1, unprogrammed default
  5593                           ;	Debugger Enable bit
  5594                           ;	DEBUG = 0x1, unprogrammed default
  5595                           ;	Extended Instruction Set Enable bit
  5596                           ;	XINST = 0x1, unprogrammed default
  5597  300003                     	org	3145731
  5598  300003  FF                 	db	255
  5599                           
  5600                           ;Config register CONFIG3L @ 0x300004
  5601                           ;	WDT Period Select bits
  5602                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  5603                           ;	WDT operating mode
  5604                           ;	WDTE = OFF, WDT Disabled
  5605  300004                     	org	3145732
  5606  300004  9F                 	db	159
  5607                           
  5608                           ;Config register CONFIG3H @ 0x300005
  5609                           ;	unspecified, using default values
  5610                           ;	WDT Window Select bits
  5611                           ;	WDTCWS = 0x7, unprogrammed default
  5612                           ;	WDT input clock selector
  5613                           ;	WDTCCS = 0x7, unprogrammed default
  5614  300005                     	org	3145733
  5615  300005  FF                 	db	255
  5616                           
  5617                           ;Config register CONFIG4L @ 0x300006
  5618                           ;	unspecified, using default values
  5619                           ;	Write Protection Block 0
  5620                           ;	WRT0 = 0x1, unprogrammed default
  5621                           ;	Write Protection Block 1
  5622                           ;	WRT1 = 0x1, unprogrammed default
  5623                           ;	Write Protection Block 2
  5624                           ;	WRT2 = 0x1, unprogrammed default
  5625                           ;	Write Protection Block 3
  5626                           ;	WRT3 = 0x1, unprogrammed default
  5627                           ;	Write Protection Block 3
  5628                           ;	WRT4 = 0x1, unprogrammed default
  5629                           ;	Write Protection Block 3
  5630                           ;	WRT5 = 0x1, unprogrammed default
  5631                           ;	Write Protection Block 3
  5632                           ;	WRT6 = 0x1, unprogrammed default
  5633                           ;	Write Protection Block 3
  5634                           ;	WRT7 = 0x1, unprogrammed default
  5635  300006                     	org	3145734
  5636  300006  FF                 	db	255
  5637                           
  5638                           ;Config register CONFIG4H @ 0x300007
  5639                           ;	unspecified, using default values
  5640                           ;	Configuration Register Write Protection bit
  5641                           ;	WRTC = 0x1, unprogrammed default
  5642                           ;	Boot Block Write Protection bit
  5643                           ;	WRTB = 0x1, unprogrammed default
  5644                           ;	Data EEPROM Write Protection bit
  5645                           ;	WRTD = 0x1, unprogrammed default
  5646                           ;	Scanner Enable bit
  5647                           ;	SCANE = 0x1, unprogrammed default
  5648                           ;	Low Voltage Programming Enable bit
  5649                           ;	LVP = 0x1, unprogrammed default
  5650  300007                     	org	3145735
  5651  300007  FF                 	db	255
  5652                           
  5653                           ;Config register CONFIG5L @ 0x300008
  5654                           ;	unspecified, using default values
  5655                           ;	UserNVM Program Memory Code Protection bit
  5656                           ;	CP = 0x1, unprogrammed default
  5657                           ;	DataNVM Memory Code Protection bit
  5658                           ;	CPD = 0x1, unprogrammed default
  5659  300008                     	org	3145736
  5660  300008  FF                 	db	255
  5661                           
  5662                           ;Config register CONFIG5H @ 0x300009
  5663                           ;	unspecified, using default values
  5664  300009                     	org	3145737
  5665  300009  FF                 	db	255
  5666                           
  5667                           ;Config register CONFIG6L @ 0x30000A
  5668                           ;	unspecified, using default values
  5669                           ;	Table Read Protection Block 0
  5670                           ;	EBTR0 = 0x1, unprogrammed default
  5671                           ;	Table Read Protection Block 1
  5672                           ;	EBTR1 = 0x1, unprogrammed default
  5673                           ;	Table Read Protection Block 2
  5674                           ;	EBTR2 = 0x1, unprogrammed default
  5675                           ;	Table Read Protection Block 3
  5676                           ;	EBTR3 = 0x1, unprogrammed default
  5677                           ;	Table Read Protection Block 4
  5678                           ;	EBTR4 = 0x1, unprogrammed default
  5679                           ;	Table Read Protection Block 5
  5680                           ;	EBTR5 = 0x1, unprogrammed default
  5681                           ;	Table Read Protection Block 6
  5682                           ;	EBTR6 = 0x1, unprogrammed default
  5683                           ;	Table Read Protection Block 7
  5684                           ;	EBTR7 = 0x1, unprogrammed default
  5685  30000A                     	org	3145738
  5686  30000A  FF                 	db	255
  5687                           
  5688                           ;Config register CONFIG6H @ 0x30000B
  5689                           ;	unspecified, using default values
  5690                           ;	Boot Block Table Read Protection bit
  5691                           ;	EBTRB = 0x1, unprogrammed default
  5692  30000B                     	org	3145739
  5693  30000B  FF                 	db	255
  5694                           tosu	equ	0xFFF
  5695                           tosh	equ	0xFFE
  5696                           tosl	equ	0xFFD
  5697                           stkptr	equ	0xFFC
  5698                           pclatu	equ	0xFFB
  5699                           pclath	equ	0xFFA
  5700                           pcl	equ	0xFF9
  5701                           tblptru	equ	0xFF8
  5702                           tblptrh	equ	0xFF7
  5703                           tblptrl	equ	0xFF6
  5704                           tablat	equ	0xFF5
  5705                           prodh	equ	0xFF4
  5706                           prodl	equ	0xFF3
  5707                           indf0	equ	0xFEF
  5708                           postinc0	equ	0xFEE
  5709                           postdec0	equ	0xFED
  5710                           preinc0	equ	0xFEC
  5711                           plusw0	equ	0xFEB
  5712                           fsr0h	equ	0xFEA
  5713                           fsr0l	equ	0xFE9
  5714                           wreg	equ	0xFE8
  5715                           indf1	equ	0xFE7
  5716                           postinc1	equ	0xFE6
  5717                           postdec1	equ	0xFE5
  5718                           preinc1	equ	0xFE4
  5719                           plusw1	equ	0xFE3
  5720                           fsr1h	equ	0xFE2
  5721                           fsr1l	equ	0xFE1
  5722                           bsr	equ	0xFE0
  5723                           indf2	equ	0xFDF
  5724                           postinc2	equ	0xFDE
  5725                           postdec2	equ	0xFDD
  5726                           preinc2	equ	0xFDC
  5727                           plusw2	equ	0xFDB
  5728                           fsr2h	equ	0xFDA
  5729                           fsr2l	equ	0xFD9
  5730                           status	equ	0xFD8

Data Sizes:
    Strings     15
    Constant    0
    Data        1
    BSS         124
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     91      95
    BANK0           160    153     160
    BANK1           256      0     114
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp...source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp...buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_3(CODE[5]), STR_2(CODE[6]), STR_1(CODE[15]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 15
		 -> STR_3(CODE[5]), STR_2(CODE[6]), STR_1(CODE[15]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_3(CODE[5]), STR_2(CODE[6]), STR_1(CODE[15]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 100
		 -> voltage_display@buf(COMRAM[80]), color_predict@buf(BANK0[100]), color_display@buf(BANK0[100]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S2040$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S2040$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    motorR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhlll[1]), PWM6DCH(BITBIGSFRhhhlll[1]), 

    motorL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhlll[1]), PWM6DCH(BITBIGSFRhhhlll[1]), 

    sendStringSerial4@string	PTR unsigned char  size(2) Largest target is 100
		 -> voltage_display@buf(COMRAM[80]), color_predict@buf(BANK0[100]), color_display@buf(BANK0[100]), 

    voltage_display@m.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    voltage_display@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhlll[1]), PWM6DCH(BITBIGSFRhhhlll[1]), 

    voltage_read@m.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    voltage_read@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhlll[1]), PWM6DCH(BITBIGSFRhhhlll[1]), 

    turn180@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    turn180@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhlll[1]), PWM6DCH(BITBIGSFRhhhlll[1]), 

    turn180@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    turn180@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhlll[1]), PWM6DCH(BITBIGSFRhhhlll[1]), 

    fullSpeedAhead@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    fullSpeedAhead@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhlll[1]), PWM6DCH(BITBIGSFRhhhlll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(BANK0[10]), 

    fullSpeedAhead@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    fullSpeedAhead@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhlll[1]), PWM6DCH(BITBIGSFRhhhlll[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(BANK0[10]), 

    turnRight@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhlll[1]), PWM6DCH(BITBIGSFRhhhlll[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(BANK0[10]), 

    turnRight@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhlll[1]), PWM6DCH(BITBIGSFRhhhlll[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(BANK0[10]), 

    turnLeft@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhlll[1]), PWM6DCH(BITBIGSFRhhhlll[1]), 

    turnLeft@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhlll[1]), PWM6DCH(BITBIGSFRhhhlll[1]), 

    stop@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhlll[1]), PWM6DCH(BITBIGSFRhhhlll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(BANK0[10]), 

    stop@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhlll[1]), PWM6DCH(BITBIGSFRhhhlll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(BANK0[10]), 

    setMotorPWM@m.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhlll[1]), PWM6DCH(BITBIGSFRhhhlll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(BANK0[10]), main@motorL(BANK0[10]), 

    initDCmotors_parameter@motorR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    initDCmotors_parameter@motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhlll[1]), PWM6DCH(BITBIGSFRhhhlll[1]), 

    initDCmotors_parameter@motorR	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(BANK0[10]), 

    S199DC_motor$dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    initDCmotors_parameter@motorL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    S199DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhlll[1]), PWM6DCH(BITBIGSFRhhhlll[1]), 

    initDCmotors_parameter@motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhlll[1]), PWM6DCH(BITBIGSFRhhhlll[1]), 

    initDCmotors_parameter@motorL	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(BANK0[10]), 

    movement@mR	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(BANK0[10]), 

    movement@mL	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(BANK0[10]), 

    detect_color_C@m	PTR struct color_rgb size(2) Largest target is 8
		 -> main@rgb(BANK0[8]), 

    color_display@m	PTR struct color_rgb size(2) Largest target is 8
		 -> main@rgb(BANK0[8]), 

    LED_G@m	PTR struct color_rgb size(2) Largest target is 8
		 -> main@rgb(BANK0[8]), 

    get_color@m	PTR struct color_rgb size(2) Largest target is 8
		 -> main@rgb(BANK0[8]), 


Critical Paths under _main in COMRAM

    _main->_color_display
    _stop->_setMotorPWM
    _movement->_turnRight
    _turnRight->_setMotorPWM
    _fullSpeedAhead->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul
    _detect_color_C->___wmul
    ___wmul->___lwdiv
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _sendStringSerial4->_sendCharSerial4
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _LED_G->_get_color
    _get_color->_color_read_Blue
    _get_color->_color_read_Clear
    _get_color->_color_read_Green
    _get_color->_color_read_Red
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle

Critical Paths under _main in BANK0

    _main->_color_display
    _color_display->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                31    31      0   19625
                                             89 COMRAM     2     2      0
                                            125 BANK0     28    28      0
                  _I2C_2_Master_Init
                              _LED_G
                   _color_click_init
                      _color_display
                     _detect_color_C
                     _fullSpeedAhead
                    _initDCmotorsPWM
             _initDCmotors_parameter
                         _initUSART4
                           _movement
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 5     1      4    2657
                                             32 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _movement                                             7     3      4    2853
                                             37 COMRAM     7     3      4
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _turnRight                                            5     1      4    2635
                                             32 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotors_parameter                               4     0      4     416
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      76
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _fullSpeedAhead                                       5     1      4    2701
                                             32 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                         11     9      2    2329
                                             21 COMRAM    11     9      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     496
                                             13 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _detect_color_C                                       9     7      2    2028
                                             13 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
                            _compare
 ---------------------------------------------------------------------------------
 (2) _compare                                              7     1      6     568
                                              0 COMRAM     7     1      6
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     741
                                              7 COMRAM     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     456
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _color_display                                      102   100      2    7269
                                             87 COMRAM     2     0      2
                                             25 BANK0    100   100      0
                  _sendStringSerial4
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             27    15     12    6760
                                              0 BANK0     25    13     12
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             8     2      6    6105
                                             79 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           42    36      6    5751
                                             63 COMRAM    16    10      6
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _dtoa                                                36    26     10    4358
                                             27 COMRAM    36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (6) _pad                                                 11     5      6    2709
                                             16 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (7) _strlen                                               4     2      2     166
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (7) _fputs                                                7     3      4    1235
                                              9 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                                9     5      4     834
                                              0 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     142
                                             18 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (6) ___aomod                                             18     2     16     448
                                              0 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (6) ___aodiv                                             26    10     16     452
                                              0 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (2) _sendStringSerial4                                    2     0      2     295
                                              1 COMRAM     2     0      2
                    _sendCharSerial4
 ---------------------------------------------------------------------------------
 (3) _sendCharSerial4                                      1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     294
                                              4 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     294
                                              2 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LED_G                                                4     2      2     942
                                             13 COMRAM     4     2      2
                          _get_color
 ---------------------------------------------------------------------------------
 (2) _get_color                                            2     0      2     844
                                             11 COMRAM     2     0      2
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (3) _color_read_Red                                       7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Green                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Clear                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Blue                                      7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      22
                                              1 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Read                                    3     3      0      45
                                              1 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_2_Master_Init
   _LED_G
     _get_color
       _color_read_Blue
         _I2C_2_Master_Read
           _I2C_2_Master_Idle
         _I2C_2_Master_RepStart
           _I2C_2_Master_Idle
         _I2C_2_Master_Start
           _I2C_2_Master_Idle
         _I2C_2_Master_Stop
           _I2C_2_Master_Idle
         _I2C_2_Master_Write
           _I2C_2_Master_Idle
       _color_read_Clear
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Green
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Red
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _color_display
     _sendStringSerial4
       _sendCharSerial4
     _sprintf
       _vfprintf
         _vfpfcnvrt
           _dtoa
             ___aodiv
             ___aomod
             _abs
               ___aomod (ARG)
             _pad
               _fputc
                 _putch
               _fputs
                 _fputc
               _strlen
           _fputc
   _detect_color_C
     ___lwdiv
     ___wmul
       ___lwdiv (ARG)
     _compare
   _fullSpeedAhead
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _initDCmotorsPWM
   _initDCmotors_parameter
   _initUSART4
   _movement
     _turnRight
       _setMotorPWM
   _stop
     _setMotorPWM

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      58        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      72       7       44.5%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     99      A0       5      100.0%
BITBIGSFRllhhl      6E      0       0      43        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5B      5F       1      100.0%
BITBIGSFRhhhh       40      0       0      32        0.0%
BITBIGSFRlllllh     32      0       0      48        0.0%
BITBIGSFRlllllh     2A      0       0      52        0.0%
BITBIGSFRllllll     26      0       0      56        0.0%
BITBIGSFRllllhh     20      0       0      46        0.0%
BITBIGSFRhhhlll     18      0       0      35        0.0%
BITBIGSFRhhhlh      17      0       0      33        0.0%
BITBIGSFRllhhhh     14      0       0      40        0.0%
BITBIGSFRlllllh      F      0       0      54        0.0%
BITBIGSFRllllhl      C      0       0      47        0.0%
BITBIGSFRlllllh      9      0       0      53        0.0%
BITBIGSFRllhlll      8      0       0      44        0.0%
BITBIGSFRllhhhl      6      0       0      42        0.0%
BITBIGSFRllllll      6      0       0      55        0.0%
BITBIGSFRlllllh      6      0       0      51        0.0%
BITBIGSFRlllllh      5      0       0      50        0.0%
BITBIGSFRllhhhh      3      0       0      41        0.0%
BITBIGSFRlllllh      3      0       0      49        0.0%
BITBIGSFRhlh         1      0       0      36        0.0%
BITBIGSFRhhhllh      1      0       0      34        0.0%
BITBIGSFRlhh         1      0       0      38        0.0%
BITBIGSFRlllh        1      0       0      45        0.0%
BITBIGSFRlhl         1      0       0      39        0.0%
BITBIGSFRhll         1      0       0      37        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     171      57        0.0%
DATA                 0      0     171       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.35 build 20211206165544 
Symbol Table                                                                                   Mon Mar 07 09:45:41 2022

                _color_read_Red 1FE8                 _color_read_Blue 20D8                              l51 2036  
                            l60 20D6                              l45 2352                              l54 2126  
                            l63 1F94                              l48 2446                              l57 2086  
                            l75 23AE                              l85 188A                              l78 1ED4  
                            l88 22E6                              l96 2270                              l89 22E8  
                  ___awdiv@sign 0013             ___wmul@multiplicand 000A                _color_read_Clear 2088  
              _color_read_Green 2038                             l123 23D8                             l203 21EE  
                           l132 249C                             l141 2488                             l213 12C8  
                           l221 1D00                             l126 23DA                             l302 247C  
                           l206 195C                             l135 24A6                             l144 2230  
                           l129 2400                             l241 1C5C                             l233 1D7C  
                           l138 2492                             l308 2382                             l290 2464  
                           l436 2426                             l550 1604                             l299 2468  
                           l563 1768                             l667 1BB0                             l934 1E64  
                           l927 1E5C                             u900 19E0                             u901 19DC  
                           u910 216A                             u911 2166                             u920 2312  
                           u921 230E                             u930 1490                             u931 148C  
                           u940 14C2                             u941 14BE                             u870 1970  
                           u951 14EC                             u871 196C                             u960 1510  
                           u880 1982                             u961 150C                             u881 197E  
                           u970 153A                             u890 19AA                             u971 1536  
                           u891 19A6                             u980 157A                             u981 1576  
                           u990 15C4                             u991 15C0                             _abs 2272  
                           _pad 1A28                             wreg 000FE8                            l2000 14B4  
                          l2010 1510                            l2002 14C2                            l1114 1FE6  
                          ?_abs 0013                            l2100 23EA                            l2020 157A  
                          l2012 1518                            l2004 14E2                            l1205 1A26  
                          l1213 216A                            l1141 1A6E                            l2030 15C4  
                          l2022 159A                            l2014 152C                            l2006 14E6  
                          l1222 231E                            l2110 0E8A                            l2102 0E12  
                          l2032 15E4                            l2024 159C                            l2016 153A  
                          l2008 14F2                            l2040 1618                            l1216 24A8  
                          l1144 1AB0                            l2120 0EE2                            l1152 0EB2  
                          l2112 0E8C                            l2104 0E32                            l2200 1AEE  
                          l2026 15AE                            l2018 154C                            l2050 1688  
                          l2042 1638                            l1146 1AEC                            l2130 0F82  
                          l2122 0EE8                            l1154 0EBA                            l2114 0EA6  
                          l2106 0E5A                            l2210 1B1A                            l2202 1AF2  
                          l2300 207E                            l2028 15B4                            l2060 1700  
                          l2052 1690                            l2044 163C                            l2036 1606  
                          l1172 10F4                            l2140 102A                            l2132 0F88  
                          l2124 0EF0                            l2116 0EC2                            l2108 0E7A  
                          l2220 1B48                            l2212 1B22                            l2204 1B00  
                          l2062 1712                            l2054 16A4                            l2046 164A  
                          l2038 160A                            l1190 22A8                            l2150 1090  
                          l2142 1044                            l2134 0F8E                            l2126 0EFA  
                          l2118 0ED4                            l2230 1B82                            l2222 1B50  
                          l2214 1B26                            l2206 1B08                            l2310 10F6  
                          l2304 2088                            l2056 16B2                            l2064 1718  
                          l2048 166A                            l2080 1A66                            l2072 1A28  
                          l2152 1096                            l2160 10CC                            l2144 105E  
                          l2128 0F00                            l2136 0FF2                            l2400 1E14  
                          l2240 1BA8                            l2232 1B84                            l2224 1B5E  
                          l2216 1B2E                            l2208 1B0C                            l2320 11F6  
                          l2312 1112                            l1193 22B0                            l1185 1F2E  
                          l2170 2484                            l2306 20CE                            l2066 1728  
                          l2058 16E0                            l2090 1AD4                            l2082 1A7A  
                          l2074 1A38                            l2154 10A8                            l2138 100C  
                          l2146 106E                            l2250 130E                            l1186 1F36  
                          l2330 1EDE                            l2410 1E4E                            l2402 1E1C  
                          l2234 1B8A                            l2226 1B64                            l2218 1B40  
                          l2322 1260                            l2314 1174                            l1179 147C  
                          l2180 21F2                            l2164 2494                            l2172 248A  
                          l2340 23C0                            l2420 232E                            l2324 2468  
                          l2068 1748                            l2084 1A8E                            l2076 1A4C  
                          l2156 10B4                            l2148 1080                            l2252 1312  
                          l2244 12CA                            l2332 1EEC                            l2412 1E50  
                          l2404 1E2A                            l2228 1B7A                            l2236 1B90  
                          l2316 11BA                            l2500 1CE8                            l2190 222E  
                          l2182 21F6                            l2166 2498                            l2174 248E  
                          l2350 1F38                            l2430 23A2                            l2342 23C2  
                          l2422 233E                            l2326 2478                            l2094 2272  
                          l2086 1A92                            l2078 1A5A                            l2158 10BC  
                          l2262 13DA                            l2254 1336                            l2246 12EE  
                          l2334 1F12                            l2414 1E56                            l2406 1E30  
                          l2238 1BA0                            l2318 11DA                            l2510 1C06  
                          l2502 1BB2                            l2184 21FE                            l2176 249E  
                          l2168 2480                            l2344 23C4                            l2336 23B0  
                          l2424 2348                            l2416 2320                            l2096 228C  
                          l2088 1AC0                            l2280 146A                            l2264 13FE  
                          l2272 142C                            l2256 135A                            l2248 12FC  
                          l2328 1ED6                            l2360 1FD4                            l2352 1F96  
                          l2432 1E66                            l2408 1E46                            l2440 17AE  
                          l2512 1C12                            l2504 1BD2                            l2520 2448  
                          l2098 23DA                            l2186 2206                            l2178 24A2  
                          l2426 2384                            l2346 23C6                            l2338 23BA  
                          l2418 2324                            l2370 236A                            l2274 143A  
                          l2266 140C                            l2258 13A2                            l2354 1FA8  
                          l2434 1EC8                            l2194 2402                            l2442 17F2  
                          l2514 1C1E                            l2506 1BDE                            l2530 2462  
                          l2522 2452                            l2610 1D7E                            l2188 222C  
                          l2292 20D8                            l2428 238A                            l2348 242A  
                          l2364 2354                            l2268 1420                            l2356 1FB0  
                          l2196 241E                            l2372 22B2                            l2444 1832  
                          l2436 176A                            l2508 1BEE                            l2516 1C2C  
                          l2460 21BE                            l2524 2454                            l2452 2234  
                          l2620 1DAA                            l2612 1D82                            l2294 211E  
                          l2286 1FE8                            l2366 2358                            l2278 1446  
                          l2358 1FB8                            l2374 22B6                            l2446 185E  
                          l2438 176A                            l2518 1C44                            l2462 21D6  
                          l2470 1898                            l2526 245E                            l2390 1D56  
                          l2382 1D02                            l2454 2244                            l2630 1DB4  
                          l2622 1DAC                            l2614 1D86                            l2288 202E  
                          l2368 2366                            l2376 22CC                            l2448 188A  
                          l2464 21EA                            l2480 18F4                            l2472 18A8  
                          l2528 2460                            l2384 1D26                            l2392 1D64  
                          l2456 2258                            l2640 1DC6                            l2632 1DB6  
                          l2624 1DAE                            l2616 1D92                            l2298 2038  
                          l2394 1DF2                            l2378 22E2                            l2466 21EC  
                          l2458 21AE                            l2474 18BC                            l2386 1D3E  
                          l2490 1C9E                            l2482 1C5E                            l2642 1DD2  
                          l2634 1DB8                            l2626 1DB0                            l2618 1D96  
                          l2396 1DFA                            l2476 18D0                            l2468 188C  
                          l2388 1D4A                            l2492 1CAA                            l2484 1C62  
                          l2636 1DBA                            l2628 1DB2                            l2398 1E0C  
                          l2478 18E0                            l2494 1CB6                            l2486 1C7A  
                          l2638 1DBA                            l1960 195E                            l2496 1CC2  
                          l2488 1C86                            l1970 19E0                            l1962 1970  
                          l2498 1CD0                            l1964 1982                            l1980 214A  
                          l1966 198C                            l1974 2128                            l1982 22EA  
                          ?_pad 0011                            l1992 147E                            l1968 19AA  
                          l1976 2134                            l1984 22F6                            l1994 1482  
                          l1978 2146                            l1986 22FA                            l1996 1490  
                          l1988 2312                            l1998 14B0                            STR_1 0E01  
                          u1000 1618                            u1001 1614                            u1010 164A  
                          u1011 1646                            u1020 1688                            u1100 228C  
                          u1021 1684                            u1101 2288                            u1110 23EA  
                          u1030 16B2                            u1111 23E6                            u1031 16AE  
                          u1120 2400                            u1040 16E0                            u1200 100C  
                          u1121 23FC                            u1041 16DC                            u1201 1008  
                          u1050 1728                            u1210 102A                            u1130 0E42  
                          u1051 1724                            u1211 1026                            u1131 0E3C  
                          u1060 1A38                            u1220 1044                            u1140 0E44  
                          u1300 1B00                            u1061 1A34                            u1221 1040  
                          u1301 1AFC                            u1070 1A5A                            u1230 105E  
                          u1150 0E5A                            u1310 1B1A                            u1071 1A56  
                          u1231 105A                            u1151 0E56                            u1311 1B16  
                          u1080 1AB0                            u1240 106E                            u1160 0E8A  
                          u1320 1B40                            u1400 1112                            u1081 1AAC  
                          u1241 106A                            u1161 0E86                            u1321 1B3C  
                          u1401 110E                            u1090 1AC0                            u1250 1080  
                          u1170 0EA6                            u1330 1B5E                            u1410 11F6  
                          u1091 1ABC                            u1251 107C                            u1171 0EA2  
                          u1331 1B5A                            u1411 11F2                            u1260 1090  
                          u1180 0ED4                            u1500 1E0C                            u1340 1B7A  
                          u1261 108C                            u1181 0ED0                            u1501 1E08  
                          u1341 1B76                            u1270 10A8                            u1190 0EE2  
                          u1510 1E2A                            u1350 1BA0                            u1271 10A4  
                          u1191 0EDE                            u1511 1E26                            u1351 1B9C  
                          u1280 221A                            u1440 2478                            u1360 12EE  
                          u1520 1E46                            u1424 1250                            u1600 1C44  
                  _BAUD4CONbits 000EE9                            u1281 2212                            u1441 2474  
                          u1361 12EA                            u1521 1E42                            u1425 124C  
                          u1601 1C40                            _LATE 000F7D                            u1370 1336  
                          u1450 1F2E                            u1530 185E                            u1434 12BA  
                          u1610 1C5C                            u1371 1332                            u1451 1F2A  
                          u1531 185A                            u1435 12B6                            u1611 1C58  
                          _LATG 000F7F                            u1460 2382                            u1380 135A  
                          u1540 188A                            u1461 237E                            u1381 1356  
                          u1541 1886                            u1390 13FE                            u1470 22CC  
                          u1550 2244                            u1391 13FA                            u1471 22C8  
                          u1551 2240                            u1480 22E2                            u1560 1C7A  
                          u1481 22DE                            u1561 1C76                            u1298 221C  
                          u1490 1D7C                            u1570 1C9E                            _T2PR 000FBC  
                          u1491 1D78                            u1707 2262                            u1571 1C9A  
                          u1580 1CE8                            u1717 1D5C                            u1581 1CE4  
                          u1590 1D00                            u1727 1C24                            u1591 1CFC  
                          u1737 2334                            u1747 2394                            u1687 1DDC  
                          u1697 1CC8                            abs@a 0013                            _dbuf 0152  
                          _main 1D7E                            _dtoa 0E12                            _prec 00FB  
                          _nout 0150                            pad@i 0018                            pad@p 0015  
                          fsr1h 000FE2                            fsr2h 000FDA                            indf1 000FE7  
                          indf2 000FDF                            fsr1l 000FE1                            pad@w 001A  
                          fsr2l 000FD9                            _stop 1C5E                            prodh 000FF4  
                          prodl 000FF3                            start 0000                  ?_color_display 0058  
        __end_of_color_read_Red 2038                    ___param_bank 000000                 detect_color_C@m 000E  
                         ??_abs 0015                           ??_pad 0017                 __end_of___aodiv 1606  
                         ?_main 0001                           ?_dtoa 001C                 __end_of___aomod 176A  
                         _ADPCH 000F5F                 __end_of___awdiv 1BB2                           ?_stop 0021  
               ___awdiv@divisor 0010                 __end_of___lwdiv 1E66                           _LED_G 2384  
               ___awdiv@counter 0012                    vfpfcnvrt@fmt 0042         __end_of_sendCharSerial4 247E  
    __end_of_I2C_2_Master_Start 249E      __end_of_I2C_2_Master_Write 248A                 __end_of_compare 22EA  
                  compare@lower 0005                           _flags 00FD                           _color 00FF  
                  compare@upper 0003                           _fputc 195E                           _fputs 2128  
                         pad@fp 0011                           _width 00F9                           _putch 24A8  
                         dtoa@d 001E                           dtoa@i 003E                           dtoa@n 0036  
                         dtoa@p 0030                           dtoa@s 0034                           dtoa@w 0032  
                         tablat 000FF5                           status 000FD8                 __end_of_sprintf 1FE8  
              color_display@buf 0079         __end_of_color_read_Blue 2128           _I2C_2_Master_RepStart 249E  
               ?_color_read_Red 0005                 __initialization 216C                    __end_of_main 1DF2  
                  __end_of_dtoa 10F6                    __end_of_stop 1D02                          ??_main 005A  
                        ??_dtoa 0026                          ??_stop 0025                   __activetblptr 000001  
                        ?_LED_G 000E                          LED_G@m 000E          _initDCmotors_parameter 188C  
                  ?_setMotorPWM 0016                          ?_fputc 0001                          ?_fputs 000A  
                        _ADRESH 000F64                ___awdiv@dividend 000E                          ?_putch 0001  
                        _RC0PPS 000E62                          _RC4REG 000EE3                          _RE2PPS 000E74  
                        _RD5PPS 000E6F                          _RC7PPS 000E69                          _RD6PPS 000E70  
      __end_of_color_click_init 2354                          _RX4PPS 000E15                          _TX4REG 000EE4  
               ??_color_display 005A                    vfprintf@cfmt 0056                       ??___aodiv 0011  
                     ??___aomod 0011                          ___wmul 2402                       ??___awdiv 0012  
                     ??___lwdiv 0005                   compare@result 0007                          clear_0 2184  
              ___awdiv@quotient 0014                          isa$std 000001                          pad@buf 0013  
                        dtoa@fp 001C                          _strlen 22EA                       ??_compare 0007  
                        fputc@c 0001                          fputs@c 000E                          fputs@i 000F  
                        fputs@s 000A                __end_of_movement 2272                    __mediumconst 0000  
                        tblptrh 000FF7                          tblptrl 000FF6                          tblptru 000FF8  
              ?_sendCharSerial4 0001                          putch@c 0001                __end_of_vfprintf 1F38  
                        stop@mL 0021                          stop@mR 0023               ??_initDCmotorsPWM 0003  
                     ??_sprintf 0058                      __accesstop 0060         __end_of__initialization 21A0  
      __end_of_color_read_Clear 20D8        __end_of_color_read_Green 2088          ?_I2C_2_Master_RepStart 0001  
  initDCmotors_parameter@motorL 0001    initDCmotors_parameter@motorR 0003                   ___rparam_used 000001  
                 __end_of_LED_G 23B0                ?_color_read_Blue 0005                  __pcstackCOMRAM 0001  
                  __pidataBANK0 24AA                   __end_of_fputc 1A28                   __end_of_fputs 216C  
                 __end_of_putch 24AA                         ??_LED_G 0010                         ??_fputc 0005  
                       ??_fputs 000E                         ??_putch 0001                      __pbssBANK0 00F9  
                    __pbssBANK1 0100               _color_writetoaddr 2428                    _T2CLKCONbits 000FBF  
            ?_color_writetoaddr 0003                         ?___wmul 0008             ??_color_writetoaddr 0004  
                       ?_strlen 0001                         _SP4BRGH 000EE6                         _SP4BRGL 000EE5  
                       _PWM6DCH 000FA3                         _PWM7DCH 000FA0                         _SSP2ADD 000ED6  
                       _SSP2BUF 000ED5          color_writetoaddr@value 0003                ??_color_read_Red 0007  
     __end_of_color_writetoaddr 2448                       _ADREFbits 000F58              _I2C_2_Master_Start 2494  
                    _initUSART4 2448              _I2C_2_Master_Write 247E                         __Hparam 0000  
                       __Lparam 0000               color_read_Red@tmp 000A                       ?_movement 0026  
             __end_of_get_color 1F96         sendStringSerial4@string 0002                         ___aodiv 147E  
                       ___aomod 1606                         ___awdiv 1AEE             ?_I2C_2_Master_Start 0001  
                       ___lwdiv 1DF2             ?_I2C_2_Master_Write 0001                       ?_vfprintf 0050  
                  __psmallconst 0E00                         __pcinit 216C                         __ramtop 0E00  
                       __ptext0 1D7E                         __ptext1 1C5E                         __ptext2 2232  
                       __ptext3 1D02                         __ptext4 2448                         __ptext5 188C  
                       __ptext6 21AE                         __ptext7 1BB2                         __ptext8 10F6  
                       __ptext9 1AEE                         _compare 22B2         ?_initDCmotors_parameter 0001  
                     _T2CONbits 000FBD                       _T2HLTbits 000FBE                   _RxBufWriteCnt 005F  
                       _sprintf 1F96                         main@rgb 00DD            ??_I2C_2_Master_Start 0002  
          ??_I2C_2_Master_Write 0002            end_of_initialization 21A0              setMotorPWM@PWMduty 001F  
                       fputc@fp 0003                         fputs@fp 000C               ?_color_click_init 0001  
            ??_color_click_init 0005                      ??_movement 002A               __end_of_vfpfcnvrt 147E  
                       postdec1 000FE5                         postdec2 000FDD                         postinc0 000FEE  
                       postinc1 000FE6                         postinc2 000FDE                      ??_vfprintf 0056  
                       strlen@a 0003                         strlen@s 0001                 _initDCmotorsPWM 21AE  
__end_of_initDCmotors_parameter 195E               __end_of_turnRight 1D7E                  _detect_color_C 176A  
                     _TRISAbits 000F81                       _TRISCbits 000F83                       _TRISDbits 000F84  
                     _TRISEbits 000F85                       _TRISFbits 000F86                       _TRISGbits 000F87  
              fullSpeedAhead@mL 0021                fullSpeedAhead@mR 0023        color_writetoaddr@address 0004  
                    get_color@m 000C         ??_I2C_2_Master_RepStart 0002               ?_color_read_Clear 0005  
                  _EUSART4RXbuf 013C                    _EUSART4TXbuf 0100               ?_color_read_Green 0005  
                   ?_initUSART4 0001       sendCharSerial4@charToSend 0001           __end_of_color_display 1ED6  
                    main@motorL 00EF                      main@motorR 00E5              ??_color_read_Clear 0007  
                color_display@m 0058              ??_color_read_Green 0007                  _fullSpeedAhead 1BB2  
                   vfpfcnvrt@ap 0044                     vfpfcnvrt@fp 0040                     vfpfcnvrt@ll 0048  
                __end_of___wmul 2428          __end_of_detect_color_C 188C                  __end_of_strlen 2320  
           color_read_Clear@tmp 000A             start_initialization 216C                     __end_of_abs 22B2  
                   __end_of_pad 1AEE                   _TxBufWriteCnt 005D             color_read_Green@tmp 000A  
       __end_of_initDCmotorsPWM 21F0                     vfprintf@fmt 0052          __end_of_fullSpeedAhead 1C5E  
                      ??___wmul 000C                     __pdataBANK0 00FF                        ??_strlen 0003  
               ?_detect_color_C 000E                     __pbssCOMRAM 005C                   __pcstackBANK0 0060  
              ___aodiv@dividend 0001                ___lwdiv@dividend 0001                       _dtoa$2122 002E  
               ?_fullSpeedAhead 0021                        ?___aodiv 0001                        ?___aomod 0001  
                      ?___awdiv 000E                ___aodiv@quotient 0013                        ?___lwdiv 0001  
                     _get_color 1F38            I2C_2_Master_Read@ack 0003            I2C_2_Master_Read@tmp 0004  
                      ?_compare 0001                     __smallconst 0E00               _I2C_2_Master_Idle 23DA  
             _I2C_2_Master_Init 23B0               _I2C_2_Master_Read 21F0               _I2C_2_Master_Stop 248A  
                  _RxBufReadCnt 005E              ?_I2C_2_Master_Idle 0001              ?_I2C_2_Master_Init 0001  
            ?_I2C_2_Master_Read 0001                   ??_setMotorPWM 0018              ?_I2C_2_Master_Stop 0001  
              ___lwdiv@quotient 0005        initDCmotorsPWM@PWMperiod 0001                        ?_sprintf 0060  
             _sendStringSerial4 2354             ??_I2C_2_Master_Idle 0001             ??_I2C_2_Master_Init 0001  
           ??_I2C_2_Master_Read 0002                  ___wmul@product 000C                        _LATAbits 000F79  
           ??_I2C_2_Master_Stop 0002                        _LATCbits 000F7B                      movement@mL 0026  
                      _LATEbits 000F7D                      movement@mR 0028                        _LATFbits 000F7E  
                      _LATGbits 000F7F              ?_sendStringSerial4 0002                        _PIE4bits 000E2D  
                   turnRight@mL 0021                     turnRight@mR 0023                        _PIR4bits 000E37  
              ?_initDCmotorsPWM 0001               ??_sendCharSerial4 0001                        _SSP2CON2 000EDA  
           ??_sendStringSerial4 0004                        _SSP2STAT 000ED8                       _vfpfcnvrt 12CA  
                    ?_get_color 000C                      _ADCON0bits 000F60       __end_of_I2C_2_Master_Idle 2402  
     __end_of_I2C_2_Master_Init 23DA       __end_of_I2C_2_Master_Read 2232               ___wmul@multiplier 0008  
     __end_of_I2C_2_Master_Stop 2494                    setMotorPWM@m 0016     I2C_2_Master_Write@data_byte 0002  
             ??_color_read_Blue 0007                    _TxBufReadCnt 005C                       _turnRight 1D02  
                 movement@color 002C       __end_of_sendStringSerial4 2384   __end_of_I2C_2_Master_RepStart 24A8  
            color_read_Blue@tmp 000A             __end_of_setMotorPWM 12CA                    ??_initUSART4 0001  
                      __Hrparam 0000                      vfprintf@ap 0054                        __Lrparam 0000  
                    vfprintf@fp 0050                    __Lsmallconst 0E00            compare@value2compare 0001  
                    ?_vfpfcnvrt 0040          detect_color_C@RB_ratio 0012                 ___aodiv@divisor 0009  
               ___aodiv@counter 0011          detect_color_C@RG_ratio 0010                      _ANSELDbits 000EA7  
                    _ANSELFbits 000EB4                      sprintf@fmt 0062                 ___lwdiv@divisor 0003  
            __end_of_initUSART4 2466                 ___lwdiv@counter 0007                      ?_turnRight 0021  
                      __ptext10 176A                        __ptext11 22B2                        __ptext20 22EA  
                      __ptext12 2402                        __ptext21 2128                        __ptext13 1DF2  
                      __ptext30 2428                        __ptext22 195E                        __ptext14 1E66  
                      __ptext31 23B0                        __ptext23 24A8                        __ptext15 1F96  
                      __ptext40 2494                        __ptext32 2384                        __ptext24 2272  
                      __ptext16 1ED6                        __ptext41 249E                        __ptext33 1F38  
                      __ptext25 1606                        __ptext17 12CA                        __ptext42 21F0  
                      __ptext34 1FE8                        __ptext26 147E                        __ptext18 0E12  
                      __ptext43 23DA                        __ptext35 2038                        __ptext27 2354  
                      __ptext19 1A28                        __ptext36 2088                        __ptext28 2466  
                      __ptext37 20D8                        __ptext29 2320                        __ptext38 247E  
                      __ptext39 248A                    _SSP2CON1bits 000ED9                    _SSP2CON2bits 000EDA  
                      _movement 2232                        isa$xinst 000000                      _RC4STAbits 000EE7  
              ??_detect_color_C 0010                        _vfprintf 1ED6                     ??_get_color 000E  
              ___aomod@dividend 0001                     _setMotorPWM 10F6                     _PWM6CONbits 000FA4  
                   _PWM7CONbits 000FA1                       sprintf@ap 006C                ??_fullSpeedAhead 0025  
      ??_initDCmotors_parameter 0005                 ___aomod@divisor 0009                     ??_vfpfcnvrt 0046  
               ___aomod@counter 0011                _color_click_init 2320                        sprintf@f 006E  
                      sprintf@s 0060                      _SSP2DATPPS 000E1D                      _SSP2CLKPPS 000E1C  
                   ??_turnRight 0025                      _TX4STAbits 000EE8                    ___aodiv@sign 0012  
               _sendCharSerial4 2466                    ___aomod@sign 0012                   _color_display 1E66  
