

Microchip MPLAB XC8 Assembler V2.35 build 20211206165544 
                                                                                               Wed Mar 09 01:25:27 2022

Microchip MPLAB XC8 C Compiler v2.35 (Free license) build 20211206165544 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    32                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    33                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    34                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    35  0000                     
    36                           ; Version 2.35
    37                           ; Generated 05/05/2021 GMT
    38                           ; 
    39                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    40                           ; All rights reserved.
    41                           ; 
    42                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    43                           ; 
    44                           ; Redistribution and use in source and binary forms, with or without modification, are
    45                           ; permitted provided that the following conditions are met:
    46                           ; 
    47                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    48                           ;        conditions and the following disclaimer.
    49                           ; 
    50                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    51                           ;        of conditions and the following disclaimer in the documentation and/or other
    52                           ;        materials provided with the distribution. Publication is not required when
    53                           ;        this file is used in an embedded application.
    54                           ; 
    55                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    56                           ;        software without specific prior written permission.
    57                           ; 
    58                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    59                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    60                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    61                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    62                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    63                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    64                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    65                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    66                           ; 
    67                           ; 
    68                           ; Code-generator required, PIC18F67K40 Definitions
    69                           ; 
    70                           ; SFR Addresses
    71  0000                     
    72                           	psect	idataCOMRAM
    73  00163A                     __pidataCOMRAM:
    74                           	callstack 0
    75                           
    76                           ;initializer for _color
    77  00163A  01                 	db	1
    78                           
    79                           ;initializer for _SENSITIVITY
    80  00163B  07                 	db	7
    81  0000                     _TRISFbits	set	3974
    82  0000                     _TX4REG	set	3812
    83  0000                     _RC4STAbits	set	3815
    84  0000                     _SP4BRGH	set	3814
    85  0000                     _TRISGbits	set	3975
    86  0000                     _TRISEbits	set	3973
    87  0000                     _SSP2CON2bits	set	3802
    88  0000                     _LATG	set	3967
    89  0000                     _LATE	set	3965
    90  0000                     _RX4PPS	set	3605
    91  0000                     _SSP2CLKPPS	set	3612
    92  0000                     _SSP2DATPPS	set	3613
    93  0000                     _ANSELDbits	set	3751
    94  0000                     _SSP2ADD	set	3798
    95  0000                     _SSP2CON1bits	set	3801
    96  0000                     _LATAbits	set	3961
    97  0000                     _LATFbits	set	3966
    98  0000                     _LATGbits	set	3967
    99  0000                     _TRISAbits	set	3969
   100  0000                     _TRISCbits	set	3971
   101  0000                     _TRISDbits	set	3972
   102  0000                     _LATCbits	set	3963
   103  0000                     _LATEbits	set	3965
   104  0000                     _RC4REG	set	3811
   105  0000                     _SP4BRGL	set	3813
   106  0000                     _TX4STAbits	set	3816
   107  0000                     _BAUD4CONbits	set	3817
   108  0000                     _SSP2CON2	set	3802
   109  0000                     _SSP2STAT	set	3800
   110  0000                     _ANSELFbits	set	3764
   111  0000                     _SSP2BUF	set	3797
   112  0000                     _PIE4bits	set	3629
   113  0000                     _PIR4bits	set	3639
   114  0000                     _RC0PPS	set	3682
   115  0000                     _RC7PPS	set	3689
   116  0000                     _RD5PPS	set	3695
   117  0000                     _RE2PPS	set	3700
   118  0000                     _RD6PPS	set	3696
   119  0000                     _PORTFbits	set	3982
   120  0000                     _T2PR	set	4028
   121  0000                     _T2CONbits	set	4029
   122  0000                     _PWM7DCH	set	4000
   123  0000                     _PWM6DCH	set	4003
   124  0000                     _T2CLKCONbits	set	4031
   125  0000                     _T2HLTbits	set	4030
   126  0000                     _PWM6CONbits	set	4004
   127  0000                     _PWM7CONbits	set	4001
   128  0000                     _ADREFbits	set	3928
   129  0000                     _ADPCH	set	3935
   130  0000                     _ADRESH	set	3940
   131  0000                     _ADCON0bits	set	3936
   132                           
   133                           	psect	smallconst
   134  000E00                     __psmallconst:
   135                           	callstack 0
   136  000E00  00                 	db	0
   137  000E01                     STR_1:
   138  000E01  09                 	db	9
   139  000E02  25                 	db	37
   140  000E03  64                 	db	100	;'d'
   141  000E04  09                 	db	9
   142  000E05  25                 	db	37
   143  000E06  64                 	db	100	;'d'
   144  000E07  09                 	db	9
   145  000E08  25                 	db	37
   146  000E09  64                 	db	100	;'d'
   147  000E0A  09                 	db	9
   148  000E0B  25                 	db	37
   149  000E0C  64                 	db	100	;'d'
   150  000E0D  0D                 	db	13
   151  000E0E  0A                 	db	10
   152  000E0F  00                 	db	0
   153  000E10  4C                 	db	76	;'L'
   154  000E11  69                 	db	105	;'i'
   155  000E12  67                 	db	103	;'g'
   156  000E13  68                 	db	104	;'h'
   157  000E14  74                 	db	116	;'t'
   158  000E15  20                 	db	32
   159  000E16  62                 	db	98	;'b'
   160  000E17  6C                 	db	108	;'l'
   161  000E18  75                 	db	117	;'u'
   162  000E19  65                 	db	101	;'e'
   163  000E1A  00                 	db	0
   164  000E1B  4F                 	db	79	;'O'
   165  000E1C  72                 	db	114	;'r'
   166  000E1D  61                 	db	97	;'a'
   167  000E1E  6E                 	db	110	;'n'
   168  000E1F  67                 	db	103	;'g'
   169  000E20  65                 	db	101	;'e'
   170  000E21  00                 	db	0
   171  000E22  59                 	db	89	;'Y'
   172  000E23  65                 	db	101	;'e'
   173  000E24  6C                 	db	108	;'l'
   174  000E25  6C                 	db	108	;'l'
   175  000E26  6F                 	db	111	;'o'
   176  000E27  77                 	db	119	;'w'
   177  000E28  00                 	db	0
   178  000E29  57                 	db	87	;'W'
   179  000E2A  68                 	db	104	;'h'
   180  000E2B  69                 	db	105	;'i'
   181  000E2C  74                 	db	116	;'t'
   182  000E2D  65                 	db	101	;'e'
   183  000E2E  00                 	db	0
   184  000E2F  42                 	db	66	;'B'
   185  000E30  6C                 	db	108	;'l'
   186  000E31  61                 	db	97	;'a'
   187  000E32  63                 	db	99	;'c'
   188  000E33  6B                 	db	107	;'k'
   189  000E34  00                 	db	0
   190  000E35  47                 	db	71	;'G'
   191  000E36  72                 	db	114	;'r'
   192  000E37  65                 	db	101	;'e'
   193  000E38  65                 	db	101	;'e'
   194  000E39  6E                 	db	110	;'n'
   195  000E3A  00                 	db	0
   196  000E3B  45                 	db	69	;'E'
   197  000E3C  72                 	db	114	;'r'
   198  000E3D  72                 	db	114	;'r'
   199  000E3E  6F                 	db	111	;'o'
   200  000E3F  72                 	db	114	;'r'
   201  000E40  00                 	db	0
   202  000E41  42                 	db	66	;'B'
   203  000E42  6C                 	db	108	;'l'
   204  000E43  75                 	db	117	;'u'
   205  000E44  65                 	db	101	;'e'
   206  000E45  00                 	db	0
   207  000E46  50                 	db	80	;'P'
   208  000E47  69                 	db	105	;'i'
   209  000E48  6E                 	db	110	;'n'
   210  000E49  6B                 	db	107	;'k'
   211  000E4A  00                 	db	0
   212  000E4B  52                 	db	82	;'R'
   213  000E4C  65                 	db	101	;'e'
   214  000E4D  64                 	db	100	;'d'
   215  000E4E  00                 	db	0
   216  000E4F  00                 	db	0	; dummy byte at the end
   217  0000                     
   218                           ; #config settings
   219                           
   220                           	psect	cinit
   221  0014B8                     __pcinit:
   222                           	callstack 0
   223  0014B8                     start_initialization:
   224                           	callstack 0
   225  0014B8                     __initialization:
   226                           	callstack 0
   227                           
   228                           ; Initialize objects allocated to COMRAM (2 bytes)
   229                           ; load TBLPTR registers with __pidataCOMRAM
   230  0014B8  0E3A               	movlw	low __pidataCOMRAM
   231  0014BA  6EF6               	movwf	tblptrl,c
   232  0014BC  0E16               	movlw	high __pidataCOMRAM
   233  0014BE  6EF7               	movwf	tblptrh,c
   234  0014C0  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   235  0014C2  6EF8               	movwf	tblptru,c
   236  0014C4  0009               	tblrd		*+	;fetch initializer
   237  0014C6  CFF5 F058          	movff	tablat,__pdataCOMRAM
   238  0014CA  0009               	tblrd		*+	;fetch initializer
   239  0014CC  CFF5 F059          	movff	tablat,__pdataCOMRAM+1
   240                           
   241                           ; Clear objects allocated to BANK0 (90 bytes)
   242  0014D0  EE00  F060         	lfsr	0,__pbssBANK0
   243  0014D4  0E5A               	movlw	90
   244  0014D6                     clear_0:
   245  0014D6  6AEE               	clrf	postinc0,c
   246  0014D8  06E8               	decf	wreg,f,c
   247  0014DA  E1FD               	bnz	clear_0
   248                           
   249                           ; Clear objects allocated to COMRAM (14 bytes)
   250  0014DC  EE00  F04A         	lfsr	0,__pbssCOMRAM
   251  0014E0  0E0E               	movlw	14
   252  0014E2                     clear_1:
   253  0014E2  6AEE               	clrf	postinc0,c
   254  0014E4  06E8               	decf	wreg,f,c
   255  0014E6  E1FD               	bnz	clear_1
   256  0014E8                     end_of_initialization:
   257                           	callstack 0
   258  0014E8                     __end_of__initialization:
   259                           	callstack 0
   260  0014E8  0E00               	movlw	low (__Lsmallconst shr (0+16))
   261  0014EA  6EF8               	movwf	tblptru,c
   262  0014EC  0E0E               	movlw	high __Lsmallconst
   263  0014EE  6EF7               	movwf	tblptrh,c
   264  0014F0  0100               	movlb	0
   265  0014F2  EFF7  F009         	goto	_main	;jump to C main() function
   266                           
   267                           	psect	bssCOMRAM
   268  00004A                     __pbssCOMRAM:
   269                           	callstack 0
   270  00004A                     _motorL:
   271                           	callstack 0
   272  00004A                     	ds	10
   273  000054                     _TxBufReadCnt:
   274                           	callstack 0
   275  000054                     	ds	1
   276  000055                     _TxBufWriteCnt:
   277                           	callstack 0
   278  000055                     	ds	1
   279  000056                     _RxBufReadCnt:
   280                           	callstack 0
   281  000056                     	ds	1
   282  000057                     _RxBufWriteCnt:
   283                           	callstack 0
   284  000057                     	ds	1
   285                           
   286                           	psect	dataCOMRAM
   287  000058                     __pdataCOMRAM:
   288                           	callstack 0
   289  000058                     _color:
   290                           	callstack 0
   291  000058                     	ds	1
   292  000059                     _SENSITIVITY:
   293                           	callstack 0
   294  000059                     	ds	1
   295                           
   296                           	psect	bssBANK0
   297  000060                     __pbssBANK0:
   298                           	callstack 0
   299  000060                     _EUSART4TXbuf:
   300                           	callstack 0
   301  000060                     	ds	60
   302  00009C                     _EUSART4RXbuf:
   303                           	callstack 0
   304  00009C                     	ds	20
   305  0000B0                     _motorR:
   306                           	callstack 0
   307  0000B0                     	ds	10
   308                           
   309                           	psect	cstackCOMRAM
   310  000001                     __pcstackCOMRAM:
   311                           	callstack 0
   312  000001                     ??_I2C_2_Master_Idle:
   313  000001                     ?___wmul:
   314                           	callstack 0
   315  000001                     initDCmotorsPWM@PWMperiod:
   316                           	callstack 0
   317  000001                     initDCmotors_parameter@motorL:
   318                           	callstack 0
   319  000001                     ___wmul@multiplier:
   320                           	callstack 0
   321                           
   322                           ; 2 bytes @ 0x0
   323  000001                     	ds	1
   324  000002                     I2C_2_Master_Write@data_byte:
   325                           	callstack 0
   326                           
   327                           ; 1 bytes @ 0x1
   328  000002                     	ds	1
   329  000003                     color_writetoaddr@value:
   330                           	callstack 0
   331  000003                     initDCmotors_parameter@motorR:
   332                           	callstack 0
   333  000003                     ___wmul@multiplicand:
   334                           	callstack 0
   335                           
   336                           ; 2 bytes @ 0x2
   337  000003                     	ds	1
   338  000004                     color_writetoaddr@address:
   339                           	callstack 0
   340                           
   341                           ; 1 bytes @ 0x3
   342  000004                     	ds	1
   343  000005                     ??_color_click_init:
   344  000005                     ___wmul@product:
   345                           	callstack 0
   346                           
   347                           ; 2 bytes @ 0x4
   348  000005                     	ds	2
   349  000007                     ?___awdiv:
   350                           	callstack 0
   351  000007                     ___awdiv@dividend:
   352                           	callstack 0
   353                           
   354                           ; 2 bytes @ 0x6
   355  000007                     	ds	2
   356  000009                     ___awdiv@divisor:
   357                           	callstack 0
   358                           
   359                           ; 2 bytes @ 0x8
   360  000009                     	ds	2
   361  00000B                     ___awdiv@counter:
   362                           	callstack 0
   363                           
   364                           ; 1 bytes @ 0xA
   365  00000B                     	ds	1
   366  00000C                     ___awdiv@sign:
   367                           	callstack 0
   368                           
   369                           ; 1 bytes @ 0xB
   370  00000C                     	ds	1
   371  00000D                     ___awdiv@quotient:
   372                           	callstack 0
   373                           
   374                           ; 2 bytes @ 0xC
   375  00000D                     	ds	2
   376  00000F                     setMotorPWM@m:
   377                           	callstack 0
   378                           
   379                           ; 2 bytes @ 0xE
   380  00000F                     	ds	2
   381  000011                     ??_setMotorPWM:
   382                           
   383                           ; 1 bytes @ 0x10
   384  000011                     	ds	7
   385  000018                     setMotorPWM@PWMduty:
   386                           	callstack 0
   387                           
   388                           ; 2 bytes @ 0x17
   389  000018                     	ds	2
   390  00001A                     stop@mL:
   391                           	callstack 0
   392                           
   393                           ; 2 bytes @ 0x19
   394  00001A                     	ds	2
   395  00001C                     stop@mR:
   396                           	callstack 0
   397                           
   398                           ; 2 bytes @ 0x1B
   399  00001C                     	ds	2
   400  00001E                     ??_stop:
   401                           
   402                           ; 1 bytes @ 0x1D
   403  00001E                     	ds	2
   404  000020                     turnRight@mL:
   405                           	callstack 0
   406                           
   407                           ; 2 bytes @ 0x1F
   408  000020                     	ds	2
   409  000022                     turnRight@mR:
   410                           	callstack 0
   411                           
   412                           ; 2 bytes @ 0x21
   413  000022                     	ds	2
   414  000024                     turnRight@angle_right:
   415                           	callstack 0
   416                           
   417                           ; 1 bytes @ 0x23
   418  000024                     	ds	1
   419  000025                     ??_turnRight:
   420                           
   421                           ; 1 bytes @ 0x24
   422  000025                     	ds	1
   423  000026                     turnRight@delay:
   424                           	callstack 0
   425                           
   426                           ; 2 bytes @ 0x25
   427  000026                     	ds	2
   428  000028                     turnRight@i:
   429                           	callstack 0
   430                           
   431                           ; 2 bytes @ 0x27
   432  000028                     	ds	2
   433  00002A                     test_movement@mL:
   434                           	callstack 0
   435                           
   436                           ; 2 bytes @ 0x29
   437  00002A                     	ds	2
   438  00002C                     test_movement@mR:
   439                           	callstack 0
   440                           
   441                           ; 2 bytes @ 0x2B
   442  00002C                     	ds	2
   443  00002E                     calibration@mL:
   444                           	callstack 0
   445                           
   446                           ; 2 bytes @ 0x2D
   447  00002E                     	ds	2
   448  000030                     calibration@mR:
   449                           	callstack 0
   450                           
   451                           ; 2 bytes @ 0x2F
   452  000030                     	ds	2
   453  000032                     ??_calibration:
   454                           
   455                           ; 1 bytes @ 0x31
   456  000032                     	ds	2
   457  000034                     ??_main:
   458                           
   459                           ; 1 bytes @ 0x33
   460  000034                     	ds	2
   461  000036                     main@motorR:
   462                           	callstack 0
   463                           
   464                           ; 10 bytes @ 0x35
   465  000036                     	ds	10
   466  000040                     main@motorL:
   467                           	callstack 0
   468                           
   469                           ; 10 bytes @ 0x3F
   470  000040                     	ds	10
   471                           
   472 ;;
   473 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   474 ;;
   475 ;; *************** function _main *****************
   476 ;; Defined at:
   477 ;;		line 30 in file "main.c"
   478 ;; Parameters:    Size  Location     Type
   479 ;;		None
   480 ;; Auto vars:     Size  Location     Type
   481 ;;  motorL         10   63[COMRAM] struct DC_motor
   482 ;;  motorR         10   53[COMRAM] struct DC_motor
   483 ;;  rgb             8    0        struct color_rgb
   484 ;;  x               2    0        int 
   485 ;;  k               2    0        int 
   486 ;;  j               2    0        int 
   487 ;;  i               2    0        int 
   488 ;;  complete        1    0        unsigned char 
   489 ;;  color           1    0        unsigned char 
   490 ;; Return value:  Size  Location     Type
   491 ;;                  1    wreg      void 
   492 ;; Registers used:
   493 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   494 ;; Tracked objects:
   495 ;;		On entry : 0/0
   496 ;;		On exit  : 0/0
   497 ;;		Unchanged: 0/0
   498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   499 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   500 ;;      Locals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   501 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   502 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   503 ;;Total ram usage:       22 bytes
   504 ;; Hardware stack levels required when called: 6
   505 ;; This function calls:
   506 ;;		_I2C_2_Master_Init
   507 ;;		_calibration
   508 ;;		_calibration_init
   509 ;;		_color_click_init
   510 ;;		_initDCmotorsPWM
   511 ;;		_initDCmotors_parameter
   512 ;;		_initUSART4
   513 ;;		_test_movement
   514 ;; This function is called by:
   515 ;;		Startup code after reset
   516 ;; This function uses a non-reentrant model
   517 ;;
   518                           
   519                           	psect	text0
   520  0013EE                     __ptext0:
   521                           	callstack 0
   522  0013EE                     _main:
   523                           	callstack 25
   524  0013EE                     
   525                           ;main.c: 31:     I2C_2_Master_Init();
   526  0013EE  ECAC  F00A         	call	_I2C_2_Master_Init	;wreg free
   527  0013F2                     
   528                           ;main.c: 32:     color_click_init();
   529  0013F2  EC7B  F00A         	call	_color_click_init	;wreg free
   530  0013F6                     
   531                           ;main.c: 33:     initDCmotorsPWM(199);
   532  0013F6  0E00               	movlw	0
   533  0013F8  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   534  0013FA  0EC7               	movlw	199
   535  0013FC  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
   536  0013FE  EC3B  F00A         	call	_initDCmotorsPWM	;wreg free
   537  001402                     
   538                           ;main.c: 35:     initUSART4();
   539  001402  ECF8  F00A         	call	_initUSART4	;wreg free
   540  001406                     
   541                           ;main.c: 37:     struct color_rgb rgb;;main.c: 38:     struct DC_motor motorL, motorR;;m
      +                          ain.c: 40:     initDCmotors_parameter(&motorL, &motorR);
   542  001406  0E40               	movlw	low main@motorL
   543  001408  6E01               	movwf	initDCmotors_parameter@motorL^0,c
   544  00140A  0E00               	movlw	high main@motorL
   545  00140C  6E02               	movwf	(initDCmotors_parameter@motorL+1)^0,c
   546  00140E  0E36               	movlw	low main@motorR
   547  001410  6E03               	movwf	initDCmotors_parameter@motorR^0,c
   548  001412  0E00               	movlw	high main@motorR
   549  001414  6E04               	movwf	(initDCmotors_parameter@motorR+1)^0,c
   550  001416  EC12  F008         	call	_initDCmotors_parameter	;wreg free
   551  00141A                     
   552                           ;main.c: 41:     calibration_init();
   553  00141A  EC0D  F00B         	call	_calibration_init	;wreg free
   554  00141E                     
   555                           ;main.c: 43:     TRISFbits.TRISF6 = 0;
   556  00141E  9C86               	bcf	134,6,c	;volatile
   557  001420                     
   558                           ;main.c: 44:     LATFbits.LATF6 = 0;
   559  001420  9C7E               	bcf	126,6,c	;volatile
   560  001422                     
   561                           ;main.c: 46:     TRISGbits.TRISG1 = 0;
   562  001422  9287               	bcf	135,1,c	;volatile
   563  001424                     
   564                           ;main.c: 47:     TRISFbits.TRISF7 = 0;
   565  001424  9E86               	bcf	134,7,c	;volatile
   566  001426                     
   567                           ;main.c: 48:     TRISAbits.TRISA4 = 0;
   568  001426  9881               	bcf	129,4,c	;volatile
   569  001428                     
   570                           ;main.c: 49:     LATGbits.LATG1 = 1;
   571  001428  827F               	bsf	127,1,c	;volatile
   572  00142A                     
   573                           ;main.c: 50:     LATFbits.LATF7 = 1;
   574  00142A  8E7E               	bsf	126,7,c	;volatile
   575  00142C                     
   576                           ;main.c: 51:     LATAbits.LATA4 = 1;
   577  00142C  8879               	bsf	121,4,c	;volatile
   578  00142E                     
   579                           ;main.c: 60:     _delay((unsigned long)((3000)*(64000000/4000.0)));
   580  00142E  0EF4               	movlw	244
   581  001430  6E35               	movwf	(??_main+1)^0,c
   582  001432  0E82               	movlw	130
   583  001434  6E34               	movwf	??_main^0,c
   584  001436  0E05               	movlw	5
   585  001438                     u1107:
   586  001438  2EE8               	decfsz	wreg,f,c
   587  00143A  D7FE               	bra	u1107
   588  00143C  2E34               	decfsz	??_main^0,f,c
   589  00143E  D7FC               	bra	u1107
   590  001440  2E35               	decfsz	(??_main+1)^0,f,c
   591  001442  D7FA               	bra	u1107
   592  001444  F000               	nop	
   593  001446                     
   594                           ;main.c: 62:     calibration(&motorL, &motorR);
   595  001446  0E40               	movlw	low main@motorL
   596  001448  6E2E               	movwf	calibration@mL^0,c
   597  00144A  0E00               	movlw	high main@motorL
   598  00144C  6E2F               	movwf	(calibration@mL+1)^0,c
   599  00144E  0E36               	movlw	low main@motorR
   600  001450  6E30               	movwf	calibration@mR^0,c
   601  001452  0E00               	movlw	high main@motorR
   602  001454  6E31               	movwf	(calibration@mR+1)^0,c
   603  001456  ECA4  F009         	call	_calibration	;wreg free
   604  00145A                     l2187:
   605                           
   606                           ;main.c: 64:         test_movement(&motorL, &motorR);
   607  00145A  0E40               	movlw	low main@motorL
   608  00145C  6E2A               	movwf	test_movement@mL^0,c
   609  00145E  0E00               	movlw	high main@motorL
   610  001460  6E2B               	movwf	(test_movement@mL+1)^0,c
   611  001462  0E36               	movlw	low main@motorR
   612  001464  6E2C               	movwf	test_movement@mR^0,c
   613  001466  0E00               	movlw	high main@motorR
   614  001468  6E2D               	movwf	(test_movement@mR+1)^0,c
   615  00146A  EC95  F00A         	call	_test_movement	;wreg free
   616  00146E  EF2D  F00A         	goto	l2187
   617  001472  EF00  F000         	goto	start
   618  001476                     __end_of_main:
   619                           	callstack 0
   620                           
   621 ;; *************** function _initUSART4 *****************
   622 ;; Defined at:
   623 ;;		line 4 in file "serial.c"
   624 ;; Parameters:    Size  Location     Type
   625 ;;		None
   626 ;; Auto vars:     Size  Location     Type
   627 ;;		None
   628 ;; Return value:  Size  Location     Type
   629 ;;                  1    wreg      void 
   630 ;; Registers used:
   631 ;;		wreg, status,2
   632 ;; Tracked objects:
   633 ;;		On entry : 0/0
   634 ;;		On exit  : 0/0
   635 ;;		Unchanged: 0/0
   636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   637 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   638 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   639 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   640 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   641 ;;Total ram usage:        0 bytes
   642 ;; Hardware stack levels used: 1
   643 ;; This function calls:
   644 ;;		Nothing
   645 ;; This function is called by:
   646 ;;		_main
   647 ;; This function uses a non-reentrant model
   648 ;;
   649                           
   650                           	psect	text1
   651  0015F0                     __ptext1:
   652                           	callstack 0
   653  0015F0                     _initUSART4:
   654                           	callstack 30
   655  0015F0                     
   656                           ;serial.c: 8:     RC0PPS = 0x12;
   657  0015F0  0E12               	movlw	18
   658  0015F2  010E               	movlb	14	; () banked
   659  0015F4  6F62               	movwf	98,b	;volatile
   660                           
   661                           ;serial.c: 9:     RX4PPS = 0x11;
   662  0015F6  0E11               	movlw	17
   663  0015F8  6F15               	movwf	21,b	;volatile
   664  0015FA                     
   665                           ; BSR set to: 14
   666                           ;serial.c: 11:     BAUD4CONbits.BRG16 = 0;
   667  0015FA  97E9               	bcf	233,3,b	;volatile
   668  0015FC                     
   669                           ; BSR set to: 14
   670                           ;serial.c: 12:     TX4STAbits.BRGH = 0;
   671  0015FC  95E8               	bcf	232,2,b	;volatile
   672                           
   673                           ;serial.c: 13:     SP4BRGL = 51;
   674  0015FE  0E33               	movlw	51
   675  001600  6FE5               	movwf	229,b	;volatile
   676                           
   677                           ;serial.c: 15:     SP4BRGH = 0;
   678  001602  0E00               	movlw	0
   679  001604  6FE6               	movwf	230,b	;volatile
   680  001606                     
   681                           ; BSR set to: 14
   682                           ;serial.c: 17:     RC4STAbits.CREN = 1;
   683  001606  89E7               	bsf	231,4,b	;volatile
   684  001608                     
   685                           ; BSR set to: 14
   686                           ;serial.c: 18:     TX4STAbits.TXEN = 1;
   687  001608  8BE8               	bsf	232,5,b	;volatile
   688  00160A                     
   689                           ; BSR set to: 14
   690                           ;serial.c: 19:     RC4STAbits.SPEN = 1;
   691  00160A  8FE7               	bsf	231,7,b	;volatile
   692  00160C                     
   693                           ; BSR set to: 14
   694  00160C  0012               	return		;funcret
   695  00160E                     __end_of_initUSART4:
   696                           	callstack 0
   697                           
   698 ;; *************** function _initDCmotors_parameter *****************
   699 ;; Defined at:
   700 ;;		line 41 in file "dc_motor.c"
   701 ;; Parameters:    Size  Location     Type
   702 ;;  motorL          2    0[COMRAM] PTR struct DC_motor
   703 ;;		 -> main@motorL(10), 
   704 ;;  motorR          2    2[COMRAM] PTR struct DC_motor
   705 ;;		 -> main@motorR(10), 
   706 ;; Auto vars:     Size  Location     Type
   707 ;;		None
   708 ;; Return value:  Size  Location     Type
   709 ;;                  1    wreg      void 
   710 ;; Registers used:
   711 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   712 ;; Tracked objects:
   713 ;;		On entry : 0/0
   714 ;;		On exit  : 0/0
   715 ;;		Unchanged: 0/0
   716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   717 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   718 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   719 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   720 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   721 ;;Total ram usage:        4 bytes
   722 ;; Hardware stack levels used: 1
   723 ;; This function calls:
   724 ;;		Nothing
   725 ;; This function is called by:
   726 ;;		_main
   727 ;; This function uses a non-reentrant model
   728 ;;
   729                           
   730                           	psect	text2
   731  001024                     __ptext2:
   732                           	callstack 0
   733  001024                     _initDCmotors_parameter:
   734                           	callstack 30
   735  001024                     
   736                           ;dc_motor.c: 43:     motorL->power = 0;
   737  001024  C001  FFD9         	movff	initDCmotors_parameter@motorL,fsr2l
   738  001028  C002  FFDA         	movff	initDCmotors_parameter@motorL+1,fsr2h
   739  00102C  0E00               	movlw	0
   740  00102E  6EDF               	movwf	indf2,c
   741  001030                     
   742                           ;dc_motor.c: 44:     motorL->direction = 1;
   743  001030  EE20 F001          	lfsr	2,1
   744  001034  5001               	movf	initDCmotors_parameter@motorL^0,w,c
   745  001036  26D9               	addwf	fsr2l,f,c
   746  001038  5002               	movf	(initDCmotors_parameter@motorL+1)^0,w,c
   747  00103A  22DA               	addwfc	fsr2h,f,c
   748  00103C  0E01               	movlw	1
   749  00103E  6EDF               	movwf	indf2,c
   750  001040                     
   751                           ;dc_motor.c: 45:     motorL->dutyHighByte = (unsigned char *)(&PWM6DCH);
   752  001040  EE20 F002          	lfsr	2,2
   753  001044  5001               	movf	initDCmotors_parameter@motorL^0,w,c
   754  001046  26D9               	addwf	fsr2l,f,c
   755  001048  5002               	movf	(initDCmotors_parameter@motorL+1)^0,w,c
   756  00104A  22DA               	addwfc	fsr2h,f,c
   757  00104C  0EA3               	movlw	163
   758  00104E  6EDE               	movwf	postinc2,c
   759  001050  0E0F               	movlw	15
   760  001052  6EDD               	movwf	postdec2,c
   761  001054                     
   762                           ;dc_motor.c: 46:     motorL->dir_LAT = (unsigned char *)(&LATE);
   763  001054  EE20 F004          	lfsr	2,4
   764  001058  5001               	movf	initDCmotors_parameter@motorL^0,w,c
   765  00105A  26D9               	addwf	fsr2l,f,c
   766  00105C  5002               	movf	(initDCmotors_parameter@motorL+1)^0,w,c
   767  00105E  22DA               	addwfc	fsr2h,f,c
   768  001060  0E7D               	movlw	125
   769  001062  6EDE               	movwf	postinc2,c
   770  001064  0E0F               	movlw	15
   771  001066  6EDD               	movwf	postdec2,c
   772  001068                     
   773                           ;dc_motor.c: 47:     motorL->dir_pin = 4;
   774  001068  EE20 F006          	lfsr	2,6
   775  00106C  5001               	movf	initDCmotors_parameter@motorL^0,w,c
   776  00106E  26D9               	addwf	fsr2l,f,c
   777  001070  5002               	movf	(initDCmotors_parameter@motorL+1)^0,w,c
   778  001072  22DA               	addwfc	fsr2h,f,c
   779  001074  0E04               	movlw	4
   780  001076  6EDF               	movwf	indf2,c
   781  001078                     
   782                           ;dc_motor.c: 48:     motorL->PWMperiod = 199;
   783  001078  EE20 F007          	lfsr	2,7
   784  00107C  5001               	movf	initDCmotors_parameter@motorL^0,w,c
   785  00107E  26D9               	addwf	fsr2l,f,c
   786  001080  5002               	movf	(initDCmotors_parameter@motorL+1)^0,w,c
   787  001082  22DA               	addwfc	fsr2h,f,c
   788  001084  0EC7               	movlw	199
   789  001086  6EDE               	movwf	postinc2,c
   790  001088  0E00               	movlw	0
   791  00108A  6EDD               	movwf	postdec2,c
   792  00108C                     
   793                           ;dc_motor.c: 51:     motorR->power = 0;
   794  00108C  C003  FFD9         	movff	initDCmotors_parameter@motorR,fsr2l
   795  001090  C004  FFDA         	movff	initDCmotors_parameter@motorR+1,fsr2h
   796  001094  0E00               	movlw	0
   797  001096  6EDF               	movwf	indf2,c
   798                           
   799                           ;dc_motor.c: 52:     motorR->direction = 1;
   800  001098  EE20 F001          	lfsr	2,1
   801  00109C  5003               	movf	initDCmotors_parameter@motorR^0,w,c
   802  00109E  26D9               	addwf	fsr2l,f,c
   803  0010A0  5004               	movf	(initDCmotors_parameter@motorR+1)^0,w,c
   804  0010A2  22DA               	addwfc	fsr2h,f,c
   805  0010A4  0E01               	movlw	1
   806  0010A6  6EDF               	movwf	indf2,c
   807                           
   808                           ;dc_motor.c: 53:     motorR->dutyHighByte = (unsigned char *)(&PWM7DCH);
   809  0010A8  EE20 F002          	lfsr	2,2
   810  0010AC  5003               	movf	initDCmotors_parameter@motorR^0,w,c
   811  0010AE  26D9               	addwf	fsr2l,f,c
   812  0010B0  5004               	movf	(initDCmotors_parameter@motorR+1)^0,w,c
   813  0010B2  22DA               	addwfc	fsr2h,f,c
   814  0010B4  0EA0               	movlw	160
   815  0010B6  6EDE               	movwf	postinc2,c
   816  0010B8  0E0F               	movlw	15
   817  0010BA  6EDD               	movwf	postdec2,c
   818                           
   819                           ;dc_motor.c: 54:     motorR->dir_LAT = (unsigned char *)(&LATG);
   820  0010BC  EE20 F004          	lfsr	2,4
   821  0010C0  5003               	movf	initDCmotors_parameter@motorR^0,w,c
   822  0010C2  26D9               	addwf	fsr2l,f,c
   823  0010C4  5004               	movf	(initDCmotors_parameter@motorR+1)^0,w,c
   824  0010C6  22DA               	addwfc	fsr2h,f,c
   825  0010C8  0E7F               	movlw	127
   826  0010CA  6EDE               	movwf	postinc2,c
   827  0010CC  0E0F               	movlw	15
   828  0010CE  6EDD               	movwf	postdec2,c
   829                           
   830                           ;dc_motor.c: 55:     motorR->dir_pin = 6;
   831  0010D0  EE20 F006          	lfsr	2,6
   832  0010D4  5003               	movf	initDCmotors_parameter@motorR^0,w,c
   833  0010D6  26D9               	addwf	fsr2l,f,c
   834  0010D8  5004               	movf	(initDCmotors_parameter@motorR+1)^0,w,c
   835  0010DA  22DA               	addwfc	fsr2h,f,c
   836  0010DC  0E06               	movlw	6
   837  0010DE  6EDF               	movwf	indf2,c
   838                           
   839                           ;dc_motor.c: 56:     motorR->PWMperiod = 199;
   840  0010E0  EE20 F007          	lfsr	2,7
   841  0010E4  5003               	movf	initDCmotors_parameter@motorR^0,w,c
   842  0010E6  26D9               	addwf	fsr2l,f,c
   843  0010E8  5004               	movf	(initDCmotors_parameter@motorR+1)^0,w,c
   844  0010EA  22DA               	addwfc	fsr2h,f,c
   845  0010EC  0EC7               	movlw	199
   846  0010EE  6EDE               	movwf	postinc2,c
   847  0010F0  0E00               	movlw	0
   848  0010F2  6EDD               	movwf	postdec2,c
   849  0010F4  0012               	return		;funcret
   850  0010F6                     __end_of_initDCmotors_parameter:
   851                           	callstack 0
   852                           
   853 ;; *************** function _initDCmotorsPWM *****************
   854 ;; Defined at:
   855 ;;		line 11 in file "dc_motor.c"
   856 ;; Parameters:    Size  Location     Type
   857 ;;  PWMperiod       2    0[COMRAM] int 
   858 ;; Auto vars:     Size  Location     Type
   859 ;;		None
   860 ;; Return value:  Size  Location     Type
   861 ;;                  1    wreg      void 
   862 ;; Registers used:
   863 ;;		wreg, status,2
   864 ;; Tracked objects:
   865 ;;		On entry : 0/0
   866 ;;		On exit  : 0/0
   867 ;;		Unchanged: 0/0
   868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   869 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   870 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   871 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   872 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   873 ;;Total ram usage:        2 bytes
   874 ;; Hardware stack levels used: 1
   875 ;; This function calls:
   876 ;;		Nothing
   877 ;; This function is called by:
   878 ;;		_main
   879 ;; This function uses a non-reentrant model
   880 ;;
   881                           
   882                           	psect	text3
   883  001476                     __ptext3:
   884                           	callstack 0
   885  001476                     _initDCmotorsPWM:
   886                           	callstack 30
   887  001476                     
   888                           ;dc_motor.c: 14:     TRISEbits.TRISE2=0;
   889  001476  9485               	bcf	133,2,c	;volatile
   890                           
   891                           ;dc_motor.c: 15:     TRISCbits.TRISC7=0;
   892  001478  9E83               	bcf	131,7,c	;volatile
   893                           
   894                           ;dc_motor.c: 16:     TRISGbits.TRISG6=0;
   895  00147A  9C87               	bcf	135,6,c	;volatile
   896                           
   897                           ;dc_motor.c: 17:     TRISEbits.TRISE4=0;
   898  00147C  9885               	bcf	133,4,c	;volatile
   899                           
   900                           ;dc_motor.c: 18:     LATEbits.LATE2=0;
   901  00147E  947D               	bcf	125,2,c	;volatile
   902                           
   903                           ;dc_motor.c: 19:     LATCbits.LATC7=0;
   904  001480  9E7B               	bcf	123,7,c	;volatile
   905                           
   906                           ;dc_motor.c: 20:     LATGbits.LATG6=0;
   907  001482  9C7F               	bcf	127,6,c	;volatile
   908                           
   909                           ;dc_motor.c: 21:     LATEbits.LATE4=0;
   910  001484  987D               	bcf	125,4,c	;volatile
   911  001486                     
   912                           ;dc_motor.c: 24:     T2CONbits.CKPS=0b011;
   913  001486  50BD               	movf	189,w,c	;volatile
   914  001488  0B8F               	andlw	-113
   915  00148A  0930               	iorlw	48
   916  00148C  6EBD               	movwf	189,c	;volatile
   917                           
   918                           ;dc_motor.c: 25:     T2HLTbits.MODE=0b00000;
   919  00148E  0EE0               	movlw	-32
   920  001490  16BE               	andwf	190,f,c	;volatile
   921                           
   922                           ;dc_motor.c: 26:     T2CLKCONbits.CS=0b0001;
   923  001492  50BF               	movf	191,w,c	;volatile
   924  001494  0BF0               	andlw	-16
   925  001496  0901               	iorlw	1
   926  001498  6EBF               	movwf	191,c	;volatile
   927                           
   928                           ;dc_motor.c: 29:     T2PR=200-1;
   929  00149A  0EC7               	movlw	199
   930  00149C  6EBC               	movwf	188,c	;volatile
   931  00149E                     
   932                           ;dc_motor.c: 30:     T2CONbits.ON=1;
   933  00149E  8EBD               	bsf	189,7,c	;volatile
   934                           
   935                           ;dc_motor.c: 32:     RE2PPS=0x0A;
   936  0014A0  0E0A               	movlw	10
   937  0014A2  010E               	movlb	14	; () banked
   938  0014A4  6F74               	movwf	116,b	;volatile
   939                           
   940                           ;dc_motor.c: 33:     RC7PPS=0x0B;
   941  0014A6  0E0B               	movlw	11
   942  0014A8  6F69               	movwf	105,b	;volatile
   943                           
   944                           ;dc_motor.c: 35:     PWM6DCH=0;
   945  0014AA  0E00               	movlw	0
   946  0014AC  6EA3               	movwf	163,c	;volatile
   947                           
   948                           ;dc_motor.c: 36:     PWM7DCH=0;
   949  0014AE  0E00               	movlw	0
   950  0014B0  6EA0               	movwf	160,c	;volatile
   951  0014B2                     
   952                           ; BSR set to: 14
   953                           ;dc_motor.c: 38:     PWM6CONbits.EN = 1;
   954  0014B2  8EA4               	bsf	164,7,c	;volatile
   955  0014B4                     
   956                           ; BSR set to: 14
   957                           ;dc_motor.c: 39:     PWM7CONbits.EN = 1;
   958  0014B4  8EA1               	bsf	161,7,c	;volatile
   959  0014B6                     
   960                           ; BSR set to: 14
   961  0014B6  0012               	return		;funcret
   962  0014B8                     __end_of_initDCmotorsPWM:
   963                           	callstack 0
   964                           
   965 ;; *************** function _color_click_init *****************
   966 ;; Defined at:
   967 ;;		line 9 in file "color.c"
   968 ;; Parameters:    Size  Location     Type
   969 ;;		None
   970 ;; Auto vars:     Size  Location     Type
   971 ;;		None
   972 ;; Return value:  Size  Location     Type
   973 ;;                  1    wreg      void 
   974 ;; Registers used:
   975 ;;		wreg, status,2, status,0, cstack
   976 ;; Tracked objects:
   977 ;;		On entry : 0/0
   978 ;;		On exit  : 0/0
   979 ;;		Unchanged: 0/0
   980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   981 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   982 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   983 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   984 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   985 ;;Total ram usage:        1 bytes
   986 ;; Hardware stack levels used: 1
   987 ;; Hardware stack levels required when called: 3
   988 ;; This function calls:
   989 ;;		_I2C_2_Master_Init
   990 ;;		_color_writetoaddr
   991 ;; This function is called by:
   992 ;;		_main
   993 ;; This function uses a non-reentrant model
   994 ;;
   995                           
   996                           	psect	text4
   997  0014F6                     __ptext4:
   998                           	callstack 0
   999  0014F6                     _color_click_init:
  1000                           	callstack 27
  1001  0014F6                     
  1002                           ;color.c: 12:     I2C_2_Master_Init();
  1003  0014F6  ECAC  F00A         	call	_I2C_2_Master_Init	;wreg free
  1004  0014FA                     
  1005                           ;color.c: 15:   color_writetoaddr(0x00, 0x01);
  1006  0014FA  0E01               	movlw	1
  1007  0014FC  6E03               	movwf	color_writetoaddr@value^0,c
  1008  0014FE  0E00               	movlw	0
  1009  001500  ECE8  F00A         	call	_color_writetoaddr
  1010  001504                     
  1011                           ;color.c: 16:     _delay((unsigned long)((3)*(64000000/4000.0)));
  1012  001504  0E3F               	movlw	63
  1013  001506  6E05               	movwf	??_color_click_init^0,c
  1014  001508  0E55               	movlw	85
  1015  00150A                     u1117:
  1016  00150A  2EE8               	decfsz	wreg,f,c
  1017  00150C  D7FE               	bra	u1117
  1018  00150E  2E05               	decfsz	??_color_click_init^0,f,c
  1019  001510  D7FC               	bra	u1117
  1020  001512  F000               	nop	
  1021  001514                     
  1022                           ;color.c: 19:  color_writetoaddr(0x00, 0x03);
  1023  001514  0E03               	movlw	3
  1024  001516  6E03               	movwf	color_writetoaddr@value^0,c
  1025  001518  0E00               	movlw	0
  1026  00151A  ECE8  F00A         	call	_color_writetoaddr
  1027  00151E                     
  1028                           ;color.c: 22:  color_writetoaddr(0x01, 0xD5);
  1029  00151E  0ED5               	movlw	213
  1030  001520  6E03               	movwf	color_writetoaddr@value^0,c
  1031  001522  0E01               	movlw	1
  1032  001524  ECE8  F00A         	call	_color_writetoaddr
  1033  001528  0012               	return		;funcret
  1034  00152A                     __end_of_color_click_init:
  1035                           	callstack 0
  1036                           
  1037 ;; *************** function _color_writetoaddr *****************
  1038 ;; Defined at:
  1039 ;;		line 25 in file "color.c"
  1040 ;; Parameters:    Size  Location     Type
  1041 ;;  address         1    wreg     unsigned char 
  1042 ;;  value           1    2[COMRAM] unsigned char 
  1043 ;; Auto vars:     Size  Location     Type
  1044 ;;  address         1    3[COMRAM] unsigned char 
  1045 ;; Return value:  Size  Location     Type
  1046 ;;                  1    wreg      void 
  1047 ;; Registers used:
  1048 ;;		wreg, status,2, status,0, cstack
  1049 ;; Tracked objects:
  1050 ;;		On entry : 0/0
  1051 ;;		On exit  : 0/0
  1052 ;;		Unchanged: 0/0
  1053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1054 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1055 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1056 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1057 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1058 ;;Total ram usage:        2 bytes
  1059 ;; Hardware stack levels used: 1
  1060 ;; Hardware stack levels required when called: 2
  1061 ;; This function calls:
  1062 ;;		_I2C_2_Master_Start
  1063 ;;		_I2C_2_Master_Stop
  1064 ;;		_I2C_2_Master_Write
  1065 ;; This function is called by:
  1066 ;;		_color_click_init
  1067 ;; This function uses a non-reentrant model
  1068 ;;
  1069                           
  1070                           	psect	text5
  1071  0015D0                     __ptext5:
  1072                           	callstack 0
  1073  0015D0                     _color_writetoaddr:
  1074                           	callstack 27
  1075                           
  1076                           ;incstack = 0
  1077                           ;color_writetoaddr@address stored from wreg
  1078  0015D0  6E04               	movwf	color_writetoaddr@address^0,c
  1079  0015D2                     
  1080                           ;color.c: 26:     I2C_2_Master_Start();
  1081  0015D2  EC18  F00B         	call	_I2C_2_Master_Start	;wreg free
  1082                           
  1083                           ;color.c: 27:     I2C_2_Master_Write(0x52 | 0x00);
  1084  0015D6  0E52               	movlw	82
  1085  0015D8  EC07  F00B         	call	_I2C_2_Master_Write
  1086                           
  1087                           ;color.c: 28:     I2C_2_Master_Write(0x80 | address);
  1088  0015DC  5004               	movf	color_writetoaddr@address^0,w,c
  1089  0015DE  0980               	iorlw	128
  1090  0015E0  EC07  F00B         	call	_I2C_2_Master_Write
  1091                           
  1092                           ;color.c: 29:     I2C_2_Master_Write(value);
  1093  0015E4  5003               	movf	color_writetoaddr@value^0,w,c
  1094  0015E6  EC07  F00B         	call	_I2C_2_Master_Write
  1095                           
  1096                           ;color.c: 30:     I2C_2_Master_Stop();
  1097  0015EA  EC13  F00B         	call	_I2C_2_Master_Stop	;wreg free
  1098  0015EE  0012               	return		;funcret
  1099  0015F0                     __end_of_color_writetoaddr:
  1100                           	callstack 0
  1101                           
  1102 ;; *************** function _I2C_2_Master_Write *****************
  1103 ;; Defined at:
  1104 ;;		line 45 in file "i2c.c"
  1105 ;; Parameters:    Size  Location     Type
  1106 ;;  data_byte       1    wreg     unsigned char 
  1107 ;; Auto vars:     Size  Location     Type
  1108 ;;  data_byte       1    1[COMRAM] unsigned char 
  1109 ;; Return value:  Size  Location     Type
  1110 ;;                  1    wreg      void 
  1111 ;; Registers used:
  1112 ;;		wreg, status,2, status,0, cstack
  1113 ;; Tracked objects:
  1114 ;;		On entry : 0/0
  1115 ;;		On exit  : 0/0
  1116 ;;		Unchanged: 0/0
  1117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1118 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1119 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1120 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1121 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1122 ;;Total ram usage:        1 bytes
  1123 ;; Hardware stack levels used: 1
  1124 ;; Hardware stack levels required when called: 1
  1125 ;; This function calls:
  1126 ;;		_I2C_2_Master_Idle
  1127 ;; This function is called by:
  1128 ;;		_color_writetoaddr
  1129 ;;		_color_read_Red
  1130 ;;		_color_read_Blue
  1131 ;;		_color_read_Green
  1132 ;;		_color_read_Clear
  1133 ;; This function uses a non-reentrant model
  1134 ;;
  1135                           
  1136                           	psect	text6
  1137  00160E                     __ptext6:
  1138                           	callstack 0
  1139  00160E                     _I2C_2_Master_Write:
  1140                           	callstack 27
  1141                           
  1142                           ;incstack = 0
  1143                           ;I2C_2_Master_Write@data_byte stored from wreg
  1144  00160E  6E02               	movwf	I2C_2_Master_Write@data_byte^0,c
  1145  001610                     
  1146                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  1147  001610  ECC1  F00A         	call	_I2C_2_Master_Idle	;wreg free
  1148  001614                     
  1149                           ;i2c.c: 48:   SSP2BUF = data_byte;
  1150  001614  C002  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  1151  001618  0012               	return		;funcret
  1152  00161A                     __end_of_I2C_2_Master_Write:
  1153                           	callstack 0
  1154                           
  1155 ;; *************** function _I2C_2_Master_Stop *****************
  1156 ;; Defined at:
  1157 ;;		line 39 in file "i2c.c"
  1158 ;; Parameters:    Size  Location     Type
  1159 ;;		None
  1160 ;; Auto vars:     Size  Location     Type
  1161 ;;		None
  1162 ;; Return value:  Size  Location     Type
  1163 ;;                  1    wreg      void 
  1164 ;; Registers used:
  1165 ;;		wreg, status,2, status,0, cstack
  1166 ;; Tracked objects:
  1167 ;;		On entry : 0/0
  1168 ;;		On exit  : 0/0
  1169 ;;		Unchanged: 0/0
  1170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1171 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1172 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1174 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1175 ;;Total ram usage:        0 bytes
  1176 ;; Hardware stack levels used: 1
  1177 ;; Hardware stack levels required when called: 1
  1178 ;; This function calls:
  1179 ;;		_I2C_2_Master_Idle
  1180 ;; This function is called by:
  1181 ;;		_color_writetoaddr
  1182 ;;		_color_read_Red
  1183 ;;		_color_read_Blue
  1184 ;;		_color_read_Green
  1185 ;;		_color_read_Clear
  1186 ;; This function uses a non-reentrant model
  1187 ;;
  1188                           
  1189                           	psect	text7
  1190  001626                     __ptext7:
  1191                           	callstack 0
  1192  001626                     _I2C_2_Master_Stop:
  1193                           	callstack 27
  1194  001626                     
  1195                           ;i2c.c: 41:   I2C_2_Master_Idle();
  1196  001626  ECC1  F00A         	call	_I2C_2_Master_Idle	;wreg free
  1197  00162A                     
  1198                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  1199  00162A  010E               	movlb	14	; () banked
  1200  00162C  85DA               	bsf	218,2,b	;volatile
  1201  00162E                     
  1202                           ; BSR set to: 14
  1203  00162E  0012               	return		;funcret
  1204  001630                     __end_of_I2C_2_Master_Stop:
  1205                           	callstack 0
  1206                           
  1207 ;; *************** function _I2C_2_Master_Start *****************
  1208 ;; Defined at:
  1209 ;;		line 27 in file "i2c.c"
  1210 ;; Parameters:    Size  Location     Type
  1211 ;;		None
  1212 ;; Auto vars:     Size  Location     Type
  1213 ;;		None
  1214 ;; Return value:  Size  Location     Type
  1215 ;;                  1    wreg      void 
  1216 ;; Registers used:
  1217 ;;		wreg, status,2, status,0, cstack
  1218 ;; Tracked objects:
  1219 ;;		On entry : 0/0
  1220 ;;		On exit  : 0/0
  1221 ;;		Unchanged: 0/0
  1222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1223 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1224 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1225 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1226 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1227 ;;Total ram usage:        0 bytes
  1228 ;; Hardware stack levels used: 1
  1229 ;; Hardware stack levels required when called: 1
  1230 ;; This function calls:
  1231 ;;		_I2C_2_Master_Idle
  1232 ;; This function is called by:
  1233 ;;		_color_writetoaddr
  1234 ;;		_color_read_Red
  1235 ;;		_color_read_Blue
  1236 ;;		_color_read_Green
  1237 ;;		_color_read_Clear
  1238 ;; This function uses a non-reentrant model
  1239 ;;
  1240                           
  1241                           	psect	text8
  1242  001630                     __ptext8:
  1243                           	callstack 0
  1244  001630                     _I2C_2_Master_Start:
  1245                           	callstack 27
  1246  001630                     
  1247                           ;i2c.c: 29:   I2C_2_Master_Idle();
  1248  001630  ECC1  F00A         	call	_I2C_2_Master_Idle	;wreg free
  1249  001634                     
  1250                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  1251  001634  010E               	movlb	14	; () banked
  1252  001636  81DA               	bsf	218,0,b	;volatile
  1253  001638                     
  1254                           ; BSR set to: 14
  1255  001638  0012               	return		;funcret
  1256  00163A                     __end_of_I2C_2_Master_Start:
  1257                           	callstack 0
  1258                           
  1259 ;; *************** function _I2C_2_Master_Idle *****************
  1260 ;; Defined at:
  1261 ;;		line 22 in file "i2c.c"
  1262 ;; Parameters:    Size  Location     Type
  1263 ;;		None
  1264 ;; Auto vars:     Size  Location     Type
  1265 ;;		None
  1266 ;; Return value:  Size  Location     Type
  1267 ;;                  1    wreg      void 
  1268 ;; Registers used:
  1269 ;;		wreg, status,2, status,0
  1270 ;; Tracked objects:
  1271 ;;		On entry : 0/0
  1272 ;;		On exit  : 0/0
  1273 ;;		Unchanged: 0/0
  1274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1275 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1276 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1277 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1278 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1279 ;;Total ram usage:        1 bytes
  1280 ;; Hardware stack levels used: 1
  1281 ;; This function calls:
  1282 ;;		Nothing
  1283 ;; This function is called by:
  1284 ;;		_I2C_2_Master_Start
  1285 ;;		_I2C_2_Master_Stop
  1286 ;;		_I2C_2_Master_Write
  1287 ;;		_I2C_2_Master_RepStart
  1288 ;;		_I2C_2_Master_Read
  1289 ;; This function uses a non-reentrant model
  1290 ;;
  1291                           
  1292                           	psect	text9
  1293  001582                     __ptext9:
  1294                           	callstack 0
  1295  001582                     _I2C_2_Master_Idle:
  1296                           	callstack 27
  1297  001582                     l159:
  1298  001582  010E               	movlb	14	; () banked
  1299  001584  B5D8               	btfsc	216,2,b	;volatile
  1300  001586  EFC7  F00A         	goto	u111
  1301  00158A  EFC9  F00A         	goto	u110
  1302  00158E                     u111:
  1303  00158E  EFC1  F00A         	goto	l159
  1304  001592                     u110:
  1305  001592                     
  1306                           ; BSR set to: 14
  1307  001592  CEDA F001          	movff	3802,??_I2C_2_Master_Idle	;volatile
  1308  001596  0E1F               	movlw	31
  1309  001598  1601               	andwf	??_I2C_2_Master_Idle^0,f,c
  1310  00159A  A4D8               	btfss	status,2,c
  1311  00159C  EFD2  F00A         	goto	u121
  1312  0015A0  EFD4  F00A         	goto	u120
  1313  0015A4                     u121:
  1314  0015A4  EFC1  F00A         	goto	l159
  1315  0015A8                     u120:
  1316  0015A8                     
  1317                           ; BSR set to: 14
  1318  0015A8  0012               	return		;funcret
  1319  0015AA                     __end_of_I2C_2_Master_Idle:
  1320                           	callstack 0
  1321                           
  1322 ;; *************** function _I2C_2_Master_Init *****************
  1323 ;; Defined at:
  1324 ;;		line 4 in file "i2c.c"
  1325 ;; Parameters:    Size  Location     Type
  1326 ;;		None
  1327 ;; Auto vars:     Size  Location     Type
  1328 ;;		None
  1329 ;; Return value:  Size  Location     Type
  1330 ;;                  1    wreg      void 
  1331 ;; Registers used:
  1332 ;;		wreg, status,2
  1333 ;; Tracked objects:
  1334 ;;		On entry : 0/0
  1335 ;;		On exit  : 0/0
  1336 ;;		Unchanged: 0/0
  1337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1338 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1339 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1340 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1341 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1342 ;;Total ram usage:        0 bytes
  1343 ;; Hardware stack levels used: 1
  1344 ;; This function calls:
  1345 ;;		Nothing
  1346 ;; This function is called by:
  1347 ;;		_color_click_init
  1348 ;;		_main
  1349 ;; This function uses a non-reentrant model
  1350 ;;
  1351                           
  1352                           	psect	text10
  1353  001558                     __ptext10:
  1354                           	callstack 0
  1355  001558                     _I2C_2_Master_Init:
  1356                           	callstack 29
  1357  001558                     
  1358                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  1359  001558  010E               	movlb	14	; () banked
  1360  00155A  51D9               	movf	217,w,b	;volatile
  1361  00155C  0BF0               	andlw	-16
  1362  00155E  0908               	iorlw	8
  1363  001560  6FD9               	movwf	217,b	;volatile
  1364  001562                     
  1365                           ; BSR set to: 14
  1366                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  1367  001562  8BD9               	bsf	217,5,b	;volatile
  1368                           
  1369                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  1370  001564  0E9F               	movlw	159
  1371  001566  6FD6               	movwf	214,b	;volatile
  1372  001568                     
  1373                           ; BSR set to: 14
  1374                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  1375  001568  8A84               	bsf	132,5,c	;volatile
  1376  00156A                     
  1377                           ; BSR set to: 14
  1378                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  1379  00156A  8C84               	bsf	132,6,c	;volatile
  1380  00156C                     
  1381                           ; BSR set to: 14
  1382                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  1383  00156C  9BA7               	bcf	167,5,b	;volatile
  1384  00156E                     
  1385                           ; BSR set to: 14
  1386                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  1387  00156E  9DA7               	bcf	167,6,b	;volatile
  1388                           
  1389                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  1390  001570  0E1D               	movlw	29
  1391  001572  6F1D               	movwf	29,b	;volatile
  1392                           
  1393                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  1394  001574  0E1E               	movlw	30
  1395  001576  6F1C               	movwf	28,b	;volatile
  1396                           
  1397                           ;i2c.c: 18:   RD5PPS=0x1C;
  1398  001578  0E1C               	movlw	28
  1399  00157A  6F6F               	movwf	111,b	;volatile
  1400                           
  1401                           ;i2c.c: 19:   RD6PPS=0x1B;
  1402  00157C  0E1B               	movlw	27
  1403  00157E  6F70               	movwf	112,b	;volatile
  1404  001580                     
  1405                           ; BSR set to: 14
  1406  001580  0012               	return		;funcret
  1407  001582                     __end_of_I2C_2_Master_Init:
  1408                           	callstack 0
  1409                           
  1410 ;; *************** function _calibration_init *****************
  1411 ;; Defined at:
  1412 ;;		line 20 in file "movement.c"
  1413 ;; Parameters:    Size  Location     Type
  1414 ;;		None
  1415 ;; Auto vars:     Size  Location     Type
  1416 ;;		None
  1417 ;; Return value:  Size  Location     Type
  1418 ;;                  1    wreg      void 
  1419 ;; Registers used:
  1420 ;;		None
  1421 ;; Tracked objects:
  1422 ;;		On entry : 0/0
  1423 ;;		On exit  : 0/0
  1424 ;;		Unchanged: 0/0
  1425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1426 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1427 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1428 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1429 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1430 ;;Total ram usage:        0 bytes
  1431 ;; Hardware stack levels used: 1
  1432 ;; This function calls:
  1433 ;;		Nothing
  1434 ;; This function is called by:
  1435 ;;		_main
  1436 ;; This function uses a non-reentrant model
  1437 ;;
  1438                           
  1439                           	psect	text11
  1440  00161A                     __ptext11:
  1441                           	callstack 0
  1442  00161A                     _calibration_init:
  1443                           	callstack 30
  1444  00161A  8486               	bsf	134,2,c	;volatile
  1445                           
  1446                           ;movement.c: 22:     ANSELFbits.ANSELF2=0;
  1447  00161C  010E               	movlb	14	; () banked
  1448  00161E  95B4               	bcf	180,2,b	;volatile
  1449                           
  1450                           ;movement.c: 23:     TRISFbits.TRISF3=1;
  1451  001620  8686               	bsf	134,3,c	;volatile
  1452                           
  1453                           ;movement.c: 24:     ANSELFbits.ANSELF3=0;
  1454  001622  97B4               	bcf	180,3,b	;volatile
  1455  001624                     
  1456                           ; BSR set to: 14
  1457  001624  0012               	return		;funcret
  1458  001626                     __end_of_calibration_init:
  1459                           	callstack 0
  1460                           
  1461 ;; *************** function _calibration *****************
  1462 ;; Defined at:
  1463 ;;		line 145 in file "dc_motor.c"
  1464 ;; Parameters:    Size  Location     Type
  1465 ;;  mL              2   45[COMRAM] PTR struct DC_motor
  1466 ;;		 -> main@motorL(10), 
  1467 ;;  mR              2   47[COMRAM] PTR struct DC_motor
  1468 ;;		 -> main@motorR(10), 
  1469 ;; Auto vars:     Size  Location     Type
  1470 ;;		None
  1471 ;; Return value:  Size  Location     Type
  1472 ;;                  1    wreg      void 
  1473 ;; Registers used:
  1474 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1475 ;; Tracked objects:
  1476 ;;		On entry : 0/0
  1477 ;;		On exit  : 0/0
  1478 ;;		Unchanged: 0/0
  1479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1480 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1482 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1483 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1484 ;;Total ram usage:        6 bytes
  1485 ;; Hardware stack levels used: 1
  1486 ;; Hardware stack levels required when called: 5
  1487 ;; This function calls:
  1488 ;;		_test_movement
  1489 ;; This function is called by:
  1490 ;;		_main
  1491 ;; This function uses a non-reentrant model
  1492 ;;
  1493                           
  1494                           	psect	text12
  1495  001348                     __ptext12:
  1496                           	callstack 0
  1497  001348                     _calibration:
  1498                           	callstack 25
  1499  001348                     l293:
  1500                           
  1501                           ;dc_motor.c: 148:         if (!PORTFbits.RF2) {
  1502  001348  B48E               	btfsc	142,2,c	;volatile
  1503  00134A  EFA9  F009         	goto	u851
  1504  00134E  EFAB  F009         	goto	u850
  1505  001352                     u851:
  1506  001352  EFC1  F009         	goto	l1981
  1507  001356                     u850:
  1508  001356                     
  1509                           ;dc_motor.c: 149:             _delay((unsigned long)((300)*(64000000/4000.0)));
  1510  001356  0E19               	movlw	25
  1511  001358  6E33               	movwf	(??_calibration+1)^0,c
  1512  00135A  0E5A               	movlw	90
  1513  00135C  6E32               	movwf	??_calibration^0,c
  1514  00135E  0EB2               	movlw	178
  1515  001360                     u1127:
  1516  001360  2EE8               	decfsz	wreg,f,c
  1517  001362  D7FE               	bra	u1127
  1518  001364  2E32               	decfsz	??_calibration^0,f,c
  1519  001366  D7FC               	bra	u1127
  1520  001368  2E33               	decfsz	(??_calibration+1)^0,f,c
  1521  00136A  D7FA               	bra	u1127
  1522  00136C                     
  1523                           ;dc_motor.c: 150:             if (!PORTFbits.RF3) {break;}
  1524  00136C  B68E               	btfsc	142,3,c	;volatile
  1525  00136E  EFBB  F009         	goto	u861
  1526  001372  EFBD  F009         	goto	u860
  1527  001376                     u861:
  1528  001376  EFBF  F009         	goto	l1979
  1529  00137A                     u860:
  1530  00137A  EFE0  F009         	goto	l1993
  1531  00137E                     l1979:
  1532  00137E  0E05               	movlw	5
  1533  001380  2659               	addwf	_SENSITIVITY^0,f,c
  1534  001382                     l1981:
  1535                           
  1536                           ;dc_motor.c: 154:         if (!PORTFbits.RF3) {
  1537  001382  B68E               	btfsc	142,3,c	;volatile
  1538  001384  EFC6  F009         	goto	u871
  1539  001388  EFC8  F009         	goto	u870
  1540  00138C                     u871:
  1541  00138C  EFA4  F009         	goto	l293
  1542  001390                     u870:
  1543  001390                     
  1544                           ;dc_motor.c: 155:             _delay((unsigned long)((300)*(64000000/4000.0)));
  1545  001390  0E19               	movlw	25
  1546  001392  6E33               	movwf	(??_calibration+1)^0,c
  1547  001394  0E5A               	movlw	90
  1548  001396  6E32               	movwf	??_calibration^0,c
  1549  001398  0EB2               	movlw	178
  1550  00139A                     u1137:
  1551  00139A  2EE8               	decfsz	wreg,f,c
  1552  00139C  D7FE               	bra	u1137
  1553  00139E  2E32               	decfsz	??_calibration^0,f,c
  1554  0013A0  D7FC               	bra	u1137
  1555  0013A2  2E33               	decfsz	(??_calibration+1)^0,f,c
  1556  0013A4  D7FA               	bra	u1137
  1557  0013A6                     
  1558                           ;dc_motor.c: 156:             if (!PORTFbits.RF2) {break;}
  1559  0013A6  B48E               	btfsc	142,2,c	;volatile
  1560  0013A8  EFD8  F009         	goto	u881
  1561  0013AC  EFDA  F009         	goto	u880
  1562  0013B0                     u881:
  1563  0013B0  EFDC  F009         	goto	l1991
  1564  0013B4                     u880:
  1565  0013B4  EFE0  F009         	goto	l1993
  1566  0013B8                     l1991:
  1567  0013B8  0E05               	movlw	5
  1568  0013BA  5E59               	subwf	_SENSITIVITY^0,f,c
  1569  0013BC  EFA4  F009         	goto	l293
  1570  0013C0                     l1993:
  1571                           
  1572                           ;dc_motor.c: 160:     test_movement(mL, mR);
  1573  0013C0  C02E  F02A         	movff	calibration@mL,test_movement@mL
  1574  0013C4  C02F  F02B         	movff	calibration@mL+1,test_movement@mL+1
  1575  0013C8  C030  F02C         	movff	calibration@mR,test_movement@mR
  1576  0013CC  C031  F02D         	movff	calibration@mR+1,test_movement@mR+1
  1577  0013D0  EC95  F00A         	call	_test_movement	;wreg free
  1578  0013D4                     
  1579                           ;dc_motor.c: 161:     _delay((unsigned long)((3000)*(64000000/4000.0)));
  1580  0013D4  0EF4               	movlw	244
  1581  0013D6  6E33               	movwf	(??_calibration+1)^0,c
  1582  0013D8  0E82               	movlw	130
  1583  0013DA  6E32               	movwf	??_calibration^0,c
  1584  0013DC  0E05               	movlw	5
  1585  0013DE                     u1147:
  1586  0013DE  2EE8               	decfsz	wreg,f,c
  1587  0013E0  D7FE               	bra	u1147
  1588  0013E2  2E32               	decfsz	??_calibration^0,f,c
  1589  0013E4  D7FC               	bra	u1147
  1590  0013E6  2E33               	decfsz	(??_calibration+1)^0,f,c
  1591  0013E8  D7FA               	bra	u1147
  1592  0013EA  F000               	nop	
  1593  0013EC  0012               	return		;funcret
  1594  0013EE                     __end_of_calibration:
  1595                           	callstack 0
  1596                           
  1597 ;; *************** function _test_movement *****************
  1598 ;; Defined at:
  1599 ;;		line 15 in file "movement.c"
  1600 ;; Parameters:    Size  Location     Type
  1601 ;;  mL              2   41[COMRAM] PTR struct DC_motor
  1602 ;;		 -> main@motorL(10), 
  1603 ;;  mR              2   43[COMRAM] PTR struct DC_motor
  1604 ;;		 -> main@motorR(10), 
  1605 ;; Auto vars:     Size  Location     Type
  1606 ;;		None
  1607 ;; Return value:  Size  Location     Type
  1608 ;;                  1    wreg      void 
  1609 ;; Registers used:
  1610 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1611 ;; Tracked objects:
  1612 ;;		On entry : 0/0
  1613 ;;		On exit  : 0/0
  1614 ;;		Unchanged: 0/0
  1615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1616 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1617 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1619 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1620 ;;Total ram usage:        4 bytes
  1621 ;; Hardware stack levels used: 1
  1622 ;; Hardware stack levels required when called: 4
  1623 ;; This function calls:
  1624 ;;		_stop
  1625 ;;		_turnRight
  1626 ;; This function is called by:
  1627 ;;		_calibration
  1628 ;;		_main
  1629 ;; This function uses a non-reentrant model
  1630 ;;
  1631                           
  1632                           	psect	text13
  1633  00152A                     __ptext13:
  1634                           	callstack 0
  1635  00152A                     _test_movement:
  1636                           	callstack 26
  1637  00152A                     
  1638                           ;movement.c: 15: void test_movement (struct DC_motor *mL, struct DC_motor *mR);movement.
      +                          c: 16: {;movement.c: 17:     turnRight(mL, mR, 90);
  1639  00152A  C02A  F020         	movff	test_movement@mL,turnRight@mL
  1640  00152E  C02B  F021         	movff	test_movement@mL+1,turnRight@mL+1
  1641  001532  C02C  F022         	movff	test_movement@mR,turnRight@mR
  1642  001536  C02D  F023         	movff	test_movement@mR+1,turnRight@mR+1
  1643  00153A  0E5A               	movlw	90
  1644  00153C  6E24               	movwf	turnRight@angle_right^0,c
  1645  00153E  EC7B  F008         	call	_turnRight	;wreg free
  1646                           
  1647                           ;movement.c: 18:     stop(mL, mR);
  1648  001542  C02A  F01A         	movff	test_movement@mL,stop@mL
  1649  001546  C02B  F01B         	movff	test_movement@mL+1,stop@mL+1
  1650  00154A  C02C  F01C         	movff	test_movement@mR,stop@mR
  1651  00154E  C02D  F01D         	movff	test_movement@mR+1,stop@mR+1
  1652  001552  EC46  F009         	call	_stop	;wreg free
  1653  001556  0012               	return		;funcret
  1654  001558                     __end_of_test_movement:
  1655                           	callstack 0
  1656                           
  1657 ;; *************** function _turnRight *****************
  1658 ;; Defined at:
  1659 ;;		line 113 in file "dc_motor.c"
  1660 ;; Parameters:    Size  Location     Type
  1661 ;;  mL              2   31[COMRAM] PTR struct DC_motor
  1662 ;;		 -> main@motorL(10), 
  1663 ;;  mR              2   33[COMRAM] PTR struct DC_motor
  1664 ;;		 -> main@motorR(10), 
  1665 ;;  angle_right     1   35[COMRAM] unsigned char 
  1666 ;; Auto vars:     Size  Location     Type
  1667 ;;  i               2   39[COMRAM] unsigned int 
  1668 ;;  delay           2   37[COMRAM] unsigned int 
  1669 ;; Return value:  Size  Location     Type
  1670 ;;                  1    wreg      void 
  1671 ;; Registers used:
  1672 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1673 ;; Tracked objects:
  1674 ;;		On entry : 0/0
  1675 ;;		On exit  : 0/0
  1676 ;;		Unchanged: 0/0
  1677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1678 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1679 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1680 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1681 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1682 ;;Total ram usage:       10 bytes
  1683 ;; Hardware stack levels used: 1
  1684 ;; Hardware stack levels required when called: 3
  1685 ;; This function calls:
  1686 ;;		_setMotorPWM
  1687 ;;		_stop
  1688 ;; This function is called by:
  1689 ;;		_test_movement
  1690 ;;		_movement
  1691 ;; This function uses a non-reentrant model
  1692 ;;
  1693                           
  1694                           	psect	text14
  1695  0010F6                     __ptext14:
  1696                           	callstack 0
  1697  0010F6                     _turnRight:
  1698                           	callstack 26
  1699  0010F6                     
  1700                           ;dc_motor.c: 113: void turnRight(struct DC_motor *mL, struct DC_motor *mR, unsigned char
      +                           angle_right);dc_motor.c: 114: {;dc_motor.c: 115:     mL->direction=1;
  1701  0010F6  EE20 F001          	lfsr	2,1
  1702  0010FA  5020               	movf	turnRight@mL^0,w,c
  1703  0010FC  26D9               	addwf	fsr2l,f,c
  1704  0010FE  5021               	movf	(turnRight@mL+1)^0,w,c
  1705  001100  22DA               	addwfc	fsr2h,f,c
  1706  001102  0E01               	movlw	1
  1707  001104  6EDF               	movwf	indf2,c
  1708                           
  1709                           ;dc_motor.c: 116:     mR->direction=1;
  1710  001106  EE20 F001          	lfsr	2,1
  1711  00110A  5022               	movf	turnRight@mR^0,w,c
  1712  00110C  26D9               	addwf	fsr2l,f,c
  1713  00110E  5023               	movf	(turnRight@mR+1)^0,w,c
  1714  001110  22DA               	addwfc	fsr2h,f,c
  1715  001112  0E01               	movlw	1
  1716  001114  6EDF               	movwf	indf2,c
  1717                           
  1718                           ;dc_motor.c: 117:     while (mL->power <40){
  1719  001116  EFAC  F008         	goto	l1903
  1720  00111A                     l1895:
  1721                           
  1722                           ;dc_motor.c: 118:         mL->power += 5;
  1723  00111A  C020  FFD9         	movff	turnRight@mL,fsr2l
  1724  00111E  C021  FFDA         	movff	turnRight@mL+1,fsr2h
  1725  001122  0E05               	movlw	5
  1726  001124  26DF               	addwf	indf2,f,c
  1727                           
  1728                           ;dc_motor.c: 119:         mR->power = 0;
  1729  001126  C022  FFD9         	movff	turnRight@mR,fsr2l
  1730  00112A  C023  FFDA         	movff	turnRight@mR+1,fsr2h
  1731  00112E  0E00               	movlw	0
  1732  001130  6EDF               	movwf	indf2,c
  1733  001132                     
  1734                           ;dc_motor.c: 120:         setMotorPWM(mL);
  1735  001132  C020  F00F         	movff	turnRight@mL,setMotorPWM@m
  1736  001136  C021  F010         	movff	turnRight@mL+1,setMotorPWM@m+1
  1737  00113A  EC28  F007         	call	_setMotorPWM	;wreg free
  1738  00113E                     
  1739                           ;dc_motor.c: 121:         setMotorPWM(mR);
  1740  00113E  C022  F00F         	movff	turnRight@mR,setMotorPWM@m
  1741  001142  C023  F010         	movff	turnRight@mR+1,setMotorPWM@m+1
  1742  001146  EC28  F007         	call	_setMotorPWM	;wreg free
  1743  00114A                     
  1744                           ;dc_motor.c: 122:         _delay((unsigned long)((10)*(64000000/4000.0)));
  1745  00114A  0ED0               	movlw	208
  1746  00114C  6E25               	movwf	??_turnRight^0,c
  1747  00114E  0ECA               	movlw	202
  1748  001150                     u1157:
  1749  001150  2EE8               	decfsz	wreg,f,c
  1750  001152  D7FE               	bra	u1157
  1751  001154  2E25               	decfsz	??_turnRight^0,f,c
  1752  001156  D7FC               	bra	u1157
  1753  001158                     l1903:
  1754                           
  1755                           ;dc_motor.c: 117:     while (mL->power <40){
  1756  001158  C020  FFD9         	movff	turnRight@mL,fsr2l
  1757  00115C  C021  FFDA         	movff	turnRight@mL+1,fsr2h
  1758  001160  0E27               	movlw	39
  1759  001162  64DF               	cpfsgt	indf2,c
  1760  001164  EFB6  F008         	goto	u811
  1761  001168  EFB8  F008         	goto	u810
  1762  00116C                     u811:
  1763  00116C  EF8D  F008         	goto	l1895
  1764  001170                     u810:
  1765  001170                     
  1766                           ;dc_motor.c: 124:     unsigned int delay = angle_right * SENSITIVITY;
  1767  001170  5024               	movf	turnRight@angle_right^0,w,c
  1768  001172  0259               	mulwf	_SENSITIVITY^0,c
  1769  001174  CFF3 F026          	movff	prodl,turnRight@delay
  1770  001178  CFF4 F027          	movff	prodh,turnRight@delay+1
  1771  00117C                     
  1772                           ;dc_motor.c: 125:     for(unsigned int i = 0; i < delay; i++){_delay((unsigned long)((1)
      +                          *(64000000/4000.0)));}
  1773  00117C  0E00               	movlw	0
  1774  00117E  6E29               	movwf	(turnRight@i+1)^0,c
  1775  001180  0E00               	movlw	0
  1776  001182  6E28               	movwf	turnRight@i^0,c
  1777  001184  EFCE  F008         	goto	l279
  1778  001188                     l1909:
  1779  001188  0E15               	movlw	21
  1780  00118A  6E25               	movwf	??_turnRight^0,c
  1781  00118C  0EC6               	movlw	198
  1782  00118E                     u1167:
  1783  00118E  2EE8               	decfsz	wreg,f,c
  1784  001190  D7FE               	bra	u1167
  1785  001192  2E25               	decfsz	??_turnRight^0,f,c
  1786  001194  D7FC               	bra	u1167
  1787  001196  D000               	nop2	
  1788  001198  4A28               	infsnz	turnRight@i^0,f,c
  1789  00119A  2A29               	incf	(turnRight@i+1)^0,f,c
  1790  00119C                     l279:
  1791  00119C  5026               	movf	turnRight@delay^0,w,c
  1792  00119E  5C28               	subwf	turnRight@i^0,w,c
  1793  0011A0  5027               	movf	(turnRight@delay+1)^0,w,c
  1794  0011A2  5829               	subwfb	(turnRight@i+1)^0,w,c
  1795  0011A4  A0D8               	btfss	status,0,c
  1796  0011A6  EFD7  F008         	goto	u821
  1797  0011AA  EFD9  F008         	goto	u820
  1798  0011AE                     u821:
  1799  0011AE  EFC4  F008         	goto	l1909
  1800  0011B2                     u820:
  1801  0011B2                     
  1802                           ;dc_motor.c: 126:     stop(mL,mR);
  1803  0011B2  C020  F01A         	movff	turnRight@mL,stop@mL
  1804  0011B6  C021  F01B         	movff	turnRight@mL+1,stop@mL+1
  1805  0011BA  C022  F01C         	movff	turnRight@mR,stop@mR
  1806  0011BE  C023  F01D         	movff	turnRight@mR+1,stop@mR+1
  1807  0011C2  EC46  F009         	call	_stop	;wreg free
  1808  0011C6  0012               	return		;funcret
  1809  0011C8                     __end_of_turnRight:
  1810                           	callstack 0
  1811                           
  1812 ;; *************** function _stop *****************
  1813 ;; Defined at:
  1814 ;;		line 83 in file "dc_motor.c"
  1815 ;; Parameters:    Size  Location     Type
  1816 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  1817 ;;		 -> main@motorL(10), 
  1818 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  1819 ;;		 -> main@motorR(10), 
  1820 ;; Auto vars:     Size  Location     Type
  1821 ;;		None
  1822 ;; Return value:  Size  Location     Type
  1823 ;;                  1    wreg      void 
  1824 ;; Registers used:
  1825 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1826 ;; Tracked objects:
  1827 ;;		On entry : 0/0
  1828 ;;		On exit  : 0/0
  1829 ;;		Unchanged: 0/0
  1830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1831 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1832 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1833 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1834 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1835 ;;Total ram usage:        6 bytes
  1836 ;; Hardware stack levels used: 1
  1837 ;; Hardware stack levels required when called: 2
  1838 ;; This function calls:
  1839 ;;		_setMotorPWM
  1840 ;; This function is called by:
  1841 ;;		_turnRight
  1842 ;;		_test_movement
  1843 ;;		_turnLeft
  1844 ;; This function uses a non-reentrant model
  1845 ;;
  1846                           
  1847                           	psect	text15
  1848  00128C                     __ptext15:
  1849                           	callstack 0
  1850  00128C                     _stop:
  1851                           	callstack 26
  1852  00128C                     
  1853                           ;dc_motor.c: 83: void stop(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 84: {;d
      +                          c_motor.c: 85:     while (mL->power >0 || mR->power >0){
  1854  00128C  EF7F  F009         	goto	l1887
  1855  001290                     l1873:
  1856                           
  1857                           ;dc_motor.c: 86:         if (mL->power !=0){mL->power -= 5;}
  1858  001290  C01A  FFD9         	movff	stop@mL,fsr2l
  1859  001294  C01B  FFDA         	movff	stop@mL+1,fsr2h
  1860  001298  50DF               	movf	indf2,w,c
  1861  00129A  B4D8               	btfsc	status,2,c
  1862  00129C  EF52  F009         	goto	u771
  1863  0012A0  EF54  F009         	goto	u770
  1864  0012A4                     u771:
  1865  0012A4  EF5A  F009         	goto	l1877
  1866  0012A8                     u770:
  1867  0012A8  C01A  FFD9         	movff	stop@mL,fsr2l
  1868  0012AC  C01B  FFDA         	movff	stop@mL+1,fsr2h
  1869  0012B0  0E05               	movlw	5
  1870  0012B2  5EDF               	subwf	indf2,f,c
  1871  0012B4                     l1877:
  1872                           
  1873                           ;dc_motor.c: 87:         if (mR->power !=0){mR->power -= 5;}
  1874  0012B4  C01C  FFD9         	movff	stop@mR,fsr2l
  1875  0012B8  C01D  FFDA         	movff	stop@mR+1,fsr2h
  1876  0012BC  50DF               	movf	indf2,w,c
  1877  0012BE  B4D8               	btfsc	status,2,c
  1878  0012C0  EF64  F009         	goto	u781
  1879  0012C4  EF66  F009         	goto	u780
  1880  0012C8                     u781:
  1881  0012C8  EF6C  F009         	goto	l1881
  1882  0012CC                     u780:
  1883  0012CC  C01C  FFD9         	movff	stop@mR,fsr2l
  1884  0012D0  C01D  FFDA         	movff	stop@mR+1,fsr2h
  1885  0012D4  0E05               	movlw	5
  1886  0012D6  5EDF               	subwf	indf2,f,c
  1887  0012D8                     l1881:
  1888                           
  1889                           ;dc_motor.c: 88:         setMotorPWM(mL);
  1890  0012D8  C01A  F00F         	movff	stop@mL,setMotorPWM@m
  1891  0012DC  C01B  F010         	movff	stop@mL+1,setMotorPWM@m+1
  1892  0012E0  EC28  F007         	call	_setMotorPWM	;wreg free
  1893  0012E4                     
  1894                           ;dc_motor.c: 89:         setMotorPWM(mR);
  1895  0012E4  C01C  F00F         	movff	stop@mR,setMotorPWM@m
  1896  0012E8  C01D  F010         	movff	stop@mR+1,setMotorPWM@m+1
  1897  0012EC  EC28  F007         	call	_setMotorPWM	;wreg free
  1898  0012F0                     
  1899                           ;dc_motor.c: 90:         _delay((unsigned long)((10)*(64000000/4000.0)));
  1900  0012F0  0ED0               	movlw	208
  1901  0012F2  6E1E               	movwf	??_stop^0,c
  1902  0012F4  0ECA               	movlw	202
  1903  0012F6                     u1177:
  1904  0012F6  2EE8               	decfsz	wreg,f,c
  1905  0012F8  D7FE               	bra	u1177
  1906  0012FA  2E1E               	decfsz	??_stop^0,f,c
  1907  0012FC  D7FC               	bra	u1177
  1908  0012FE                     l1887:
  1909                           
  1910                           ;dc_motor.c: 85:     while (mL->power >0 || mR->power >0){
  1911  0012FE  C01A  FFD9         	movff	stop@mL,fsr2l
  1912  001302  C01B  FFDA         	movff	stop@mL+1,fsr2h
  1913  001306  50DF               	movf	indf2,w,c
  1914  001308  A4D8               	btfss	status,2,c
  1915  00130A  EF89  F009         	goto	u791
  1916  00130E  EF8B  F009         	goto	u790
  1917  001312                     u791:
  1918  001312  EF48  F009         	goto	l1873
  1919  001316                     u790:
  1920  001316  C01C  FFD9         	movff	stop@mR,fsr2l
  1921  00131A  C01D  FFDA         	movff	stop@mR+1,fsr2h
  1922  00131E  50DF               	movf	indf2,w,c
  1923  001320  A4D8               	btfss	status,2,c
  1924  001322  EF95  F009         	goto	u801
  1925  001326  EF97  F009         	goto	u800
  1926  00132A                     u801:
  1927  00132A  EF48  F009         	goto	l1873
  1928  00132E                     u800:
  1929  00132E                     
  1930                           ;dc_motor.c: 92:     _delay((unsigned long)((500)*(64000000/4000.0)));
  1931  00132E  0E29               	movlw	41
  1932  001330  6E1F               	movwf	(??_stop+1)^0,c
  1933  001332  0E96               	movlw	150
  1934  001334  6E1E               	movwf	??_stop^0,c
  1935  001336  0E7F               	movlw	127
  1936  001338                     u1187:
  1937  001338  2EE8               	decfsz	wreg,f,c
  1938  00133A  D7FE               	bra	u1187
  1939  00133C  2E1E               	decfsz	??_stop^0,f,c
  1940  00133E  D7FC               	bra	u1187
  1941  001340  2E1F               	decfsz	(??_stop+1)^0,f,c
  1942  001342  D7FA               	bra	u1187
  1943  001344  F000               	nop	
  1944  001346  0012               	return		;funcret
  1945  001348                     __end_of_stop:
  1946                           	callstack 0
  1947                           
  1948 ;; *************** function _setMotorPWM *****************
  1949 ;; Defined at:
  1950 ;;		line 60 in file "dc_motor.c"
  1951 ;; Parameters:    Size  Location     Type
  1952 ;;  m               2   14[COMRAM] PTR struct DC_motor
  1953 ;;		 -> main@motorR(10), main@motorL(10), 
  1954 ;; Auto vars:     Size  Location     Type
  1955 ;;  PWMduty         2   23[COMRAM] int 
  1956 ;; Return value:  Size  Location     Type
  1957 ;;                  1    wreg      void 
  1958 ;; Registers used:
  1959 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1960 ;; Tracked objects:
  1961 ;;		On entry : 0/0
  1962 ;;		On exit  : 0/0
  1963 ;;		Unchanged: 0/0
  1964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1965 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1966 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1967 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1968 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1969 ;;Total ram usage:       11 bytes
  1970 ;; Hardware stack levels used: 1
  1971 ;; Hardware stack levels required when called: 1
  1972 ;; This function calls:
  1973 ;;		___awdiv
  1974 ;;		___wmul
  1975 ;; This function is called by:
  1976 ;;		_stop
  1977 ;;		_turnRight
  1978 ;;		_turnLeft
  1979 ;;		_fullSpeedAhead
  1980 ;; This function uses a non-reentrant model
  1981 ;;
  1982                           
  1983                           	psect	text16
  1984  000E50                     __ptext16:
  1985                           	callstack 0
  1986  000E50                     _setMotorPWM:
  1987                           	callstack 26
  1988  000E50                     
  1989                           ;dc_motor.c: 60: void setMotorPWM(struct DC_motor *m);dc_motor.c: 61: {;dc_motor.c: 62: 
      +                           int PWMduty;;dc_motor.c: 64:  if (m->direction){
  1990  000E50  EE20 F001          	lfsr	2,1
  1991  000E54  500F               	movf	setMotorPWM@m^0,w,c
  1992  000E56  26D9               	addwf	fsr2l,f,c
  1993  000E58  5010               	movf	(setMotorPWM@m+1)^0,w,c
  1994  000E5A  22DA               	addwfc	fsr2h,f,c
  1995  000E5C  50DF               	movf	indf2,w,c
  1996  000E5E  B4D8               	btfsc	status,2,c
  1997  000E60  EF34  F007         	goto	u731
  1998  000E64  EF36  F007         	goto	u730
  1999  000E68                     u731:
  2000  000E68  EF67  F007         	goto	l1861
  2001  000E6C                     u730:
  2002  000E6C                     
  2003                           ;dc_motor.c: 66:   PWMduty=m->PWMperiod - ((int)(m->power)*(m->PWMperiod))/100;
  2004  000E6C  C00F  FFD9         	movff	setMotorPWM@m,fsr2l
  2005  000E70  C010  FFDA         	movff	setMotorPWM@m+1,fsr2h
  2006  000E74  50DF               	movf	indf2,w,c
  2007  000E76  6E11               	movwf	??_setMotorPWM^0,c
  2008  000E78  5011               	movf	??_setMotorPWM^0,w,c
  2009  000E7A  6E01               	movwf	___wmul@multiplier^0,c
  2010  000E7C  6A02               	clrf	(___wmul@multiplier+1)^0,c
  2011  000E7E  EE20 F007          	lfsr	2,7
  2012  000E82  500F               	movf	setMotorPWM@m^0,w,c
  2013  000E84  26D9               	addwf	fsr2l,f,c
  2014  000E86  5010               	movf	(setMotorPWM@m+1)^0,w,c
  2015  000E88  22DA               	addwfc	fsr2h,f,c
  2016  000E8A  CFDE F003          	movff	postinc2,___wmul@multiplicand
  2017  000E8E  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  2018  000E92  ECD5  F00A         	call	___wmul	;wreg free
  2019  000E96  C001  F007         	movff	?___wmul,___awdiv@dividend
  2020  000E9A  C002  F008         	movff	?___wmul+1,___awdiv@dividend+1
  2021  000E9E  0E00               	movlw	0
  2022  000EA0  6E0A               	movwf	(___awdiv@divisor+1)^0,c
  2023  000EA2  0E64               	movlw	100
  2024  000EA4  6E09               	movwf	___awdiv@divisor^0,c
  2025  000EA6  ECE4  F008         	call	___awdiv	;wreg free
  2026  000EAA  EE20 F007          	lfsr	2,7
  2027  000EAE  500F               	movf	setMotorPWM@m^0,w,c
  2028  000EB0  26D9               	addwf	fsr2l,f,c
  2029  000EB2  5010               	movf	(setMotorPWM@m+1)^0,w,c
  2030  000EB4  22DA               	addwfc	fsr2h,f,c
  2031  000EB6  CFDE F012          	movff	postinc2,??_setMotorPWM+1
  2032  000EBA  CFDD F013          	movff	postdec2,??_setMotorPWM+2
  2033  000EBE  5007               	movf	?___awdiv^0,w,c
  2034  000EC0  5C12               	subwf	(??_setMotorPWM+1)^0,w,c
  2035  000EC2  6E18               	movwf	setMotorPWM@PWMduty^0,c
  2036  000EC4  5008               	movf	(?___awdiv+1)^0,w,c
  2037  000EC6  5813               	subwfb	(??_setMotorPWM+2)^0,w,c
  2038  000EC8  6E19               	movwf	(setMotorPWM@PWMduty+1)^0,c
  2039                           
  2040                           ;dc_motor.c: 67:  }
  2041  000ECA  EF8A  F007         	goto	l1863
  2042  000ECE                     l1861:
  2043                           
  2044                           ;dc_motor.c: 70:   PWMduty=((int)(m->power)*(m->PWMperiod))/100;
  2045  000ECE  C00F  FFD9         	movff	setMotorPWM@m,fsr2l
  2046  000ED2  C010  FFDA         	movff	setMotorPWM@m+1,fsr2h
  2047  000ED6  50DF               	movf	indf2,w,c
  2048  000ED8  6E11               	movwf	??_setMotorPWM^0,c
  2049  000EDA  5011               	movf	??_setMotorPWM^0,w,c
  2050  000EDC  6E01               	movwf	___wmul@multiplier^0,c
  2051  000EDE  6A02               	clrf	(___wmul@multiplier+1)^0,c
  2052  000EE0  EE20 F007          	lfsr	2,7
  2053  000EE4  500F               	movf	setMotorPWM@m^0,w,c
  2054  000EE6  26D9               	addwf	fsr2l,f,c
  2055  000EE8  5010               	movf	(setMotorPWM@m+1)^0,w,c
  2056  000EEA  22DA               	addwfc	fsr2h,f,c
  2057  000EEC  CFDE F003          	movff	postinc2,___wmul@multiplicand
  2058  000EF0  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  2059  000EF4  ECD5  F00A         	call	___wmul	;wreg free
  2060  000EF8  C001  F007         	movff	?___wmul,___awdiv@dividend
  2061  000EFC  C002  F008         	movff	?___wmul+1,___awdiv@dividend+1
  2062  000F00  0E00               	movlw	0
  2063  000F02  6E0A               	movwf	(___awdiv@divisor+1)^0,c
  2064  000F04  0E64               	movlw	100
  2065  000F06  6E09               	movwf	___awdiv@divisor^0,c
  2066  000F08  ECE4  F008         	call	___awdiv	;wreg free
  2067  000F0C  C007  F018         	movff	?___awdiv,setMotorPWM@PWMduty
  2068  000F10  C008  F019         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  2069  000F14                     l1863:
  2070                           
  2071                           ;dc_motor.c: 73:  *(m->dutyHighByte) = PWMduty;
  2072  000F14  EE20 F002          	lfsr	2,2
  2073  000F18  500F               	movf	setMotorPWM@m^0,w,c
  2074  000F1A  26D9               	addwf	fsr2l,f,c
  2075  000F1C  5010               	movf	(setMotorPWM@m+1)^0,w,c
  2076  000F1E  22DA               	addwfc	fsr2h,f,c
  2077  000F20  CFDE F011          	movff	postinc2,??_setMotorPWM
  2078  000F24  CFDD F012          	movff	postdec2,??_setMotorPWM+1
  2079  000F28  C011  FFD9         	movff	??_setMotorPWM,fsr2l
  2080  000F2C  C012  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2081  000F30  C018  FFDF         	movff	setMotorPWM@PWMduty,indf2
  2082  000F34                     
  2083                           ;dc_motor.c: 75:  if (m->direction){
  2084  000F34  EE20 F001          	lfsr	2,1
  2085  000F38  500F               	movf	setMotorPWM@m^0,w,c
  2086  000F3A  26D9               	addwf	fsr2l,f,c
  2087  000F3C  5010               	movf	(setMotorPWM@m+1)^0,w,c
  2088  000F3E  22DA               	addwfc	fsr2h,f,c
  2089  000F40  50DF               	movf	indf2,w,c
  2090  000F42  B4D8               	btfsc	status,2,c
  2091  000F44  EFA6  F007         	goto	u741
  2092  000F48  EFA8  F007         	goto	u740
  2093  000F4C                     u741:
  2094  000F4C  EFDD  F007         	goto	l1869
  2095  000F50                     u740:
  2096  000F50                     
  2097                           ;dc_motor.c: 76:   *(m->dir_LAT) = *(m->dir_LAT) | (1<<(m->dir_pin));
  2098  000F50  EE20 F004          	lfsr	2,4
  2099  000F54  500F               	movf	setMotorPWM@m^0,w,c
  2100  000F56  26D9               	addwf	fsr2l,f,c
  2101  000F58  5010               	movf	(setMotorPWM@m+1)^0,w,c
  2102  000F5A  22DA               	addwfc	fsr2h,f,c
  2103  000F5C  CFDE F011          	movff	postinc2,??_setMotorPWM
  2104  000F60  CFDD F012          	movff	postdec2,??_setMotorPWM+1
  2105  000F64  C011  FFD9         	movff	??_setMotorPWM,fsr2l
  2106  000F68  C012  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2107  000F6C  EE10 F004          	lfsr	1,4
  2108  000F70  500F               	movf	setMotorPWM@m^0,w,c
  2109  000F72  26E1               	addwf	fsr1l,f,c
  2110  000F74  5010               	movf	(setMotorPWM@m+1)^0,w,c
  2111  000F76  22E2               	addwfc	fsr1h,f,c
  2112  000F78  CFE6 F013          	movff	postinc1,??_setMotorPWM+2
  2113  000F7C  CFE5 F014          	movff	postdec1,??_setMotorPWM+3
  2114  000F80  C013  FFE1         	movff	??_setMotorPWM+2,fsr1l
  2115  000F84  C014  FFE2         	movff	??_setMotorPWM+3,fsr1h
  2116  000F88  50E7               	movf	indf1,w,c
  2117  000F8A  6E15               	movwf	(??_setMotorPWM+4)^0,c
  2118  000F8C  EE10 F006          	lfsr	1,6
  2119  000F90  500F               	movf	setMotorPWM@m^0,w,c
  2120  000F92  26E1               	addwf	fsr1l,f,c
  2121  000F94  5010               	movf	(setMotorPWM@m+1)^0,w,c
  2122  000F96  22E2               	addwfc	fsr1h,f,c
  2123  000F98  50E7               	movf	indf1,w,c
  2124  000F9A  6E16               	movwf	(??_setMotorPWM+5)^0,c
  2125  000F9C  0E01               	movlw	1
  2126  000F9E  6E17               	movwf	(??_setMotorPWM+6)^0,c
  2127  000FA0  2A16               	incf	(??_setMotorPWM+5)^0,f,c
  2128  000FA2  EFD5  F007         	goto	u754
  2129  000FA6                     u755:
  2130  000FA6  90D8               	bcf	status,0,c
  2131  000FA8  3617               	rlcf	(??_setMotorPWM+6)^0,f,c
  2132  000FAA                     u754:
  2133  000FAA  2E16               	decfsz	(??_setMotorPWM+5)^0,f,c
  2134  000FAC  EFD3  F007         	goto	u755
  2135  000FB0  5017               	movf	(??_setMotorPWM+6)^0,w,c
  2136  000FB2  1015               	iorwf	(??_setMotorPWM+4)^0,w,c
  2137  000FB4  6EDF               	movwf	indf2,c
  2138                           
  2139                           ;dc_motor.c: 77:  } else {
  2140  000FB6  EF11  F008         	goto	l256
  2141  000FBA                     l1869:
  2142                           
  2143                           ;dc_motor.c: 78:   *(m->dir_LAT) = *(m->dir_LAT) & (~(1<<(m->dir_pin)));
  2144  000FBA  EE20 F004          	lfsr	2,4
  2145  000FBE  500F               	movf	setMotorPWM@m^0,w,c
  2146  000FC0  26D9               	addwf	fsr2l,f,c
  2147  000FC2  5010               	movf	(setMotorPWM@m+1)^0,w,c
  2148  000FC4  22DA               	addwfc	fsr2h,f,c
  2149  000FC6  CFDE F011          	movff	postinc2,??_setMotorPWM
  2150  000FCA  CFDD F012          	movff	postdec2,??_setMotorPWM+1
  2151  000FCE  C011  FFD9         	movff	??_setMotorPWM,fsr2l
  2152  000FD2  C012  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2153  000FD6  EE10 F004          	lfsr	1,4
  2154  000FDA  500F               	movf	setMotorPWM@m^0,w,c
  2155  000FDC  26E1               	addwf	fsr1l,f,c
  2156  000FDE  5010               	movf	(setMotorPWM@m+1)^0,w,c
  2157  000FE0  22E2               	addwfc	fsr1h,f,c
  2158  000FE2  CFE6 F013          	movff	postinc1,??_setMotorPWM+2
  2159  000FE6  CFE5 F014          	movff	postdec1,??_setMotorPWM+3
  2160  000FEA  C013  FFE1         	movff	??_setMotorPWM+2,fsr1l
  2161  000FEE  C014  FFE2         	movff	??_setMotorPWM+3,fsr1h
  2162  000FF2  50E7               	movf	indf1,w,c
  2163  000FF4  6E15               	movwf	(??_setMotorPWM+4)^0,c
  2164  000FF6  EE10 F006          	lfsr	1,6
  2165  000FFA  500F               	movf	setMotorPWM@m^0,w,c
  2166  000FFC  26E1               	addwf	fsr1l,f,c
  2167  000FFE  5010               	movf	(setMotorPWM@m+1)^0,w,c
  2168  001000  22E2               	addwfc	fsr1h,f,c
  2169  001002  50E7               	movf	indf1,w,c
  2170  001004  6E16               	movwf	(??_setMotorPWM+5)^0,c
  2171  001006  0E01               	movlw	1
  2172  001008  6E17               	movwf	(??_setMotorPWM+6)^0,c
  2173  00100A  2A16               	incf	(??_setMotorPWM+5)^0,f,c
  2174  00100C  EF0A  F008         	goto	u764
  2175  001010                     u765:
  2176  001010  90D8               	bcf	status,0,c
  2177  001012  3617               	rlcf	(??_setMotorPWM+6)^0,f,c
  2178  001014                     u764:
  2179  001014  2E16               	decfsz	(??_setMotorPWM+5)^0,f,c
  2180  001016  EF08  F008         	goto	u765
  2181  00101A  5017               	movf	(??_setMotorPWM+6)^0,w,c
  2182  00101C  0AFF               	xorlw	255
  2183  00101E  1415               	andwf	(??_setMotorPWM+4)^0,w,c
  2184  001020  6EDF               	movwf	indf2,c
  2185  001022                     l256:
  2186  001022  0012               	return		;funcret
  2187  001024                     __end_of_setMotorPWM:
  2188                           	callstack 0
  2189                           
  2190 ;; *************** function ___wmul *****************
  2191 ;; Defined at:
  2192 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\Umul16.c"
  2193 ;; Parameters:    Size  Location     Type
  2194 ;;  multiplier      2    0[COMRAM] unsigned int 
  2195 ;;  multiplicand    2    2[COMRAM] unsigned int 
  2196 ;; Auto vars:     Size  Location     Type
  2197 ;;  product         2    4[COMRAM] unsigned int 
  2198 ;; Return value:  Size  Location     Type
  2199 ;;                  2    0[COMRAM] unsigned int 
  2200 ;; Registers used:
  2201 ;;		wreg, status,2, status,0, prodl, prodh
  2202 ;; Tracked objects:
  2203 ;;		On entry : 0/0
  2204 ;;		On exit  : 0/0
  2205 ;;		Unchanged: 0/0
  2206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2207 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2208 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2209 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2210 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2211 ;;Total ram usage:        6 bytes
  2212 ;; Hardware stack levels used: 1
  2213 ;; This function calls:
  2214 ;;		Nothing
  2215 ;; This function is called by:
  2216 ;;		_setMotorPWM
  2217 ;;		_detect_color
  2218 ;; This function uses a non-reentrant model
  2219 ;;
  2220                           
  2221                           	psect	text17
  2222  0015AA                     __ptext17:
  2223                           	callstack 0
  2224  0015AA                     ___wmul:
  2225                           	callstack 26
  2226  0015AA  5001               	movf	___wmul@multiplier^0,w,c
  2227  0015AC  0203               	mulwf	___wmul@multiplicand^0,c
  2228  0015AE  CFF3 F005          	movff	prodl,___wmul@product
  2229  0015B2  CFF4 F006          	movff	prodh,___wmul@product+1
  2230  0015B6  5001               	movf	___wmul@multiplier^0,w,c
  2231  0015B8  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  2232  0015BA  50F3               	movf	243,w,c
  2233  0015BC  2606               	addwf	(___wmul@product+1)^0,f,c
  2234  0015BE  5002               	movf	(___wmul@multiplier+1)^0,w,c
  2235  0015C0  0203               	mulwf	___wmul@multiplicand^0,c
  2236  0015C2  50F3               	movf	243,w,c
  2237  0015C4  2606               	addwf	(___wmul@product+1)^0,f,c
  2238  0015C6  C005  F001         	movff	___wmul@product,?___wmul
  2239  0015CA  C006  F002         	movff	___wmul@product+1,?___wmul+1
  2240  0015CE  0012               	return		;funcret
  2241  0015D0                     __end_of___wmul:
  2242                           	callstack 0
  2243                           
  2244 ;; *************** function ___awdiv *****************
  2245 ;; Defined at:
  2246 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\awdiv.c"
  2247 ;; Parameters:    Size  Location     Type
  2248 ;;  dividend        2    6[COMRAM] int 
  2249 ;;  divisor         2    8[COMRAM] int 
  2250 ;; Auto vars:     Size  Location     Type
  2251 ;;  quotient        2   12[COMRAM] int 
  2252 ;;  sign            1   11[COMRAM] unsigned char 
  2253 ;;  counter         1   10[COMRAM] unsigned char 
  2254 ;; Return value:  Size  Location     Type
  2255 ;;                  2    6[COMRAM] int 
  2256 ;; Registers used:
  2257 ;;		wreg, status,2, status,0
  2258 ;; Tracked objects:
  2259 ;;		On entry : 0/0
  2260 ;;		On exit  : 0/0
  2261 ;;		Unchanged: 0/0
  2262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2263 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2264 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2265 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2266 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2267 ;;Total ram usage:        8 bytes
  2268 ;; Hardware stack levels used: 1
  2269 ;; This function calls:
  2270 ;;		Nothing
  2271 ;; This function is called by:
  2272 ;;		_setMotorPWM
  2273 ;; This function uses a non-reentrant model
  2274 ;;
  2275                           
  2276                           	psect	text18
  2277  0011C8                     __ptext18:
  2278                           	callstack 0
  2279  0011C8                     ___awdiv:
  2280                           	callstack 26
  2281  0011C8  0E00               	movlw	0
  2282  0011CA  6E0C               	movwf	___awdiv@sign^0,c
  2283  0011CC  BE0A               	btfsc	(___awdiv@divisor+1)^0,7,c
  2284  0011CE  EFED  F008         	goto	u670
  2285  0011D2  EFEB  F008         	goto	u671
  2286  0011D6                     u671:
  2287  0011D6  EFF3  F008         	goto	l1821
  2288  0011DA                     u670:
  2289  0011DA  6C09               	negf	___awdiv@divisor^0,c
  2290  0011DC  1E0A               	comf	(___awdiv@divisor+1)^0,f,c
  2291  0011DE  B0D8               	btfsc	status,0,c
  2292  0011E0  2A0A               	incf	(___awdiv@divisor+1)^0,f,c
  2293  0011E2  0E01               	movlw	1
  2294  0011E4  6E0C               	movwf	___awdiv@sign^0,c
  2295  0011E6                     l1821:
  2296  0011E6  BE08               	btfsc	(___awdiv@dividend+1)^0,7,c
  2297  0011E8  EFFA  F008         	goto	u680
  2298  0011EC  EFF8  F008         	goto	u681
  2299  0011F0                     u681:
  2300  0011F0  EF00  F009         	goto	l1827
  2301  0011F4                     u680:
  2302  0011F4  6C07               	negf	___awdiv@dividend^0,c
  2303  0011F6  1E08               	comf	(___awdiv@dividend+1)^0,f,c
  2304  0011F8  B0D8               	btfsc	status,0,c
  2305  0011FA  2A08               	incf	(___awdiv@dividend+1)^0,f,c
  2306  0011FC  0E01               	movlw	1
  2307  0011FE  1A0C               	xorwf	___awdiv@sign^0,f,c
  2308  001200                     l1827:
  2309  001200  0E00               	movlw	0
  2310  001202  6E0E               	movwf	(___awdiv@quotient+1)^0,c
  2311  001204  0E00               	movlw	0
  2312  001206  6E0D               	movwf	___awdiv@quotient^0,c
  2313  001208  5009               	movf	___awdiv@divisor^0,w,c
  2314  00120A  100A               	iorwf	(___awdiv@divisor+1)^0,w,c
  2315  00120C  B4D8               	btfsc	status,2,c
  2316  00120E  EF0B  F009         	goto	u691
  2317  001212  EF0D  F009         	goto	u690
  2318  001216                     u691:
  2319  001216  EF35  F009         	goto	l1849
  2320  00121A                     u690:
  2321  00121A  0E01               	movlw	1
  2322  00121C  6E0B               	movwf	___awdiv@counter^0,c
  2323  00121E  EF15  F009         	goto	l1835
  2324  001222                     l1833:
  2325  001222  90D8               	bcf	status,0,c
  2326  001224  3609               	rlcf	___awdiv@divisor^0,f,c
  2327  001226  360A               	rlcf	(___awdiv@divisor+1)^0,f,c
  2328  001228  2A0B               	incf	___awdiv@counter^0,f,c
  2329  00122A                     l1835:
  2330  00122A  AE0A               	btfss	(___awdiv@divisor+1)^0,7,c
  2331  00122C  EF1A  F009         	goto	u701
  2332  001230  EF1C  F009         	goto	u700
  2333  001234                     u701:
  2334  001234  EF11  F009         	goto	l1833
  2335  001238                     u700:
  2336  001238                     l1837:
  2337  001238  90D8               	bcf	status,0,c
  2338  00123A  360D               	rlcf	___awdiv@quotient^0,f,c
  2339  00123C  360E               	rlcf	(___awdiv@quotient+1)^0,f,c
  2340  00123E  5009               	movf	___awdiv@divisor^0,w,c
  2341  001240  5C07               	subwf	___awdiv@dividend^0,w,c
  2342  001242  500A               	movf	(___awdiv@divisor+1)^0,w,c
  2343  001244  5808               	subwfb	(___awdiv@dividend+1)^0,w,c
  2344  001246  A0D8               	btfss	status,0,c
  2345  001248  EF28  F009         	goto	u711
  2346  00124C  EF2A  F009         	goto	u710
  2347  001250                     u711:
  2348  001250  EF2F  F009         	goto	l1845
  2349  001254                     u710:
  2350  001254  5009               	movf	___awdiv@divisor^0,w,c
  2351  001256  5E07               	subwf	___awdiv@dividend^0,f,c
  2352  001258  500A               	movf	(___awdiv@divisor+1)^0,w,c
  2353  00125A  5A08               	subwfb	(___awdiv@dividend+1)^0,f,c
  2354  00125C  800D               	bsf	___awdiv@quotient^0,0,c
  2355  00125E                     l1845:
  2356  00125E  90D8               	bcf	status,0,c
  2357  001260  320A               	rrcf	(___awdiv@divisor+1)^0,f,c
  2358  001262  3209               	rrcf	___awdiv@divisor^0,f,c
  2359  001264  2E0B               	decfsz	___awdiv@counter^0,f,c
  2360  001266  EF1C  F009         	goto	l1837
  2361  00126A                     l1849:
  2362  00126A  500C               	movf	___awdiv@sign^0,w,c
  2363  00126C  B4D8               	btfsc	status,2,c
  2364  00126E  EF3B  F009         	goto	u721
  2365  001272  EF3D  F009         	goto	u720
  2366  001276                     u721:
  2367  001276  EF41  F009         	goto	l1853
  2368  00127A                     u720:
  2369  00127A  6C0D               	negf	___awdiv@quotient^0,c
  2370  00127C  1E0E               	comf	(___awdiv@quotient+1)^0,f,c
  2371  00127E  B0D8               	btfsc	status,0,c
  2372  001280  2A0E               	incf	(___awdiv@quotient+1)^0,f,c
  2373  001282                     l1853:
  2374  001282  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  2375  001286  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  2376  00128A  0012               	return		;funcret
  2377  00128C                     __end_of___awdiv:
  2378                           	callstack 0
  2379                           
  2380                           	psect	rparam
  2381  0000                     
  2382                           	psect	idloc
  2383                           
  2384                           ;Config register IDLOC0 @ 0x200000
  2385                           ;	unspecified, using default values
  2386  200000                     	org	2097152
  2387  200000  0FFF               	dw	4095
  2388                           
  2389                           ;Config register IDLOC1 @ 0x200002
  2390                           ;	unspecified, using default values
  2391  200002                     	org	2097154
  2392  200002  0FFF               	dw	4095
  2393                           
  2394                           ;Config register IDLOC2 @ 0x200004
  2395                           ;	unspecified, using default values
  2396  200004                     	org	2097156
  2397  200004  0FFF               	dw	4095
  2398                           
  2399                           ;Config register IDLOC3 @ 0x200006
  2400                           ;	unspecified, using default values
  2401  200006                     	org	2097158
  2402  200006  0FFF               	dw	4095
  2403                           
  2404                           ;Config register IDLOC4 @ 0x200008
  2405                           ;	unspecified, using default values
  2406  200008                     	org	2097160
  2407  200008  0FFF               	dw	4095
  2408                           
  2409                           ;Config register IDLOC5 @ 0x20000A
  2410                           ;	unspecified, using default values
  2411  20000A                     	org	2097162
  2412  20000A  0FFF               	dw	4095
  2413                           
  2414                           ;Config register IDLOC6 @ 0x20000C
  2415                           ;	unspecified, using default values
  2416  20000C                     	org	2097164
  2417  20000C  0FFF               	dw	4095
  2418                           
  2419                           ;Config register IDLOC7 @ 0x20000E
  2420                           ;	unspecified, using default values
  2421  20000E                     	org	2097166
  2422  20000E  0FFF               	dw	4095
  2423                           
  2424                           	psect	config
  2425                           
  2426                           ;Config register CONFIG1L @ 0x300000
  2427                           ;	External Oscillator mode Selection bits
  2428                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  2429                           ;	Power-up default value for COSC bits
  2430                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  2431  300000                     	org	3145728
  2432  300000  AA                 	db	170
  2433                           
  2434                           ;Config register CONFIG1H @ 0x300001
  2435                           ;	unspecified, using default values
  2436                           ;	Clock Out Enable bit
  2437                           ;	CLKOUTEN = 0x1, unprogrammed default
  2438                           ;	Clock Switch Enable bit
  2439                           ;	CSWEN = 0x1, unprogrammed default
  2440                           ;	Fail-Safe Clock Monitor Enable bit
  2441                           ;	FCMEN = 0x1, unprogrammed default
  2442  300001                     	org	3145729
  2443  300001  FF                 	db	255
  2444                           
  2445                           ;Config register CONFIG2L @ 0x300002
  2446                           ;	unspecified, using default values
  2447                           ;	Master Clear Enable bit
  2448                           ;	MCLRE = 0x1, unprogrammed default
  2449                           ;	Power-up Timer Enable bit
  2450                           ;	PWRTE = 0x1, unprogrammed default
  2451                           ;	Low-power BOR enable bit
  2452                           ;	LPBOREN = 0x1, unprogrammed default
  2453                           ;	Brown-out Reset Enable bits
  2454                           ;	BOREN = 0x3, unprogrammed default
  2455  300002                     	org	3145730
  2456  300002  FF                 	db	255
  2457                           
  2458                           ;Config register CONFIG2H @ 0x300003
  2459                           ;	unspecified, using default values
  2460                           ;	Brown Out Reset Voltage selection bits
  2461                           ;	BORV = 0x3, unprogrammed default
  2462                           ;	ZCD Disable bit
  2463                           ;	ZCD = 0x1, unprogrammed default
  2464                           ;	PPSLOCK bit One-Way Set Enable bit
  2465                           ;	PPS1WAY = 0x1, unprogrammed default
  2466                           ;	Stack Full/Underflow Reset Enable bit
  2467                           ;	STVREN = 0x1, unprogrammed default
  2468                           ;	Debugger Enable bit
  2469                           ;	DEBUG = 0x1, unprogrammed default
  2470                           ;	Extended Instruction Set Enable bit
  2471                           ;	XINST = 0x1, unprogrammed default
  2472  300003                     	org	3145731
  2473  300003  FF                 	db	255
  2474                           
  2475                           ;Config register CONFIG3L @ 0x300004
  2476                           ;	WDT Period Select bits
  2477                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  2478                           ;	WDT operating mode
  2479                           ;	WDTE = OFF, WDT Disabled
  2480  300004                     	org	3145732
  2481  300004  9F                 	db	159
  2482                           
  2483                           ;Config register CONFIG3H @ 0x300005
  2484                           ;	unspecified, using default values
  2485                           ;	WDT Window Select bits
  2486                           ;	WDTCWS = 0x7, unprogrammed default
  2487                           ;	WDT input clock selector
  2488                           ;	WDTCCS = 0x7, unprogrammed default
  2489  300005                     	org	3145733
  2490  300005  FF                 	db	255
  2491                           
  2492                           ;Config register CONFIG4L @ 0x300006
  2493                           ;	unspecified, using default values
  2494                           ;	Write Protection Block 0
  2495                           ;	WRT0 = 0x1, unprogrammed default
  2496                           ;	Write Protection Block 1
  2497                           ;	WRT1 = 0x1, unprogrammed default
  2498                           ;	Write Protection Block 2
  2499                           ;	WRT2 = 0x1, unprogrammed default
  2500                           ;	Write Protection Block 3
  2501                           ;	WRT3 = 0x1, unprogrammed default
  2502                           ;	Write Protection Block 3
  2503                           ;	WRT4 = 0x1, unprogrammed default
  2504                           ;	Write Protection Block 3
  2505                           ;	WRT5 = 0x1, unprogrammed default
  2506                           ;	Write Protection Block 3
  2507                           ;	WRT6 = 0x1, unprogrammed default
  2508                           ;	Write Protection Block 3
  2509                           ;	WRT7 = 0x1, unprogrammed default
  2510  300006                     	org	3145734
  2511  300006  FF                 	db	255
  2512                           
  2513                           ;Config register CONFIG4H @ 0x300007
  2514                           ;	unspecified, using default values
  2515                           ;	Configuration Register Write Protection bit
  2516                           ;	WRTC = 0x1, unprogrammed default
  2517                           ;	Boot Block Write Protection bit
  2518                           ;	WRTB = 0x1, unprogrammed default
  2519                           ;	Data EEPROM Write Protection bit
  2520                           ;	WRTD = 0x1, unprogrammed default
  2521                           ;	Scanner Enable bit
  2522                           ;	SCANE = 0x1, unprogrammed default
  2523                           ;	Low Voltage Programming Enable bit
  2524                           ;	LVP = 0x1, unprogrammed default
  2525  300007                     	org	3145735
  2526  300007  FF                 	db	255
  2527                           
  2528                           ;Config register CONFIG5L @ 0x300008
  2529                           ;	unspecified, using default values
  2530                           ;	UserNVM Program Memory Code Protection bit
  2531                           ;	CP = 0x1, unprogrammed default
  2532                           ;	DataNVM Memory Code Protection bit
  2533                           ;	CPD = 0x1, unprogrammed default
  2534  300008                     	org	3145736
  2535  300008  FF                 	db	255
  2536                           
  2537                           ;Config register CONFIG5H @ 0x300009
  2538                           ;	unspecified, using default values
  2539  300009                     	org	3145737
  2540  300009  FF                 	db	255
  2541                           
  2542                           ;Config register CONFIG6L @ 0x30000A
  2543                           ;	unspecified, using default values
  2544                           ;	Table Read Protection Block 0
  2545                           ;	EBTR0 = 0x1, unprogrammed default
  2546                           ;	Table Read Protection Block 1
  2547                           ;	EBTR1 = 0x1, unprogrammed default
  2548                           ;	Table Read Protection Block 2
  2549                           ;	EBTR2 = 0x1, unprogrammed default
  2550                           ;	Table Read Protection Block 3
  2551                           ;	EBTR3 = 0x1, unprogrammed default
  2552                           ;	Table Read Protection Block 4
  2553                           ;	EBTR4 = 0x1, unprogrammed default
  2554                           ;	Table Read Protection Block 5
  2555                           ;	EBTR5 = 0x1, unprogrammed default
  2556                           ;	Table Read Protection Block 6
  2557                           ;	EBTR6 = 0x1, unprogrammed default
  2558                           ;	Table Read Protection Block 7
  2559                           ;	EBTR7 = 0x1, unprogrammed default
  2560  30000A                     	org	3145738
  2561  30000A  FF                 	db	255
  2562                           
  2563                           ;Config register CONFIG6H @ 0x30000B
  2564                           ;	unspecified, using default values
  2565                           ;	Boot Block Table Read Protection bit
  2566                           ;	EBTRB = 0x1, unprogrammed default
  2567  30000B                     	org	3145739
  2568  30000B  FF                 	db	255
  2569                           tosu	equ	0xFFF
  2570                           tosh	equ	0xFFE
  2571                           tosl	equ	0xFFD
  2572                           stkptr	equ	0xFFC
  2573                           pclatu	equ	0xFFB
  2574                           pclath	equ	0xFFA
  2575                           pcl	equ	0xFF9
  2576                           tblptru	equ	0xFF8
  2577                           tblptrh	equ	0xFF7
  2578                           tblptrl	equ	0xFF6
  2579                           tablat	equ	0xFF5
  2580                           prodh	equ	0xFF4
  2581                           prodl	equ	0xFF3
  2582                           indf0	equ	0xFEF
  2583                           postinc0	equ	0xFEE
  2584                           postdec0	equ	0xFED
  2585                           preinc0	equ	0xFEC
  2586                           plusw0	equ	0xFEB
  2587                           fsr0h	equ	0xFEA
  2588                           fsr0l	equ	0xFE9
  2589                           wreg	equ	0xFE8
  2590                           indf1	equ	0xFE7
  2591                           postinc1	equ	0xFE6
  2592                           postdec1	equ	0xFE5
  2593                           preinc1	equ	0xFE4
  2594                           plusw1	equ	0xFE3
  2595                           fsr1h	equ	0xFE2
  2596                           fsr1l	equ	0xFE1
  2597                           bsr	equ	0xFE0
  2598                           indf2	equ	0xFDF
  2599                           postinc2	equ	0xFDE
  2600                           postdec2	equ	0xFDD
  2601                           preinc2	equ	0xFDC
  2602                           plusw2	equ	0xFDB
  2603                           fsr2h	equ	0xFDA
  2604                           fsr2l	equ	0xFD9
  2605                           status	equ	0xFD8

Data Sizes:
    Strings     78
    Constant    0
    Data        2
    BSS         104
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     73      89
    BANK0           160      0      90
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    vfprintf$2	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), 

    vfprintf$1	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_13(CODE[5]), STR_12(CODE[6]), STR_1(CODE[15]), 

    vfprintf$0	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    S2158$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S2158$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    test_movement@mR	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(COMRAM[10]), 

    test_movement@mL	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(COMRAM[10]), 

    motorR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhllll[1]), PWM6DCH(BITBIGSFRhhhllll[1]), 

    motorL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhllll[1]), PWM6DCH(BITBIGSFRhhhllll[1]), 

    voltage_display@m.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    voltage_display@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhllll[1]), PWM6DCH(BITBIGSFRhhhllll[1]), 

    voltage_read@m.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    voltage_read@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhllll[1]), PWM6DCH(BITBIGSFRhhhllll[1]), 

    calibration@mR	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(COMRAM[10]), 

    calibration@mL	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(COMRAM[10]), 

    fullSpeedAhead@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    fullSpeedAhead@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhllll[1]), PWM6DCH(BITBIGSFRhhhllll[1]), 

    fullSpeedAhead@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    fullSpeedAhead@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhllll[1]), PWM6DCH(BITBIGSFRhhhllll[1]), 

    turnRight@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhllll[1]), PWM6DCH(BITBIGSFRhhhllll[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(COMRAM[10]), 

    turnRight@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhllll[1]), PWM6DCH(BITBIGSFRhhhllll[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(COMRAM[10]), 

    turnLeft@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhllll[1]), PWM6DCH(BITBIGSFRhhhllll[1]), 

    turnLeft@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhllll[1]), PWM6DCH(BITBIGSFRhhhllll[1]), 

    stop@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhllll[1]), PWM6DCH(BITBIGSFRhhhllll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(COMRAM[10]), 

    stop@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhllll[1]), PWM6DCH(BITBIGSFRhhhllll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(COMRAM[10]), 

    setMotorPWM@m.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhllll[1]), PWM6DCH(BITBIGSFRhhhllll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(COMRAM[10]), main@motorL(COMRAM[10]), 

    initDCmotors_parameter@motorR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    initDCmotors_parameter@motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhllll[1]), PWM6DCH(BITBIGSFRhhhllll[1]), 

    initDCmotors_parameter@motorR	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(COMRAM[10]), 

    initDCmotors_parameter@motorL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    initDCmotors_parameter@motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhllll[1]), PWM6DCH(BITBIGSFRhhhllll[1]), 

    initDCmotors_parameter@motorL	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(COMRAM[10]), 

    motorR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhllll[1]), PWM6DCH(BITBIGSFRhhhllll[1]), 

    S199DC_motor$dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    motorL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    S199DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhllll[1]), PWM6DCH(BITBIGSFRhhhllll[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhllll[1]), PWM6DCH(BITBIGSFRhhhllll[1]), 


Critical Paths under _main in COMRAM

    _main->_calibration
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _calibration->_test_movement
    _test_movement->_turnRight
    _turnRight->_stop
    _stop->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                40    40      0   25806
                                             51 COMRAM    22    22      0
                  _I2C_2_Master_Init
                        _calibration
                   _calibration_init
                   _color_click_init
                    _initDCmotorsPWM
             _initDCmotors_parameter
                         _initUSART4
                      _test_movement
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotors_parameter                               4     0      4     416
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      76
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     287
                                              4 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     287
                                              2 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      15
                                              1 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _calibration_init                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _calibration                                          6     2      4   12508
                                             45 COMRAM     6     2      4
                      _test_movement
 ---------------------------------------------------------------------------------
 (1) _test_movement                                        4     0      4   12312
                                             41 COMRAM     4     0      4
                               _stop
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _turnRight                                           10     5      5    7977
                                             31 COMRAM    10     5      5
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (3) _stop                                                 6     2      4    3943
                                             25 COMRAM     6     2      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (4) _setMotorPWM                                         11     9      2    3311
                                             14 COMRAM    11     9      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    1875
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4     496
                                              6 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_2_Master_Init
   _calibration
     _test_movement
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _turnRight
         _setMotorPWM
         _stop
   _calibration_init
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
   _initDCmotorsPWM
   _initDCmotors_parameter
   _initUSART4
   _test_movement

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      59        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      5A       5       56.2%
BITBIGSFRllhhl      6E      0       0      44        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     49      59       1       93.7%
BITBIGSFRhhhh       40      0       0      32        0.0%
BITBIGSFRlllllh     32      0       0      49        0.0%
BITBIGSFRlllllh     2A      0       0      53        0.0%
BITBIGSFRllllll     26      0       0      57        0.0%
BITBIGSFRllllhh     20      0       0      47        0.0%
BITBIGSFRhhhlh      17      0       0      33        0.0%
BITBIGSFRllhhhh     14      0       0      41        0.0%
BITBIGSFRhhhlll     11      0       0      35        0.0%
BITBIGSFRlllllh      F      0       0      55        0.0%
BITBIGSFRllllhl      C      0       0      48        0.0%
BITBIGSFRlllllh      9      0       0      54        0.0%
BITBIGSFRllhlll      8      0       0      45        0.0%
BITBIGSFRllhhhl      6      0       0      43        0.0%
BITBIGSFRllllll      6      0       0      56        0.0%
BITBIGSFRlllllh      6      0       0      52        0.0%
BITBIGSFRhhhlll      6      0       0      36        0.0%
BITBIGSFRlllllh      5      0       0      51        0.0%
BITBIGSFRllhhhh      3      0       0      42        0.0%
BITBIGSFRlllllh      3      0       0      50        0.0%
BITBIGSFRhlh         1      0       0      37        0.0%
BITBIGSFRhhhllh      1      0       0      34        0.0%
BITBIGSFRlhh         1      0       0      39        0.0%
BITBIGSFRlllh        1      0       0      46        0.0%
BITBIGSFRlhl         1      0       0      40        0.0%
BITBIGSFRhll         1      0       0      38        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      B3      58        0.0%
DATA                 0      0      B3       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.35 build 20211206165544 
Symbol Table                                                                                   Wed Mar 09 01:25:27 2022

                            l45 1528                              l48 15EE                    ___awdiv@sign 000C  
           ___wmul@multiplicand 0003                             l302 13EC                             l162 15A8  
                           l171 162E                             l156 1580                             l165 1638  
                           l174 1618                             l246 14B6                             l159 1582  
                           l256 1022                             l264 1346                             l249 10F4  
                           l345 160C                             l282 11C6                             l293 1348  
                           l279 119C                             l730 128A                             l490 1556  
                           l493 1624                             l499 15CE                             u110 1592  
                           u111 158E                             u120 15A8                             u121 15A4  
                           u700 1238                             u701 1234                             u710 1254  
                           u711 1250                             u720 127A                             u800 132E  
                           u721 1276                             u801 132A                             u730 0E6C  
                           u810 1170                             u731 0E68                             u811 116C  
                           u740 0F50                             u820 11B2                             u741 0F4C  
                           u821 11AE                             u670 11DA                             u671 11D6  
                           u680 11F4                             u681 11F0                             u690 121A  
                           u754 0FAA                             u770 12A8                             u850 1356  
                           u691 1216                             u755 0FA6                             u771 12A4  
                           u851 1352                             u764 1014                             u780 12CC  
                           u860 137A                             u765 1010                             u781 12C8  
                           u861 1376                             u790 1316                             u870 1390  
                           u791 1312                             u871 138C                             u880 13B4  
                           u881 13B0                             wreg 000FE8                            l1243 1582  
                          l1245 1592                            l1351 1558                            l1271 1634  
                          l2151 1406                            l2143 13EE                            l1361 156E  
                          l1353 1562                            l1273 1610                            l2161 1424  
                          l2153 141A                            l2145 13F2                            l1355 1568  
                          l1275 1614                            l2171 142E                            l2163 1426  
                          l2155 141E                            l2147 13F6                            l1357 156A  
                          l1269 1630                            l1277 1626                            l2181 142E  
                          l2173 142E                            l2165 1428                            l2157 1420  
                          l2149 1402                            l1359 156C                            l1279 162A  
                          l1471 1606                            l2183 142E                            l2175 142E  
                          l2167 142A                            l2159 1422                            l1473 1608  
                          l1465 15F0                            l2185 1446                            l2177 142E  
                          l2169 142C                            l1475 160A                            l1467 15FA  
                          l2187 145A                            l2179 142E                            l1821 11E6  
                          l1813 11C8                            l1901 114A                            l1485 161A  
                          l1469 15FC                            l1831 121A                            l1823 11F4  
                          l1815 11CC                            l1807 15AA                            l1911 1198  
                          l1903 1158                            l1841 1254                            l1833 1222  
                          l1825 11FC                            l1817 11DA                            l1809 15C6  
                          l1913 11B2                            l1905 1170                            l1921 14FA  
                          l1851 127A                            l1843 125C                            l1835 122A  
                          l1827 1200                            l1819 11E2                            l1907 117C  
                          l1915 15D2                            l1923 1504                            l1931 1486  
                          l1853 1282                            l1845 125E                            l1837 1238  
                          l1829 1208                            l1861 0ECE                            l1909 1188  
                          l1917 152A                            l1925 1514                            l1933 149E  
                          l1941 1030                            l1847 1264                            l1839 123E  
                          l1863 0F14                            l1871 128C                            l1927 151E  
                          l1919 14F6                            l1935 14B2                            l1951 108C  
                          l1943 1040                            l1849 126A                            l1865 0F34  
                          l1857 0E50                            l1881 12D8                            l1873 1290  
                          l1937 14B4                            l1929 1476                            l1945 1054  
                          l1867 0F50                            l1859 0E6C                            l1891 132E  
                          l1883 12E4                            l1875 12A8                            l1971 1356  
                          l1947 1068                            l1939 1024                            l1869 0FBA  
                          l1885 12F0                            l1877 12B4                            l1893 10F6  
                          l1973 136C                            l1981 1382                            l1949 1078  
                          l1879 12CC                            l1887 12FE                            l1895 111A  
                          l1991 13B8                            l1983 1390                            l1889 1316  
                          l1897 1132                            l1985 13A6                            l1993 13C0  
                          l1899 113E                            l1995 13D4                            l1979 137E  
                          STR_1 0E01                            STR_2 0E3B                            STR_3 0E4B  
                          STR_4 0E35                            STR_5 0E41                            STR_6 0E22  
                          STR_7 0E46                            STR_8 0E1B                            STR_9 0E10  
                          u1107 1438                            u1117 150A                            u1127 1360  
                          u1137 139A                            u1147 13DE                            u1157 1150  
                          u1167 118E                    _BAUD4CONbits 000EE9                            u1177 12F6  
                          _LATE 000F7D                            u1187 1338                            _LATG 000F7F  
                          _T2PR 000FBC                            _main 13EE                            fsr1h 000FE2  
                          fsr2h 000FDA                            indf1 000FE7                            indf2 000FDF  
                          fsr1l 000FE1                            fsr2l 000FD9                            _stop 128C  
                          prodh 000FF4                            prodl 000FF3                            start 0000  
             ?_calibration_init 0001                    ___param_bank 000000              ??_calibration_init 0001  
                         ?_main 0001                           _ADPCH 000F5F                 __end_of___awdiv 128C  
                         STR_10 0E29                           STR_11 0E2F                           ?_stop 001A  
               ___awdiv@divisor 0009                 ___awdiv@counter 000B      __end_of_I2C_2_Master_Start 163A  
    __end_of_I2C_2_Master_Write 161A                           _color 0058                           tablat 000FF5  
                         status 000FD8                 ??_test_movement 002E                 __initialization 14B8  
                  __end_of_main 1476                    __end_of_stop 1348                          ??_main 0034  
                        ??_stop 001E                   __activetblptr 000001                   calibration@mL 002E  
                 calibration@mR 0030          _initDCmotors_parameter 1024                    ?_setMotorPWM 000F  
                        _ADRESH 000F64                ___awdiv@dividend 0007                          _RC0PPS 000E62  
                        _RC4REG 000EE3                          _RE2PPS 000E74                          _RD5PPS 000E6F  
                        _RC7PPS 000E69                          _RD6PPS 000E70        __end_of_color_click_init 152A  
                        _RX4PPS 000E15                          _TX4REG 000EE4                          ___wmul 15AA  
                     ??___awdiv 000B                          clear_0 14D6                          clear_1 14E2  
              ___awdiv@quotient 000D                          _motorL 004A                          _motorR 00B0  
                        isa$std 000001                    __pdataCOMRAM 0058                    __mediumconst 0000  
                        tblptrh 000FF7                          tblptrl 000FF6                          tblptru 000FF8  
                        stop@mL 001A                          stop@mR 001C               ??_initDCmotorsPWM 0003  
                    __accesstop 0060         __end_of__initialization 14E8    initDCmotors_parameter@motorL 0001  
  initDCmotors_parameter@motorR 0003                   ___rparam_used 000001                  __pcstackCOMRAM 0001  
          turnRight@angle_right 0024                      __pbssBANK0 0060               _color_writetoaddr 15D0  
                  _T2CLKCONbits 000FBF              ?_color_writetoaddr 0003                         ?___wmul 0001  
           ??_color_writetoaddr 0004                         _SP4BRGH 000EE6                         _SP4BRGL 000EE5  
                       _PWM6DCH 000FA3                         _PWM7DCH 000FA0                         _SSP2ADD 000ED6  
                       _SSP2BUF 000ED5          color_writetoaddr@value 0003       __end_of_color_writetoaddr 15F0  
                     _ADREFbits 000F58              _I2C_2_Master_Start 1630                      _initUSART4 15F0  
            _I2C_2_Master_Write 160E                         __Hparam 0000                         __Lparam 0000  
                       ___awdiv 11C8                   ??_calibration 0032             ?_I2C_2_Master_Start 0001  
           ?_I2C_2_Master_Write 0001                    __psmallconst 0E00                         __pcinit 14B8  
                       __ramtop 0E00                         __ptext0 13EE                         __ptext1 15F0  
                       __ptext2 1024                         __ptext3 1476                         __ptext4 14F6  
                       __ptext5 15D0                         __ptext6 160E                         __ptext7 1626  
                       __ptext8 1630                         __ptext9 1582         ?_initDCmotors_parameter 0001  
                     _T2CONbits 000FBD                       _T2HLTbits 000FBE                   _RxBufWriteCnt 0057  
          ??_I2C_2_Master_Start 0002            ??_I2C_2_Master_Write 0002            end_of_initialization 14E8  
            setMotorPWM@PWMduty 0018               ?_color_click_init 0001              ??_color_click_init 0005  
         __end_of_test_movement 1558                         postdec1 000FE5                         postdec2 000FDD  
                       postinc0 000FEE                         postinc1 000FE6                         postinc2 000FDE  
               _initDCmotorsPWM 1476  __end_of_initDCmotors_parameter 10F6                       _PORTFbits 000F8E  
             __end_of_turnRight 11C8             __end_of_calibration 13EE                       _TRISAbits 000F81  
                     _TRISCbits 000F83                       _TRISDbits 000F84                       _TRISEbits 000F85  
                     _TRISFbits 000F86                       _TRISGbits 000F87        color_writetoaddr@address 0004  
                  _EUSART4RXbuf 009C                    _EUSART4TXbuf 0060                     ?_initUSART4 0001  
                    main@motorL 0040                      main@motorR 0036                  __end_of___wmul 15D0  
                 __pidataCOMRAM 163A                 test_movement@mL 002A                 test_movement@mR 002C  
           start_initialization 14B8                _calibration_init 161A                   _TxBufWriteCnt 0055  
       __end_of_initDCmotorsPWM 14B8                        ??___wmul 0005                     _calibration 1348  
                   __pbssCOMRAM 004A                        ?___awdiv 0007                     __smallconst 0E00  
             _I2C_2_Master_Idle 1582               _I2C_2_Master_Init 1558               _I2C_2_Master_Stop 1626  
                  _RxBufReadCnt 0056              ?_I2C_2_Master_Idle 0001              ?_I2C_2_Master_Init 0001  
                 ??_setMotorPWM 0011              ?_I2C_2_Master_Stop 0001        initDCmotorsPWM@PWMperiod 0001  
           ??_I2C_2_Master_Idle 0001             ??_I2C_2_Master_Init 0001                  ___wmul@product 0005  
                      _LATAbits 000F79             ??_I2C_2_Master_Stop 0002                        _LATCbits 000F7B  
                      _LATEbits 000F7D                        _LATFbits 000F7E                        _LATGbits 000F7F  
                      _PIE4bits 000E2D                     turnRight@mL 0020                     turnRight@mR 0022  
                      _PIR4bits 000E37                ?_initDCmotorsPWM 0001                        _SSP2CON2 000EDA  
                      _SSP2STAT 000ED8                      _ADCON0bits 000F60       __end_of_I2C_2_Master_Idle 15AA  
     __end_of_I2C_2_Master_Init 1582               ___wmul@multiplier 0001       __end_of_I2C_2_Master_Stop 1630  
                  setMotorPWM@m 000F     I2C_2_Master_Write@data_byte 0002                    _TxBufReadCnt 0054  
                     _turnRight 10F6             __end_of_setMotorPWM 1024                    ??_initUSART4 0001  
                      __Hrparam 0000        __end_of_calibration_init 1626                        __Lrparam 0000  
                  __Lsmallconst 0E00                      _ANSELDbits 000EA7                      _ANSELFbits 000EB4  
            __end_of_initUSART4 160E                      ?_turnRight 0020                        __ptext10 1558  
                      __ptext11 161A                        __ptext12 1348                        __ptext13 152A  
                      __ptext14 10F6                        __ptext15 128C                        __ptext16 0E50  
                      __ptext17 15AA                        __ptext18 11C8                    _SSP2CON1bits 000ED9  
                  _SSP2CON2bits 000EDA                  turnRight@delay 0026                      turnRight@i 0028  
                      isa$xinst 000000                      _RC4STAbits 000EE7                     _SENSITIVITY 0059  
                  ?_calibration 002E                     _setMotorPWM 0E50                     _PWM6CONbits 000FA4  
                   _PWM7CONbits 000FA1                   _test_movement 152A        ??_initDCmotors_parameter 0005  
              _color_click_init 14F6                      _SSP2DATPPS 000E1D                      _SSP2CLKPPS 000E1C  
                   ??_turnRight 0025                      _TX4STAbits 000EE8                  ?_test_movement 002A  
