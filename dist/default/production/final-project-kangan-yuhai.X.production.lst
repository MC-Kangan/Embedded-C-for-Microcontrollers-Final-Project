

Microchip MPLAB XC8 Assembler V2.35 build 20211206165544 
                                                                                               Tue Mar 08 20:25:32 2022

Microchip MPLAB XC8 C Compiler v2.35 (Free license) build 20211206165544 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    30                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    31                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    32                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    33  0000                     
    34                           ; Version 2.35
    35                           ; Generated 05/05/2021 GMT
    36                           ; 
    37                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    38                           ; All rights reserved.
    39                           ; 
    40                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    41                           ; 
    42                           ; Redistribution and use in source and binary forms, with or without modification, are
    43                           ; permitted provided that the following conditions are met:
    44                           ; 
    45                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    46                           ;        conditions and the following disclaimer.
    47                           ; 
    48                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    49                           ;        of conditions and the following disclaimer in the documentation and/or other
    50                           ;        materials provided with the distribution. Publication is not required when
    51                           ;        this file is used in an embedded application.
    52                           ; 
    53                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    54                           ;        software without specific prior written permission.
    55                           ; 
    56                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    57                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    58                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    59                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    60                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    61                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    62                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    63                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    64                           ; 
    65                           ; 
    66                           ; Code-generator required, PIC18F67K40 Definitions
    67                           ; 
    68                           ; SFR Addresses
    69  0000                     
    70                           	psect	idataCOMRAM
    71  00156A                     __pidataCOMRAM:
    72                           	callstack 0
    73                           
    74                           ;initializer for _color
    75  00156A  01                 	db	1
    76  0000                     _TRISFbits	set	3974
    77  0000                     _TX4REG	set	3812
    78  0000                     _RC4STAbits	set	3815
    79  0000                     _SP4BRGH	set	3814
    80  0000                     _TRISGbits	set	3975
    81  0000                     _TRISEbits	set	3973
    82  0000                     _SSP2CON2bits	set	3802
    83  0000                     _LATG	set	3967
    84  0000                     _LATE	set	3965
    85  0000                     _RX4PPS	set	3605
    86  0000                     _SSP2CLKPPS	set	3612
    87  0000                     _SSP2DATPPS	set	3613
    88  0000                     _ANSELDbits	set	3751
    89  0000                     _SSP2ADD	set	3798
    90  0000                     _SSP2CON1bits	set	3801
    91  0000                     _LATAbits	set	3961
    92  0000                     _LATFbits	set	3966
    93  0000                     _LATGbits	set	3967
    94  0000                     _TRISAbits	set	3969
    95  0000                     _TRISCbits	set	3971
    96  0000                     _TRISDbits	set	3972
    97  0000                     _LATCbits	set	3963
    98  0000                     _LATEbits	set	3965
    99  0000                     _RC4REG	set	3811
   100  0000                     _SP4BRGL	set	3813
   101  0000                     _TX4STAbits	set	3816
   102  0000                     _BAUD4CONbits	set	3817
   103  0000                     _SSP2CON2	set	3802
   104  0000                     _SSP2STAT	set	3800
   105  0000                     _ANSELFbits	set	3764
   106  0000                     _SSP2BUF	set	3797
   107  0000                     _PIE4bits	set	3629
   108  0000                     _PIR4bits	set	3639
   109  0000                     _RC0PPS	set	3682
   110  0000                     _RC7PPS	set	3689
   111  0000                     _RD5PPS	set	3695
   112  0000                     _RE2PPS	set	3700
   113  0000                     _RD6PPS	set	3696
   114  0000                     _T2PR	set	4028
   115  0000                     _T2CONbits	set	4029
   116  0000                     _PWM7DCH	set	4000
   117  0000                     _PWM6DCH	set	4003
   118  0000                     _T2CLKCONbits	set	4031
   119  0000                     _T2HLTbits	set	4030
   120  0000                     _PWM6CONbits	set	4004
   121  0000                     _PWM7CONbits	set	4001
   122  0000                     _ADREFbits	set	3928
   123  0000                     _ADPCH	set	3935
   124  0000                     _ADRESH	set	3940
   125  0000                     _ADCON0bits	set	3936
   126                           
   127                           	psect	smallconst
   128  000E00                     __psmallconst:
   129                           	callstack 0
   130  000E00  00                 	db	0
   131  000E01                     STR_1:
   132                           
   133                           ; BSR set to: 14
   134  000E01  09                 	db	9
   135  000E02  25                 	db	37
   136  000E03  64                 	db	100	;'d'
   137  000E04  09                 	db	9
   138  000E05  25                 	db	37
   139  000E06  64                 	db	100	;'d'
   140  000E07  09                 	db	9
   141  000E08  25                 	db	37
   142  000E09  64                 	db	100	;'d'
   143  000E0A  09                 	db	9
   144  000E0B  25                 	db	37
   145  000E0C  64                 	db	100	;'d'
   146  000E0D  0D                 	db	13
   147  000E0E  0A                 	db	10
   148  000E0F  00                 	db	0
   149  000E10                     
   150                           ; BSR set to: 14
   151  000E10  4C                 	db	76	;'L'
   152  000E11  69                 	db	105	;'i'
   153  000E12  67                 	db	103	;'g'
   154  000E13  68                 	db	104	;'h'
   155  000E14  74                 	db	116	;'t'
   156  000E15  20                 	db	32
   157  000E16  62                 	db	98	;'b'
   158  000E17  6C                 	db	108	;'l'
   159  000E18  75                 	db	117	;'u'
   160  000E19  65                 	db	101	;'e'
   161  000E1A  00                 	db	0
   162  000E1B                     
   163                           ; BSR set to: 14
   164  000E1B  4F                 	db	79	;'O'
   165  000E1C  72                 	db	114	;'r'
   166  000E1D  61                 	db	97	;'a'
   167  000E1E  6E                 	db	110	;'n'
   168  000E1F  67                 	db	103	;'g'
   169  000E20  65                 	db	101	;'e'
   170  000E21  00                 	db	0
   171  000E22                     
   172                           ; BSR set to: 14
   173  000E22  59                 	db	89	;'Y'
   174  000E23  65                 	db	101	;'e'
   175  000E24  6C                 	db	108	;'l'
   176  000E25  6C                 	db	108	;'l'
   177  000E26  6F                 	db	111	;'o'
   178  000E27  77                 	db	119	;'w'
   179  000E28  00                 	db	0
   180  000E29                     
   181                           ; BSR set to: 14
   182  000E29  57                 	db	87	;'W'
   183  000E2A  68                 	db	104	;'h'
   184  000E2B  69                 	db	105	;'i'
   185  000E2C  74                 	db	116	;'t'
   186  000E2D  65                 	db	101	;'e'
   187  000E2E  00                 	db	0
   188  000E2F                     
   189                           ; BSR set to: 14
   190  000E2F  42                 	db	66	;'B'
   191  000E30  6C                 	db	108	;'l'
   192  000E31  61                 	db	97	;'a'
   193  000E32  63                 	db	99	;'c'
   194  000E33  6B                 	db	107	;'k'
   195  000E34  00                 	db	0
   196  000E35                     
   197                           ; BSR set to: 14
   198  000E35  47                 	db	71	;'G'
   199  000E36  72                 	db	114	;'r'
   200  000E37  65                 	db	101	;'e'
   201  000E38  65                 	db	101	;'e'
   202  000E39  6E                 	db	110	;'n'
   203  000E3A  00                 	db	0
   204  000E3B                     
   205                           ; BSR set to: 14
   206  000E3B  45                 	db	69	;'E'
   207  000E3C  72                 	db	114	;'r'
   208  000E3D  72                 	db	114	;'r'
   209  000E3E  6F                 	db	111	;'o'
   210  000E3F  72                 	db	114	;'r'
   211  000E40  00                 	db	0
   212  000E41                     
   213                           ; BSR set to: 14
   214  000E41  42                 	db	66	;'B'
   215  000E42  6C                 	db	108	;'l'
   216  000E43  75                 	db	117	;'u'
   217  000E44  65                 	db	101	;'e'
   218  000E45  00                 	db	0
   219  000E46                     
   220                           ; BSR set to: 14
   221  000E46  50                 	db	80	;'P'
   222  000E47  69                 	db	105	;'i'
   223  000E48  6E                 	db	110	;'n'
   224  000E49  6B                 	db	107	;'k'
   225  000E4A  00                 	db	0
   226  000E4B                     
   227                           ; BSR set to: 14
   228  000E4B  52                 	db	82	;'R'
   229  000E4C  65                 	db	101	;'e'
   230  000E4D  64                 	db	100	;'d'
   231  000E4E  00                 	db	0
   232  000E4F  00                 	db	0	; dummy byte at the end
   233  0000                     
   234                           ; #config settings
   235                           
   236                           	psect	cinit
   237  0013FA                     __pcinit:
   238                           	callstack 0
   239  0013FA                     start_initialization:
   240                           	callstack 0
   241  0013FA                     __initialization:
   242                           	callstack 0
   243                           
   244                           ; Initialize objects allocated to COMRAM (1 bytes)
   245                           ; load TBLPTR registers with __pidataCOMRAM
   246  0013FA  0E6A               	movlw	low __pidataCOMRAM
   247  0013FC  6EF6               	movwf	tblptrl,c
   248  0013FE  0E15               	movlw	high __pidataCOMRAM
   249  001400  6EF7               	movwf	tblptrh,c
   250  001402  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   251  001404  6EF8               	movwf	tblptru,c
   252  001406  0009               	tblrd		*+	;fetch initializer
   253  001408  CFF5 F05C          	movff	tablat,__pdataCOMRAM
   254                           
   255                           ; Clear objects allocated to BANK0 (60 bytes)
   256  00140C  EE00  F060         	lfsr	0,__pbssBANK0
   257  001410  0E3C               	movlw	60
   258  001412                     clear_0:
   259  001412  6AEE               	clrf	postinc0,c
   260  001414  06E8               	decf	wreg,f,c
   261  001416  E1FD               	bnz	clear_0
   262                           
   263                           ; Clear objects allocated to COMRAM (24 bytes)
   264  001418  EE00  F044         	lfsr	0,__pbssCOMRAM
   265  00141C  0E18               	movlw	24
   266  00141E                     clear_1:
   267  00141E  6AEE               	clrf	postinc0,c
   268  001420  06E8               	decf	wreg,f,c
   269  001422  E1FD               	bnz	clear_1
   270  001424                     end_of_initialization:
   271                           	callstack 0
   272  001424                     __end_of__initialization:
   273                           	callstack 0
   274  001424  0E00               	movlw	low (__Lsmallconst shr (0+16))
   275  001426  6EF8               	movwf	tblptru,c
   276  001428  0E0E               	movlw	high __Lsmallconst
   277  00142A  6EF7               	movwf	tblptrh,c
   278  00142C  0100               	movlb	0
   279  00142E  EFA4  F009         	goto	_main	;jump to C main() function
   280                           
   281                           	psect	bssCOMRAM
   282  000044                     __pbssCOMRAM:
   283                           	callstack 0
   284  000044                     _EUSART4RXbuf:
   285                           	callstack 0
   286  000044                     	ds	20
   287  000058                     _TxBufReadCnt:
   288                           	callstack 0
   289  000058                     	ds	1
   290  000059                     _TxBufWriteCnt:
   291                           	callstack 0
   292  000059                     	ds	1
   293  00005A                     _RxBufReadCnt:
   294                           	callstack 0
   295  00005A                     	ds	1
   296  00005B                     _RxBufWriteCnt:
   297                           	callstack 0
   298  00005B                     	ds	1
   299                           
   300                           	psect	dataCOMRAM
   301  00005C                     __pdataCOMRAM:
   302                           	callstack 0
   303  00005C                     _color:
   304                           	callstack 0
   305  00005C                     	ds	1
   306                           
   307                           	psect	bssBANK0
   308  000060                     __pbssBANK0:
   309                           	callstack 0
   310  000060                     _EUSART4TXbuf:
   311                           	callstack 0
   312  000060                     	ds	60
   313                           
   314                           	psect	cstackCOMRAM
   315  000001                     __pcstackCOMRAM:
   316                           	callstack 0
   317  000001                     ??_I2C_2_Master_Idle:
   318  000001                     ?___wmul:
   319                           	callstack 0
   320  000001                     initDCmotorsPWM@PWMperiod:
   321                           	callstack 0
   322  000001                     initDCmotors_parameter@motorL:
   323                           	callstack 0
   324  000001                     ___wmul@multiplier:
   325                           	callstack 0
   326                           
   327                           ; 2 bytes @ 0x0
   328  000001                     	ds	1
   329  000002                     I2C_2_Master_Write@data_byte:
   330                           	callstack 0
   331                           
   332                           ; 1 bytes @ 0x1
   333  000002                     	ds	1
   334  000003                     color_writetoaddr@value:
   335                           	callstack 0
   336  000003                     initDCmotors_parameter@motorR:
   337                           	callstack 0
   338  000003                     ___wmul@multiplicand:
   339                           	callstack 0
   340                           
   341                           ; 2 bytes @ 0x2
   342  000003                     	ds	1
   343  000004                     color_writetoaddr@address:
   344                           	callstack 0
   345                           
   346                           ; 1 bytes @ 0x3
   347  000004                     	ds	1
   348  000005                     ??_color_click_init:
   349  000005                     ___wmul@product:
   350                           	callstack 0
   351                           
   352                           ; 2 bytes @ 0x4
   353  000005                     	ds	2
   354  000007                     ?___awdiv:
   355                           	callstack 0
   356  000007                     ___awdiv@dividend:
   357                           	callstack 0
   358                           
   359                           ; 2 bytes @ 0x6
   360  000007                     	ds	2
   361  000009                     ___awdiv@divisor:
   362                           	callstack 0
   363                           
   364                           ; 2 bytes @ 0x8
   365  000009                     	ds	2
   366  00000B                     ___awdiv@counter:
   367                           	callstack 0
   368                           
   369                           ; 1 bytes @ 0xA
   370  00000B                     	ds	1
   371  00000C                     ___awdiv@sign:
   372                           	callstack 0
   373                           
   374                           ; 1 bytes @ 0xB
   375  00000C                     	ds	1
   376  00000D                     ___awdiv@quotient:
   377                           	callstack 0
   378                           
   379                           ; 2 bytes @ 0xC
   380  00000D                     	ds	2
   381  00000F                     setMotorPWM@m:
   382                           	callstack 0
   383                           
   384                           ; 2 bytes @ 0xE
   385  00000F                     	ds	2
   386  000011                     ??_setMotorPWM:
   387                           
   388                           ; 1 bytes @ 0x10
   389  000011                     	ds	7
   390  000018                     setMotorPWM@PWMduty:
   391                           	callstack 0
   392                           
   393                           ; 2 bytes @ 0x17
   394  000018                     	ds	2
   395  00001A                     stop@mL:
   396                           	callstack 0
   397                           
   398                           ; 2 bytes @ 0x19
   399  00001A                     	ds	2
   400  00001C                     stop@mR:
   401                           	callstack 0
   402                           
   403                           ; 2 bytes @ 0x1B
   404  00001C                     	ds	2
   405  00001E                     ??_stop:
   406                           
   407                           ; 1 bytes @ 0x1D
   408  00001E                     	ds	2
   409  000020                     turnLeft@mL:
   410                           	callstack 0
   411                           
   412                           ; 2 bytes @ 0x1F
   413  000020                     	ds	2
   414  000022                     turnLeft@mR:
   415                           	callstack 0
   416                           
   417                           ; 2 bytes @ 0x21
   418  000022                     	ds	2
   419  000024                     turnLeft@angle_left:
   420                           	callstack 0
   421                           
   422                           ; 1 bytes @ 0x23
   423  000024                     	ds	1
   424  000025                     ??_turnLeft:
   425                           
   426                           ; 1 bytes @ 0x24
   427  000025                     	ds	1
   428  000026                     turnLeft@delay:
   429                           	callstack 0
   430                           
   431                           ; 2 bytes @ 0x25
   432  000026                     	ds	2
   433  000028                     turnLeft@i:
   434                           	callstack 0
   435                           
   436                           ; 2 bytes @ 0x27
   437  000028                     	ds	2
   438  00002A                     test_movement@mL:
   439                           	callstack 0
   440                           
   441                           ; 2 bytes @ 0x29
   442  00002A                     	ds	2
   443  00002C                     test_movement@mR:
   444                           	callstack 0
   445                           
   446                           ; 2 bytes @ 0x2B
   447  00002C                     	ds	2
   448  00002E                     ??_main:
   449                           
   450                           ; 1 bytes @ 0x2D
   451  00002E                     	ds	2
   452  000030                     main@motorL:
   453                           	callstack 0
   454                           
   455                           ; 10 bytes @ 0x2F
   456  000030                     	ds	10
   457  00003A                     main@motorR:
   458                           	callstack 0
   459                           
   460                           ; 10 bytes @ 0x39
   461  00003A                     	ds	10
   462                           
   463 ;;
   464 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   465 ;;
   466 ;; *************** function _main *****************
   467 ;; Defined at:
   468 ;;		line 30 in file "main.c"
   469 ;; Parameters:    Size  Location     Type
   470 ;;		None
   471 ;; Auto vars:     Size  Location     Type
   472 ;;  motorR         10   57[COMRAM] struct DC_motor
   473 ;;  motorL         10   47[COMRAM] struct DC_motor
   474 ;;  rgb             8    0        struct color_rgb
   475 ;;  x               2    0        int 
   476 ;;  k               2    0        int 
   477 ;;  j               2    0        int 
   478 ;;  i               2    0        int 
   479 ;;  complete        1    0        unsigned char 
   480 ;;  color           1    0        unsigned char 
   481 ;; Return value:  Size  Location     Type
   482 ;;                  1    wreg      void 
   483 ;; Registers used:
   484 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   485 ;; Tracked objects:
   486 ;;		On entry : 0/0
   487 ;;		On exit  : 0/0
   488 ;;		Unchanged: 0/0
   489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   490 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   491 ;;      Locals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   492 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   493 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   494 ;;Total ram usage:       22 bytes
   495 ;; Hardware stack levels required when called: 5
   496 ;; This function calls:
   497 ;;		_I2C_2_Master_Init
   498 ;;		_color_click_init
   499 ;;		_initDCmotorsPWM
   500 ;;		_initDCmotors_parameter
   501 ;;		_initUSART4
   502 ;;		_test_movement
   503 ;; This function is called by:
   504 ;;		Startup code after reset
   505 ;; This function uses a non-reentrant model
   506 ;;
   507                           
   508                           	psect	text0
   509  001348                     __ptext0:
   510                           	callstack 0
   511  001348                     _main:
   512                           	callstack 26
   513  001348                     
   514                           ;main.c: 31:     I2C_2_Master_Init();
   515  001348  EC4A  F00A         	call	_I2C_2_Master_Init	;wreg free
   516  00134C                     
   517                           ;main.c: 32:     color_click_init();
   518  00134C  EC19  F00A         	call	_color_click_init	;wreg free
   519  001350                     
   520                           ;main.c: 33:     initDCmotorsPWM(199);
   521  001350  0E00               	movlw	0
   522  001352  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   523  001354  0EC7               	movlw	199
   524  001356  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
   525  001358  ECDC  F009         	call	_initDCmotorsPWM	;wreg free
   526  00135C                     
   527                           ;main.c: 35:     initUSART4();
   528  00135C  EC96  F00A         	call	_initUSART4	;wreg free
   529  001360                     
   530                           ;main.c: 37:     struct color_rgb rgb;;main.c: 38:     struct DC_motor motorL, motorR;;m
      +                          ain.c: 40:     initDCmotors_parameter(&motorL, &motorR);
   531  001360  0E30               	movlw	low main@motorL
   532  001362  6E01               	movwf	initDCmotors_parameter@motorL^0,c
   533  001364  0E00               	movlw	high main@motorL
   534  001366  6E02               	movwf	(initDCmotors_parameter@motorL+1)^0,c
   535  001368  0E3A               	movlw	low main@motorR
   536  00136A  6E03               	movwf	initDCmotors_parameter@motorR^0,c
   537  00136C  0E00               	movlw	high main@motorR
   538  00136E  6E04               	movwf	(initDCmotors_parameter@motorR+1)^0,c
   539  001370  EC7B  F008         	call	_initDCmotors_parameter	;wreg free
   540  001374                     
   541                           ;main.c: 42:     TRISFbits.TRISF6 = 0;
   542  001374  9C86               	bcf	134,6,c	;volatile
   543  001376                     
   544                           ;main.c: 43:     LATFbits.LATF6 = 0;
   545  001376  9C7E               	bcf	126,6,c	;volatile
   546  001378                     
   547                           ;main.c: 45:     TRISGbits.TRISG1 = 0;
   548  001378  9287               	bcf	135,1,c	;volatile
   549  00137A                     
   550                           ;main.c: 46:     TRISFbits.TRISF7 = 0;
   551  00137A  9E86               	bcf	134,7,c	;volatile
   552  00137C                     
   553                           ;main.c: 47:     TRISAbits.TRISA4 = 0;
   554  00137C  9881               	bcf	129,4,c	;volatile
   555  00137E                     
   556                           ;main.c: 48:     LATGbits.LATG1 = 1;
   557  00137E  827F               	bsf	127,1,c	;volatile
   558  001380                     
   559                           ;main.c: 49:     LATFbits.LATF7 = 1;
   560  001380  8E7E               	bsf	126,7,c	;volatile
   561  001382                     
   562                           ;main.c: 50:     LATAbits.LATA4 = 1;
   563  001382  8879               	bsf	121,4,c	;volatile
   564  001384                     
   565                           ;main.c: 59:     _delay((unsigned long)((3000)*(64000000/4000.0)));
   566  001384  0EF4               	movlw	244
   567  001386  6E2F               	movwf	(??_main+1)^0,c
   568  001388  0E82               	movlw	130
   569  00138A  6E2E               	movwf	??_main^0,c
   570  00138C  0E05               	movlw	5
   571  00138E                     u1027:
   572  00138E  2EE8               	decfsz	wreg,f,c
   573  001390  D7FE               	bra	u1027
   574  001392  2E2E               	decfsz	??_main^0,f,c
   575  001394  D7FC               	bra	u1027
   576  001396  2E2F               	decfsz	(??_main+1)^0,f,c
   577  001398  D7FA               	bra	u1027
   578  00139A  F000               	nop	
   579  00139C                     l2089:
   580                           
   581                           ;main.c: 62:         test_movement(&motorL, &motorR);
   582  00139C  0E30               	movlw	low main@motorL
   583  00139E  6E2A               	movwf	test_movement@mL^0,c
   584  0013A0  0E00               	movlw	high main@motorL
   585  0013A2  6E2B               	movwf	(test_movement@mL+1)^0,c
   586  0013A4  0E3A               	movlw	low main@motorR
   587  0013A6  6E2C               	movwf	test_movement@mR^0,c
   588  0013A8  0E00               	movlw	high main@motorR
   589  0013AA  6E2D               	movwf	(test_movement@mR+1)^0,c
   590  0013AC  EC33  F00A         	call	_test_movement	;wreg free
   591  0013B0  EFCE  F009         	goto	l2089
   592  0013B4  EF00  F000         	goto	start
   593  0013B8                     __end_of_main:
   594                           	callstack 0
   595                           
   596 ;; *************** function _test_movement *****************
   597 ;; Defined at:
   598 ;;		line 15 in file "movement.c"
   599 ;; Parameters:    Size  Location     Type
   600 ;;  mL              2   41[COMRAM] PTR struct DC_motor
   601 ;;		 -> main@motorL(10), 
   602 ;;  mR              2   43[COMRAM] PTR struct DC_motor
   603 ;;		 -> main@motorR(10), 
   604 ;; Auto vars:     Size  Location     Type
   605 ;;		None
   606 ;; Return value:  Size  Location     Type
   607 ;;                  1    wreg      void 
   608 ;; Registers used:
   609 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   610 ;; Tracked objects:
   611 ;;		On entry : 0/0
   612 ;;		On exit  : 0/0
   613 ;;		Unchanged: 0/0
   614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   615 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   616 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   617 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   618 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   619 ;;Total ram usage:        4 bytes
   620 ;; Hardware stack levels used: 1
   621 ;; Hardware stack levels required when called: 4
   622 ;; This function calls:
   623 ;;		_stop
   624 ;;		_turnLeft
   625 ;; This function is called by:
   626 ;;		_main
   627 ;; This function uses a non-reentrant model
   628 ;;
   629                           
   630                           	psect	text1
   631  001466                     __ptext1:
   632                           	callstack 0
   633  001466                     _test_movement:
   634                           	callstack 26
   635  001466                     
   636                           ;movement.c: 15: void test_movement (struct DC_motor *mL, struct DC_motor *mR);movement.
      +                          c: 16: {;movement.c: 17:     turnLeft(mL, mR, 90);
   637  001466  C02A  F020         	movff	test_movement@mL,turnLeft@mL
   638  00146A  C02B  F021         	movff	test_movement@mL+1,turnLeft@mL+1
   639  00146E  C02C  F022         	movff	test_movement@mR,turnLeft@mR
   640  001472  C02D  F023         	movff	test_movement@mR+1,turnLeft@mR+1
   641  001476  0E5A               	movlw	90
   642  001478  6E24               	movwf	turnLeft@angle_left^0,c
   643  00147A  EC12  F008         	call	_turnLeft	;wreg free
   644                           
   645                           ;movement.c: 18:     stop(mL, mR);
   646  00147E  C02A  F01A         	movff	test_movement@mL,stop@mL
   647  001482  C02B  F01B         	movff	test_movement@mL+1,stop@mL+1
   648  001486  C02C  F01C         	movff	test_movement@mR,stop@mR
   649  00148A  C02D  F01D         	movff	test_movement@mR+1,stop@mR+1
   650  00148E  EC46  F009         	call	_stop	;wreg free
   651  001492  0012               	return		;funcret
   652  001494                     __end_of_test_movement:
   653                           	callstack 0
   654                           
   655 ;; *************** function _turnLeft *****************
   656 ;; Defined at:
   657 ;;		line 92 in file "dc_motor.c"
   658 ;; Parameters:    Size  Location     Type
   659 ;;  mL              2   31[COMRAM] PTR struct DC_motor
   660 ;;		 -> main@motorL(10), 
   661 ;;  mR              2   33[COMRAM] PTR struct DC_motor
   662 ;;		 -> main@motorR(10), 
   663 ;;  angle_left      1   35[COMRAM] unsigned char 
   664 ;; Auto vars:     Size  Location     Type
   665 ;;  i               2   39[COMRAM] unsigned int 
   666 ;;  delay           2   37[COMRAM] unsigned int 
   667 ;; Return value:  Size  Location     Type
   668 ;;                  1    wreg      void 
   669 ;; Registers used:
   670 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   671 ;; Tracked objects:
   672 ;;		On entry : 0/0
   673 ;;		On exit  : 0/0
   674 ;;		Unchanged: 0/0
   675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   676 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   677 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   678 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   679 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   680 ;;Total ram usage:       10 bytes
   681 ;; Hardware stack levels used: 1
   682 ;; Hardware stack levels required when called: 3
   683 ;; This function calls:
   684 ;;		_setMotorPWM
   685 ;;		_stop
   686 ;; This function is called by:
   687 ;;		_test_movement
   688 ;; This function uses a non-reentrant model
   689 ;;
   690                           
   691                           	psect	text2
   692  001024                     __ptext2:
   693                           	callstack 0
   694  001024                     _turnLeft:
   695                           	callstack 26
   696  001024                     
   697                           ;dc_motor.c: 92: void turnLeft(struct DC_motor *mL, struct DC_motor *mR, unsigned char a
      +                          ngle_left);dc_motor.c: 93: {;dc_motor.c: 94:       mL->direction=1;
   698  001024  EE20 F001          	lfsr	2,1
   699  001028  5020               	movf	turnLeft@mL^0,w,c
   700  00102A  26D9               	addwf	fsr2l,f,c
   701  00102C  5021               	movf	(turnLeft@mL+1)^0,w,c
   702  00102E  22DA               	addwfc	fsr2h,f,c
   703  001030  0E01               	movlw	1
   704  001032  6EDF               	movwf	indf2,c
   705                           
   706                           ;dc_motor.c: 95:       mR->direction=1;
   707  001034  EE20 F001          	lfsr	2,1
   708  001038  5022               	movf	turnLeft@mR^0,w,c
   709  00103A  26D9               	addwf	fsr2l,f,c
   710  00103C  5023               	movf	(turnLeft@mR+1)^0,w,c
   711  00103E  22DA               	addwfc	fsr2h,f,c
   712  001040  0E01               	movlw	1
   713  001042  6EDF               	movwf	indf2,c
   714                           
   715                           ;dc_motor.c: 96:       while (mR->power <40){
   716  001044  EF43  F008         	goto	l1847
   717  001048                     l1839:
   718                           
   719                           ;dc_motor.c: 97:         mR->power += 5;
   720  001048  C022  FFD9         	movff	turnLeft@mR,fsr2l
   721  00104C  C023  FFDA         	movff	turnLeft@mR+1,fsr2h
   722  001050  0E05               	movlw	5
   723  001052  26DF               	addwf	indf2,f,c
   724                           
   725                           ;dc_motor.c: 98:         mL->power = 0;
   726  001054  C020  FFD9         	movff	turnLeft@mL,fsr2l
   727  001058  C021  FFDA         	movff	turnLeft@mL+1,fsr2h
   728  00105C  0E00               	movlw	0
   729  00105E  6EDF               	movwf	indf2,c
   730  001060                     
   731                           ;dc_motor.c: 99:         setMotorPWM(mL);
   732  001060  C020  F00F         	movff	turnLeft@mL,setMotorPWM@m
   733  001064  C021  F010         	movff	turnLeft@mL+1,setMotorPWM@m+1
   734  001068  EC28  F007         	call	_setMotorPWM	;wreg free
   735  00106C                     
   736                           ;dc_motor.c: 100:         setMotorPWM(mR);
   737  00106C  C022  F00F         	movff	turnLeft@mR,setMotorPWM@m
   738  001070  C023  F010         	movff	turnLeft@mR+1,setMotorPWM@m+1
   739  001074  EC28  F007         	call	_setMotorPWM	;wreg free
   740  001078                     
   741                           ;dc_motor.c: 101:         _delay((unsigned long)((10)*(64000000/4000.0)));
   742  001078  0ED0               	movlw	208
   743  00107A  6E25               	movwf	??_turnLeft^0,c
   744  00107C  0ECA               	movlw	202
   745  00107E                     u1037:
   746  00107E  2EE8               	decfsz	wreg,f,c
   747  001080  D7FE               	bra	u1037
   748  001082  2E25               	decfsz	??_turnLeft^0,f,c
   749  001084  D7FC               	bra	u1037
   750  001086                     l1847:
   751                           
   752                           ;dc_motor.c: 96:       while (mR->power <40){
   753  001086  C022  FFD9         	movff	turnLeft@mR,fsr2l
   754  00108A  C023  FFDA         	movff	turnLeft@mR+1,fsr2h
   755  00108E  0E27               	movlw	39
   756  001090  64DF               	cpfsgt	indf2,c
   757  001092  EF4D  F008         	goto	u781
   758  001096  EF4F  F008         	goto	u780
   759  00109A                     u781:
   760  00109A  EF24  F008         	goto	l1839
   761  00109E                     u780:
   762  00109E                     
   763                           ;dc_motor.c: 103:     unsigned int delay = angle_left * 7;
   764  00109E  5024               	movf	turnLeft@angle_left^0,w,c
   765  0010A0  0D07               	mullw	7
   766  0010A2  CFF3 F026          	movff	prodl,turnLeft@delay
   767  0010A6  CFF4 F027          	movff	prodh,turnLeft@delay+1
   768  0010AA                     
   769                           ;dc_motor.c: 104:     for(unsigned int i = 0; i < delay; i++){_delay((unsigned long)((1)
      +                          *(64000000/4000.0)));}
   770  0010AA  0E00               	movlw	0
   771  0010AC  6E29               	movwf	(turnLeft@i+1)^0,c
   772  0010AE  0E00               	movlw	0
   773  0010B0  6E28               	movwf	turnLeft@i^0,c
   774  0010B2  EF65  F008         	goto	l260
   775  0010B6                     l1853:
   776  0010B6  0E15               	movlw	21
   777  0010B8  6E25               	movwf	??_turnLeft^0,c
   778  0010BA  0EC6               	movlw	198
   779  0010BC                     u1047:
   780  0010BC  2EE8               	decfsz	wreg,f,c
   781  0010BE  D7FE               	bra	u1047
   782  0010C0  2E25               	decfsz	??_turnLeft^0,f,c
   783  0010C2  D7FC               	bra	u1047
   784  0010C4  D000               	nop2	
   785  0010C6  4A28               	infsnz	turnLeft@i^0,f,c
   786  0010C8  2A29               	incf	(turnLeft@i+1)^0,f,c
   787  0010CA                     l260:
   788  0010CA  5026               	movf	turnLeft@delay^0,w,c
   789  0010CC  5C28               	subwf	turnLeft@i^0,w,c
   790  0010CE  5027               	movf	(turnLeft@delay+1)^0,w,c
   791  0010D0  5829               	subwfb	(turnLeft@i+1)^0,w,c
   792  0010D2  A0D8               	btfss	status,0,c
   793  0010D4  EF6E  F008         	goto	u791
   794  0010D8  EF70  F008         	goto	u790
   795  0010DC                     u791:
   796  0010DC  EF5B  F008         	goto	l1853
   797  0010E0                     u790:
   798  0010E0                     
   799                           ;dc_motor.c: 105:     stop(mL,mR);
   800  0010E0  C020  F01A         	movff	turnLeft@mL,stop@mL
   801  0010E4  C021  F01B         	movff	turnLeft@mL+1,stop@mL+1
   802  0010E8  C022  F01C         	movff	turnLeft@mR,stop@mR
   803  0010EC  C023  F01D         	movff	turnLeft@mR+1,stop@mR+1
   804  0010F0  EC46  F009         	call	_stop	;wreg free
   805  0010F4  0012               	return		;funcret
   806  0010F6                     __end_of_turnLeft:
   807                           	callstack 0
   808                           
   809 ;; *************** function _stop *****************
   810 ;; Defined at:
   811 ;;		line 79 in file "dc_motor.c"
   812 ;; Parameters:    Size  Location     Type
   813 ;;  mL              2   25[COMRAM] PTR struct DC_motor
   814 ;;		 -> main@motorL(10), 
   815 ;;  mR              2   27[COMRAM] PTR struct DC_motor
   816 ;;		 -> main@motorR(10), 
   817 ;; Auto vars:     Size  Location     Type
   818 ;;		None
   819 ;; Return value:  Size  Location     Type
   820 ;;                  1    wreg      void 
   821 ;; Registers used:
   822 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   823 ;; Tracked objects:
   824 ;;		On entry : 0/0
   825 ;;		On exit  : 0/0
   826 ;;		Unchanged: 0/0
   827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   828 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   829 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   830 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   831 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   832 ;;Total ram usage:        6 bytes
   833 ;; Hardware stack levels used: 1
   834 ;; Hardware stack levels required when called: 2
   835 ;; This function calls:
   836 ;;		_setMotorPWM
   837 ;; This function is called by:
   838 ;;		_turnLeft
   839 ;;		_test_movement
   840 ;;		_turnRight
   841 ;; This function uses a non-reentrant model
   842 ;;
   843                           
   844                           	psect	text3
   845  00128C                     __ptext3:
   846                           	callstack 0
   847  00128C                     _stop:
   848                           	callstack 26
   849  00128C                     
   850                           ;dc_motor.c: 79: void stop(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 80: {;d
      +                          c_motor.c: 81:     while (mL->power >0 || mR->power >0){
   851  00128C  EF7F  F009         	goto	l1829
   852  001290                     l1815:
   853                           
   854                           ;dc_motor.c: 82:         if (mL->power !=0){mL->power -= 5;}
   855  001290  C01A  FFD9         	movff	stop@mL,fsr2l
   856  001294  C01B  FFDA         	movff	stop@mL+1,fsr2h
   857  001298  50DF               	movf	indf2,w,c
   858  00129A  B4D8               	btfsc	status,2,c
   859  00129C  EF52  F009         	goto	u741
   860  0012A0  EF54  F009         	goto	u740
   861  0012A4                     u741:
   862  0012A4  EF5A  F009         	goto	l1819
   863  0012A8                     u740:
   864  0012A8  C01A  FFD9         	movff	stop@mL,fsr2l
   865  0012AC  C01B  FFDA         	movff	stop@mL+1,fsr2h
   866  0012B0  0E05               	movlw	5
   867  0012B2  5EDF               	subwf	indf2,f,c
   868  0012B4                     l1819:
   869                           
   870                           ;dc_motor.c: 83:         if (mR->power !=0){mR->power -= 5;}
   871  0012B4  C01C  FFD9         	movff	stop@mR,fsr2l
   872  0012B8  C01D  FFDA         	movff	stop@mR+1,fsr2h
   873  0012BC  50DF               	movf	indf2,w,c
   874  0012BE  B4D8               	btfsc	status,2,c
   875  0012C0  EF64  F009         	goto	u751
   876  0012C4  EF66  F009         	goto	u750
   877  0012C8                     u751:
   878  0012C8  EF6C  F009         	goto	l1823
   879  0012CC                     u750:
   880  0012CC  C01C  FFD9         	movff	stop@mR,fsr2l
   881  0012D0  C01D  FFDA         	movff	stop@mR+1,fsr2h
   882  0012D4  0E05               	movlw	5
   883  0012D6  5EDF               	subwf	indf2,f,c
   884  0012D8                     l1823:
   885                           
   886                           ;dc_motor.c: 84:         setMotorPWM(mL);
   887  0012D8  C01A  F00F         	movff	stop@mL,setMotorPWM@m
   888  0012DC  C01B  F010         	movff	stop@mL+1,setMotorPWM@m+1
   889  0012E0  EC28  F007         	call	_setMotorPWM	;wreg free
   890  0012E4                     
   891                           ;dc_motor.c: 85:         setMotorPWM(mR);
   892  0012E4  C01C  F00F         	movff	stop@mR,setMotorPWM@m
   893  0012E8  C01D  F010         	movff	stop@mR+1,setMotorPWM@m+1
   894  0012EC  EC28  F007         	call	_setMotorPWM	;wreg free
   895  0012F0                     
   896                           ;dc_motor.c: 86:         _delay((unsigned long)((10)*(64000000/4000.0)));
   897  0012F0  0ED0               	movlw	208
   898  0012F2  6E1E               	movwf	??_stop^0,c
   899  0012F4  0ECA               	movlw	202
   900  0012F6                     u1057:
   901  0012F6  2EE8               	decfsz	wreg,f,c
   902  0012F8  D7FE               	bra	u1057
   903  0012FA  2E1E               	decfsz	??_stop^0,f,c
   904  0012FC  D7FC               	bra	u1057
   905  0012FE                     l1829:
   906                           
   907                           ;dc_motor.c: 81:     while (mL->power >0 || mR->power >0){
   908  0012FE  C01A  FFD9         	movff	stop@mL,fsr2l
   909  001302  C01B  FFDA         	movff	stop@mL+1,fsr2h
   910  001306  50DF               	movf	indf2,w,c
   911  001308  A4D8               	btfss	status,2,c
   912  00130A  EF89  F009         	goto	u761
   913  00130E  EF8B  F009         	goto	u760
   914  001312                     u761:
   915  001312  EF48  F009         	goto	l1815
   916  001316                     u760:
   917  001316  C01C  FFD9         	movff	stop@mR,fsr2l
   918  00131A  C01D  FFDA         	movff	stop@mR+1,fsr2h
   919  00131E  50DF               	movf	indf2,w,c
   920  001320  A4D8               	btfss	status,2,c
   921  001322  EF95  F009         	goto	u771
   922  001326  EF97  F009         	goto	u770
   923  00132A                     u771:
   924  00132A  EF48  F009         	goto	l1815
   925  00132E                     u770:
   926  00132E                     
   927                           ;dc_motor.c: 88:     _delay((unsigned long)((500)*(64000000/4000.0)));
   928  00132E  0E29               	movlw	41
   929  001330  6E1F               	movwf	(??_stop+1)^0,c
   930  001332  0E96               	movlw	150
   931  001334  6E1E               	movwf	??_stop^0,c
   932  001336  0E7F               	movlw	127
   933  001338                     u1067:
   934  001338  2EE8               	decfsz	wreg,f,c
   935  00133A  D7FE               	bra	u1067
   936  00133C  2E1E               	decfsz	??_stop^0,f,c
   937  00133E  D7FC               	bra	u1067
   938  001340  2E1F               	decfsz	(??_stop+1)^0,f,c
   939  001342  D7FA               	bra	u1067
   940  001344  F000               	nop	
   941  001346  0012               	return		;funcret
   942  001348                     __end_of_stop:
   943                           	callstack 0
   944                           
   945 ;; *************** function _setMotorPWM *****************
   946 ;; Defined at:
   947 ;;		line 56 in file "dc_motor.c"
   948 ;; Parameters:    Size  Location     Type
   949 ;;  m               2   14[COMRAM] PTR struct DC_motor
   950 ;;		 -> main@motorR(10), main@motorL(10), 
   951 ;; Auto vars:     Size  Location     Type
   952 ;;  PWMduty         2   23[COMRAM] int 
   953 ;; Return value:  Size  Location     Type
   954 ;;                  1    wreg      void 
   955 ;; Registers used:
   956 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   957 ;; Tracked objects:
   958 ;;		On entry : 0/0
   959 ;;		On exit  : 0/0
   960 ;;		Unchanged: 0/0
   961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   962 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   963 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   964 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   965 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   966 ;;Total ram usage:       11 bytes
   967 ;; Hardware stack levels used: 1
   968 ;; Hardware stack levels required when called: 1
   969 ;; This function calls:
   970 ;;		___awdiv
   971 ;;		___wmul
   972 ;; This function is called by:
   973 ;;		_stop
   974 ;;		_turnLeft
   975 ;;		_turnRight
   976 ;;		_fullSpeedAhead
   977 ;;		_turn180
   978 ;; This function uses a non-reentrant model
   979 ;;
   980                           
   981                           	psect	text4
   982  000E50                     __ptext4:
   983                           	callstack 0
   984  000E50                     _setMotorPWM:
   985                           	callstack 26
   986  000E50                     
   987                           ;dc_motor.c: 56: void setMotorPWM(struct DC_motor *m);dc_motor.c: 57: {;dc_motor.c: 58: 
      +                           int PWMduty;;dc_motor.c: 60:  if (m->direction){
   988  000E50  EE20 F001          	lfsr	2,1
   989  000E54  500F               	movf	setMotorPWM@m^0,w,c
   990  000E56  26D9               	addwf	fsr2l,f,c
   991  000E58  5010               	movf	(setMotorPWM@m+1)^0,w,c
   992  000E5A  22DA               	addwfc	fsr2h,f,c
   993  000E5C  50DF               	movf	indf2,w,c
   994  000E5E  B4D8               	btfsc	status,2,c
   995  000E60  EF34  F007         	goto	u701
   996  000E64  EF36  F007         	goto	u700
   997  000E68                     u701:
   998  000E68  EF67  F007         	goto	l1803
   999  000E6C                     u700:
  1000  000E6C                     
  1001                           ;dc_motor.c: 62:   PWMduty=m->PWMperiod - ((int)(m->power)*(m->PWMperiod))/100;
  1002  000E6C  C00F  FFD9         	movff	setMotorPWM@m,fsr2l
  1003  000E70  C010  FFDA         	movff	setMotorPWM@m+1,fsr2h
  1004  000E74  50DF               	movf	indf2,w,c
  1005  000E76  6E11               	movwf	??_setMotorPWM^0,c
  1006  000E78  5011               	movf	??_setMotorPWM^0,w,c
  1007  000E7A  6E01               	movwf	___wmul@multiplier^0,c
  1008  000E7C  6A02               	clrf	(___wmul@multiplier+1)^0,c
  1009  000E7E  EE20 F007          	lfsr	2,7
  1010  000E82  500F               	movf	setMotorPWM@m^0,w,c
  1011  000E84  26D9               	addwf	fsr2l,f,c
  1012  000E86  5010               	movf	(setMotorPWM@m+1)^0,w,c
  1013  000E88  22DA               	addwfc	fsr2h,f,c
  1014  000E8A  CFDE F003          	movff	postinc2,___wmul@multiplicand
  1015  000E8E  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  1016  000E92  EC73  F00A         	call	___wmul	;wreg free
  1017  000E96  C001  F007         	movff	?___wmul,___awdiv@dividend
  1018  000E9A  C002  F008         	movff	?___wmul+1,___awdiv@dividend+1
  1019  000E9E  0E00               	movlw	0
  1020  000EA0  6E0A               	movwf	(___awdiv@divisor+1)^0,c
  1021  000EA2  0E64               	movlw	100
  1022  000EA4  6E09               	movwf	___awdiv@divisor^0,c
  1023  000EA6  ECE4  F008         	call	___awdiv	;wreg free
  1024  000EAA  EE20 F007          	lfsr	2,7
  1025  000EAE  500F               	movf	setMotorPWM@m^0,w,c
  1026  000EB0  26D9               	addwf	fsr2l,f,c
  1027  000EB2  5010               	movf	(setMotorPWM@m+1)^0,w,c
  1028  000EB4  22DA               	addwfc	fsr2h,f,c
  1029  000EB6  CFDE F012          	movff	postinc2,??_setMotorPWM+1
  1030  000EBA  CFDD F013          	movff	postdec2,??_setMotorPWM+2
  1031  000EBE  5007               	movf	?___awdiv^0,w,c
  1032  000EC0  5C12               	subwf	(??_setMotorPWM+1)^0,w,c
  1033  000EC2  6E18               	movwf	setMotorPWM@PWMduty^0,c
  1034  000EC4  5008               	movf	(?___awdiv+1)^0,w,c
  1035  000EC6  5813               	subwfb	(??_setMotorPWM+2)^0,w,c
  1036  000EC8  6E19               	movwf	(setMotorPWM@PWMduty+1)^0,c
  1037                           
  1038                           ;dc_motor.c: 63:  }
  1039  000ECA  EF8A  F007         	goto	l1805
  1040  000ECE                     l1803:
  1041                           
  1042                           ;dc_motor.c: 66:   PWMduty=((int)(m->power)*(m->PWMperiod))/100;
  1043  000ECE  C00F  FFD9         	movff	setMotorPWM@m,fsr2l
  1044  000ED2  C010  FFDA         	movff	setMotorPWM@m+1,fsr2h
  1045  000ED6  50DF               	movf	indf2,w,c
  1046  000ED8  6E11               	movwf	??_setMotorPWM^0,c
  1047  000EDA  5011               	movf	??_setMotorPWM^0,w,c
  1048  000EDC  6E01               	movwf	___wmul@multiplier^0,c
  1049  000EDE  6A02               	clrf	(___wmul@multiplier+1)^0,c
  1050  000EE0  EE20 F007          	lfsr	2,7
  1051  000EE4  500F               	movf	setMotorPWM@m^0,w,c
  1052  000EE6  26D9               	addwf	fsr2l,f,c
  1053  000EE8  5010               	movf	(setMotorPWM@m+1)^0,w,c
  1054  000EEA  22DA               	addwfc	fsr2h,f,c
  1055  000EEC  CFDE F003          	movff	postinc2,___wmul@multiplicand
  1056  000EF0  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  1057  000EF4  EC73  F00A         	call	___wmul	;wreg free
  1058  000EF8  C001  F007         	movff	?___wmul,___awdiv@dividend
  1059  000EFC  C002  F008         	movff	?___wmul+1,___awdiv@dividend+1
  1060  000F00  0E00               	movlw	0
  1061  000F02  6E0A               	movwf	(___awdiv@divisor+1)^0,c
  1062  000F04  0E64               	movlw	100
  1063  000F06  6E09               	movwf	___awdiv@divisor^0,c
  1064  000F08  ECE4  F008         	call	___awdiv	;wreg free
  1065  000F0C  C007  F018         	movff	?___awdiv,setMotorPWM@PWMduty
  1066  000F10  C008  F019         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  1067  000F14                     l1805:
  1068                           
  1069                           ;dc_motor.c: 69:  *(m->dutyHighByte) = PWMduty;
  1070  000F14  EE20 F002          	lfsr	2,2
  1071  000F18  500F               	movf	setMotorPWM@m^0,w,c
  1072  000F1A  26D9               	addwf	fsr2l,f,c
  1073  000F1C  5010               	movf	(setMotorPWM@m+1)^0,w,c
  1074  000F1E  22DA               	addwfc	fsr2h,f,c
  1075  000F20  CFDE F011          	movff	postinc2,??_setMotorPWM
  1076  000F24  CFDD F012          	movff	postdec2,??_setMotorPWM+1
  1077  000F28  C011  FFD9         	movff	??_setMotorPWM,fsr2l
  1078  000F2C  C012  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1079  000F30  C018  FFDF         	movff	setMotorPWM@PWMduty,indf2
  1080  000F34                     
  1081                           ;dc_motor.c: 71:  if (m->direction){
  1082  000F34  EE20 F001          	lfsr	2,1
  1083  000F38  500F               	movf	setMotorPWM@m^0,w,c
  1084  000F3A  26D9               	addwf	fsr2l,f,c
  1085  000F3C  5010               	movf	(setMotorPWM@m+1)^0,w,c
  1086  000F3E  22DA               	addwfc	fsr2h,f,c
  1087  000F40  50DF               	movf	indf2,w,c
  1088  000F42  B4D8               	btfsc	status,2,c
  1089  000F44  EFA6  F007         	goto	u711
  1090  000F48  EFA8  F007         	goto	u710
  1091  000F4C                     u711:
  1092  000F4C  EFDD  F007         	goto	l1811
  1093  000F50                     u710:
  1094  000F50                     
  1095                           ;dc_motor.c: 72:   *(m->dir_LAT) = *(m->dir_LAT) | (1<<(m->dir_pin));
  1096  000F50  EE20 F004          	lfsr	2,4
  1097  000F54  500F               	movf	setMotorPWM@m^0,w,c
  1098  000F56  26D9               	addwf	fsr2l,f,c
  1099  000F58  5010               	movf	(setMotorPWM@m+1)^0,w,c
  1100  000F5A  22DA               	addwfc	fsr2h,f,c
  1101  000F5C  CFDE F011          	movff	postinc2,??_setMotorPWM
  1102  000F60  CFDD F012          	movff	postdec2,??_setMotorPWM+1
  1103  000F64  C011  FFD9         	movff	??_setMotorPWM,fsr2l
  1104  000F68  C012  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1105  000F6C  EE10 F004          	lfsr	1,4
  1106  000F70  500F               	movf	setMotorPWM@m^0,w,c
  1107  000F72  26E1               	addwf	fsr1l,f,c
  1108  000F74  5010               	movf	(setMotorPWM@m+1)^0,w,c
  1109  000F76  22E2               	addwfc	fsr1h,f,c
  1110  000F78  CFE6 F013          	movff	postinc1,??_setMotorPWM+2
  1111  000F7C  CFE5 F014          	movff	postdec1,??_setMotorPWM+3
  1112  000F80  C013  FFE1         	movff	??_setMotorPWM+2,fsr1l
  1113  000F84  C014  FFE2         	movff	??_setMotorPWM+3,fsr1h
  1114  000F88  50E7               	movf	indf1,w,c
  1115  000F8A  6E15               	movwf	(??_setMotorPWM+4)^0,c
  1116  000F8C  EE10 F006          	lfsr	1,6
  1117  000F90  500F               	movf	setMotorPWM@m^0,w,c
  1118  000F92  26E1               	addwf	fsr1l,f,c
  1119  000F94  5010               	movf	(setMotorPWM@m+1)^0,w,c
  1120  000F96  22E2               	addwfc	fsr1h,f,c
  1121  000F98  50E7               	movf	indf1,w,c
  1122  000F9A  6E16               	movwf	(??_setMotorPWM+5)^0,c
  1123  000F9C  0E01               	movlw	1
  1124  000F9E  6E17               	movwf	(??_setMotorPWM+6)^0,c
  1125  000FA0  2A16               	incf	(??_setMotorPWM+5)^0,f,c
  1126  000FA2  EFD5  F007         	goto	u724
  1127  000FA6                     u725:
  1128  000FA6  90D8               	bcf	status,0,c
  1129  000FA8  3617               	rlcf	(??_setMotorPWM+6)^0,f,c
  1130  000FAA                     u724:
  1131  000FAA  2E16               	decfsz	(??_setMotorPWM+5)^0,f,c
  1132  000FAC  EFD3  F007         	goto	u725
  1133  000FB0  5017               	movf	(??_setMotorPWM+6)^0,w,c
  1134  000FB2  1015               	iorwf	(??_setMotorPWM+4)^0,w,c
  1135  000FB4  6EDF               	movwf	indf2,c
  1136                           
  1137                           ;dc_motor.c: 73:  } else {
  1138  000FB6  EF11  F008         	goto	l246
  1139  000FBA                     l1811:
  1140                           
  1141                           ;dc_motor.c: 74:   *(m->dir_LAT) = *(m->dir_LAT) & (~(1<<(m->dir_pin)));
  1142  000FBA  EE20 F004          	lfsr	2,4
  1143  000FBE  500F               	movf	setMotorPWM@m^0,w,c
  1144  000FC0  26D9               	addwf	fsr2l,f,c
  1145  000FC2  5010               	movf	(setMotorPWM@m+1)^0,w,c
  1146  000FC4  22DA               	addwfc	fsr2h,f,c
  1147  000FC6  CFDE F011          	movff	postinc2,??_setMotorPWM
  1148  000FCA  CFDD F012          	movff	postdec2,??_setMotorPWM+1
  1149  000FCE  C011  FFD9         	movff	??_setMotorPWM,fsr2l
  1150  000FD2  C012  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1151  000FD6  EE10 F004          	lfsr	1,4
  1152  000FDA  500F               	movf	setMotorPWM@m^0,w,c
  1153  000FDC  26E1               	addwf	fsr1l,f,c
  1154  000FDE  5010               	movf	(setMotorPWM@m+1)^0,w,c
  1155  000FE0  22E2               	addwfc	fsr1h,f,c
  1156  000FE2  CFE6 F013          	movff	postinc1,??_setMotorPWM+2
  1157  000FE6  CFE5 F014          	movff	postdec1,??_setMotorPWM+3
  1158  000FEA  C013  FFE1         	movff	??_setMotorPWM+2,fsr1l
  1159  000FEE  C014  FFE2         	movff	??_setMotorPWM+3,fsr1h
  1160  000FF2  50E7               	movf	indf1,w,c
  1161  000FF4  6E15               	movwf	(??_setMotorPWM+4)^0,c
  1162  000FF6  EE10 F006          	lfsr	1,6
  1163  000FFA  500F               	movf	setMotorPWM@m^0,w,c
  1164  000FFC  26E1               	addwf	fsr1l,f,c
  1165  000FFE  5010               	movf	(setMotorPWM@m+1)^0,w,c
  1166  001000  22E2               	addwfc	fsr1h,f,c
  1167  001002  50E7               	movf	indf1,w,c
  1168  001004  6E16               	movwf	(??_setMotorPWM+5)^0,c
  1169  001006  0E01               	movlw	1
  1170  001008  6E17               	movwf	(??_setMotorPWM+6)^0,c
  1171  00100A  2A16               	incf	(??_setMotorPWM+5)^0,f,c
  1172  00100C  EF0A  F008         	goto	u734
  1173  001010                     u735:
  1174  001010  90D8               	bcf	status,0,c
  1175  001012  3617               	rlcf	(??_setMotorPWM+6)^0,f,c
  1176  001014                     u734:
  1177  001014  2E16               	decfsz	(??_setMotorPWM+5)^0,f,c
  1178  001016  EF08  F008         	goto	u735
  1179  00101A  5017               	movf	(??_setMotorPWM+6)^0,w,c
  1180  00101C  0AFF               	xorlw	255
  1181  00101E  1415               	andwf	(??_setMotorPWM+4)^0,w,c
  1182  001020  6EDF               	movwf	indf2,c
  1183  001022                     l246:
  1184  001022  0012               	return		;funcret
  1185  001024                     __end_of_setMotorPWM:
  1186                           	callstack 0
  1187                           
  1188 ;; *************** function ___wmul *****************
  1189 ;; Defined at:
  1190 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\Umul16.c"
  1191 ;; Parameters:    Size  Location     Type
  1192 ;;  multiplier      2    0[COMRAM] unsigned int 
  1193 ;;  multiplicand    2    2[COMRAM] unsigned int 
  1194 ;; Auto vars:     Size  Location     Type
  1195 ;;  product         2    4[COMRAM] unsigned int 
  1196 ;; Return value:  Size  Location     Type
  1197 ;;                  2    0[COMRAM] unsigned int 
  1198 ;; Registers used:
  1199 ;;		wreg, status,2, status,0, prodl, prodh
  1200 ;; Tracked objects:
  1201 ;;		On entry : 0/0
  1202 ;;		On exit  : 0/0
  1203 ;;		Unchanged: 0/0
  1204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1205 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1206 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1207 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1208 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1209 ;;Total ram usage:        6 bytes
  1210 ;; Hardware stack levels used: 1
  1211 ;; This function calls:
  1212 ;;		Nothing
  1213 ;; This function is called by:
  1214 ;;		_setMotorPWM
  1215 ;;		_detect_color
  1216 ;; This function uses a non-reentrant model
  1217 ;;
  1218                           
  1219                           	psect	text5
  1220  0014E6                     __ptext5:
  1221                           	callstack 0
  1222  0014E6                     ___wmul:
  1223                           	callstack 26
  1224  0014E6  5001               	movf	___wmul@multiplier^0,w,c
  1225  0014E8  0203               	mulwf	___wmul@multiplicand^0,c
  1226  0014EA  CFF3 F005          	movff	prodl,___wmul@product
  1227  0014EE  CFF4 F006          	movff	prodh,___wmul@product+1
  1228  0014F2  5001               	movf	___wmul@multiplier^0,w,c
  1229  0014F4  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  1230  0014F6  50F3               	movf	243,w,c
  1231  0014F8  2606               	addwf	(___wmul@product+1)^0,f,c
  1232  0014FA  5002               	movf	(___wmul@multiplier+1)^0,w,c
  1233  0014FC  0203               	mulwf	___wmul@multiplicand^0,c
  1234  0014FE  50F3               	movf	243,w,c
  1235  001500  2606               	addwf	(___wmul@product+1)^0,f,c
  1236  001502  C005  F001         	movff	___wmul@product,?___wmul
  1237  001506  C006  F002         	movff	___wmul@product+1,?___wmul+1
  1238  00150A  0012               	return		;funcret
  1239  00150C                     __end_of___wmul:
  1240                           	callstack 0
  1241                           
  1242 ;; *************** function ___awdiv *****************
  1243 ;; Defined at:
  1244 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\awdiv.c"
  1245 ;; Parameters:    Size  Location     Type
  1246 ;;  dividend        2    6[COMRAM] int 
  1247 ;;  divisor         2    8[COMRAM] int 
  1248 ;; Auto vars:     Size  Location     Type
  1249 ;;  quotient        2   12[COMRAM] int 
  1250 ;;  sign            1   11[COMRAM] unsigned char 
  1251 ;;  counter         1   10[COMRAM] unsigned char 
  1252 ;; Return value:  Size  Location     Type
  1253 ;;                  2    6[COMRAM] int 
  1254 ;; Registers used:
  1255 ;;		wreg, status,2, status,0
  1256 ;; Tracked objects:
  1257 ;;		On entry : 0/0
  1258 ;;		On exit  : 0/0
  1259 ;;		Unchanged: 0/0
  1260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1261 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1262 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1263 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1264 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1265 ;;Total ram usage:        8 bytes
  1266 ;; Hardware stack levels used: 1
  1267 ;; This function calls:
  1268 ;;		Nothing
  1269 ;; This function is called by:
  1270 ;;		_setMotorPWM
  1271 ;; This function uses a non-reentrant model
  1272 ;;
  1273                           
  1274                           	psect	text6
  1275  0011C8                     __ptext6:
  1276                           	callstack 0
  1277  0011C8                     ___awdiv:
  1278                           	callstack 26
  1279  0011C8  0E00               	movlw	0
  1280  0011CA  6E0C               	movwf	___awdiv@sign^0,c
  1281  0011CC  BE0A               	btfsc	(___awdiv@divisor+1)^0,7,c
  1282  0011CE  EFED  F008         	goto	u640
  1283  0011D2  EFEB  F008         	goto	u641
  1284  0011D6                     u641:
  1285  0011D6  EFF3  F008         	goto	l1763
  1286  0011DA                     u640:
  1287  0011DA  6C09               	negf	___awdiv@divisor^0,c
  1288  0011DC  1E0A               	comf	(___awdiv@divisor+1)^0,f,c
  1289  0011DE  B0D8               	btfsc	status,0,c
  1290  0011E0  2A0A               	incf	(___awdiv@divisor+1)^0,f,c
  1291  0011E2  0E01               	movlw	1
  1292  0011E4  6E0C               	movwf	___awdiv@sign^0,c
  1293  0011E6                     l1763:
  1294  0011E6  BE08               	btfsc	(___awdiv@dividend+1)^0,7,c
  1295  0011E8  EFFA  F008         	goto	u650
  1296  0011EC  EFF8  F008         	goto	u651
  1297  0011F0                     u651:
  1298  0011F0  EF00  F009         	goto	l1769
  1299  0011F4                     u650:
  1300  0011F4  6C07               	negf	___awdiv@dividend^0,c
  1301  0011F6  1E08               	comf	(___awdiv@dividend+1)^0,f,c
  1302  0011F8  B0D8               	btfsc	status,0,c
  1303  0011FA  2A08               	incf	(___awdiv@dividend+1)^0,f,c
  1304  0011FC  0E01               	movlw	1
  1305  0011FE  1A0C               	xorwf	___awdiv@sign^0,f,c
  1306  001200                     l1769:
  1307  001200  0E00               	movlw	0
  1308  001202  6E0E               	movwf	(___awdiv@quotient+1)^0,c
  1309  001204  0E00               	movlw	0
  1310  001206  6E0D               	movwf	___awdiv@quotient^0,c
  1311  001208  5009               	movf	___awdiv@divisor^0,w,c
  1312  00120A  100A               	iorwf	(___awdiv@divisor+1)^0,w,c
  1313  00120C  B4D8               	btfsc	status,2,c
  1314  00120E  EF0B  F009         	goto	u661
  1315  001212  EF0D  F009         	goto	u660
  1316  001216                     u661:
  1317  001216  EF35  F009         	goto	l1791
  1318  00121A                     u660:
  1319  00121A  0E01               	movlw	1
  1320  00121C  6E0B               	movwf	___awdiv@counter^0,c
  1321  00121E  EF15  F009         	goto	l1777
  1322  001222                     l1775:
  1323  001222  90D8               	bcf	status,0,c
  1324  001224  3609               	rlcf	___awdiv@divisor^0,f,c
  1325  001226  360A               	rlcf	(___awdiv@divisor+1)^0,f,c
  1326  001228  2A0B               	incf	___awdiv@counter^0,f,c
  1327  00122A                     l1777:
  1328  00122A  AE0A               	btfss	(___awdiv@divisor+1)^0,7,c
  1329  00122C  EF1A  F009         	goto	u671
  1330  001230  EF1C  F009         	goto	u670
  1331  001234                     u671:
  1332  001234  EF11  F009         	goto	l1775
  1333  001238                     u670:
  1334  001238                     l1779:
  1335  001238  90D8               	bcf	status,0,c
  1336  00123A  360D               	rlcf	___awdiv@quotient^0,f,c
  1337  00123C  360E               	rlcf	(___awdiv@quotient+1)^0,f,c
  1338  00123E  5009               	movf	___awdiv@divisor^0,w,c
  1339  001240  5C07               	subwf	___awdiv@dividend^0,w,c
  1340  001242  500A               	movf	(___awdiv@divisor+1)^0,w,c
  1341  001244  5808               	subwfb	(___awdiv@dividend+1)^0,w,c
  1342  001246  A0D8               	btfss	status,0,c
  1343  001248  EF28  F009         	goto	u681
  1344  00124C  EF2A  F009         	goto	u680
  1345  001250                     u681:
  1346  001250  EF2F  F009         	goto	l1787
  1347  001254                     u680:
  1348  001254  5009               	movf	___awdiv@divisor^0,w,c
  1349  001256  5E07               	subwf	___awdiv@dividend^0,f,c
  1350  001258  500A               	movf	(___awdiv@divisor+1)^0,w,c
  1351  00125A  5A08               	subwfb	(___awdiv@dividend+1)^0,f,c
  1352  00125C  800D               	bsf	___awdiv@quotient^0,0,c
  1353  00125E                     l1787:
  1354  00125E  90D8               	bcf	status,0,c
  1355  001260  320A               	rrcf	(___awdiv@divisor+1)^0,f,c
  1356  001262  3209               	rrcf	___awdiv@divisor^0,f,c
  1357  001264  2E0B               	decfsz	___awdiv@counter^0,f,c
  1358  001266  EF1C  F009         	goto	l1779
  1359  00126A                     l1791:
  1360  00126A  500C               	movf	___awdiv@sign^0,w,c
  1361  00126C  B4D8               	btfsc	status,2,c
  1362  00126E  EF3B  F009         	goto	u691
  1363  001272  EF3D  F009         	goto	u690
  1364  001276                     u691:
  1365  001276  EF41  F009         	goto	l1795
  1366  00127A                     u690:
  1367  00127A  6C0D               	negf	___awdiv@quotient^0,c
  1368  00127C  1E0E               	comf	(___awdiv@quotient+1)^0,f,c
  1369  00127E  B0D8               	btfsc	status,0,c
  1370  001280  2A0E               	incf	(___awdiv@quotient+1)^0,f,c
  1371  001282                     l1795:
  1372  001282  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  1373  001286  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  1374  00128A  0012               	return		;funcret
  1375  00128C                     __end_of___awdiv:
  1376                           	callstack 0
  1377                           
  1378 ;; *************** function _initUSART4 *****************
  1379 ;; Defined at:
  1380 ;;		line 4 in file "serial.c"
  1381 ;; Parameters:    Size  Location     Type
  1382 ;;		None
  1383 ;; Auto vars:     Size  Location     Type
  1384 ;;		None
  1385 ;; Return value:  Size  Location     Type
  1386 ;;                  1    wreg      void 
  1387 ;; Registers used:
  1388 ;;		wreg, status,2
  1389 ;; Tracked objects:
  1390 ;;		On entry : 0/0
  1391 ;;		On exit  : 0/0
  1392 ;;		Unchanged: 0/0
  1393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1394 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1395 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1396 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1397 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1398 ;;Total ram usage:        0 bytes
  1399 ;; Hardware stack levels used: 1
  1400 ;; This function calls:
  1401 ;;		Nothing
  1402 ;; This function is called by:
  1403 ;;		_main
  1404 ;; This function uses a non-reentrant model
  1405 ;;
  1406                           
  1407                           	psect	text7
  1408  00152C                     __ptext7:
  1409                           	callstack 0
  1410  00152C                     _initUSART4:
  1411                           	callstack 30
  1412  00152C                     
  1413                           ;serial.c: 8:     RC0PPS = 0x12;
  1414  00152C  0E12               	movlw	18
  1415  00152E  010E               	movlb	14	; () banked
  1416  001530  6F62               	movwf	98,b	;volatile
  1417                           
  1418                           ;serial.c: 9:     RX4PPS = 0x11;
  1419  001532  0E11               	movlw	17
  1420  001534  6F15               	movwf	21,b	;volatile
  1421  001536                     
  1422                           ; BSR set to: 14
  1423                           ;serial.c: 11:     BAUD4CONbits.BRG16 = 0;
  1424  001536  97E9               	bcf	233,3,b	;volatile
  1425  001538                     
  1426                           ; BSR set to: 14
  1427                           ;serial.c: 12:     TX4STAbits.BRGH = 0;
  1428  001538  95E8               	bcf	232,2,b	;volatile
  1429                           
  1430                           ;serial.c: 13:     SP4BRGL = 51;
  1431  00153A  0E33               	movlw	51
  1432  00153C  6FE5               	movwf	229,b	;volatile
  1433                           
  1434                           ;serial.c: 15:     SP4BRGH = 0;
  1435  00153E  0E00               	movlw	0
  1436  001540  6FE6               	movwf	230,b	;volatile
  1437  001542                     
  1438                           ; BSR set to: 14
  1439                           ;serial.c: 17:     RC4STAbits.CREN = 1;
  1440  001542  89E7               	bsf	231,4,b	;volatile
  1441  001544                     
  1442                           ; BSR set to: 14
  1443                           ;serial.c: 18:     TX4STAbits.TXEN = 1;
  1444  001544  8BE8               	bsf	232,5,b	;volatile
  1445  001546                     
  1446                           ; BSR set to: 14
  1447                           ;serial.c: 19:     RC4STAbits.SPEN = 1;
  1448  001546  8FE7               	bsf	231,7,b	;volatile
  1449  001548                     
  1450                           ; BSR set to: 14
  1451  001548  0012               	return		;funcret
  1452  00154A                     __end_of_initUSART4:
  1453                           	callstack 0
  1454                           
  1455 ;; *************** function _initDCmotors_parameter *****************
  1456 ;; Defined at:
  1457 ;;		line 37 in file "dc_motor.c"
  1458 ;; Parameters:    Size  Location     Type
  1459 ;;  motorL          2    0[COMRAM] PTR struct DC_motor
  1460 ;;		 -> main@motorL(10), 
  1461 ;;  motorR          2    2[COMRAM] PTR struct DC_motor
  1462 ;;		 -> main@motorR(10), 
  1463 ;; Auto vars:     Size  Location     Type
  1464 ;;		None
  1465 ;; Return value:  Size  Location     Type
  1466 ;;                  1    wreg      void 
  1467 ;; Registers used:
  1468 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1469 ;; Tracked objects:
  1470 ;;		On entry : 0/0
  1471 ;;		On exit  : 0/0
  1472 ;;		Unchanged: 0/0
  1473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1474 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1475 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1476 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1477 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1478 ;;Total ram usage:        4 bytes
  1479 ;; Hardware stack levels used: 1
  1480 ;; This function calls:
  1481 ;;		Nothing
  1482 ;; This function is called by:
  1483 ;;		_main
  1484 ;; This function uses a non-reentrant model
  1485 ;;
  1486                           
  1487                           	psect	text8
  1488  0010F6                     __ptext8:
  1489                           	callstack 0
  1490  0010F6                     _initDCmotors_parameter:
  1491                           	callstack 30
  1492  0010F6                     
  1493                           ;dc_motor.c: 39:     motorL->power = 0;
  1494  0010F6  C001  FFD9         	movff	initDCmotors_parameter@motorL,fsr2l
  1495  0010FA  C002  FFDA         	movff	initDCmotors_parameter@motorL+1,fsr2h
  1496  0010FE  0E00               	movlw	0
  1497  001100  6EDF               	movwf	indf2,c
  1498  001102                     
  1499                           ;dc_motor.c: 40:     motorL->direction = 1;
  1500  001102  EE20 F001          	lfsr	2,1
  1501  001106  5001               	movf	initDCmotors_parameter@motorL^0,w,c
  1502  001108  26D9               	addwf	fsr2l,f,c
  1503  00110A  5002               	movf	(initDCmotors_parameter@motorL+1)^0,w,c
  1504  00110C  22DA               	addwfc	fsr2h,f,c
  1505  00110E  0E01               	movlw	1
  1506  001110  6EDF               	movwf	indf2,c
  1507  001112                     
  1508                           ;dc_motor.c: 41:     motorL->dutyHighByte = (unsigned char *)(&PWM6DCH);
  1509  001112  EE20 F002          	lfsr	2,2
  1510  001116  5001               	movf	initDCmotors_parameter@motorL^0,w,c
  1511  001118  26D9               	addwf	fsr2l,f,c
  1512  00111A  5002               	movf	(initDCmotors_parameter@motorL+1)^0,w,c
  1513  00111C  22DA               	addwfc	fsr2h,f,c
  1514  00111E  0EA3               	movlw	163
  1515  001120  6EDE               	movwf	postinc2,c
  1516  001122  0E0F               	movlw	15
  1517  001124  6EDD               	movwf	postdec2,c
  1518  001126                     
  1519                           ;dc_motor.c: 42:     motorL->dir_LAT = (unsigned char *)(&LATE);
  1520  001126  EE20 F004          	lfsr	2,4
  1521  00112A  5001               	movf	initDCmotors_parameter@motorL^0,w,c
  1522  00112C  26D9               	addwf	fsr2l,f,c
  1523  00112E  5002               	movf	(initDCmotors_parameter@motorL+1)^0,w,c
  1524  001130  22DA               	addwfc	fsr2h,f,c
  1525  001132  0E7D               	movlw	125
  1526  001134  6EDE               	movwf	postinc2,c
  1527  001136  0E0F               	movlw	15
  1528  001138  6EDD               	movwf	postdec2,c
  1529  00113A                     
  1530                           ;dc_motor.c: 43:     motorL->dir_pin = 4;
  1531  00113A  EE20 F006          	lfsr	2,6
  1532  00113E  5001               	movf	initDCmotors_parameter@motorL^0,w,c
  1533  001140  26D9               	addwf	fsr2l,f,c
  1534  001142  5002               	movf	(initDCmotors_parameter@motorL+1)^0,w,c
  1535  001144  22DA               	addwfc	fsr2h,f,c
  1536  001146  0E04               	movlw	4
  1537  001148  6EDF               	movwf	indf2,c
  1538  00114A                     
  1539                           ;dc_motor.c: 44:     motorL->PWMperiod = 199;
  1540  00114A  EE20 F007          	lfsr	2,7
  1541  00114E  5001               	movf	initDCmotors_parameter@motorL^0,w,c
  1542  001150  26D9               	addwf	fsr2l,f,c
  1543  001152  5002               	movf	(initDCmotors_parameter@motorL+1)^0,w,c
  1544  001154  22DA               	addwfc	fsr2h,f,c
  1545  001156  0EC7               	movlw	199
  1546  001158  6EDE               	movwf	postinc2,c
  1547  00115A  0E00               	movlw	0
  1548  00115C  6EDD               	movwf	postdec2,c
  1549  00115E                     
  1550                           ;dc_motor.c: 47:     motorR->power = 0;
  1551  00115E  C003  FFD9         	movff	initDCmotors_parameter@motorR,fsr2l
  1552  001162  C004  FFDA         	movff	initDCmotors_parameter@motorR+1,fsr2h
  1553  001166  0E00               	movlw	0
  1554  001168  6EDF               	movwf	indf2,c
  1555                           
  1556                           ;dc_motor.c: 48:     motorR->direction = 1;
  1557  00116A  EE20 F001          	lfsr	2,1
  1558  00116E  5003               	movf	initDCmotors_parameter@motorR^0,w,c
  1559  001170  26D9               	addwf	fsr2l,f,c
  1560  001172  5004               	movf	(initDCmotors_parameter@motorR+1)^0,w,c
  1561  001174  22DA               	addwfc	fsr2h,f,c
  1562  001176  0E01               	movlw	1
  1563  001178  6EDF               	movwf	indf2,c
  1564                           
  1565                           ;dc_motor.c: 49:     motorR->dutyHighByte = (unsigned char *)(&PWM7DCH);
  1566  00117A  EE20 F002          	lfsr	2,2
  1567  00117E  5003               	movf	initDCmotors_parameter@motorR^0,w,c
  1568  001180  26D9               	addwf	fsr2l,f,c
  1569  001182  5004               	movf	(initDCmotors_parameter@motorR+1)^0,w,c
  1570  001184  22DA               	addwfc	fsr2h,f,c
  1571  001186  0EA0               	movlw	160
  1572  001188  6EDE               	movwf	postinc2,c
  1573  00118A  0E0F               	movlw	15
  1574  00118C  6EDD               	movwf	postdec2,c
  1575                           
  1576                           ;dc_motor.c: 50:     motorR->dir_LAT = (unsigned char *)(&LATG);
  1577  00118E  EE20 F004          	lfsr	2,4
  1578  001192  5003               	movf	initDCmotors_parameter@motorR^0,w,c
  1579  001194  26D9               	addwf	fsr2l,f,c
  1580  001196  5004               	movf	(initDCmotors_parameter@motorR+1)^0,w,c
  1581  001198  22DA               	addwfc	fsr2h,f,c
  1582  00119A  0E7F               	movlw	127
  1583  00119C  6EDE               	movwf	postinc2,c
  1584  00119E  0E0F               	movlw	15
  1585  0011A0  6EDD               	movwf	postdec2,c
  1586                           
  1587                           ;dc_motor.c: 51:     motorR->dir_pin = 6;
  1588  0011A2  EE20 F006          	lfsr	2,6
  1589  0011A6  5003               	movf	initDCmotors_parameter@motorR^0,w,c
  1590  0011A8  26D9               	addwf	fsr2l,f,c
  1591  0011AA  5004               	movf	(initDCmotors_parameter@motorR+1)^0,w,c
  1592  0011AC  22DA               	addwfc	fsr2h,f,c
  1593  0011AE  0E06               	movlw	6
  1594  0011B0  6EDF               	movwf	indf2,c
  1595                           
  1596                           ;dc_motor.c: 52:     motorR->PWMperiod = 199;
  1597  0011B2  EE20 F007          	lfsr	2,7
  1598  0011B6  5003               	movf	initDCmotors_parameter@motorR^0,w,c
  1599  0011B8  26D9               	addwf	fsr2l,f,c
  1600  0011BA  5004               	movf	(initDCmotors_parameter@motorR+1)^0,w,c
  1601  0011BC  22DA               	addwfc	fsr2h,f,c
  1602  0011BE  0EC7               	movlw	199
  1603  0011C0  6EDE               	movwf	postinc2,c
  1604  0011C2  0E00               	movlw	0
  1605  0011C4  6EDD               	movwf	postdec2,c
  1606  0011C6  0012               	return		;funcret
  1607  0011C8                     __end_of_initDCmotors_parameter:
  1608                           	callstack 0
  1609                           
  1610 ;; *************** function _initDCmotorsPWM *****************
  1611 ;; Defined at:
  1612 ;;		line 7 in file "dc_motor.c"
  1613 ;; Parameters:    Size  Location     Type
  1614 ;;  PWMperiod       2    0[COMRAM] int 
  1615 ;; Auto vars:     Size  Location     Type
  1616 ;;		None
  1617 ;; Return value:  Size  Location     Type
  1618 ;;                  1    wreg      void 
  1619 ;; Registers used:
  1620 ;;		wreg, status,2
  1621 ;; Tracked objects:
  1622 ;;		On entry : 0/0
  1623 ;;		On exit  : 0/0
  1624 ;;		Unchanged: 0/0
  1625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1626 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1627 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1628 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1629 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1630 ;;Total ram usage:        2 bytes
  1631 ;; Hardware stack levels used: 1
  1632 ;; This function calls:
  1633 ;;		Nothing
  1634 ;; This function is called by:
  1635 ;;		_main
  1636 ;; This function uses a non-reentrant model
  1637 ;;
  1638                           
  1639                           	psect	text9
  1640  0013B8                     __ptext9:
  1641                           	callstack 0
  1642  0013B8                     _initDCmotorsPWM:
  1643                           	callstack 30
  1644  0013B8                     
  1645                           ;dc_motor.c: 10:     TRISEbits.TRISE2=0;
  1646  0013B8  9485               	bcf	133,2,c	;volatile
  1647                           
  1648                           ;dc_motor.c: 11:     TRISCbits.TRISC7=0;
  1649  0013BA  9E83               	bcf	131,7,c	;volatile
  1650                           
  1651                           ;dc_motor.c: 12:     TRISGbits.TRISG6=0;
  1652  0013BC  9C87               	bcf	135,6,c	;volatile
  1653                           
  1654                           ;dc_motor.c: 13:     TRISEbits.TRISE4=0;
  1655  0013BE  9885               	bcf	133,4,c	;volatile
  1656                           
  1657                           ;dc_motor.c: 14:     LATEbits.LATE2=0;
  1658  0013C0  947D               	bcf	125,2,c	;volatile
  1659                           
  1660                           ;dc_motor.c: 15:     LATCbits.LATC7=0;
  1661  0013C2  9E7B               	bcf	123,7,c	;volatile
  1662                           
  1663                           ;dc_motor.c: 16:     LATGbits.LATG6=0;
  1664  0013C4  9C7F               	bcf	127,6,c	;volatile
  1665                           
  1666                           ;dc_motor.c: 17:     LATEbits.LATE4=0;
  1667  0013C6  987D               	bcf	125,4,c	;volatile
  1668  0013C8                     
  1669                           ;dc_motor.c: 20:     T2CONbits.CKPS=0b011;
  1670  0013C8  50BD               	movf	189,w,c	;volatile
  1671  0013CA  0B8F               	andlw	-113
  1672  0013CC  0930               	iorlw	48
  1673  0013CE  6EBD               	movwf	189,c	;volatile
  1674                           
  1675                           ;dc_motor.c: 21:     T2HLTbits.MODE=0b00000;
  1676  0013D0  0EE0               	movlw	-32
  1677  0013D2  16BE               	andwf	190,f,c	;volatile
  1678                           
  1679                           ;dc_motor.c: 22:     T2CLKCONbits.CS=0b0001;
  1680  0013D4  50BF               	movf	191,w,c	;volatile
  1681  0013D6  0BF0               	andlw	-16
  1682  0013D8  0901               	iorlw	1
  1683  0013DA  6EBF               	movwf	191,c	;volatile
  1684                           
  1685                           ;dc_motor.c: 25:     T2PR=200-1;
  1686  0013DC  0EC7               	movlw	199
  1687  0013DE  6EBC               	movwf	188,c	;volatile
  1688  0013E0                     
  1689                           ;dc_motor.c: 26:     T2CONbits.ON=1;
  1690  0013E0  8EBD               	bsf	189,7,c	;volatile
  1691                           
  1692                           ;dc_motor.c: 28:     RE2PPS=0x0A;
  1693  0013E2  0E0A               	movlw	10
  1694  0013E4  010E               	movlb	14	; () banked
  1695  0013E6  6F74               	movwf	116,b	;volatile
  1696                           
  1697                           ;dc_motor.c: 29:     RC7PPS=0x0B;
  1698  0013E8  0E0B               	movlw	11
  1699  0013EA  6F69               	movwf	105,b	;volatile
  1700                           
  1701                           ;dc_motor.c: 31:     PWM6DCH=0;
  1702  0013EC  0E00               	movlw	0
  1703  0013EE  6EA3               	movwf	163,c	;volatile
  1704                           
  1705                           ;dc_motor.c: 32:     PWM7DCH=0;
  1706  0013F0  0E00               	movlw	0
  1707  0013F2  6EA0               	movwf	160,c	;volatile
  1708  0013F4                     
  1709                           ; BSR set to: 14
  1710                           ;dc_motor.c: 34:     PWM6CONbits.EN = 1;
  1711  0013F4  8EA4               	bsf	164,7,c	;volatile
  1712  0013F6                     
  1713                           ; BSR set to: 14
  1714                           ;dc_motor.c: 35:     PWM7CONbits.EN = 1;
  1715  0013F6  8EA1               	bsf	161,7,c	;volatile
  1716  0013F8                     
  1717                           ; BSR set to: 14
  1718  0013F8  0012               	return		;funcret
  1719  0013FA                     __end_of_initDCmotorsPWM:
  1720                           	callstack 0
  1721                           
  1722 ;; *************** function _color_click_init *****************
  1723 ;; Defined at:
  1724 ;;		line 9 in file "color.c"
  1725 ;; Parameters:    Size  Location     Type
  1726 ;;		None
  1727 ;; Auto vars:     Size  Location     Type
  1728 ;;		None
  1729 ;; Return value:  Size  Location     Type
  1730 ;;                  1    wreg      void 
  1731 ;; Registers used:
  1732 ;;		wreg, status,2, status,0, cstack
  1733 ;; Tracked objects:
  1734 ;;		On entry : 0/0
  1735 ;;		On exit  : 0/0
  1736 ;;		Unchanged: 0/0
  1737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1738 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1739 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1740 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1741 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1742 ;;Total ram usage:        1 bytes
  1743 ;; Hardware stack levels used: 1
  1744 ;; Hardware stack levels required when called: 3
  1745 ;; This function calls:
  1746 ;;		_I2C_2_Master_Init
  1747 ;;		_color_writetoaddr
  1748 ;; This function is called by:
  1749 ;;		_main
  1750 ;; This function uses a non-reentrant model
  1751 ;;
  1752                           
  1753                           	psect	text10
  1754  001432                     __ptext10:
  1755                           	callstack 0
  1756  001432                     _color_click_init:
  1757                           	callstack 27
  1758  001432                     
  1759                           ;color.c: 12:     I2C_2_Master_Init();
  1760  001432  EC4A  F00A         	call	_I2C_2_Master_Init	;wreg free
  1761  001436                     
  1762                           ;color.c: 15:   color_writetoaddr(0x00, 0x01);
  1763  001436  0E01               	movlw	1
  1764  001438  6E03               	movwf	color_writetoaddr@value^0,c
  1765  00143A  0E00               	movlw	0
  1766  00143C  EC86  F00A         	call	_color_writetoaddr
  1767  001440                     
  1768                           ;color.c: 16:     _delay((unsigned long)((3)*(64000000/4000.0)));
  1769  001440  0E3F               	movlw	63
  1770  001442  6E05               	movwf	??_color_click_init^0,c
  1771  001444  0E55               	movlw	85
  1772  001446                     u1077:
  1773  001446  2EE8               	decfsz	wreg,f,c
  1774  001448  D7FE               	bra	u1077
  1775  00144A  2E05               	decfsz	??_color_click_init^0,f,c
  1776  00144C  D7FC               	bra	u1077
  1777  00144E  F000               	nop	
  1778  001450                     
  1779                           ;color.c: 19:  color_writetoaddr(0x00, 0x03);
  1780  001450  0E03               	movlw	3
  1781  001452  6E03               	movwf	color_writetoaddr@value^0,c
  1782  001454  0E00               	movlw	0
  1783  001456  EC86  F00A         	call	_color_writetoaddr
  1784  00145A                     
  1785                           ;color.c: 22:  color_writetoaddr(0x01, 0xD5);
  1786  00145A  0ED5               	movlw	213
  1787  00145C  6E03               	movwf	color_writetoaddr@value^0,c
  1788  00145E  0E01               	movlw	1
  1789  001460  EC86  F00A         	call	_color_writetoaddr
  1790  001464  0012               	return		;funcret
  1791  001466                     __end_of_color_click_init:
  1792                           	callstack 0
  1793                           
  1794 ;; *************** function _color_writetoaddr *****************
  1795 ;; Defined at:
  1796 ;;		line 25 in file "color.c"
  1797 ;; Parameters:    Size  Location     Type
  1798 ;;  address         1    wreg     unsigned char 
  1799 ;;  value           1    2[COMRAM] unsigned char 
  1800 ;; Auto vars:     Size  Location     Type
  1801 ;;  address         1    3[COMRAM] unsigned char 
  1802 ;; Return value:  Size  Location     Type
  1803 ;;                  1    wreg      void 
  1804 ;; Registers used:
  1805 ;;		wreg, status,2, status,0, cstack
  1806 ;; Tracked objects:
  1807 ;;		On entry : 0/0
  1808 ;;		On exit  : 0/0
  1809 ;;		Unchanged: 0/0
  1810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1811 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1812 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1813 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1814 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1815 ;;Total ram usage:        2 bytes
  1816 ;; Hardware stack levels used: 1
  1817 ;; Hardware stack levels required when called: 2
  1818 ;; This function calls:
  1819 ;;		_I2C_2_Master_Start
  1820 ;;		_I2C_2_Master_Stop
  1821 ;;		_I2C_2_Master_Write
  1822 ;; This function is called by:
  1823 ;;		_color_click_init
  1824 ;; This function uses a non-reentrant model
  1825 ;;
  1826                           
  1827                           	psect	text11
  1828  00150C                     __ptext11:
  1829                           	callstack 0
  1830  00150C                     _color_writetoaddr:
  1831                           	callstack 27
  1832                           
  1833                           ;incstack = 0
  1834                           ;color_writetoaddr@address stored from wreg
  1835  00150C  6E04               	movwf	color_writetoaddr@address^0,c
  1836  00150E                     
  1837                           ;color.c: 26:     I2C_2_Master_Start();
  1838  00150E  ECB0  F00A         	call	_I2C_2_Master_Start	;wreg free
  1839                           
  1840                           ;color.c: 27:     I2C_2_Master_Write(0x52 | 0x00);
  1841  001512  0E52               	movlw	82
  1842  001514  ECA5  F00A         	call	_I2C_2_Master_Write
  1843                           
  1844                           ;color.c: 28:     I2C_2_Master_Write(0x80 | address);
  1845  001518  5004               	movf	color_writetoaddr@address^0,w,c
  1846  00151A  0980               	iorlw	128
  1847  00151C  ECA5  F00A         	call	_I2C_2_Master_Write
  1848                           
  1849                           ;color.c: 29:     I2C_2_Master_Write(value);
  1850  001520  5003               	movf	color_writetoaddr@value^0,w,c
  1851  001522  ECA5  F00A         	call	_I2C_2_Master_Write
  1852                           
  1853                           ;color.c: 30:     I2C_2_Master_Stop();
  1854  001526  ECAB  F00A         	call	_I2C_2_Master_Stop	;wreg free
  1855  00152A  0012               	return		;funcret
  1856  00152C                     __end_of_color_writetoaddr:
  1857                           	callstack 0
  1858                           
  1859 ;; *************** function _I2C_2_Master_Write *****************
  1860 ;; Defined at:
  1861 ;;		line 45 in file "i2c.c"
  1862 ;; Parameters:    Size  Location     Type
  1863 ;;  data_byte       1    wreg     unsigned char 
  1864 ;; Auto vars:     Size  Location     Type
  1865 ;;  data_byte       1    1[COMRAM] unsigned char 
  1866 ;; Return value:  Size  Location     Type
  1867 ;;                  1    wreg      void 
  1868 ;; Registers used:
  1869 ;;		wreg, status,2, status,0, cstack
  1870 ;; Tracked objects:
  1871 ;;		On entry : 0/0
  1872 ;;		On exit  : 0/0
  1873 ;;		Unchanged: 0/0
  1874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1875 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1876 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1877 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1878 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1879 ;;Total ram usage:        1 bytes
  1880 ;; Hardware stack levels used: 1
  1881 ;; Hardware stack levels required when called: 1
  1882 ;; This function calls:
  1883 ;;		_I2C_2_Master_Idle
  1884 ;; This function is called by:
  1885 ;;		_color_writetoaddr
  1886 ;;		_color_read_Red
  1887 ;;		_color_read_Blue
  1888 ;;		_color_read_Green
  1889 ;;		_color_read_Clear
  1890 ;; This function uses a non-reentrant model
  1891 ;;
  1892                           
  1893                           	psect	text12
  1894  00154A                     __ptext12:
  1895                           	callstack 0
  1896  00154A                     _I2C_2_Master_Write:
  1897                           	callstack 27
  1898                           
  1899                           ;incstack = 0
  1900                           ;I2C_2_Master_Write@data_byte stored from wreg
  1901  00154A  6E02               	movwf	I2C_2_Master_Write@data_byte^0,c
  1902  00154C                     
  1903                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  1904  00154C  EC5F  F00A         	call	_I2C_2_Master_Idle	;wreg free
  1905  001550                     
  1906                           ;i2c.c: 48:   SSP2BUF = data_byte;
  1907  001550  C002  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  1908  001554  0012               	return		;funcret
  1909  001556                     __end_of_I2C_2_Master_Write:
  1910                           	callstack 0
  1911                           
  1912 ;; *************** function _I2C_2_Master_Stop *****************
  1913 ;; Defined at:
  1914 ;;		line 39 in file "i2c.c"
  1915 ;; Parameters:    Size  Location     Type
  1916 ;;		None
  1917 ;; Auto vars:     Size  Location     Type
  1918 ;;		None
  1919 ;; Return value:  Size  Location     Type
  1920 ;;                  1    wreg      void 
  1921 ;; Registers used:
  1922 ;;		wreg, status,2, status,0, cstack
  1923 ;; Tracked objects:
  1924 ;;		On entry : 0/0
  1925 ;;		On exit  : 0/0
  1926 ;;		Unchanged: 0/0
  1927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1928 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1929 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1930 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1931 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1932 ;;Total ram usage:        0 bytes
  1933 ;; Hardware stack levels used: 1
  1934 ;; Hardware stack levels required when called: 1
  1935 ;; This function calls:
  1936 ;;		_I2C_2_Master_Idle
  1937 ;; This function is called by:
  1938 ;;		_color_writetoaddr
  1939 ;;		_color_read_Red
  1940 ;;		_color_read_Blue
  1941 ;;		_color_read_Green
  1942 ;;		_color_read_Clear
  1943 ;; This function uses a non-reentrant model
  1944 ;;
  1945                           
  1946                           	psect	text13
  1947  001556                     __ptext13:
  1948                           	callstack 0
  1949  001556                     _I2C_2_Master_Stop:
  1950                           	callstack 27
  1951  001556                     
  1952                           ;i2c.c: 41:   I2C_2_Master_Idle();
  1953  001556  EC5F  F00A         	call	_I2C_2_Master_Idle	;wreg free
  1954  00155A                     
  1955                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  1956  00155A  010E               	movlb	14	; () banked
  1957  00155C  85DA               	bsf	218,2,b	;volatile
  1958  00155E                     
  1959                           ; BSR set to: 14
  1960  00155E  0012               	return		;funcret
  1961  001560                     __end_of_I2C_2_Master_Stop:
  1962                           	callstack 0
  1963                           
  1964 ;; *************** function _I2C_2_Master_Start *****************
  1965 ;; Defined at:
  1966 ;;		line 27 in file "i2c.c"
  1967 ;; Parameters:    Size  Location     Type
  1968 ;;		None
  1969 ;; Auto vars:     Size  Location     Type
  1970 ;;		None
  1971 ;; Return value:  Size  Location     Type
  1972 ;;                  1    wreg      void 
  1973 ;; Registers used:
  1974 ;;		wreg, status,2, status,0, cstack
  1975 ;; Tracked objects:
  1976 ;;		On entry : 0/0
  1977 ;;		On exit  : 0/0
  1978 ;;		Unchanged: 0/0
  1979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1981 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1983 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1984 ;;Total ram usage:        0 bytes
  1985 ;; Hardware stack levels used: 1
  1986 ;; Hardware stack levels required when called: 1
  1987 ;; This function calls:
  1988 ;;		_I2C_2_Master_Idle
  1989 ;; This function is called by:
  1990 ;;		_color_writetoaddr
  1991 ;;		_color_read_Red
  1992 ;;		_color_read_Blue
  1993 ;;		_color_read_Green
  1994 ;;		_color_read_Clear
  1995 ;; This function uses a non-reentrant model
  1996 ;;
  1997                           
  1998                           	psect	text14
  1999  001560                     __ptext14:
  2000                           	callstack 0
  2001  001560                     _I2C_2_Master_Start:
  2002                           	callstack 27
  2003  001560                     
  2004                           ;i2c.c: 29:   I2C_2_Master_Idle();
  2005  001560  EC5F  F00A         	call	_I2C_2_Master_Idle	;wreg free
  2006  001564                     
  2007                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  2008  001564  010E               	movlb	14	; () banked
  2009  001566  81DA               	bsf	218,0,b	;volatile
  2010  001568                     
  2011                           ; BSR set to: 14
  2012  001568  0012               	return		;funcret
  2013  00156A                     __end_of_I2C_2_Master_Start:
  2014                           	callstack 0
  2015                           
  2016 ;; *************** function _I2C_2_Master_Idle *****************
  2017 ;; Defined at:
  2018 ;;		line 22 in file "i2c.c"
  2019 ;; Parameters:    Size  Location     Type
  2020 ;;		None
  2021 ;; Auto vars:     Size  Location     Type
  2022 ;;		None
  2023 ;; Return value:  Size  Location     Type
  2024 ;;                  1    wreg      void 
  2025 ;; Registers used:
  2026 ;;		wreg, status,2, status,0
  2027 ;; Tracked objects:
  2028 ;;		On entry : 0/0
  2029 ;;		On exit  : 0/0
  2030 ;;		Unchanged: 0/0
  2031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2033 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2034 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2035 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2036 ;;Total ram usage:        1 bytes
  2037 ;; Hardware stack levels used: 1
  2038 ;; This function calls:
  2039 ;;		Nothing
  2040 ;; This function is called by:
  2041 ;;		_I2C_2_Master_Start
  2042 ;;		_I2C_2_Master_Stop
  2043 ;;		_I2C_2_Master_Write
  2044 ;;		_I2C_2_Master_RepStart
  2045 ;;		_I2C_2_Master_Read
  2046 ;; This function uses a non-reentrant model
  2047 ;;
  2048                           
  2049                           	psect	text15
  2050  0014BE                     __ptext15:
  2051                           	callstack 0
  2052  0014BE                     _I2C_2_Master_Idle:
  2053                           	callstack 27
  2054  0014BE                     l159:
  2055  0014BE  010E               	movlb	14	; () banked
  2056  0014C0  B5D8               	btfsc	216,2,b	;volatile
  2057  0014C2  EF65  F00A         	goto	u71
  2058  0014C6  EF67  F00A         	goto	u70
  2059  0014CA                     u71:
  2060  0014CA  EF5F  F00A         	goto	l159
  2061  0014CE                     u70:
  2062  0014CE                     
  2063                           ; BSR set to: 14
  2064  0014CE  CEDA F001          	movff	3802,??_I2C_2_Master_Idle	;volatile
  2065  0014D2  0E1F               	movlw	31
  2066  0014D4  1601               	andwf	??_I2C_2_Master_Idle^0,f,c
  2067  0014D6  A4D8               	btfss	status,2,c
  2068  0014D8  EF70  F00A         	goto	u81
  2069  0014DC  EF72  F00A         	goto	u80
  2070  0014E0                     u81:
  2071  0014E0  EF5F  F00A         	goto	l159
  2072  0014E4                     u80:
  2073  0014E4                     
  2074                           ; BSR set to: 14
  2075  0014E4  0012               	return		;funcret
  2076  0014E6                     __end_of_I2C_2_Master_Idle:
  2077                           	callstack 0
  2078                           
  2079 ;; *************** function _I2C_2_Master_Init *****************
  2080 ;; Defined at:
  2081 ;;		line 4 in file "i2c.c"
  2082 ;; Parameters:    Size  Location     Type
  2083 ;;		None
  2084 ;; Auto vars:     Size  Location     Type
  2085 ;;		None
  2086 ;; Return value:  Size  Location     Type
  2087 ;;                  1    wreg      void 
  2088 ;; Registers used:
  2089 ;;		wreg, status,2
  2090 ;; Tracked objects:
  2091 ;;		On entry : 0/0
  2092 ;;		On exit  : 0/0
  2093 ;;		Unchanged: 0/0
  2094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2095 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2096 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2097 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2098 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2099 ;;Total ram usage:        0 bytes
  2100 ;; Hardware stack levels used: 1
  2101 ;; This function calls:
  2102 ;;		Nothing
  2103 ;; This function is called by:
  2104 ;;		_color_click_init
  2105 ;;		_main
  2106 ;; This function uses a non-reentrant model
  2107 ;;
  2108                           
  2109                           	psect	text16
  2110  001494                     __ptext16:
  2111                           	callstack 0
  2112  001494                     _I2C_2_Master_Init:
  2113                           	callstack 29
  2114  001494                     
  2115                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  2116  001494  010E               	movlb	14	; () banked
  2117  001496  51D9               	movf	217,w,b	;volatile
  2118  001498  0BF0               	andlw	-16
  2119  00149A  0908               	iorlw	8
  2120  00149C  6FD9               	movwf	217,b	;volatile
  2121  00149E                     
  2122                           ; BSR set to: 14
  2123                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  2124  00149E  8BD9               	bsf	217,5,b	;volatile
  2125                           
  2126                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  2127  0014A0  0E9F               	movlw	159
  2128  0014A2  6FD6               	movwf	214,b	;volatile
  2129  0014A4                     
  2130                           ; BSR set to: 14
  2131                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  2132  0014A4  8A84               	bsf	132,5,c	;volatile
  2133  0014A6                     
  2134                           ; BSR set to: 14
  2135                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  2136  0014A6  8C84               	bsf	132,6,c	;volatile
  2137  0014A8                     
  2138                           ; BSR set to: 14
  2139                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  2140  0014A8  9BA7               	bcf	167,5,b	;volatile
  2141  0014AA                     
  2142                           ; BSR set to: 14
  2143                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  2144  0014AA  9DA7               	bcf	167,6,b	;volatile
  2145                           
  2146                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  2147  0014AC  0E1D               	movlw	29
  2148  0014AE  6F1D               	movwf	29,b	;volatile
  2149                           
  2150                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  2151  0014B0  0E1E               	movlw	30
  2152  0014B2  6F1C               	movwf	28,b	;volatile
  2153                           
  2154                           ;i2c.c: 18:   RD5PPS=0x1C;
  2155  0014B4  0E1C               	movlw	28
  2156  0014B6  6F6F               	movwf	111,b	;volatile
  2157                           
  2158                           ;i2c.c: 19:   RD6PPS=0x1B;
  2159  0014B8  0E1B               	movlw	27
  2160  0014BA  6F70               	movwf	112,b	;volatile
  2161  0014BC                     
  2162                           ; BSR set to: 14
  2163  0014BC  0012               	return		;funcret
  2164  0014BE                     __end_of_I2C_2_Master_Init:
  2165                           	callstack 0
  2166                           
  2167                           	psect	rparam
  2168  0000                     
  2169                           	psect	idloc
  2170                           
  2171                           ;Config register IDLOC0 @ 0x200000
  2172                           ;	unspecified, using default values
  2173  200000                     	org	2097152
  2174  200000  0FFF               	dw	4095
  2175                           
  2176                           ;Config register IDLOC1 @ 0x200002
  2177                           ;	unspecified, using default values
  2178  200002                     	org	2097154
  2179  200002  0FFF               	dw	4095
  2180                           
  2181                           ;Config register IDLOC2 @ 0x200004
  2182                           ;	unspecified, using default values
  2183  200004                     	org	2097156
  2184  200004  0FFF               	dw	4095
  2185                           
  2186                           ;Config register IDLOC3 @ 0x200006
  2187                           ;	unspecified, using default values
  2188  200006                     	org	2097158
  2189  200006  0FFF               	dw	4095
  2190                           
  2191                           ;Config register IDLOC4 @ 0x200008
  2192                           ;	unspecified, using default values
  2193  200008                     	org	2097160
  2194  200008  0FFF               	dw	4095
  2195                           
  2196                           ;Config register IDLOC5 @ 0x20000A
  2197                           ;	unspecified, using default values
  2198  20000A                     	org	2097162
  2199  20000A  0FFF               	dw	4095
  2200                           
  2201                           ;Config register IDLOC6 @ 0x20000C
  2202                           ;	unspecified, using default values
  2203  20000C                     	org	2097164
  2204  20000C  0FFF               	dw	4095
  2205                           
  2206                           ;Config register IDLOC7 @ 0x20000E
  2207                           ;	unspecified, using default values
  2208  20000E                     	org	2097166
  2209  20000E  0FFF               	dw	4095
  2210                           
  2211                           	psect	config
  2212                           
  2213                           ;Config register CONFIG1L @ 0x300000
  2214                           ;	External Oscillator mode Selection bits
  2215                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  2216                           ;	Power-up default value for COSC bits
  2217                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  2218  300000                     	org	3145728
  2219  300000  AA                 	db	170
  2220                           
  2221                           ;Config register CONFIG1H @ 0x300001
  2222                           ;	unspecified, using default values
  2223                           ;	Clock Out Enable bit
  2224                           ;	CLKOUTEN = 0x1, unprogrammed default
  2225                           ;	Clock Switch Enable bit
  2226                           ;	CSWEN = 0x1, unprogrammed default
  2227                           ;	Fail-Safe Clock Monitor Enable bit
  2228                           ;	FCMEN = 0x1, unprogrammed default
  2229  300001                     	org	3145729
  2230  300001  FF                 	db	255
  2231                           
  2232                           ;Config register CONFIG2L @ 0x300002
  2233                           ;	unspecified, using default values
  2234                           ;	Master Clear Enable bit
  2235                           ;	MCLRE = 0x1, unprogrammed default
  2236                           ;	Power-up Timer Enable bit
  2237                           ;	PWRTE = 0x1, unprogrammed default
  2238                           ;	Low-power BOR enable bit
  2239                           ;	LPBOREN = 0x1, unprogrammed default
  2240                           ;	Brown-out Reset Enable bits
  2241                           ;	BOREN = 0x3, unprogrammed default
  2242  300002                     	org	3145730
  2243  300002  FF                 	db	255
  2244                           
  2245                           ;Config register CONFIG2H @ 0x300003
  2246                           ;	unspecified, using default values
  2247                           ;	Brown Out Reset Voltage selection bits
  2248                           ;	BORV = 0x3, unprogrammed default
  2249                           ;	ZCD Disable bit
  2250                           ;	ZCD = 0x1, unprogrammed default
  2251                           ;	PPSLOCK bit One-Way Set Enable bit
  2252                           ;	PPS1WAY = 0x1, unprogrammed default
  2253                           ;	Stack Full/Underflow Reset Enable bit
  2254                           ;	STVREN = 0x1, unprogrammed default
  2255                           ;	Debugger Enable bit
  2256                           ;	DEBUG = 0x1, unprogrammed default
  2257                           ;	Extended Instruction Set Enable bit
  2258                           ;	XINST = 0x1, unprogrammed default
  2259  300003                     	org	3145731
  2260  300003  FF                 	db	255
  2261                           
  2262                           ;Config register CONFIG3L @ 0x300004
  2263                           ;	WDT Period Select bits
  2264                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  2265                           ;	WDT operating mode
  2266                           ;	WDTE = OFF, WDT Disabled
  2267  300004                     	org	3145732
  2268  300004  9F                 	db	159
  2269                           
  2270                           ;Config register CONFIG3H @ 0x300005
  2271                           ;	unspecified, using default values
  2272                           ;	WDT Window Select bits
  2273                           ;	WDTCWS = 0x7, unprogrammed default
  2274                           ;	WDT input clock selector
  2275                           ;	WDTCCS = 0x7, unprogrammed default
  2276  300005                     	org	3145733
  2277  300005  FF                 	db	255
  2278                           
  2279                           ;Config register CONFIG4L @ 0x300006
  2280                           ;	unspecified, using default values
  2281                           ;	Write Protection Block 0
  2282                           ;	WRT0 = 0x1, unprogrammed default
  2283                           ;	Write Protection Block 1
  2284                           ;	WRT1 = 0x1, unprogrammed default
  2285                           ;	Write Protection Block 2
  2286                           ;	WRT2 = 0x1, unprogrammed default
  2287                           ;	Write Protection Block 3
  2288                           ;	WRT3 = 0x1, unprogrammed default
  2289                           ;	Write Protection Block 3
  2290                           ;	WRT4 = 0x1, unprogrammed default
  2291                           ;	Write Protection Block 3
  2292                           ;	WRT5 = 0x1, unprogrammed default
  2293                           ;	Write Protection Block 3
  2294                           ;	WRT6 = 0x1, unprogrammed default
  2295                           ;	Write Protection Block 3
  2296                           ;	WRT7 = 0x1, unprogrammed default
  2297  300006                     	org	3145734
  2298  300006  FF                 	db	255
  2299                           
  2300                           ;Config register CONFIG4H @ 0x300007
  2301                           ;	unspecified, using default values
  2302                           ;	Configuration Register Write Protection bit
  2303                           ;	WRTC = 0x1, unprogrammed default
  2304                           ;	Boot Block Write Protection bit
  2305                           ;	WRTB = 0x1, unprogrammed default
  2306                           ;	Data EEPROM Write Protection bit
  2307                           ;	WRTD = 0x1, unprogrammed default
  2308                           ;	Scanner Enable bit
  2309                           ;	SCANE = 0x1, unprogrammed default
  2310                           ;	Low Voltage Programming Enable bit
  2311                           ;	LVP = 0x1, unprogrammed default
  2312  300007                     	org	3145735
  2313  300007  FF                 	db	255
  2314                           
  2315                           ;Config register CONFIG5L @ 0x300008
  2316                           ;	unspecified, using default values
  2317                           ;	UserNVM Program Memory Code Protection bit
  2318                           ;	CP = 0x1, unprogrammed default
  2319                           ;	DataNVM Memory Code Protection bit
  2320                           ;	CPD = 0x1, unprogrammed default
  2321  300008                     	org	3145736
  2322  300008  FF                 	db	255
  2323                           
  2324                           ;Config register CONFIG5H @ 0x300009
  2325                           ;	unspecified, using default values
  2326  300009                     	org	3145737
  2327  300009  FF                 	db	255
  2328                           
  2329                           ;Config register CONFIG6L @ 0x30000A
  2330                           ;	unspecified, using default values
  2331                           ;	Table Read Protection Block 0
  2332                           ;	EBTR0 = 0x1, unprogrammed default
  2333                           ;	Table Read Protection Block 1
  2334                           ;	EBTR1 = 0x1, unprogrammed default
  2335                           ;	Table Read Protection Block 2
  2336                           ;	EBTR2 = 0x1, unprogrammed default
  2337                           ;	Table Read Protection Block 3
  2338                           ;	EBTR3 = 0x1, unprogrammed default
  2339                           ;	Table Read Protection Block 4
  2340                           ;	EBTR4 = 0x1, unprogrammed default
  2341                           ;	Table Read Protection Block 5
  2342                           ;	EBTR5 = 0x1, unprogrammed default
  2343                           ;	Table Read Protection Block 6
  2344                           ;	EBTR6 = 0x1, unprogrammed default
  2345                           ;	Table Read Protection Block 7
  2346                           ;	EBTR7 = 0x1, unprogrammed default
  2347  30000A                     	org	3145738
  2348  30000A  FF                 	db	255
  2349                           
  2350                           ;Config register CONFIG6H @ 0x30000B
  2351                           ;	unspecified, using default values
  2352                           ;	Boot Block Table Read Protection bit
  2353                           ;	EBTRB = 0x1, unprogrammed default
  2354  30000B                     	org	3145739
  2355  30000B  FF                 	db	255
  2356                           tosu	equ	0xFFF
  2357                           tosh	equ	0xFFE
  2358                           tosl	equ	0xFFD
  2359                           stkptr	equ	0xFFC
  2360                           pclatu	equ	0xFFB
  2361                           pclath	equ	0xFFA
  2362                           pcl	equ	0xFF9
  2363                           tblptru	equ	0xFF8
  2364                           tblptrh	equ	0xFF7
  2365                           tblptrl	equ	0xFF6
  2366                           tablat	equ	0xFF5
  2367                           prodh	equ	0xFF4
  2368                           prodl	equ	0xFF3
  2369                           indf0	equ	0xFEF
  2370                           postinc0	equ	0xFEE
  2371                           postdec0	equ	0xFED
  2372                           preinc0	equ	0xFEC
  2373                           plusw0	equ	0xFEB
  2374                           fsr0h	equ	0xFEA
  2375                           fsr0l	equ	0xFE9
  2376                           wreg	equ	0xFE8
  2377                           indf1	equ	0xFE7
  2378                           postinc1	equ	0xFE6
  2379                           postdec1	equ	0xFE5
  2380                           preinc1	equ	0xFE4
  2381                           plusw1	equ	0xFE3
  2382                           fsr1h	equ	0xFE2
  2383                           fsr1l	equ	0xFE1
  2384                           bsr	equ	0xFE0
  2385                           indf2	equ	0xFDF
  2386                           postinc2	equ	0xFDE
  2387                           postdec2	equ	0xFDD
  2388                           preinc2	equ	0xFDC
  2389                           plusw2	equ	0xFDB
  2390                           fsr2h	equ	0xFDA
  2391                           fsr2l	equ	0xFD9
  2392                           status	equ	0xFD8

Data Sizes:
    Strings     78
    Constant    0
    Data        1
    BSS         84
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     67      92
    BANK0           160      0      60
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    vfprintf$2	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), 

    vfprintf$1	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_13(CODE[5]), STR_12(CODE[6]), STR_1(CODE[15]), 

    vfprintf$0	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    S2081$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S2081$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    test_movement@mR	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(COMRAM[10]), 

    test_movement@mL	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(COMRAM[10]), 

    motorR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhlll[1]), PWM6DCH(BITBIGSFRhhhlll[1]), 

    motorL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhlll[1]), PWM6DCH(BITBIGSFRhhhlll[1]), 

    voltage_display@m.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    voltage_display@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhlll[1]), PWM6DCH(BITBIGSFRhhhlll[1]), 

    voltage_read@m.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    voltage_read@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhlll[1]), PWM6DCH(BITBIGSFRhhhlll[1]), 

    turn180@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    turn180@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhlll[1]), PWM6DCH(BITBIGSFRhhhlll[1]), 

    turn180@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    turn180@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhlll[1]), PWM6DCH(BITBIGSFRhhhlll[1]), 

    fullSpeedAhead@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    fullSpeedAhead@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhlll[1]), PWM6DCH(BITBIGSFRhhhlll[1]), 

    fullSpeedAhead@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    fullSpeedAhead@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhlll[1]), PWM6DCH(BITBIGSFRhhhlll[1]), 

    turnRight@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhlll[1]), PWM6DCH(BITBIGSFRhhhlll[1]), 

    turnRight@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhlll[1]), PWM6DCH(BITBIGSFRhhhlll[1]), 

    turnLeft@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhlll[1]), PWM6DCH(BITBIGSFRhhhlll[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(COMRAM[10]), 

    turnLeft@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhlll[1]), PWM6DCH(BITBIGSFRhhhlll[1]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(COMRAM[10]), 

    stop@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhlll[1]), PWM6DCH(BITBIGSFRhhhlll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(COMRAM[10]), 

    stop@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhlll[1]), PWM6DCH(BITBIGSFRhhhlll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(COMRAM[10]), 

    setMotorPWM@m.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhlll[1]), PWM6DCH(BITBIGSFRhhhlll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(COMRAM[10]), main@motorL(COMRAM[10]), 

    initDCmotors_parameter@motorR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    initDCmotors_parameter@motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhlll[1]), PWM6DCH(BITBIGSFRhhhlll[1]), 

    initDCmotors_parameter@motorR	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorR(COMRAM[10]), 

    S199DC_motor$dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    initDCmotors_parameter@motorL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    S199DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhlll[1]), PWM6DCH(BITBIGSFRhhhlll[1]), 

    initDCmotors_parameter@motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhhhlll[1]), PWM6DCH(BITBIGSFRhhhlll[1]), 

    initDCmotors_parameter@motorL	PTR struct DC_motor size(2) Largest target is 12
		 -> main@motorL(COMRAM[10]), 


Critical Paths under _main in COMRAM

    _main->_test_movement
    _test_movement->_turnLeft
    _turnLeft->_stop
    _stop->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                40    40      0   13330
                                             45 COMRAM    22    22      0
                  _I2C_2_Master_Init
                   _color_click_init
                    _initDCmotorsPWM
             _initDCmotors_parameter
                         _initUSART4
                      _test_movement
 ---------------------------------------------------------------------------------
 (1) _test_movement                                        4     0      4   12388
                                             41 COMRAM     4     0      4
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (2) _turnLeft                                            10     5      5    8053
                                             31 COMRAM    10     5      5
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (3) _stop                                                 6     2      4    4095
                                             25 COMRAM     6     2      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (4) _setMotorPWM                                         11     9      2    3463
                                             14 COMRAM    11     9      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    1875
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4     496
                                              6 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotors_parameter                               4     0      4     416
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      76
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     287
                                              4 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     287
                                              2 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      15
                                              1 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_2_Master_Init
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
   _initDCmotorsPWM
   _initDCmotors_parameter
   _initUSART4
   _test_movement
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _setMotorPWM
       _stop

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      58        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      3C       5       37.5%
BITBIGSFRllhhl      6E      0       0      43        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     43      5C       1       96.8%
BITBIGSFRhhhh       40      0       0      32        0.0%
BITBIGSFRlllllh     32      0       0      48        0.0%
BITBIGSFRlllllh     2A      0       0      52        0.0%
BITBIGSFRllllll     26      0       0      56        0.0%
BITBIGSFRllllhh     20      0       0      46        0.0%
BITBIGSFRhhhlll     18      0       0      35        0.0%
BITBIGSFRhhhlh      17      0       0      33        0.0%
BITBIGSFRllhhhh     14      0       0      40        0.0%
BITBIGSFRlllllh      F      0       0      54        0.0%
BITBIGSFRllllhl      C      0       0      47        0.0%
BITBIGSFRlllllh      9      0       0      53        0.0%
BITBIGSFRllhlll      8      0       0      44        0.0%
BITBIGSFRllhhhl      6      0       0      42        0.0%
BITBIGSFRllllll      6      0       0      55        0.0%
BITBIGSFRlllllh      6      0       0      51        0.0%
BITBIGSFRlllllh      5      0       0      50        0.0%
BITBIGSFRllhhhh      3      0       0      41        0.0%
BITBIGSFRlllllh      3      0       0      49        0.0%
BITBIGSFRhlh         1      0       0      36        0.0%
BITBIGSFRhhhllh      1      0       0      34        0.0%
BITBIGSFRlhh         1      0       0      38        0.0%
BITBIGSFRlllh        1      0       0      45        0.0%
BITBIGSFRlhl         1      0       0      39        0.0%
BITBIGSFRhll         1      0       0      37        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      98      57        0.0%
DATA                 0      0      98       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.35 build 20211206165544 
Symbol Table                                                                                   Tue Mar 08 20:25:32 2022

                            l45 1464                              l48 152A                              u70 14CE  
                            u71 14CA                              u80 14E4                              u81 14E0  
                  ___awdiv@sign 000C             ___wmul@multiplicand 0003                             l162 14E4  
                           l171 155E                             l156 14BC                             l236 13F8  
                           l260 10CA                             l165 1568                             l174 1554  
                           l246 1022                             l254 1346                             l159 14BE  
                           l239 11C6                             l263 10F4                             l329 1548  
                           l464 1492                             l467 150A                             l698 128A  
                           u700 0E6C                             u701 0E68                             u710 0F50  
                           u711 0F4C                             u640 11DA                             u641 11D6  
                           u650 11F4                             u651 11F0                             u660 121A  
                           u724 0FAA                             u740 12A8                             u661 1216  
                           u725 0FA6                             u741 12A4                             u670 1238  
                           u734 1014                             u750 12CC                             u671 1234  
                           u735 1010                             u751 12C8                             u680 1254  
                           u760 1316                             u681 1250                             u761 1312  
                           u690 127A                             u770 132E                             u691 1276  
                           u771 132A                             u780 109E                             u781 109A  
                           u790 10E0                             u791 10DC                             wreg 000FE8  
                          l1301 14A4                            l1221 1550                            l1303 14A6  
                          l1215 1560                            l1223 1556                            l1305 14A8  
                          l1217 1564                            l1225 155A                            l1307 14AA  
                          l1219 154C                            l2051 134C                            l2061 1376  
                          l2053 1350                            l2071 1380                            l2063 1378  
                          l2055 135C                            l2081 1384                            l2073 1382  
                          l2065 137A                            l2057 1360                            l2049 1348  
                          l2083 1384                            l2075 1384                            l2067 137C  
                          l2059 1374                            l1197 14BE                            l2085 1384  
                          l2077 1384                            l2069 137E                            l1199 14CE  
                          l1391 1538                            l2087 1384                            l2079 1384  
                          l1297 1494                            l1393 1542                            l1801 0E6C  
                          l2089 139C                            l1299 149E                            l1395 1544  
                          l1387 152C                            l1811 0FBA                            l1803 0ECE  
                          l1397 1546                            l1389 1536                            l1805 0F14  
                          l1821 12CC                            l1813 128C                            l1751 1502  
                          l1807 0F34                            l1831 1316                            l1823 12D8  
                          l1815 1290                            l1761 11E2                            l1809 0F50  
                          l1833 132E                            l1825 12E4                            l1817 12A8  
                          l1841 1060                            l1835 150E                            l1771 1208  
                          l1763 11E6                            l1755 11C8                            l1827 12F0  
                          l1819 12B4                            l1851 10AA                            l1843 106C  
                          l1861 1436                            l1781 123E                            l1773 121A  
                          l1765 11F4                            l1757 11CC                            l1749 14E6  
                          l1829 12FE                            l1853 10B6                            l1845 1078  
                          l1837 1024                            l1863 1440                            l1871 13C8  
                          l1783 1254                            l1775 1222                            l1791 126A  
                          l1767 11FC                            l1759 11DA                            l1855 10C6  
                          l1839 1048                            l1847 1086                            l1865 1450  
                          l1873 13E0                            l1881 1102                            l1793 127A  
                          l1785 125C                            l1777 122A                            l1769 1200  
                          l1857 10E0                            l1849 109E                            l1867 145A  
                          l1859 1432                            l1875 13F4                            l1891 115E  
                          l1883 1112                            l1795 1282                            l1787 125E  
                          l1779 1238                            l1877 13F6                            l1869 13B8  
                          l1885 1126                            l1789 1264                            l1893 1466  
                          l1887 113A                            l1879 10F6                            l1799 0E50  
                          l1889 114A                            STR_1 0E01                            STR_2 0E3B  
                          STR_3 0E4B                            STR_4 0E35                            STR_5 0E41  
                          STR_6 0E22                            STR_7 0E46                            STR_8 0E1B  
                          STR_9 0E10                            u1027 138E                            u1037 107E  
                          u1047 10BC                            u1057 12F6                            u1067 1338  
                          u1077 1446                    _BAUD4CONbits 000EE9                            _LATE 000F7D  
                          _LATG 000F7F                            _T2PR 000FBC                            _main 1348  
                          fsr1h 000FE2                            fsr2h 000FDA                            indf1 000FE7  
                          indf2 000FDF                            fsr1l 000FE1                            fsr2l 000FD9  
                          _stop 128C                            prodh 000FF4                            prodl 000FF3  
                          start 0000                    ___param_bank 000000                           ?_main 0001  
                         _ADPCH 000F5F                 __end_of___awdiv 128C                           STR_10 0E29  
                         STR_11 0E2F                           ?_stop 001A                 ___awdiv@divisor 0009  
               ___awdiv@counter 000B      __end_of_I2C_2_Master_Start 156A      __end_of_I2C_2_Master_Write 1556  
                         _color 005C                           tablat 000FF5                           status 000FD8  
               ??_test_movement 002E                 __initialization 13FA                    __end_of_main 13B8  
                  __end_of_stop 1348                          ??_main 002E                          ??_stop 001E  
                 __activetblptr 000001          _initDCmotors_parameter 10F6                    ?_setMotorPWM 000F  
                        _ADRESH 000F64                ___awdiv@dividend 0007                          _RC0PPS 000E62  
                        _RC4REG 000EE3                          _RE2PPS 000E74                          _RD5PPS 000E6F  
                        _RC7PPS 000E69                          _RD6PPS 000E70              turnLeft@angle_left 0024  
      __end_of_color_click_init 1466                          _RX4PPS 000E15                          _TX4REG 000EE4  
                        ___wmul 14E6                       ??___awdiv 000B                          clear_0 1412  
                        clear_1 141E                ___awdiv@quotient 000D                          isa$std 000001  
                  __pdataCOMRAM 005C                    __mediumconst 0000                          tblptrh 000FF7  
                        tblptrl 000FF6                          tblptru 000FF8                          stop@mL 001A  
                        stop@mR 001C               ??_initDCmotorsPWM 0003                __end_of_turnLeft 10F6  
                    __accesstop 0060         __end_of__initialization 1424    initDCmotors_parameter@motorL 0001  
  initDCmotors_parameter@motorR 0003                   ___rparam_used 000001                  __pcstackCOMRAM 0001  
                    __pbssBANK0 0060               _color_writetoaddr 150C                    _T2CLKCONbits 000FBF  
            ?_color_writetoaddr 0003                         ?___wmul 0001             ??_color_writetoaddr 0004  
                       _SP4BRGH 000EE6                         _SP4BRGL 000EE5                         _PWM6DCH 000FA3  
                       _PWM7DCH 000FA0                         _SSP2ADD 000ED6                         _SSP2BUF 000ED5  
        color_writetoaddr@value 0003       __end_of_color_writetoaddr 152C                       _ADREFbits 000F58  
            _I2C_2_Master_Start 1560                      _initUSART4 152C              _I2C_2_Master_Write 154A  
                       __Hparam 0000                         __Lparam 0000                         ___awdiv 11C8  
           ?_I2C_2_Master_Start 0001             ?_I2C_2_Master_Write 0001                    __psmallconst 0E00  
                       __pcinit 13FA                         __ramtop 0E00                       ?_turnLeft 0020  
                       __ptext0 1348                         __ptext1 1466                         __ptext2 1024  
                       __ptext3 128C                         __ptext4 0E50                         __ptext5 14E6  
                       __ptext6 11C8                         __ptext7 152C                         __ptext8 10F6  
                       __ptext9 13B8         ?_initDCmotors_parameter 0001                       _T2CONbits 000FBD  
                     _T2HLTbits 000FBE                   _RxBufWriteCnt 005B            ??_I2C_2_Master_Start 0002  
          ??_I2C_2_Master_Write 0002            end_of_initialization 1424              setMotorPWM@PWMduty 0018  
             ?_color_click_init 0001              ??_color_click_init 0005           __end_of_test_movement 1494  
                       postdec1 000FE5                         postdec2 000FDD                         postinc0 000FEE  
                       postinc1 000FE6                         postinc2 000FDE                 _initDCmotorsPWM 13B8  
                    ??_turnLeft 0025  __end_of_initDCmotors_parameter 11C8                       _TRISAbits 000F81  
                     _TRISCbits 000F83                       _TRISDbits 000F84                       _TRISEbits 000F85  
                     _TRISFbits 000F86                       _TRISGbits 000F87        color_writetoaddr@address 0004  
                  _EUSART4RXbuf 0044                    _EUSART4TXbuf 0060                     ?_initUSART4 0001  
                    main@motorL 0030                      main@motorR 003A                  __end_of___wmul 150C  
                 __pidataCOMRAM 156A                 test_movement@mL 002A                 test_movement@mR 002C  
           start_initialization 13FA                   _TxBufWriteCnt 0059         __end_of_initDCmotorsPWM 13FA  
                      ??___wmul 0005                     __pbssCOMRAM 0044                        ?___awdiv 0007  
                   __smallconst 0E00               _I2C_2_Master_Idle 14BE               _I2C_2_Master_Init 1494  
             _I2C_2_Master_Stop 1556                    _RxBufReadCnt 005A              ?_I2C_2_Master_Idle 0001  
            ?_I2C_2_Master_Init 0001                   ??_setMotorPWM 0011              ?_I2C_2_Master_Stop 0001  
      initDCmotorsPWM@PWMperiod 0001             ??_I2C_2_Master_Idle 0001             ??_I2C_2_Master_Init 0001  
                ___wmul@product 0005                        _LATAbits 000F79             ??_I2C_2_Master_Stop 0002  
                      _LATCbits 000F7B                        _LATEbits 000F7D                        _LATFbits 000F7E  
                      _LATGbits 000F7F                        _PIE4bits 000E2D                        _PIR4bits 000E37  
              ?_initDCmotorsPWM 0001                        _SSP2CON2 000EDA                        _SSP2STAT 000ED8  
                    _ADCON0bits 000F60       __end_of_I2C_2_Master_Idle 14E6       __end_of_I2C_2_Master_Init 14BE  
             ___wmul@multiplier 0001       __end_of_I2C_2_Master_Stop 1560                    setMotorPWM@m 000F  
   I2C_2_Master_Write@data_byte 0002                    _TxBufReadCnt 0058             __end_of_setMotorPWM 1024  
                  ??_initUSART4 0001                        __Hrparam 0000                        __Lrparam 0000  
                  __Lsmallconst 0E00                      _ANSELDbits 000EA7                      _ANSELFbits 000EB4  
            __end_of_initUSART4 154A                        __ptext10 1432                        __ptext11 150C  
                      __ptext12 154A                        __ptext13 1556                        __ptext14 1560  
                      __ptext15 14BE                        __ptext16 1494                    _SSP2CON1bits 000ED9  
                  _SSP2CON2bits 000EDA                   turnLeft@delay 0026                      turnLeft@mL 0020  
                    turnLeft@mR 0022                        isa$xinst 000000                      _RC4STAbits 000EE7  
                      _turnLeft 1024                     _setMotorPWM 0E50                     _PWM6CONbits 000FA4  
                   _PWM7CONbits 000FA1                       turnLeft@i 0028                   _test_movement 1466  
      ??_initDCmotors_parameter 0005                _color_click_init 1432                      _SSP2DATPPS 000E1D  
                    _SSP2CLKPPS 000E1C                      _TX4STAbits 000EE8                  ?_test_movement 002A  
